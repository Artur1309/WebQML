{"version":3,"sources":["qmlweb.js","QmlWeb.js","QObject.js","JSItemModel.js","QColor.js","QFont.js","QMatrix4x4.js","QPointF.js","QQuaternion.js","QRectF.js","QSizeF.js","QVector2D.js","QVector3D.js","QVector4D.js","Signal.js","Qt.js","QMLBinding.js","QMLBoolean.js","QMLEngine.js","QMLInteger.js","QMLList.js","QMLNumber.js","QMLOperationState.js","QMLProperty.js","QMLString.js","QMLUrl.js","QMLVariant.js","AutoLoader.js","CustomElements.js","easing.js","getset.js","helpers.js","i18n.js","import.js","jsparser.js","keyboard.js","modules.js","properties.js","qmlstructure.js","qrc.js","screenshot.js","QtQml/QtObject.js","QtBluetooth/BluetoothDiscoveryModel.js","QtMultimedia/Audio.js","QtMultimedia/Camera.js","QtMultimedia/MediaPlayer.js","QtNfc/NearField.js","QtQml/Binding.js","QtQml/Component.js","QtQml/Connections.js","QtQml/Timer.js","QtQuick.Layouts/Layout.js","QtQuick.Particles/Direction.js","QtQuick.Particles/AngleDirection.js","QtQuick.Window/Screen.js","QtQuick/Animation.js","QtQuick/Animator.js","QtQuick/Behavior.js","QtQuick/FontLoader.js","QtQuick/GradientStop.js","QtQuick/Item.js","QmlWeb.Dom/DomElement.js","QmlWeb.Dom/DomDiv.js","QmlWeb.Dom/DomParagraph.js","QmlWeb/RestModel.js","Qt.labs.settings/Settings.js","QtGraphicalEffects/DropShadow.js","QtGraphicalEffects/FastBlur.js","QtGraphicalEffects/RectangularGlow.js","QtMobility/GeoLocation.js","QtMultimedia/Video.js","QtMultimedia/VideoOutput.js","QtQuick.Controls.2/Control.js","QtQuick.Controls.2/AbstractButton.js","QtQuick.Controls.2/Container.js","QtQuick.Controls.2/Page.js","QtQuick.Controls.2/SwipeView.js","QtQuick.Controls.2/TabBar.js","QtQuick.Controls.2/TabButton.js","QtQuick.Controls/Button.js","QtQuick.Controls/CheckBox.js","QtQuick.Controls/ComboBox.js","QtQuick.Controls/ScrollView.js","QtQuick.Controls/TextField.js","QtQuick.Layouts/ColumnLayout.js","QtQuick.Layouts/GridLayout.js","QtQuick.Layouts/RowLayout.js","QtQuick.Layouts/StackLayout.js","QtQuick.Particles/Emitter.js","QtQuick.Particles/ParticlePainter.js","QtQuick.Particles/CustomParticle.js","QtQuick.Particles/ParticleSystem.js","QtQuick.Window/Window.js","QtQuick.Controls.2/ApplicationWindow.js","QtQuick.Controls/ApplicationWindow.js","QtQuick/BorderImage.js","QtQuick/Canvas.js","QtQuick/DoubleValidator.js","QtQuick/Flickable.js","QtQuick/FocusScope.js","QtQuick/Gradient.js","QtQuick/Image.js","QtQuick/AnimatedImage.js","QtQuick/IntValidator.js","QtQuick/ListElement.js","QtQml.Models/ListElement.js","QtQuick/ListModel.js","QtQml.Models/ListModel.js","QtQuick/Loader.js","QtQuick/MouseArea.js","QtQuick/OpacityAnimator.js","QtQuick/ParallelAnimation.js","QtQuick/PauseAnimation.js","QtQuick/Positioner.js","QtQuick/Column.js","QtQuick/Flow.js","QtQuick/Grid.js","QtQuick/PropertyAnimation.js","QtQuick/NumberAnimation.js","QtQuick/PropertyChanges.js","QtQuick/Rectangle.js","QtQuick/RegExpValidator.js","QtQuick/Repeater.js","QtQuick/GridView.js","QtQuick/ListView.js","QtQuick/Rotation.js","QtQuick/RotationAnimator.js","QtQuick/Row.js","QtQuick/Scale.js","QtQuick/ScaleAnimator.js","QtQuick/SequentialAnimation.js","QtQuick/ShaderEffect.js","QtQuick/ShaderEffectSource.js","QtQuick/State.js","QtQuick/SystemPalette.js","QtQuick/Text.js","QtQuick.Controls.2/Label.js","QtQuick/TextEdit.js","QtQuick.Controls/TextArea.js","QtQuick/TextInput.js","QtQuick/Transition.js","QtQuick/Translate.js","QtQuick/UniformAnimator.js","QtQuick/XAnimator.js","QtQuick/YAnimator.js","QtTest/SignalSpy.js","QtTest/TestCase.js","QtWebSockets/WebSocket.js","QtWebView/WebView.js","QtWebEngine/WebEngineView.js","QtWebKit/WebView.js"],"names":["global","parent","item","prop","args","QmlWeb","argb","rgb","QColor","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","grey","green","greenyellow","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","bold","capitalization","family","italic","letterSpacing","pixelSize","pointSize","strikeout","underline","weight","wordSpacing","style","QFont","MixedCase","AllUppercase","AllLowercase","SmallCaps","Capitalize","Thin","ExtraLight","Light","Normal","Medium","DemiBold","Bold","ExtraBold","Black","data","QMatrix4x4","x","y","QPointF","scalar","z","QQuaternion","width","height","QRectF","QSizeF","QVector2D","QVector3D","w","QVector4D","Signal","type","thisObj","i","desc","console","openUrlExternally","page","createComponent","file","tree","object","context","component","engine","createQmlObject","resolvedUrl","point","rect","size","vector2d","vector3d","vector4d","quaternion","matrix4x4","rgba","hsla","hsva","colorEqual","darker","lighter","include","platform","os","LeftButton","RightButton","MiddleButton","NoModifier","ShiftModifier","ControlModifier","AltModifier","MetaModifier","KeypadModifier","LeftToRight","RightToLeft","Vertical","Horizontal","Key_Escape","Key_Tab","Key_Backtab","Key_Backspace","Key_Return","Key_Enter","Key_Insert","Key_Delete","Key_Pause","Key_Print","Key_SysReq","Key_Clear","Key_Home","Key_End","Key_Left","Key_Up","Key_Right","Key_Down","Key_PageUp","Key_PageDown","Key_Shift","Key_Control","Key_Meta","Key_Alt","Key_AltGr","Key_CapsLock","Key_NumLock","Key_ScrollLock","Key_F1","Key_F7","Key_F12","Key_F17","Key_F22","Key_F25","Key_F31","Key_Super_L","Key_Super_R","Key_Menu","Key_Hyper_L","Key_Hyper_R","Key_Help","Key_Direction_L","Key_Direction_R","Key_Space","Key_Any","Key_Exclam","Key_QuoteDbl","Key_NumberSign","Key_Dollar","Key_Percent","Key_Ampersant","Key_Apostrophe","Key_ParenLeft","Key_ParenRight","Key_Asterisk","Key_Plus","Key_Comma","Key_Minus","Key_Period","Key_Slash","Key_0","Key_5","Key_Colon","Key_Semicolon","Key_Less","Key_Equal","Key_Greater","Key_Question","Key_At","Key_A","Key_H","Key_O","Key_V","Key_BracketLeft","Key_Backslash","Key_BracketRight","Key_AsciiCircum","Key_Underscore","Key_QuoteLeft","Key_BraceLeft","Key_Bar","Key_BraceRight","Key_AsciiTilde","Key_Back","Key_Forward","Key_Stop","Key_VolumeDown","Key_VolumeUp","Key_VolumeMute","Key_multiply","Key_add","Key_substract","Key_divide","Key_News","Key_OfficeHome","Key_Option","Key_Paste","Key_Phone","Key_Calendar","Key_Reply","Key_Reload","Key_RotateWindows","Key_RotationPB","Key_RotationKB","Key_Save","Key_Send","Key_Spell","Key_SplitScreen","Key_Support","Key_TaskPane","Key_Terminal","Key_Tools","Key_Travel","Key_Video","Key_Word","Key_Xfer","Key_ZoomIn","Key_ZoomOut","Key_Away","Key_Messenger","Key_WebCam","Key_MailForward","Key_Pictures","Key_Music","Key_Battery","Key_Bluetooth","Key_WLAN","Key_UWB","Key_AudioForward","Key_AudioRepeat","Key_AudioRandomPlay","Key_Subtitle","Key_AudioCycleTrack","Key_Time","Key_Hibernate","Key_View","Key_TopMenu","Key_PowerDown","Key_Suspend","Key_ContrastAdjust","Key_MediaLast","Key_unknown","Key_Call","Key_Camera","Key_CameraFocus","Key_Context1","Key_Context2","Key_Context3","Key_Context4","Key_Flip","Key_Hangup","Key_No","Key_Select","Key_Yes","Key_ToggleCallHangup","Key_VoiceDial","Key_LastNumberRedial","Key_Execute","Key_Printer","Key_Play","Key_Sleep","Key_Zoom","Key_Cancel","AlignLeft","AlignRight","AlignHCenter","AlignJustify","AlignTop","AlignBottom","AlignVCenter","AlignCenter","AlignBaseline","AlignAbsolute","AlignLeading","AlignTrailing","AlignHorizontal_Mask","AlignVertical_Mask","PrimaryOrientation","PortraitOrientation","LandscapeOrientation","InvertedPortraitOrientation","InvertedLandscapeOrientation","ArrowCursor","UpArrowCursor","CrossCursor","WaitCursor","IBeamCursor","SizeVerCursor","SizeHorCursor","SizeBDiagCursor","SizeFDiagCursor","SizeAllCursor","BlankCursor","SplitVCursor","SplitHCursor","PointingHandCursor","ForbiddenCursor","WhatsThisCursor","BusyCursor","OpenHandCursor","ClosedHandCursor","DragCopyCursor","DragMoveCursor","DragLinkCursor","LastCursor","BitmapCursor","CustomCursor","ScrollBarAsNeeded","ScrollBarAlwaysOff","ScrollBarAlwaysOn","src","deps","QMLBoolean","window","clearInterval","out","leadingSlash","basePath","paths","dependantProperties","value","name","content","document","focusedElement","e","jsData","property","obj","scheme","authority","path","op","handler","QMLInteger","list","QMLList","QMLNumber","Idle","Init","Running","Object","QMLProperty","target","from","to","val","int","real","double","string","bool","enum","url","QMLString","QMLUrl","QMLVariant","registerElement","map","attributes","qml","get","set","Linear","InQuad","InCubic","InQuart","InQuint","InSine","InExpo","InCirc","InElastic","InBack","InBounce","configurable","enumerable","merged","text","xhr","qmldir","res","parts","externals","contextSetter","accepted","count","isAutoRepeat","key","modifiers","Main","color","font","variant","var","modules","spec","enums","signals","properties","defaultProperty","registerGlobalQmlType","versions","constructor","constructors","imports","self","perImportContextConstructors","meta","filePath","setter","skip","createProperty","componentScope","targetProp","loopWatchdog","applyProperties","params","signal","convertToEngine","sub","curr","toplevel","qmlelem","qmlprop","qmlobjdef","qmlobj","qmlmethod","qmlpropdef","qmlaliasdef","qmlsignaldef","qmldefaultprop","num","array","a","isList","hasBinding","loadParser","top","left","offset","image","canvas","ctx","types","QtBluetooth_BluetoothDiscoveryModel","BluetoothDiscoveryModel","FullServiceDiscovery","NoError","InvalidBluetoothAdapterError","discoveryMode","error","remoteAddress","running","uuidFilter","deviceDiscovered","serviceDiscovered","QtMultimedia_Audio","Audio","Available","AccessDenied","StoppedState","NoMedia","EndOfMedia","audioRole","autoLoad","autoPlay","availability","duration","errorString","hasAudio","hasVideo","loops","mediaObject","muted","playbackRate","playbackState","playlinst","position","seekable","source","status","volume","paused","playing","stopped","QtMultimedia_Camera","Camera","UnloadedState","cameraState","cameraStatus","captureMode","deviceId","digitalZoom","displayName","errorCode","lockStatus","maximumDigitalZoom","maximumOpticalZoom","opticalZoom","orientation","QtMultimedia_MediaPlayer","MediaPlayer","bufferProgress","QtNfc_NearField","filter","messageRecords","orderMatch","polling","tagFound","tagRemoved","QtQml_Binding","when","moduleImports","loadImport","$context","newContext","isComponentRoot","QtQml_Component","old_target","c","QtQml_Connections","ignoreUnknownSignals","QtQml_Timer","interval","repeat","triggeredOnStart","triggered","alignment","bottomMargin","column","columnSpan","fillHeight","fillWidth","leftMargin","margins","maximumHeight","maximumWidth","minimumHeight","minimumWidth","preferredHeight","preferredWidth","rightMargin","row","rowSpan","topMargin","QtQuick_Layouts_Layout","QtQuick_Particles_Direction","QtQuick_Particles_AngleDirection","angle","angleVariation","magnitude","magnitudeVariation","orientationUpdateMask","primaryOrientation","pixelDensity","devicePixelRatio","desktopAvailableHeight","desktopAvailableWidth","screen","QtQuick_Window_Screen","QtQuick_Animation","Animation","Easing","alwaysRunToEnd","finished","started","amplitude","overshoot","period","bezierCurve","QtQuick_Animator","newVal","QtQuick_Behavior","animation","enabled","promise","fontsLoaded","fontLoaded","FontLoader","fontLoader","setTimeout","fontFace","QtQuick_FontLoader","QtQuick_GradientStop","right","bottom","horizontalCenter","verticalCenter","fill","centerIn","child","func","oldParent","newParent","newState","action","transitionProps","curRating","rating","transition","origValue","explicit","actions","element","transform","props","u","leftProp","topProp","maxWidth","maxHeight","minX","minY","QtQuick_Item","$opacity","antialiasing","state","states","transitions","children","resources","implicitWidth","implicitHeight","rotation","scale","opacity","visible","clip","focus","QmlWeb_Dom_DomElement","attrs","html","tagName","method","mimeType","success","body","options","responseObject","QmlWeb_RestModel","isLoading","queryMimeType","initialValue","fetched","saved","emitter","signalName","localStorage","Qt_labs_settings_Settings","category","QtGraphicalEffects_DropShadow","cached","horizontalOffset","radius","samples","spread","transparentBorder","verticalOffset","transformType","operation","parameters","QtGraphicalEffects_FastBlur","QtGraphicalEffects_RectangularGlow","cornerRadius","glowRadius","navigator","QtMobility_GeoLocation","accuracy","altitude","altitudeAccuracy","heading","latitude","longitude","speed","timestamp","label","ogg","ogv","ogm","mp4","webm","QtMultimedia_Video","VideoOutput","fillMode","QtMultimedia_VideoOutput","autoOrientation","contentRect","filters","sourceRect","QtQuick_Controls_2_Control","availableHeight","availableWidth","background","bottomPadding","contentItem","focusPolicy","focusReason","hoverEnabled","hovered","leftPadding","locale","mirrored","padding","palette","rightPadding","spacing","topPadding","visualFocus","wheelEnabled","QtQuick_Controls_2_AbstractButton","autoExclusive","checkable","checked","display","down","indicator","pressed","QtQuick_Controls_2_Container","contentChildren","contentData","contentModel","currentIndex","currentItem","QtQuick_Controls_2_Page","contentHeight","contentWidth","footer","header","title","pos","QtQuick_Controls_2_SwipeView","horizontal","interactive","vertical","QtQuick_Controls_2_TabBar","QtQuick_Controls_2_TabButton","button","QtQuick_Controls_Button","clicked","checkbox","QtQuick_Controls_CheckBox","QtQuick_Controls_ComboBox","currentText","menu","model","activated","newItem","QtQuick_Controls_ScrollView","flickableItem","viewport","frameVisible","highlightOnFocus","verticalScrollBarPolicy","horizontalScrollBarPolicy","input","QtQuick_Controls_TextField","TextInput","maximumLength","readOnly","validator","echoMode","QtQuick_Layouts_ColumnLayout","layoutDirection","QtQuick_Layouts_GridLayout","columnSpacing","columns","flow","rowSpacing","rows","QtQuick_Layouts_RowLayout","QtQuick_Layouts_StackLayout","QtQuick_Particles_Emitter","acceleration","emitRate","endSize","group","lifeSpan","lifeSpanVariation","maximumEmitted","shape","sizeVariation","startTime","system","velocity","velocityFromMovement","emitParticles","QtQuick_Particles_ParticlePainter","groups","QtQuick_Particles_CustomParticle","fragmentShader","vertexShader","QtQuick_Particles_ParticleSystem","empty","particleStates","QtQuick_Window_Window","active","activeFocusItem","contentOrientation","flags","modality","visibility","closing","QtQuick_Controls_2_ApplicationWindow","activeFocusControl","overlay","QtQuick_Controls_ApplicationWindow","menuBar","statusBar","toolBar","bg","QtQuick_BorderImage","BorderImage","Stretch","Null","smooth","horizontalTileMode","verticalTileMode","progress","QtQuick_Canvas","available","canvasSize","canvasWindow","contextType","renderStrategy","renderTarget","tileSize","imageLoaded","paint","painted","QtQuick_DoubleValidator","DoubleValidator","decimals","notation","p","QtQuick_Flickable","Flickable","AutoFlickDirection","AutoFlickIfNeeded","HorizontalFlick","VerticalFlick","HorizontalAndVerticalFlick","contentX","contentY","flickableDirection","g_temp","g_str","QtQuick_Gradient","stops","QtQuick_Image","Image","Tile","asynchronous","cache","mirror","acceptable","QtQuick_IntValidator","QtQml_Models_ListElement","dict","roleNames","QtQuick_ListModel","$items","QtQml_Models_ListModel","qmlComponent","QtQuick_Loader","sourceComponent","loaded","areaList","allEvent","xScale","yScale","wheel","stop","tempWheel","mouse","tempMouse","QtQuick_MouseArea","acceptedButtons","mouseX","mouseY","containsMouse","containsPress","pressedButtons","cursorShape","propagateComposedEvents","canceled","doubleClicked","entered","exited","positionChanged","pressAndHold","released","QtQuick_OpacityAnimator","QtQuick_ParallelAnimation","animations","QtQuick_PauseAnimation","QtQuick_Positioner","curPos","curHPos","curVPos","rowSize","QtQuick_Flow","Flow","gridWidth","gridHeight","cols","colWidth","rowHeight","QtQuick_Grid","Grid","QtQuick_PropertyAnimation","targets","QtQuick_PropertyChanges","restoreEntryValues","QtQuick_Rectangle","gradient","QtQuick_RegExpValidator","regExp","modelData","removed","QtQuick_Repeater","delegate","_childrenInserted","el","$item","QtQuick_GridView","GridView","NoSnap","SnapToRow","SnapOneRow","Beginning","Center","End","Visible","Contain","SnapPosition","FlowLeftToRight","FlowTopToBottom","highlightFollowsCurrentItem","snapMode","cellWidth","cellHeight","completed","QtQuick_ListView","ListView","SnapToItem","SnapOneItem","QtQuick_Rotation","QtQuick_RotationAnimator","QtQuick_Row","QtQuick_Scale","QtQuick_ScaleAnimator","anim","QtQuick_SequentialAnimation","QtQuick_ShaderEffect","ShaderEffect","NoCulling","Compiled","blending","cullMode","log","mesh","supportsAtlasTextures","QtQuick_ShaderEffectSource","ShaderEffectSource","Alpha","NoMirroring","ClampToEdge","format","hideSource","live","mipmap","recursive","sourceItem","textureMirroring","textureSize","wrapMode","QtQuick_State","changes","extend","QtQuick_SystemPalette","SystemPalette","Active","alternateBase","base","buttonText","dark","highlight","highlightedText","light","mid","midlight","shadow","windowText","colorGroup","systemPalettes","highlightText","inactive","disabled","fc","textAlign","verticalAlign","QtQuick_Text","Text","NoWrap","WrapAtWordBoundaryOrAnywhere","AutoText","textFormat","lineHeight","horizontalAlignment","verticalAlignment","styleColor","QtQuick_Controls_2_Label","textarea","QtQuick_TextEdit","activeFocusOnPress","baseUrl","canPaste","canRedo","canUndo","cursorDelegate","cursorPosition","cursorRectangle","cursorVisible","effectiveHorizontalAlignment","hoveredLink","inputMethodComposing","inputMethodHints","length","lineCount","mouseSelectionMode","persistentSelection","renderType","selectByKeyboard","selectByMouse","selectedText","selectedTextColor","selectionColor","selectionEnd","selectionStart","textDocument","textMargin","linkActivated","linkHovered","QtQuick_TextInput","Password","NoEcho","PasswordEchoOnEdit","WordWrap","WrapAnywhere","Wrap","$actions","QtQuick_Transition","reversible","QtQuick_Translate","QtQuick_UniformAnimator","uniform","QtQuick_XAnimator","QtQuick_YAnimator","QtTest_SignalSpy","signalArguments","valid","total","errors","stats","pass","fail","assert","info","time","timeEnd","trace","warn","tests","err","QtTest_TestCase","optional","windowShown","QtWebSockets_WebSocket","WebSocket","textMessageReceived","iframe","QtWebView_WebView","canGoBack","canGoForward","loadProgress","loading","QtWebEngine_WebEngineView","QtWebKit_WebView","WebView","NoErrorDomain","HttpErrorDomain","LoadStartedStatus","AcceptRequest","LinkClickedNavigation","BackForwardNavigation","FormResubmittedNavigation","icon","navigationRequested"],"mappings":";AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjBA;ADmBA;ACjBAA;ADmBA;AErBA;AFuBA;AACA;AErBA;AAAA;AFwBA;AEvBA;AACA;AACAC;AACA;AFyBA;AEvBA;AACA;AACA;AACA;AFyBA;AEvBA;AACA;AFyBA;AACA;AACA;AACA;AEzBA;AACA;AACA;AF2BA;AEzBA;AACA;AACA;AACA;AACAC;AACA;AACA;AACAA;AACA;AACA;AF2BA;AEzBA;AACA;AACA;AACAC;AACA;AACA;AF2BA;AEzBA;AACA;AACA;AACA;AF2BA;AEzBA;AACA;AACA;AACA;AF2BA;AEzBA;AACA;AACA;AACA;AACA;AACA;AF2BA;AEzBA;AACA;AF2BA;AACA;AACA;AACA;AE5BA;AACA;AF8BA;AACA;AACA;AE9BA;AAAAC;AAAA;AFkCA;AEjCA;AACA;AFmCA;AACA;AACA;AACA;AACA;AEpCAC;AFsCA;AACA;AG1GA;AAAA;AH6GA;AG5GA;AH8GA;AG5GA;AACA;AAIA;AAIA;AAKA;AAIA;AACA;AHiGA;AACA;AACA;AACA;AGjGA;AACA;AHmGA;AACA;AACA;AACA;AACA;AGpGAA;AHsGA;AACA;AIpIA;AAAA;AJuIA;AItIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AJ0IA;AACA;AACA;AACA;AI3IA;AACA;AAAA;AAAA;AAGA;AACAC;AACA;AACA;AACA;AACA;AJ6IA;AACA;AACA;AI7IA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AJ+IA;AACA;AACA;AI/IA;AACA;AJiJA;AItIA;AACA;AACA;AACA;AJwIA;AACA;AACA;AItJA;AACA;AJwJA;AI3IA;AACA;AACA;AACA;AJ6IA;AACA;AACA;AI7JA;AACA;AJ+JA;AIhJA;AACA;AACA;AACA;AJkJA;AACA;AACA;AIpKA;AACA;AJsKA;AIrJA;AACA;AACA;AACA;AJuJA;AACA;AACA;AIvJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AJyJA;AIjIA;AACA;AACA;AACA;AACA;AACA;AACA;AJmIA;AACA;AACA;AIjKA;AACA;AACA;AACA;AJmKA;AIxIA;AACA;AACA;AACA;AACA;AACA;AACA;AJ0IA;AACA;AACA;AI3KA;AACA;AJ6KA;AI7IA;AACA;AACA;AACA;AACA;AACA;AACA;AJ+IA;AACA;AACA;AIrLA;AACA;AJuLA;AIlJA;AACA;AACA;AACA;AACA;AACA;AACA;AJoJA;AACA;AACA;AI/LA;AACA;AACA;AACA;AACA;AJiMA;AI1JA;AACA;AACA;AACA;AACA;AACA;AACA;AJ4JA;AACA;AACA;AIzMA;AACA;AACA;AACA;AJ2MA;AIjKA;AACA;AACA;AACA;AACA;AACA;AACA;AJmKA;AACA;AACA;AI9JA;AACA;AACA;AACA;AJgKA;AACA;AACA;AIhKA;AACA;AACA;AACA;AJkKA;AACA;AACA;AIlKA;AACA;AACA;AACA;AACA;AACAC;AACA;AACA;AACAA;AACA;AACA;AACAA;AACA;AACA;AACAA;AACA;AACA;AACAA;AACA;AACA;AACAA;AACA;AAlBA;AAoBA;AAAA;AAAA;AACA;AJsKA;AACA;AACA;AItKA;AJwKA;AIvKA;AAGA;AACA;AACA;AACA;AACA;AJuKA;AACA;AACA;AIxKA;AJ0KA;AIzKA;AAGA;AACA;AACA;AACA;AACA;AJyKA;AACA;AACA;AIzKA;AACA;AACA;AACA;AJ2KA;AACA;AACA;AACA;AACA;AIzaAC;AA2LA;AAAA;AAAA;AJmPA;AI9aAA;AA4LA;AAAA;AAAA;AJuPA;AInbAA;AA6LA;AAAA;AAAA;AJ2PA;AIxbnJA;AA5PAnJ;AAAAA;AJglBA;AI3LAH;AJ6LA;AACA;AACA;AACA;AKplBA;AAAA;ALulBA;AKvlBA;ALylBA;AKvlBA;ALylBA;AKvlBA;ALylBA;AKvlBAA;AACAuJ;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AAXA;ALqmBA;AKvlBA;ALylBA;AKvlBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhCA;AAiCA;AL0lBA;AACA;AACA;AACA;AK3lBA;AACA;AACA;AL6lBA;AACA;AACA;AK7lBA;AACAC;AACAA;AACA;AL+lBA;AACA;AACA;AK/lBA;AACAA;AACA;ALimBA;AACA;AACA;AKjmBA;AACAA;AACA;ALmmBA;AACA;AACA;AKnmBA;AACAA;AACA;ALqmBA;AACA;AACA;AKrmBA;AACA;AACA;AACA;AACA;AACA;AACA;ALumBA;AACA;AACA;AKvmBA;AACA;AACA;AACA;ALymBA;AACA;AACA;AKzmBA;AACAA;AAKA;ALumBA;AACA;AACA;AKvmBA;AACAA;AAKA;ALqmBA;AACA;AACA;AKrmBA;AACAA;AACA;ALumBA;AACA;AACA;AKvmBA;AACAA;AACA;ALymBA;AACA;AACA;AKxmBA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AATA;AAWA;AACA;ALmnBA;AACA;AACA;AKnnBA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAHA;AAKA;AACA;ALwnBA;AACA;AACA;AACA;AACA;AKjvBAC;AAwHA;AACAC;AACAC;AACAC;AACAC;AACAC;AACA;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AAhBA;AAvHAd;ALqwBA;AACA;AK1nBAnK;AACAL;AL4nBA;AACA;AACA;AACA;AM3wBA;AAAA;AN8wBA;AM9wBA;ANgxBA;AMhxBA;AAAAI;AAAA;ANoxBA;AMlxBA;AACA;AACAmL;AACA;AACA;AACAA;AACA;AACA;AACA;AACAA;AACA;AACA;AACA;AACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAlL;AACA;AACA;AA3BA;AA4BA;ANqxBA;AACA;AACA;AACA;AMtxBA;AAMA;ANmxBA;AACA;AACA;AMnxBA;AACA;AACA;AAqBA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AAMA;ANuvBA;AACA;AACA;AMvvBA;AACA;AAMA;ANovBA;AACA;AACA;AMpvBA;AACA;AAMA;ANivBA;AACA;AACA;AMlvBA;ANovBA;AMnvBA;AACA;AAAA;AAAA;AACA;AACA;ANuvBA;AACA;AACA;AMxvBA;AN0vBA;AMzvBA;AACA;AAAA;AAAA;AACA;AACA;AN6vBA;AACA;AACA;AM7vBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AN+vBA;AACA;AACA;AM/vBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAqBA;AAAA;AAAA;AACA;AN+uBA;AACA;AACA;AM/uBA;AAMA;AN4uBA;AACA;AACA;AM7uBA;AN+uBA;AM9uBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ANgvBA;AACA;AACA;AACA;AACA;AM76BAmL;AAAAA;ANg7BA;AACA;AMlvBAnL;ANovBA;AACA;AACA;AACA;AOr7BA;AAAA;APw7BA;AOx7BA;AP07BA;AO17BA;AAAAD;AAAA;AP87BA;AO57BA;AACA;AACAmL;AACA;AACAA;AAAA;AAAA;AACA;AACA;AACAA;AACA;AACA;AACA;AACAlL;AACAoL;AACAC;AAFA;AAbA;AAiBA;APi8BA;AACA;AACA;AACA;AOl8BA;AACA;APo8BA;AACA;AACA;AACA;AACA;AO79BAC;AAAAA;APg+BA;AACA;AOt8BAtL;APw8BA;AACA;AACA;AACA;AQr+BA;AAAA;ARw+BA;AQx+BA;AR0+BA;AQ1+BA;AAAAD;AAAA;AR8+BA;AQ5+BA;AACA;AACAmL;AAAA;AAAA;AACA;AACA;AACAA;AACA;AACA;AACAA;AACA;AACA;AACA;AACAlL;AACAuL;AACAH;AACAC;AACAG;AAJA;AAdA;AAoBA;ARi/BA;AACA;AACA;AACA;AQl/BA;AACA;ARo/BA;AACA;AACA;AACA;AACA;AQhhCAC;AAAAA;ARmhCA;AACA;AQt/BAzL;ARw/BA;AACA;AACA;AACA;ASxhCA;AAAA;AT2hCA;AS3hCA;AT6hCA;AS7hCA;AAAAD;AAAA;ATiiCA;AS/hCA;AACA;AACAmL;AACA;AACA;AACA;AACAA;AACA;AAAA;AACA;AACAA;AACA;AACA;AACA;AACAlL;AACAoL;AACAC;AACAK;AACAC;AAJA;AAfA;AAqBA;ATmiCA;AACA;AACA;AACA;ASpiCA;AACA;ATsiCA;AACA;AACA;AACA;AACA;ASnkCAC;AAAAA;ATskCA;AACA;ASxiCA5L;AT0iCA;AACA;AACA;AACA;AU3kCA;AAAA;AV8kCA;AU9kCA;AVglCA;AUhlCA;AAAAD;AAAA;AVolCA;AUllCA;AACA;AACAmL;AACA;AACAA;AAAA;AAAA;AACA;AACA;AACAA;AACA;AACA;AACA;AACAlL;AACA0L;AACAC;AAFA;AAbA;AAiBA;AVulCA;AACA;AACA;AACA;AUxlCA;AACA;AV0lCA;AACA;AACA;AACA;AACA;AUnnCAE;AAAAA;AVsnCA;AACA;AU5lCA7L;AV8lCA;AACA;AACA;AACA;AW3nCA;AAAA;AX8nCA;AW9nCA;AXgoCA;AWhoCA;AAAAD;AAAA;AXooCA;AWloCA;AACA;AACAmL;AAAA;AAAA;AACA;AACA;AACAA;AACA;AACA;AACAA;AACA;AACA;AACA;AACAlL;AACAoL;AACAC;AAFA;AAdA;AAkBA;AXuoCA;AACA;AACA;AACA;AWxoCA;AACA;AX0oCA;AACA;AACA;AW1oCA;AACA;AACA;AACA;AACA;AX4oCA;AACA;AACA;AW5oCA;AACA;AACA;AACA;AACA;AX8oCA;AACA;AACA;AW9oCA;AACA;AACA;AACA;AACA;AXgpCA;AACA;AACA;AWhpCA;AACA;AACA;AACA;AACA;AXkpCA;AACA;AACA;AWlpCA;AACA;AACA;AXopCA;AACA;AACA;AWppCA;AACA;AXspCA;AACA;AACA;AWtpCA;AACA;AXwpCA;AACA;AACA;AWxpCA;AACA;AX0pCA;AACA;AACA;AW3pCA;AX6pCA;AW5pCA;AACA;AAAA;AAEA;AX8pCA;AACA;AACA;AACA;AACA;AWluCAS;AAAAA;AXquCA;AACA;AWhqCA9L;AXkqCA;AACA;AACA;AACA;AY1uCA;AAAA;AZ6uCA;AY7uCA;AZ+uCA;AY/uCA;AAAAD;AAAA;AZmvCA;AYjvCA;AACA;AACAmL;AAAA;AAAA;AACA;AACA;AACAA;AACA;AACA;AACAA;AACA;AACA;AACA;AACAlL;AACAoL;AACAC;AACAG;AAHA;AAdA;AAmBA;AZsvCA;AACA;AACA;AACA;AYvvCA;AACA;AZyvCA;AACA;AACA;AYzvCA;AACA;AAKA;AACA;AACA;AZuvCA;AACA;AACA;AYvvCA;AACA;AACA;AACA;AACA;AZyvCA;AACA;AACA;AYzvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AZ2vCA;AACA;AACA;AY3vCA;AACA;AACA;AACA;AACA;AZ6vCA;AACA;AACA;AY7vCA;AACA;AACA;AACA;AACA;AZ+vCA;AACA;AACA;AY/vCA;AACA;AACA;AZiwCA;AACA;AACA;AYjwCA;AACA;AZmwCA;AACA;AACA;AYnwCA;AACA;AZqwCA;AACA;AACA;AYrwCA;AACA;AZuwCA;AACA;AACA;AYxwCA;AZ0wCA;AYzwCA;AACA;AAAA;AAEA;AZ2wCA;AACA;AACA;AACA;AACA;AY91CAO;AAAAA;AZi2CA;AACA;AY7wCA/L;AZ+wCA;AACA;AACA;AACA;Aat2CA;AAAA;Aby2CA;Aaz2CA;Ab22CA;Aa32CA;AAAAD;AAAA;Ab+2CA;Aa72CA;AACA;AACAmL;AAAA;AAAA;AACA;AACA;AACAA;AACA;AACA;AACAA;AACA;AACA;AACA;AACAlL;AACAoL;AACAC;AACAG;AACAQ;AAJA;AAdA;AAoBA;Abk3CA;AACA;AACA;AACA;Aan3CA;AACA;Abq3CA;AACA;AACA;Aar3CA;AACA;AACA;AACA;AACA;Abu3CA;AACA;AACA;Aav3CA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;Abo3CA;AACA;AACA;Aap3CA;AACA;AACA;AACA;AACA;AACA;Abs3CA;AACA;AACA;Aat3CA;AACA;AACA;AACA;AACA;AACA;Abw3CA;AACA;AACA;Aax3CA;AACA;AACA;Ab03CA;AACA;AACA;Aa13CA;AACA;Ab43CA;AACA;AACA;Aa53CA;AACA;Ab83CA;AACA;AACA;Aa93CA;AACA;Abg4CA;AACA;AACA;Aaj4CA;Abm4CA;Aal4CA;AACA;AAAA;AAEA;Abo4CA;AACA;AACA;AACA;AACA;Aat9CAC;AAAAA;Aby9CA;AACA;Aat4CAjM;Abw4CA;AACA;Acz9CA;AAAA;Ad49CA;Ac59CA;AAAA;Ad+9CA;Ac/9CA;Adi+CA;Acj+CA;AAAA;Ado+CA;Acn+CA;AACA;Adq+CA;Acn+CA;AAAA;AAAA;AACA;AACA;AACA;AACA;Adu+CA;Acr+CA;AACA;AACA;AACA;AACA;Adu+CA;AACA;AACA;AACA;Acx+CAA;Ad0+CA;Ac3+CA;AAAAD;AAAA;Ad++CA;Ac7+CA;AACA;AACA;AACAmM;AACA;AACAA;AACA;AACA;AACAlM;AACA;Ad++CA;AACA;AACA;Ac/+CA;Adi/CA;Acl/CA;AAAAD;AAAA;Ads/CA;Acp/CA;AACAoM;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACApM;AACA;AACA;AACA;AACA;AACA;AAGAA;AACA;AACA;AACA;Ado/CA;Acl/CA;AACA;AACA;AACA;AACA;Ado/CA;AACA;AACA;Acr/CA;AAAAA;AAAA;Ady/CA;Acx/CA;AACA;AACA;AACA;AACA;AAGA;AAAA;AAAA;AAAA;Ad2/CA;Acz/CA;AAOA;AACA;AACA;AACAqM;AACA;AACA;AACA;AACA;AACA;AACAC;AACA;AACA;Adq/CA;Acn/CA;AACA;AACA;AACA;AACA;Adq/CA;AACA;AACA;Act/CA;AAAAtM;AAAA;Ad0/CA;Acz/CA;AAEA;AAAA;AAAA;AAAA;Ad6/CA;Ac3/CA;AAIA;AACA;AACA;AACA;AACA;Ad0/CA;AACA;AACA;Ac3/CA;AAAAA;AAAA;Ad+/CA;Ac9/CA;AACA;AdggDA;AACA;AACA;Ac//CA;AACAuM;AACA;AACAC;AAKA;AACA;Ad6/CA;AACA;AACA;Ac5/CA;AACA;AACA5M;AACA;AACAA;AACA;AACA;AACAuM;AACA;Ad8/CA;AACA;AACA;Ac9/CA;AACA;AACAA;AdggDA;Ac9/CAlM;AACA;AACAkM;AACA;AACAlM;AACA;AdggDA;AACA;AACA;AACA;AACA;AcxpDAkM;AAAAA;AAAAA;AAAAA;AAAAA;Ad8pDA;AACA;AcjgDAlM;AdmgDA;AejqDA;AACAwM;AACA;AACAC;AACA;AACA;AACAC;AACA;AfmqDA;AejqDA;AfmqDA;AejqDA;AACA;AACA;AACA;AfmqDA;AejqDA;AACA;AACA;AACA;AACA;AACA;AAEA;AACAC;AACAC;AACA;AACA;AACA;AACA;AfkqDA;AehqDA;AACA;AACA;AfkqDA;AehqDA;AACA;AACAC;AACAC;AAFA;AAIAC;AACAA;AACAA;AfkqDA;AehqDAC;AfkqDA;Ae/pDA;AACA;AfiqDA;Ae/pDAC;AACA;AfiqDA;Ae/pDA;AfiqDA;Ae/pDA;AACA;AACAJ;AACAjN;AACAkN;AAHA;AfqqDA;Ae/pDA;AACAE;AfiqDA;Ae/pDA;AACAD;AACAA;AACA;AACAA;AfiqDA;Ae/pDA;AfiqDA;Ae/pDA;AACA;AAEA;AACA;AACAC;AfgqDA;Ae9pDAA;AACA;AfgqDA;Ae9pDA;AACA;AfgqDA;Ae9pDA;AACA;AACAE;AAAA;AAAA;AfkqDA;AehqDA;AACAC;AAAA;AAAApN;AAAA;AfqqDA;AerqDA;AAAA;AACAqN;AAAA;AAAArN;AAAA;Af2qDA;Ae3qDA;AAAA;AACAsN;AAAA;AAAAtN;AAAA;AfirDA;AejrDA;AAAA;AACAuN;AAAA;AAAAvN;AAAA;AfurDA;AevrDA;AAAA;AACAwN;AAAA;AAAAxN;AAAA;Af6rDA;Ae7rDA;AAAA;AACAyN;AAAA;AAAAzN;AAAA;AfmsDA;AensDA;AAAA;AACA0N;AAAA;AAAA1N;AAAA;AfysDA;AezsDA;AAAA;AACA2N;AAAA;AAAA3N;AAAA;Af+sDA;Ae/sDA;AAAA;AfktDA;AehtDA;AACA4N;AAAA;AfmtDA;AentDA;AAAA;AACAC;AAAA;AfutDA;AevtDA;AAAA;AACAC;AAAA;Af2tDA;Ae3tDA;AAAA;AACAC;AAAA;Af+tDA;Ae/tDA;AAAA;AACAC;AAAA;AfmuDA;AenuDA;AAAA;AACAC;AAAA;AfuuDA;AevuDA;AAAA;Af0uDA;AexuDAC;AACA;Af0uDA;AexuDA;Af0uDA;AexuDA;AACA;AACAjO;AACA;Af0uDA;AexuDA;AACA;AACA;Af0uDA;AexuDAA;Af0uDA;AexuDA;Af0uDA;AexuDA;AACAuM;AACA;AACA;Af0uDA;AexuDAvM;AACA;Af0uDA;AACA;AezuDAkO;AACAC;AADA;Af6uDA;AezujXA;Af6lEA;AezuDAlc;Af2uDA;AACA;AgB/lEA;AhBimEA;AACA;AACA;AACA;AACA;AgB/lEA;AAAA;AhBkmEA;AgBjmEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AhBkmEA;AACA;AACA;AACA;AgBlmEA;AACAmc;AACAC;AACAxP;AAHA;AAKA;AhBomEA;AACA;AACA;AgBnmEA5M;AACA;AACAA;AACA;AACA;AACA;AACA;AhBqmEA;AgBnmEA;AhBqmEA;AACA;AACA;AACA;AACA;AACA;AgBtmEA;AACA;AACA;AACA;AhBwmEA;AACA;AACA;AgBvmEA;AAKA;AhBqmEA;AACA;AACA;AACA;AACA;AgBtmEAA;AhBwmEA;AiB9pEA;AACA;AACA;AACAqc;AACArc;AjBgqEA;AkBpqEA;AACA;AACAA;AlBsqEA;AkBpqEAA;AlBsqEA;AkBpqEA;AlBsqEA;AkBlqEA;AlBoqEA;AACA;AkBnqEA;AAAA;AlBsqEA;AkBtqEA;AlBwqEA;AkBvqEA;AACA;AACA;AACA;AACA;AACA;AlByqEA;AkBvqEA;AACA;AACA;AACA;AACA;AlByqEA;AkBvqEA;AACA;AlByqEA;AkBvqEA;AACA;AlByqEA;AkBvqEA;AACA;AlByqEA;AkBvqEA;AACA;AlByqEA;AkBvqEA;AACA;AlByqEA;AkBvqEA;AACA;AlByqEA;AkBvqEA;AACA;AlByqEA;AkBvqEA;AACA;AlByqEA;AkBvqEA;AACA;AlByqEA;AkBvqEA;AACA;AlByqEA;AkBvqEA;AlByqEA;AkBvqEA;AACA;AACA;AlByqEA;AkBvqEA;AACA;AACA;AlByqEA;AkBvqEA;AACA;AlByqEA;AkBvqEA;AlByqEA;AkBvqEA;AACA;AlByqEA;AkBvqEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AlByqEA;AkBvqEAsc;AAAA;AAAA;AACA;AlB2qEA;AkBzqEA;AlB2qEA;AACA;AACA;AACA;AkB3qEA;AACA;AACA;AACA;AACA;AlB6qEA;AkB3qEA;AACA5Q;AACAC;AACA;AACA;AAEA;AACA;AACAD;AACAC;AAEA;AlB2qEA;AkBzqEA;AACA;AACA;AACA;AACA;AACA;AACA;AlB2qEA;AkBzqEA;AlB2qEA;AACA;AACA;AACA;AkB5qEA;AACA;AAqBA;AACA;AlB0pEA;AkBxpEA3L;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AlB4pEA;AkB1pEA;AlB4pEA;AACA;AACA;AACA;AkB7pEA;AACA;AACAuc;AACA;AACA;AAAA;AAAA;AACA;AACA;AlBiqEA;AkB/pEA;AACA;AlBiqEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AkBlqEA;AACA;AACA;AACA;AlBoqEA;AkBlqEA;AACA;AlBoqEA;AkBlqEA;AACA;AACAC;AACA;AACA;AACA;AACAA;AACA;AACA;AACAA;AACA;AACA;AACAA;AACAC;AACA;AACA;AlBoqEA;AkBlqEA;AACA;AlBoqEA;AACA;AACA;AkBnqEA;AACA;AACAC;AACA;AACA;AlBqqEA;AACA;AACA;AkBpqEA;AACA;AlBsqEA;AkBpqEA;AlBsqEA;AACA;AACA;AACA;AkBxqEA;AlB0qEA;AkBzqEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AlB2qEA;AkBzqEA;AACA;AACA;AlB2qEA;AACA;AACA;AACA;AkB7qEA;AAAA;AlBgrEA;AkB/qEA;AACA;AlBirEA;AACA;AACA;AkBjrEA;AAAA;AlBorEA;AkBnrEA1c;AlBqrEA;AkBnrEA;AACA;AACA;AACA6M;AACAjN;AAFA;AlBwrEA;AkBnrEA;AACAmN;AACAA;AACAA;AlBqrEA;AkBnrEA;AACA;AACA;AACA;AACA;AlBqrEA;AkBnrEA;AlBqrEA;AkBnrEA;AlBqrEA;AkBnrEA;AlBqrEA;AkBnrEA;AACA;AlBqrEA;AACA;AACA;AkBprEA;AACA;AlBsrEA;AkBprEA;AACA;AlBsrEA;AACA;AACA;AACA;AkBtrEA;AACA;AlBwrEA;AkBtrEA;AlBwrEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AkBzrEA;AACA;AACA;AACA;AACA;AACA;AlB2rEA;AkBzrEA;AlB2rEA;AkBzrEA;AACA;AACA4P;AACA;AACAA;AACA;AACA;AACAA;AACA;AACAA;AACA;AACA;AlB2rEA;AACA;AACA;AkB1rEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AlB4rEA;AACA;AACA;AkB3rEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AlB6rEA;AACA;AACA;AkB5rEA;AACA;AlB8rEA;AACA;AACA;AkB7rEA;AACA;AlB+rEA;AkB7rEA;AACA;AACA;AACA;AlB+rEA;AACA;AACA;AACA;AkB/rEA;AACA;AACA;AACA;AlBisEA;AACA;AACA;AkBhsEA;AACA;AlBksEA;AkBhsEA;AACA;AACA;AAEAC;AACA;AACA;AACA;AlBisEA;AkB/rEA;AACAC;AACA;AACAD;AACA;AACA;AlBisEA;AkB/rEA5c;AACA;AlBisEA;AACA;AACA;AkBhsEA;AAAA;AlBmsEA;AkBlsEA;AACA;AlBosEA;AkBlsEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AlBosEA;AkBlsEA;AACA;AACA;AlBosEA;AkBlsEA;AACA;AACA;AlBosEA;AkBlsEA;AACA;AACA;AACA;AlBosEA;AACA;AACA;AkBnsEA;AlBqsEA;AkBnsEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AlBqsEA;AkBnsEA;AACA8c;AACA;AACA;AACAA;AACA;AACA;AlBqsEA;AkBnsEA;AACA;AACA;AACA;AACA;AACA;AACAC;AACA;AACA;AACA;AACA;AACAA;AACA;AACA;AACA;AACA;AACA;AACA;AlBqsEA;AkBnsEA;AACA;AACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AlBqsEA;AkBnsEA;AlBqsEA;AACA;AACA;AACA;AkBnsEA;AACA;AACA;AACA;AlBqsEA;AACA;AkBnsEA;AAEA;AACA;AACA;AACA;AlBosEA;AkBlsEA;AACA;AACA;AlBosEA;AkBlsEA;AACA;AACA;AACA;AACA;AlBosEA;AkBlsEA;AACA;AACA;AlBosEA;AACA;AACA;AkBnsEA;AACArR;AACAC;AAFA;AAIA;AlBqsEA;AACA;AACA;AkBpsEA;AACA;AlBssEA;AkBpsEA;AlBssEA;AACA;AACA;AACA;AkBvsEA;AlBysEA;AkBxsEAqR;AACA;AACA;AACA;AlB0sEA;AkBxsEA;AACA;AACAC;AACAA;AACA;AACAA;AACA;AACAA;AACA;AACAC;AACA;AACAD;AACA;AACA;AACA;AlB0sEA;AkBxsEAD;AACA;AACA;AlB0sEA;AkBxsEA;AACA;AACAC;AACAA;AACAA;AACA;AACAC;AACA;AACAD;AACA;AACA;AACA;AACA;AlB0sEA;AACA;AACA;AkBzsEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AlB6sEA;AkB3sEA;AlB6sEA;AACA;AACA;AACA;AkB9sEA;AACA;AACA;AlBgtEA;AkB9sEA;AACA;AACA;AACA;AlBgtEA;AkB9sEA;AACA;AACArQ;AACA;AACA;AACA;AACA;AACA;AACAA;AACA;AACA;AACA;AACAL;AACA;AACA;AlBgtEA;AkB9sEAA;AACAK;AACA;AlBgtEA;AkB9sEA;AACA;AACA;AlBgtEA;AkB9sEA;AACAL;AAEA;AACA;AlB+sEA;AkB7sEAK;AACA;AACA;AACA;AlB+sEA;AkB7sEA;AlB+sEA;AACA;AACA;AACA;AkBhtEA;AACA;AACA;AlBktEA;AkBhtEA;AACA;AACA;AACA;AlBktEA;AkBhtEA;AACA;AACAuQ;AACA;AACAnd;AACAmd;AACA;AlBktEA;AkBhtEA;AACA;AACA;AlBktEA;AkBhtEA;AACAA;AlBktEA;AkBhtEA;AAIA;AAAA;AlBgtEA;AkB7sEA;AlB+sEA;AkB7sEA;AACA;AlB+sEA;AACA;AACA;AkB9sEA;AACA;AlBgtEA;AACA;AACA;AkB/sEA;AACA;AlBitEA;AACA;AACA;AkBhtEA;AACA;AlBktEA;AACA;AACA;AkBjtEA;AACA;AACA;AACA;AACA;AlBmtEA;AACA;AACA;AkBltEA;AACA;AACA;AACA;AACA;AlBotEA;AkBltEA;AACA;AACA;AACA;AlBotEA;AkBltEA;AACAC;AACA;AACA;AACA;AACA;AACA;AAJA;AAAA;AlB0tEA;AkBptEA;AAEAC;AACA;AACA;AAEAA;AACA;AACA;AACA;AlBotEA;AkBltEA;AACA;AlBotEA;AkBltEA;AlBotEA;AACA;AACA;AACA;AkBrtEA;AACA;AACA;AACAC;AACAC;AACAC;AAHA;AAKA;AACA;AACA;AlButEA;AkBrtEA;AlButEA;AACA;AACA;AACA;AkBztEA;AlB2tEA;AkB1tEA;AACA;AACA;AACA;AlB4tEA;AkB1tEA;AACA;AACA;AACA;AACA;AACA;AlB4tEA;AkB1tEA;AACA;AACA;AACA;AlB4tEA;AkB1tEA;AACA;AACAA;AACA;AACAA;AACA;AlB4tEA;AkB1tEA;AACAA;AlB4tEA;AkB1tEA;AACA;AlB4tEA;AkB1tEA;AACA;AlB4tEA;AACA;AACA;AACA;AkB7tEA;AACA;AACA;AACA;AACA;AACA;AACA;AlB+tEA;AkB7tEA;AACA;AACA;AlB+tEA;AACA;AACA;AkB9tEA;AACA;AACA;AACA;AACAC;AACA;AACA;AACA;AlBguEA;AACA;AACA;AkB/tEA;AACA;AACA;AACA;AACA;AACAC;AACA;AACA;AlBiuEA;AACA;AACA;AACA;AACA;AkBluEA1d;AlBouEA;AmBv9FA;AACA;AACA;AACA2d;AACA3d;AnBy9FA;AoB79FA;AACA;AACA;AACA;AACA4d;AACA/Q;AACAjN;AACAkN;AAHA;AAKA;AACA;AACA8Q;AACA/Q;AACAjN;AACAkN;AAHA;AAKA;ApB+9FA;AoB79FA;AACA;AACA+Q;AACA7d;ApB+9FA;AqBp/FA;AACA;AACA;AACA8d;AACA9d;ArBs/FA;AsB1/FA;AACA+d;AACAC;AACAC;AAHA;AtBggGA;AsB1/FAje;AtB4/FA;AACA;AuBlgGA;AAAA;AvBqgGA;AuBpgGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AvBsgGA;AuBpgGA;AACA;AACA;AACA;AACA;AvBsgGA;AuBpgGA;AACA;AvBsgGA;AACA;AACA;AACA;AACA;AuBzgGA;AvB2gGA;AuB1gGA;AACA;AACA;AACA6M;AACAjN;AACAkN;AAHA;AAKA;AACA;AACA;AAEA;AACAD;AACAjN;AACAkN;AAHA;AAKA;AvB2gGA;AACA;AACA;AuBzgGA;AACA;AACA;AACAD;AACAjN;AACAkN;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAoR;AACA;AACA;AACA;AACApe;AAAA;AAAA;AACA;AACA;AACA;AvB6gGA;AuB3gGA;AACA;AvB6gGA;AACA;AACA;AACA;AuB9gGA;AvBghGA;AuB9gGA;AACA;AACA;AvBghGA;AuB9gGA;AvBghGA;AuB9gGA;AACAqe;AACA;AACA;AACA;AACA;AAEA;AACA5R;AAIA;AACA4R;AACA;AvB4gGA;AuB1gGA;AACA;AACAC;AACAhB;AACAiB;AACAC;AAJA;AAMA;AACA;AvB4gGA;AuB1gGA;AACA;AACA;AACA;AvB4gGA;AuB1gGA;AvB4gGA;AACA;AACA;AACA;AuB7gGA;AACA;AAEA;AACA;AvB8gGA;AuB5gGA;AACA;AACA;AACA;AACA;AAKA;AvB0gGA;AuBxgGA;AACA;AACA;AvB0gGA;AACA;AACA;AACA;AuB3gGA;AvB6gGA;AuB3gGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AvB6gGA;AuB3gGA;AACA;AACAC;AACA;AACA;AACAJ;AACA;AACAI;AAEA;AACAJ;AACA;AACA;AACAne;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAue;AACA;AACA;AvB4gGA;AuB1gGA;AACA;AACAA;AACA;AACA;AvB4gGA;AuB1gGA;AvB4gGA;AuB1gGA;AACA;AACA;AACA;AACAH;AACAhB;AACAiB;AACAC;AAJA;AAMA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AvB2gGA;AACA;AACA;AuB1gGAH;AAGAA;AACAA;AACA;AACA;AvB0gGA;AACA;AACA;AuBzgGAA;AAEAA;AAIA;AvBugGA;AACA;AACA;AuBtgGA;AACA;AACA;AACA;AACA5R;AAIA;AACA4R;AACAA;AACA;AvBqgGA;AACA;AACA;AuBpgGAA;AACAA;AAGA;AvBogGA;AACA;AACA;AACA;AACA;AuBrgGA;AACA;AACA;AvBugGA;AACA;AuBvgGAA;AACAA;AACAA;AACAA;AvBygGA;AuBvgGAA;AACAK;AACAC;AACAC;AACAC;AACAC;AACAhB;AACAiB;AACAC;AARA;AvBkhGA;AuBvgGAX;AACAA;AACAA;AvBygGA;AuBvgGAne;AvBygGA;AwB3xGA;AACA;AACA;AACA+e;AACA/e;AxB6xGA;AyBjyGA;AACA;AACA;AACAgf;AACAhf;AzBmyGA;A0BvyGA;AACA;AACA;AACAif;AACAjf;A1ByyGA;A2B7yGAsc;AACA;AACA;AACA;AACA;AACA;AACAtc;AACAA;AACAA;AACA;AACA;AACA;AACA;A3B+yGA;A4B3zGA;A5B6zGA;A4BzzGA;A5B2zGA;A4BvzGA;AACA;A5ByzGA;A4BvzGA;AACA;AACAgN;A5ByzGA;A4BvzGA;AACA;AACA;AACA;A5ByzGA;A4BvzGA;AACA;A5ByzGA;A4BvzGA;AACA;A5ByzGA;A4BvzGA;AACA;AACA;A5ByzGA;A4BvzGAA;AACA;AACA;A5ByzGA;A4BvzGA;AACA;AACA;AACAgQ;AACAkC;AACA;AACA;AACA;A5ByzGA;A4BvzGA;AACA;AACA;AAGA;A5BuzGA;A4BrzGA;AACA;AACA;AAAA;AAAA;AACA;AACAC;AACA;AACA;A5ByzGA;A4BvzGA;AAAA;A5B0zGA;A4B1zGA;AAAA;A5B6zGA;A4B7zGA;AAAA;A5Bg0GA;A4Bh0GA;AAAA;AAAA;AACA;A5Bo0GA;A4Bn0GA;AACA;AACA;AACA;AACA;A5Bq0GA;A4Bn0GA;AACAnS;AACAA;AACA;A5Bq0GA;A4Bn0GA;AACAoS;AACA;AACA;AACA;AACAC;AACA;AACA;AACAnB;AAIAoB;AACA;AACA;AACAC;AACA;AACA;AACA;AAPA;AAUAF;AAAA;AAAA;AACA;A5Bm0GA;A4Bj0GA;AACA;AACA;AACAA;AACA;AACA;AACAA;AACA;AACA;AACA;AA9CA;AAAA;AAAA;AAqDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AAhEA;AAAA;AAAA;AAmEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;AArFA;AAAA;AAAA;AAiDA;AACA;AAlDA;A5B45GA;A4B55GA;AAAA;A5B+5GA;A4Bv0GA/C;AACA;A5By0GA;A4Bv0GAtc;A5By0GA;A6B99GA;AACAwf;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AAXA;A7B4+GA;A6B99GA;AACAlgB;AACA;AACA;AACA;AACA;A7Bg+GA;A6B99GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A7Bg+GA;A6B99GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A7Bg+GA;A6B99GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A7Bg+GA;A6B99GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A7Bg+GA;A6B99GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A7Bg+GA;A6B99GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A7Bg+GA;A6B99GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A7Bg+GA;A6B99GA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;A7B29GA;A6Bx9GA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A7Bq9GA;A6Bn9GA;AACA;AACAuM;AACA;AAlNA;AAoNA;A7Bq9GA;A6Bn9GAvM;A7Bq9GA;A8B3rHA;A9B6rHA;A8B3rHA;AACAke;AACAoB;AACAa;AACAC;AAHA;AAKA;A9B6rHA;A8B3rHA;AACAlC;AACAqB;AACAY;AACAC;AAHA;AAKA;A9B6rHA;A8B3rHA;AACAlC;AACAoB;AACAC;AACAY;AACAC;AAJA;AAMA;A9B6rHA;A8B3rHApgB;AACAA;AACAA;A9B6rHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A+BhuHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A/BkuHA;AACA;AACA;A+BluHA;A/BouHA;A+BruHA;AAAAD;AAAA;A/ByuHA;A+BvuHA;AACA;AACA;AACA;AACA;AACA;AACAsgB;AACA;AACA;AACA;AACA;A/ByuHA;AACA;AACA;AACA;AACA;A+B1uHArgB;A/B4uHA;AgCxwHA;AhC0wHA;AgCxwHA;AACA;AACA;AACA;AACA;AACA;AACAsgB;AACA;AACA;AACA;AhC0wHA;AgCxwHAtgB;AACA;AACA;AhC0wHA;AgCxwHAA;AACA;AACA;AhC0wHA;AgCxwHAA;AACA;AACA;AhC0wHA;AgCxwHA;AACA;AhC0wHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AiChzHA;AjCkzHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AiC/yHA;AjCizHA;AACA;AACA;AACA;AACA;AACA;AACA;AiC/yHA;AACA;AACA;AACAugB;AjCizHA;AiC/yHA;AACA;AACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA;AACA;AjCizHA;AiC/yHA;AAAA;AACAhU;AACA;AACA;AACAvM;AACA;AACA;AACA;AACA;AACAA;AACA;AjCkzHA;AiChzHA;AjCkzHA;AACA;AACA;AACA;AACA;AACA;AiChzHA;AjCkzHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AiChzHA;AACA;AACA;AACA;AjCkzHA;AiChzHA;AjCkzHA;AiChzHA;AACA;AACAwgB;AACA;AACAA;AACA;AjCkzHA;AiChzHA;AACA;AjCkzHA;AiChzHA;AACA;AACA;AjCkzHA;AiChzHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AjCkzHA;AiChzHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACAjU;AACA;AACA;AACA;AACAkU;AACAC;AACA;AACA;AACA;AACAD;AACA;AACAA;AACAA;AACA;AACAE;AAtBA;AAwBA;AACA;AACA;AjCmzHA;AiCjzHA3gB;AACAA;AjCmzHA;AkCh9HA;AACA;AlCk9HA;AkCh9HA;AACAA;AACA4gB;AACA5gB;AACA;AlCk9HA;AkCh9HAA;AlCk9HA;AmC39HAA;AACA;AACAkd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AnC69HA;AmC39HAld;AAAA;AACA6gB;AACAC;AACAC;AACAC;AACAC;AAKAX;AAVA;AAAA;AnCs+HA;AmCz9HAtgB;AACA;AAKA;AACA;AACA;AACAA;AACA;AnCu9HA;AoC1/HAA;ApC4/HA;AoC1/HA;AACAkhB;AACA1C;AACAC;AACAC;AACAC;AACAC;AACAhB;AACAuD;AACAC;AACA/T;AACAF;AACAC;AACAE;AACAC;AACAC;AACAC;AACAC;AACAmR;AACAC;AACAuC;AACAC;AApBA;AADA;ApCmhIA;AoC1/HA;AACAthB;ApC4/HA;AoC1/HA;AACA;ApC4/HA;AoC1/HA;AACA;AACAA;AACAA;AACAuhB;AACA;ApC4/HA;AoC1/HA;AACA;AACA;AACA;AACA;ApC4/HA;AoC1/HA;AACA;ApC4/HA;AoC1/HAC;AACAC;AACAC;AACAC;AACAC;AAJA;ApCigIA;AoC1/HA;AACAC;AACA;ApC4/HA;AoC1/HA;AACA/E;AACAgF;AACAC;AAHA;AAKA;AACAR;AACA;AACAA;ApC4/HA;AoC1/HA;AACA;ApC4/HA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AoCx/HA;AACA;AACAvhB;AACA;AACA;ApC0/HA;AoCx/HA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ApC0/HA;AoCx/HA;AACA;AACA;AACAuM;AACA;AACA;AACA;AACA;AACA;AACAyV;AACA;AACA;AACA;AACA;ApC0/HA;AoCx/HA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACAC;AACA;AACA;AAAA;AAAA;AAAA;AAAA;ApCigIA;AoC//HA;AACA;AAGA;ApC+/HA;AoC7/HA;AACAD;AAIA;AACAA;AACA;AACA;AACAE;AACAC;AACAniB;AACA;ApC4/HA;AoC1/HA;ApC4/HA;AACA;AACA;AACA;AACA;AoC1/HA;AACA;ApC4/HA;AoC1/HA;ApC4/HA;AoC1/HA;AACA;AACA;AACAgiB;AACA;AACA;AACA;AACA;ApC4/HA;AoC1/HA;AACA;AACAI;AACAviB;AACAuiB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ApC4/HA;AoC1/HA;ApC4/HA;AoC1/HApiB;ApC4/HA;AoC1/HA;AACA;AACAqiB;AACA;AACA;AAGAA;AACA;AACAA;AACA;ApC0/HA;AoCx/HA;ApC0/HA;AoCx/HA;AACA;AACA;ApC0/HA;AoCx/HAxiB;AACA;AACAA;AACA;AACAA;AACA;AACA;AACA;AACA;ApC0/HA;AoCx/HA;AACA;AACAG;AAEA;AAAA;AAGA;ApCw/HA;AoCt/HA;AACAH;ApCw/HA;AoCt/HA;AACAA;ApCw/HA;AoCt/HA;AACAG;ApCw/HA;AoCt/HA;AACA;ApCw/HA;AoCt/HAA;AACAA;AACAA;AACAA;AACAA;AACAA;ApCw/HA;AqCnvIA;ArCqvIA;AACA;AACA;AACA;AACA;AqCnvIA;AAAA;ArCsvIA;AqCrvIA;AACA;AACAqd;AACAA;AACAA;ArCuvIA;AqCrvIA;AAAA;AAAA;AACA;AACA;AACAiF;AACA;AACA;AACA;AACAjF;AACA;AACA;AACAiF;AACAjF;AACA;AACA;AACArd;AACA;AACA;AACA;AACA;AACA;AACAuiB;AACA;AACA;AACAviB;AACA;AACA;AACA;ArCyvIA;AqCvvIA;ArCyvIA;AACA;AACA;AACA;AqCvvIA;AACAke;AACA;AACA;AACA5R;AACA;AACAkW;AACA;AACA;ArCyvIA;AqCvvIA;ArCyvIA;AACA;AACA;AACA;AACA;AACA;AACA;AqCvvIA;AACA;AACA;AACAxiB;ArCyvIA;AqCvvIA;AACA;AACA;AACA;AACA;AACAH;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA;AACA;ArCqvIA;AqCnvIA;AACA;AACA;AAAA;AACAA;AACA;AACA;ArCsvIA;AqCpvIA;AACA;AAAA;AACA;AACA;ArCuvIA;AqCrvIA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA;AACA;AACA;AACA;ArCuvIA;AqCrvIA;AACA;AACA;AACA;AACA;ArCuvIA;AqCrvIA;AACAA;AAEA;AACAA;AACA;AACAA;AACA;AACA0M;AAGA;AACA;AACA;ArCovIA;AqClvIA;AACA;ArCovIA;AqClvIA;AACA1M;AACA;AACAA;AACA;AACA4iB;AACA;AACA;AACA;AACA;ArCovIA;AqClvIA;AACA5F;AACAhd;AAEA;AACA4iB;AACA;AACA;AACA;ArCmvIA;AqCjvIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAD;AACA3iB;AACAA;AACAA;AACAA;AACA;AACA;AACA;AACA;AACAA;AAEA;AACA;AACA;AACA;AACA;AACAC;AACA;ArCkvIA;AqChvIA;AACA;AACA;AACA;AACAyM;AAEA;AACA;AACA;AACA;AACAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAmW;AAAA;AAAA3iB;AAAA;ArCivIA;AqChvIA;AACA4iB;AACA7iB;AACA6iB;AACA;AACA7iB;AAAA;AAAAC;AAAA;ArCqvIA;AqCpvIA;AACA4iB;AACAD;AACAC;AACA;AACA;AACA3iB;AACA;AACA;AACA;ArCsvIA;AqCpvIA;AACAwiB;AACA3iB;AAEA;AACA;ArCqvIA;AqCnvIA;AACA;AACA+iB;AACA;AACA;ArCqvIA;AqCnvIA;AACA;ArCqvIA;AqCnvIA;AACA;AACA;AACArW;AACA;AACA;AACAA;AACA;AACA;ArCqvIA;AqCnvIA;AACA;AACA;AACAsW;AACA;AACA;AACAhG;AAcAA;AACAA;AACA;AACA;AACA;AACA;AACAiG;AACA;AACA;ArCwuIA;AqCtuIA9iB;AACAA;AACAA;AACAA;ArCwuIA;AsCvgJA;AtCygJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AsChhJA;AtCkhJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AsClhJA;AtCohJA;AsCnhJA;AACA;AACA;AtCqhJA;AACA;AsClhJA;AtCohJA;AsCnhJA;AACA;AACA;AtCqhJA;AsClhJA;AtCohJA;AACA;AACA;AACA;AACA;AACA;AACA;AsCphJA;AtCshJA;AsCrhJA;AACA;AtCuhJA;AsCphJA;AtCshJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AsCvhJA;AtCyhJA;AACA;AACA;AACA;AACA;AACA;AACA;AsCzhJA;AtC2hJA;AsC1hJA;AACA;AACA;AACA;AtC4hJA;AsCzhJA;AtC2hJA;AACA;AsC3hJA;AACA;AACA;AACA;AACAuM;AACA;AACA;AACA;AACA;AtC6hJA;AsC3hJAwW;AACA;AACA;AACA;AACAvF;AACAwF;AACA;AACAxF;AACA;AACA;AtC6hJA;AsC3hJAuF;AACA;AACA;AACA;AACA;AACAE;AACA;AACAA;AACAD;AACA;AACAC;AACA;AtC6hJA;AsC3hJAF;AACAG;AACA;AACArjB;AACAA;AACA;AACA;AACAsjB;AACA;AtC6hJA;AsCxhJA;AACA;AACA;AACA;AACA;AACA;AACAtjB;AACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACAkjB;AACA;AACA;AACAljB;AACA;AACA;AACA;AAGA;AACA;AACAA;AACA;AACAA;AACA;AACA;AACA;AACA0M;AA3BA;AA6BA;AtCwhJA;AsCthJA;AACA;AACA6W;AACA;AACA;AACA;AACA;AACA;AACA;AACAC;AAAA;AAAA;AAEAC;AACA;AACA;AACA;AACA;AACA;AACA;AACAP;AACA;AACA;AACA;AACA;AACAQ;AAAA;AAAA;AAEAC;AAAA;AAAA;AAKAC;AAAA;AAAA;AAEAC;AAAA;AAAA;AAEAC;AAAA;AAAA;AACA7G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA8G;AAAA;AAAA;AACAjF;AAAA;AAAA;AACAkF;AACA;AACA;AACA;AACA;AACA;AACAC;AtCgiJA;AsC9hJA;AACAC;AACA;AACAC;AACA;AACA;AtCgiJA;AsC9hJA;AACA;AACA;AAGA;AACA;AACA;AtC8hJA;AsC5hJA;AACA;AAvHA;AtCspJA;AsC5hJA;AACAjB;AACA;AACA;AACA;AtC8hJA;AsC5hJA;AACA;AACA;AACA;AACA;AACA;AACA;AtC8hJA;AsC5hJA;AACA;AACA;AACA;AtC8hJA;AsC5hJAxW;AACA;AACA;AACA;AACA;AAIA;AACA;AACAgU;AACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AtC2hJA;AsCzhJA;AACA;AACA0D;AACAjkB;AACA;AACA;AACA;AtC2hJA;AsCzhJAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AtC2hJA;AuCj0JA;AvCm0JA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AuCj0JAA;AvCm0JA;AwCh2JAA;AACA;AACA;AACA0L;AACAC;AACAuY;AACAC;AAJA;AAMA;AACA;AACAC;AACAA;AACA;AACA;AxCk2JA;AwCh2JA;AACA;AACAC;AACA/H;AAEA+H;AACA;AACA;AACA;AACAA;AACAA;AACA;AACA;AACA;AACA;AACA;AxCi2JA;AwC/1JArkB;AACA;AACA;AACAskB;AACAA;AACAC;AACA;AACA;AxCi2JA;AwC/1JAvkB;AAAA;AAAA;AxCm2JA;AwCj2JA;AACA;AxCm2JA;AwCj2JAA;AAAA;AAAA;AxCq2JA;AwCn2JA;AACA;AxCq2JA;AwCn2JAA;AACA;AACA;AACA;AACA;AACA;AxCq2JA;AyC75JA;AzC+5JA;AACA;AACA;AACA;AyC95JA;AAAA;AzCi6JA;AyCj6JA;AzCm6JA;AyCn6JA;AzCq6JA;AACA;AyCn6JA;AACA;AzCq6JA;AyCn6JA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AzCq6JA;AyCn6JA;AzCq6JA;AyCn6JA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AzCq6JA;AyCn6JA;AACA;AACA;AACA;AACAwkB;AACArY;AACA;AACAqY;AACA;AACA;AzCq6JA;AyCn6JAtG;AACA;AACA;AzCq6JA;AyCn6JA;AACAve;AACA;AACA;AzCq6JA;AyCn6JAK;AzCq6JA;AyCn6JAke;AACA;AACA;AACA;AACA;AzCq6JA;AyCn6JA;AACA;AACA;AACA;AACAkE;AAhFA;AAiFA;AzCs6JA;AACA;AACA;AACA;AyCv6JA;AACA;AzCy6JA;AACA;AACA;AACA;AACA;AyC36JApiB;AzC66JA;A0CvgKA;A1CygKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A0CphKAykB;AAEAC;AACAC;AACAC;AACAC;AAHA;AADA;AADAJ;AASAK;AACAC;AACAC;AACAC;AACAC;AACApG;AANA;AARA2F;AAiBAU;AACAC;AAFA;A1CwhKA;A0CjhKAplB;A1CmhKA;A2C3iKA;A3C6iKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A2CvgKA;AACA;A3CygKA;AACA;AACA;A2CzgKA;AACA;A3C2gKA;AACA;AACA;A2C3gKA;AACA;A3C6gKA;AACA;AACA;A2C7gKA;AACA;A3C+gKA;AACA;AACA;A2C/gKA;AACA;A3CihKA;AACA;AACA;AACA;AACA;A2CnlKAqlB;AAAAA;AAGAC;AACAC;A3ColKA;A2CllKAX;AACAY;A3ColKA;A2CllKAC;A3ColKA;A2CllKAC;AACAC;AATA;AADA;AAFAN;AAgBAO;AACAC;AACAC;AACAC;AACAC;AACAjB;AACAkB;AACAC;AACAC;AACAC;AACAC;AACA;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AArBA;AAfAzB;AAuCAN;AAIAgC;AACAC;AACAC;AAPA;A3CylKA;A2C/jKAjnB;A3CikKA;A4CloKA;A5CooKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A4C/oKAknB;AAAAA;AAGAC;AACA5B;A5CgpKA;A4C9oKA6B;AAHA;AADA;AAFAF;AAUAnB;AACAsB;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACA1B;AACA2B;AACAC;AACAC;AACAC;AACAC;AACAtB;AAfA;AATAQ;AA2BAnC;AADA;A5CkpKA;A4CzoKA/kB;A5C2oKA;A6C/qKA;A7CirKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A6C5rKAioB;AAAAA;AAGAC;AACA3C;A7C6rKA;A6C3rKAX;AACAY;A7C6rKA;A6C3rKAC;A7C6rKA;A6C3rKAC;AACAC;AATA;AADA;AAFAsC;AAgBArC;AACAC;AACAC;AACAC;AACAoC;AACAnC;AACAjB;AACAkB;AACAC;AACAC;AACAC;AACAE;AACAC;AACAC;AACAE;AACAC;AACAC;AACAC;AACAC;AAnBA;AAfAmB;AAqCAlD;AAIAgC;AACAC;AACAC;AAPA;A7CksKA;A6CtrKAjnB;A7CwrKA;A8CzuKA;A9C2uKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A8CtvKAooB;AAEAC;AACAC;AACAC;AACAC;AAJA;AADAJ;AAQAK;AACAC;AAFA;A9C0vKA;A8CnvKA1oB;A9CqvKA;A+CpwKA;A/CswKA;AACA;AACA;AACA;A+ChwKA;AAAA;A/CmwKA;A+CnwKA;A/CqwKA;A+ClwKA;A/CowKA;A+ClwKA;AACA;AACA;AACA;AARA;AASA;A/CqwKA;AACA;AACA;AACA;A+CrwKA;AAGA;AACA;AACA;AACA;AACA;AACA;A/CqwKA;AACA;AACA;A+CpwKA;AACA;AACA;AACA;A/CswKA;AACA;AACA;AACA;AACA;A+C5yKA2oB;AAEAvK;AACAhB;AACAP;AACA+L;AAJA;A/CkzKA;A+C/wKA5oB;A/CixKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AgD5zKA;AACA;AACA;AACA;AACA;AACA;AACA;AhD8zKA;AACA;AACA;AACA;AACA;AgD/zKA;AhDi0KA;AACA;AACA;AACA;AACA;AgDj0KA;AAAA;AhDo0KA;AgDp0KA;AhDs0KA;AgDn0KA;AACA;AACA;AACA;AACA;AACA;AhDq0KA;AgDn0KA;AhDq0KA;AgDn0KA;AACA;AACA;AACA;AACA;AACA;AACA6oB;AACA;AACA;AhDq0KA;AgDn0KA;AACAC;AACA;AACA9oB;AACA;AhDq0KA;AgDn0KA;AhDq0KA;AACA;AgDn0KA;AACA;AACA;AAjCA;AAkCA;AhDs0KA;AACA;AACA;AACA;AgDv0KA;AACA;AACA;AACA;AhDy0KA;AgDv0KA;AACAuM;AAEA;AACA;AhDw0KA;AgDt0KA;AACAwc;AACA/oB;AACA;AACAA;AACA;AACA;AACA;AhDw0KA;AACA;AACA;AgDz0KA;AAAA;AhD40KA;AgD30KA;AACA;AACAgN;AACA;AACA;AACAA;AhD60KA;AgD30KA;AhD60KA;AgD30KA;AACAgc;AACA;AhD60KA;AgD30KA;AACAnc;AACAjN;AACAkN;AACAmc;AAJA;AhDk1KA;AgD30KA;AhD60KA;AgD30KA/K;AACAre;AACA;AhD60KA;AgD30KA;AACA;AACAmN;AhD60KA;AgD30KAA;AACA;AACA;AhD60KA;AACA;AACA;AgD90KA;AhDg1KA;AgD/0KA;AACA;AhDi1KA;AgD/0KA;AACAnN;AACA;AhDi1KA;AgD/0KA;AACA;AhDi1KA;AACA;AACA;AgDj1KA;AACA;AACA;AACA;AACAG;AhDm1KA;AgDj1KA;AACA;AACA;AACA;AhDm1KA;AACA;AACA;AACA;AACA;AgDv8KAkpB;AhDy8KA;AgDv1KAlpB;AhDy1KA;AiDv9KA;AjDy9KA;AACA;AACA;AACA;AiDr9KA;AAAA;AjDw9KA;AiDx9KA;AjD09KA;AiDx9KA;AACA;AjD09KA;AiDx9KA;AACA;AACA;AAPA;AAQA;AjD29KA;AACA;AACA;AACA;AiD59KA;AACA;AjD89KA;AACA;AACA;AiD99KA;AACA;AjDg+KA;AACA;AACA;AiDh+KA;AACA;AACA;AACA;AAEAmpB;AACA;AACA;AACAC;AAEA;AACA;AACA;AACA;AjDg+KA;AACA;AACA;AiDh+KA;AACA;AjDk+KA;AACA;AACA;AACA;AACA;AiD5gLAC;AAEAjL;AACAkL;AAFA;AjDghLA;AiDz+KAtpB;AjD2+KA;AkDphLA;AlDshLA;AACA;AACA;AACA;AkD5gLA;AAAA;AlD+gLA;AkD/gLA;AlDihLA;AkD9gLA;AlDghLA;AkD9gLA;AlDghLA;AkD9gLA;AlDghLA;AkD9gLAA;AAAA;AAAA;AlDkhLA;AkDhhLAA;AACA;AACA;AACA;AACA;AlDkhLA;AkDhhLAA;AAAA;AAAA;AAjBA;AAkBA;AlDqhLA;AACA;AACA;AACA;AkDthLA;AACA;AlDwhLA;AACA;AACA;AkDxhLA;AACA;AlD0hLA;AACA;AACA;AkD1hLA;AACA;AACA;AlD4hLA;AACA;AACA;AkD5hLA;AACA;AACA;AACA;AACA;AACA;AlD8hLA;AACA;AACA;AkD9hLA;AACA;AACA;AACA;AACA;AACA;AACA;AlDgiLA;AACA;AACA;AkDhiLA;AACA;AACA;AACA;AACA;AlDkiLA;AkDhiLA;AACA;AlDkiLA;AkDhiLA;AACA;AACA;AACA;AACA;AlDkiLA;AACA;AACA;AACA;AACA;AkD5mLAupB;AAEAC;AACA5pB;AACA6pB;AACAxE;AACAyE;AALA;AADAH;AASAI;AADA;AlD+mLA;AkD/iLA3pB;AlDijLA;AmD1nLA;AnD4nLA;AACA;AACA;AACA;AmD3nLA;AAAA;AnD8nLA;AmD9nLA;AnDgoLA;AmD9nLA;AAFA;AAGA;AnDioLA;AACA;AACA;AACA;AmDloLA;AACA;AACAA;AACA4pB;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AAlBA;AAoBA;AACA;AACA;AnDooLA;AACA;AACA;AACA;AACA;AmDxqLAC;AnD0qLA;AmDxoLA9qB;AnD0oLA;AoD7qLA;ApD+qLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AoD1rLA+qB;ApD4rLA;AoDvrLA/qB;ApDyrLA;AqD/rLA;ArDisLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AqD5sLAgrB;AAAAA;AAGAC;AACAC;AACAC;AACAC;AAJA;ArDktLA;AqDzsLAprB;ArD2sLA;AsDvtLA;AtDytLA;AACA;AACA;AACA;AsD1tLA;AAAA;AtD6tLA;AsD7tLA;AtD+tLA;AsD7tLA;AAFA;AAGA;AtDguLA;AACA;AACA;AACA;AsDjuLA;AACA;AACA;AACAA;AACA8c;AACAkL;AACAqD;AACAC;AACAC;AACAC;AACAC;AACAC;AACA/f;AACAD;AAVA;AAYAigB;AACAA;AACAA;AACAC;AACAtP;AAAA;AAAA;AtDquLA;AsDjuLA;AACA;AACAqP;AACAA;AACAA;AACA;AACA;AACA;AtDmuLA;AACA;AACA;AsDnuLA;AACAA;AACAA;AACAA;AACAA;AACA;AtDquLA;AACA;AACA;AACA;AACA;AsDvuLA3rB;AtDyuLA;AuDvxLA;AvDyxLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AuDlxLA;AACA;AACA;AvDoxLA;AACA;AACA;AuDpxLA;AACA;AACA;AvDsxLA;AACA;AACA;AuDtxLA;AACA;AACA;AvDwxLA;AACA;AACA;AuDxxLA;AACA;AvD0xLA;AACA;AACA;AuD1xLA;AACA;AvD4xLA;AACA;AACA;AuD5xLA;AACA;AACA;AACA;AACA;AvD8xLA;AACA;AACA;AACA;AACA;AuD10LA6rB;AAEAC;AACAC;AAFA;AADAF;AAMAG;AACA5F;AACAW;AACA9B;AAJA;AALA4G;AAYAI;AACAC;AACAjF;AAHA;AvD+0LA;AuDhzLAjnB;AvDkzLA;AwD71LA;AxD+1LA;AACA;AACA;AACA;AwDx1LA;AAAA;AxD21LA;AwD31LA;AxD61LA;AwD11LA;AACAA;AACAmM;AACAggB;AACAC;AACAC;AACAC;AALA;AAJA;AAWA;AxD61LA;AACA;AACA;AACA;AwDp3LAC;AAAAA;AAGAvG;AACA3H;AACAD;AACAE;AAJA;AxD03LA;AwDt2LAte;AxDw2LA;AyD/3LA;AzDi4LA;AACA;AACA;AACA;AyD53LA;AAAA;AzD+3LA;AyD/3LA;AzDi4LA;AyD/3LA;AzDi4LA;AyD/3LA;AACA;AALA;AAMA;AzDk4LA;AACA;AACA;AACA;AyDn4LAwsB;AACAA;AACA;AACA;AzDq4LA;AACA;AACA;AyDr4LA;AAGA;AzDq4LA;AACA;AACA;AACA;AACA;AyDh6LAC;AAEAC;AACAC;AAFA;AADAF;AzDs6LA;AyD74LAzsB;AzD+4LA;A0Dz6LA;A1D26LA;AACA;AACA;AACA;A0Dn6LA;AAAA;A1Ds6LA;A0Dt6LA;A1Dw6LA;A0Dr6LA;AACA;A1Du6LA;A0Dr6LA;A1Du6LA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A0Dn6LA;AACA;A1Dq6LA;A0Dn6LA;AACA;AA3BA;AA4BA;A1Ds6LA;AACA;AACA;AACA;A0Dx6LA;A1D06LA;A0Dz6LA;AACA;AACA;AACA;AACA;A1D26LA;A0Dz6LA;AACA;AACA;AACA;AACA;A1D26LA;A0Dz6LA;AACA;AACA4sB;AACA;AACAA;AACA;A1D26LA;A0Dz6LA;AACAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACAC;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACAC;AACA;AACA;AACA;AACA;AACA;AAhBA;AAkBA;AACAC;AACAC;AACA;AACAzgB;AAGA;AACA;AACA;AACA;AACA;AACA;A1Dq6LA;AACA;AACA;A0Dt6LA;A1Dw6LA;A0Dv6LA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA0gB;AACA;AACA;AACA;AACA;A1Dy6LA;AACA;AACA;A0Dz6LA;AACA;AACA;AACA;AAEA;AACAjQ;AACAkQ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIAlQ;AACA;AACA;A1Du6LA;AACA;AACA;A0Dv6LA;AACA;AACA;A1Dy6LA;AACA;AACA;AACA;AACA;A0DhkMAmQ;AAEAJ;AADA;AADAI;AAKArQ;AACA8J;AACAC;AAHA;A1DqkMA;A0Dp7LA7mB;A1Ds7LA;AACA;AACA;AACA;A2DzkMA;AAAA;A3D4kMA;A2D5kMA;A3D8kMA;A2D3kMA;AACA;AACA;AALA;AAMA;A3D8kMA;AACA;AACA;AACA;A2D/kMA;AACA;A3DilMA;AACA;AACA;A2DjlMA;AACA;A3DmlMA;AACA;AACA;AACA;AACA;A2DzmMAotB;AAEAjM;AACAuF;AAFA;A3D6mMA;A2DzlMA1mB;A3D2lMA;A4DhnMA;A5DknMA;AACA;AACA;AACA;A4DhlMA;AAAA;A5DmlMA;A4DnlMA;A5DqlMA;A4DllMA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A5DqlMA;A4DnlMA;AACA;AACA;AACA;AACA;AACA;A5DqlMA;A4DnlMA;A5DqlMA;A4DnlMA;AACAA;AACA;A5DqlMA;A4DnlMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A5DqlMA;A4DnlMA;AACA;AACA;AACA;A5DqlMA;A4DnlMA;AACA;A5DqlMA;A4DnlMA;AACAA;AACAmkB;AACAkJ;AACAnJ;AACAoJ;AACAC;AACAC;AACAC;AACAC;AACAvD;AACAD;AACAQ;AACAG;AACAhB;AAbA;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A5DqlMA;A4DnlMA;AACA;AACA7pB;AACAoL;AACAC;AACAK;AACAC;AAJA;A5D0lMA;A4DnlMA;AACA;AACA;A5DqlMA;A4DnlMA;AACA;AACA;AACA;AACA;A5DqlMA;A4DnlMA;AACA;AACA;AACA;A5DqlMA;A4DnlMA;AAzGA;AA0GA;A5DslMA;AACA;AACA;AACA;A4DvlMA;AACAP;AACAC;AAFA;AAIA;A5DylMA;AACA;AACA;A4DzlMA;AACA;AACAxL;AACA;AACA;AACA;A5D2lMA;AACA;AACA;A4D5lMA;A5D8lMA;A4D7lMA;AACA;AACAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;A5DkmMA;A4DlmMA;AACA;AAAA;A5DqmMA;A4DpmMA;AACA;AACA;AACA8tB;AACA;AACA;AACA;AACA;AACAC;AACA;AAXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AACAA;AACA;A5DonMA;AACA;AACA;A4DpnMAvQ;AACA;AACAA;AACAA;AACA;AACA;A5DsnMA;AACA;AACA;A4DtnMA;AACAwQ;AACAA;AACAA;AACA;AACA;AACAC;AACAA;AACA;AACA;AACAA;AACA;AACA;AACA;AACA;A5DwnMA;AACA;AACA;A4DxnMA;AACA;AACA;AACA;AACAH;AACA;AACA;AACA;AACA;AACA;A5D0nMA;AACA;AACA;A4D1nMA;AACA;AACA;AACA;AACAI;AACA;AACA;A5D4nMA;AACA;AACA;AACA;A4D1nMA;A5D4nMA;A4D1nMA;A5D4nMA;A4D1nMA;A5D4nMA;A4D1nMA;AACA;AACAC;AACA;AACA;AACA;A5D4nMA;A4D1nMA;AACA;AACA;AACA;AACA;A5D4nMA;A4D1nMA;AACA;AACA;A5D4nMA;A4D1nMA;AACA;AACA;AACA;AACAC;AACA;AACA;AACA;AACA;AACA;AACAD;AAIA;AACA;A5DynMA;A4DtnMA;AACA;AACA;AACA;AACA;AACAA;AACAA;AACA;AACA;A5DwnMA;A4DtnMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEAE;AACA;AACAA;AACA;AACA;AACA;AACA;AAEAA;AACA;AACAA;AACA;AACA;AACA;AACA;AACAC;AACAC;AACA;AACA;AACA;AACAA;AACA;AACA;A5DsnMA;AACA;AACA;A4DvnMA;A5DynMA;A4DxnMA;A5D0nMA;A4D3nMA;AAGA;A5D2nMA;A4DznMA;AACAhQ;AACAhB;AACAiR;AAEAxR;AACAwB;AACAC;AACAgQ;AARA;A5DmoMA;A4DxnMA;AAAA;AAAA;AAIA;AACAC;AACA;AACAA;AACA;A5DynMA;A4DvnMA;AACA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACAnQ;AACAhB;AACAP;AAEAwB;AACAC;AANA;AAQA;AA3CA;A5DmqMA;A4DjqMA;AAAA;AA0CA;AACA;A5D2nMA;AACA;AACA;A4D3nMA;AACA;A5D6nMA;AACA;AACA;A4D7nMA;AACA;A5D+nMA;AACA;AACA;A4D/nMA;AACA;A5DioMA;AACA;AACA;A4DjoMA;AACA;AACA;A5DmoMA;AACA;AACA;A4DnoMA;AACA;AACA;A5DqoMA;AACA;AACA;A4DroMA;AACA;A5DuoMA;AACA;AACA;A4DvoMA;AACA;A5DyoMA;AACA;AACA;A4DzoMA;AACA;AACA;AACA;AACAtB;AACA;AACA;AACAA;AACAA;AACA;AACA;AACA;A5D2oMA;AACA;AACA;A4D5oMA;A5D8oMA;A4D7oMAwR;AAAA;AAAA;AACAA;AAAA;AAAA;AACA;A5DmpMA;AACA;AACA;A4DnpMA;AACA;AACA;AACA;AACA;AACA;A5DqpMA;A4DnpMA;AACA;AACA;AACA;AACAC;AACA;AACAA;AACA;AACAA;AACA;AACA;AACApG;AACA;AACA;AACAoG;AACA;AACA;AACA;AACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A5DqpMA;AACA;AACA;A4DrpMA;AACA;A5DupMA;AACA;AACA;A4DvpMA;AACA;A5DypMA;AACA;AACA;AACA;A4DvpMA;AACA;AACA;AACA;AACA;AACA;A5DypMA;AACA;AACA;A4DzpMA;AACA;AACA;AACA;AACA;A5D2pMA;AACA;AACA;A4D3pMA;AACA;AACA;AACA;AACA;A5D6pMA;AACA;AACA;A4D7pMA;AACA;AACA;AACA;AACA;A5D+pMA;A4D7pMA;AACA;AACA;AACA;AACA;A5D+pMA;A4D7pMA;AACA;AACA;AACA;A5D+pMA;A4D7pMA;A5D+pMA;A4D7pMA;A5D+pMA;A4D7pMA;AACA;AACA;AACAC;AACAA;AACAA;A5D+pMA;A4D7pMA;AACAC;AACAA;AACAA;AACAA;AACAA;AACA;AACA;AACApB;A5D+pMA;A4D7pMAoB;AACAA;AACAA;AACAA;AACA;AACAA;AACA;AACAA;AACA;AACAA;AACAA;AACAA;AACA;AACAA;AACA;AACAA;AACAA;AACAA;AACA;AACAA;AACAA;AACAA;AACA;AACA;AACAA;AACA;AACAA;AACA;AACAA;AACAA;AACAA;AACA;AACAA;AACAA;AACAA;AACA;AACA;AACAA;AACAA;AACAA;AACAA;AACA;AACA;AACA;AACAC;AACA;A5D+pMA;A4D7pMAD;AACAA;AACAA;AACA;A5D+pMA;A4D7pMA;AACA;AACA;A5D+pMA;A4D7pMA;A5D+pMA;A4D7pMA;AACA;A5D+pMA;AACA;AACA;A4D/pMA;AACA;AACA;AACA;AACA;A5DiqMA;A4D/pMA;AACA;AACA;AACA;AACA;A5DiqMA;A4D/pMA;AACA;AACA;AACA;A5DiqMA;A4D/pMA;A5DiqMA;A4D/pMA;A5DiqMA;A4D/pMA;AACA;AACA;AACAD;AACAA;AACAA;A5DiqMA;A4D/pMA;AACAC;AACAA;AACAA;AACAA;AACAA;AACA;AACA;AACAnB;A5DiqMA;A4D/pMAmB;AACAA;AACAA;AACAA;AACA;AACAA;AACA;AACAA;AACA;AACAA;AACAA;AACAA;AACA;AACA;AACAA;AACAA;AACAA;AACA;AACAA;AACAA;AACAA;AACA;AACA;AACAA;AACA;AACA;AACAA;AACAA;AACAA;AACA;AACAA;AACAA;AACAA;AACA;AACA;AACAA;AACAA;AACAA;AACAA;AACA;AACA;AACA;AACAE;AACA;A5DiqMA;A4D/pMAF;AACAA;AACAA;AACA;A5DiqMA;A4D/pMA;AACA;AACA;A5DiqMA;A4D/pMA;A5DiqMA;A4D/pMA;AACA;A5DiqMA;AACA;AACA;A4DjqMA;AACA;AACA;AACA;A5DmqMA;A4DjqMA;AACA;AACA;AACA;A5DmqMA;A4DjqMA;AACA;AACAG;AACAC;AACAC;AACAC;AACA;A5DmqMA;A4DjqMAliB;AACAA;AACAA;AACAA;AACA;A5DmqMA;AACA;AACA;AACA;AACA;A4D/0NAmiB;AAEAC;AACAvvB;AACAwvB;AACAC;AACAC;AACAC;AACArkB;AACAskB;AACAC;AACAhB;AACArjB;AACAC;AACAG;AACAE;AACAC;AACA+jB;AACAC;AACAxL;AACAkJ;AACAnJ;AACAoJ;AACAC;AACAC;AACAoC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAtD;A5Dg1NA;A4D92NA;AADAuC;A5Dk3NA;A4DxsMAlvB;A5D0sMA;A6Dr3NA;A7Du3NA;AACA;AACA;AACA;A6Dh3NA;AAAA;A7Dm3NA;A6Dl3NAoiB;A7Do3NA;A6Dr3NA;A7Du3NA;A6Dn3NA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A7Dq3NA;A6Dn3NA;AACA;AACA;AACA;AACA;AACA;AAlBA;AAmBA;A7Ds3NA;AACA;AACA;AACA;A6Dr5NA8N;AAEAC;AACAjmB;AACAkmB;AACA9P;AACA+P;AALA;A7D45NA;A6D/3NArwB;A7Di4NA;A8Dh6NA;A9Dk6NA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A8D36NAA;A9D66NA;A+Dh7NA;A/Dk7NA;AACA;AACA;AACA;A+Dn7NA;AAAA;A/Ds7NA;A+Dr7NAoiB;AACA;AACAA;AAHA;AAKA;A/Du7NA;AACA;AACA;AACA;A+Dx7NApiB;A/D07NA;AgEn8NA;AhEq8NA;AACA;AACA;AACA;AgEx7NA;AAAA;AhE27NA;AgE37NA;AhE67NA;AgE17NA;AACA;AAJA;AAKA;AhE67NA;AACA;AACA;AACA;AgE/7NA;AhEi8NA;AgEh8NA;AACAswB;AACAC;AACAC;AACA;AACA;AACA;AANA;AAQA;AhEk8NA;AACA;AACA;AgEn8NA;AhEq8NA;AgEp8NA;AACAF;AACAE;AACA;AACA;AAJA;AAMA;AhEs8NA;AACA;AACA;AgEt8NA;AACA;AhEw8NA;AACA;AACA;AgEx8NA;AACA;AhE08NA;AACA;AACA;AgE38NA;AhE68NA;AgE58NA;AACAF;AACAC;AACAE;AACAD;AACA;AACA;AACA;AAPA;AASA;AhE88NA;AACA;AACA;AgE98NA;AACA;AACA3jB;AACA;AACAN;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AhEg9NA;AACA;AACA;AgEh9NA;AACA;AACA;AACA;AACA;AACAyU;AACA;AACA;AACAN;AACA;AACA;AACA;AACAA;AACA;AACA;AACA;AACA;AACA;AhEk9NA;AACA;AACA;AgEl9NA;AAAA;AAAA;AAGA;AhEo9NA;AACA;AACA;AgEr9NA;AhEu9NA;AgEt9NA;AACAH;AACAA;AACA;AACA;AACAmQ;AACA;AACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAnQ;AACA;AACAA;AACAA;AACA;AACAA;AACA;AACA;AACA;AACA;AhEw9NA;AACA;AACA;AgEx9NA;AACA;AACAoQ;AACA;AACA;AACA;AhE09NA;AACA;AACA;AgE19NA;AACA;AACA;AACA;AACA;AACA;AACA;AhE49NA;AACA;AACA;AgE59NA;AACA;AhE89NA;AACA;AACA;AACA;AACA;AgE5mOAC;AAEA9R;AACA+R;AACAN;AACAO;AACA3kB;AACA4kB;AAFA;AAJA;AADAH;AAWAI;AACAC;AAFA;AhEgnOA;AgE9+NAjxB;AhEg/NA;AiE7nOA;AjE+nOA;AACA;AACA;AACA;AiE5nOA;AAAA;AjE+nOA;AiE/nOA;AjEioOA;AiE9nOA;AACA;AACA;AjEgoOA;AiE9nOA;AAPA;AAQA;AjEioOA;AACA;AACA;AACA;AiEloOA;AACA;AACA;AjEooOA;AACA;AACA;AiEpoOA;AACA;AjEsoOA;AACA;AACA;AiEvoOA;AjEyoOA;AiExoOA;AACA;AjE0oOA;AiExoOA;AACA;AACA;AACA;AjE0oOA;AACA;AACA;AiE3oOA;AjE6oOA;AiE5oOA;AACA;AjE8oOA;AiE5oOA;AACA;AjE8oOA;AiE5oOA;AACAkxB;AACAC;AACA;AjE8oOA;AiE5oOAD;AACAE;AACA;AACA;AACA;AjE8oOA;AACA;AACA;AACA;AACA;AiE/rOAC;AAEAC;AADA;AjEksOA;AiEppOAtxB;AjEspOA;AkEtsOA;AlEwsOA;AACA;AACA;AACA;AkE7rOA;AAAA;AlEgsOA;AkEhsOA;AlEksOA;AkEhsOA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AASA;AlEmsOA;AACA;AACA;AACA;AkErsOA;AAAA;AAAA;AAAA;AAAA;AlE2sOA;AkEzsOA;AACA;AACAkK;AACA;AACA;AlE2sOA;AACA;AACA;AACA;AACA;AkE5uOAqnB;AAEAC;AACArQ;AACAsQ;AACAC;AACAC;AACA/K;AACAgL;AACAC;AACAC;AATA;AlEuvOA;AkEztOA9xB;AlE2tOA;AmE3vOA;AnE6vOA;AACA;AACA;AACA;AmEzvOA;AAAA;AnE4vOA;AmE5vOA;AnE8vOA;AmE3vOA;AACA;AnE6vOA;AmE3vOA;AACA;AAPA;AAQA;AnE8vOA;AACA;AACA;AACA;AmE/vOA;AACA;AnEiwOA;AACA;AACA;AmEjwOA;AACA;AnEmwOA;AACA;AACA;AmEnwOA;AACA+xB;AACAC;AACAC;AAHA;AAKA;AnEqwOA;AACA;AACA;AmErwOA1lB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA;AACAqa;AACAA;AACA;AACA;AACA;AACA;AACA;AnEuwOA;AACA;AACA;AACA;AACA;AmEvzOAsL;AAEAR;AACA9K;AAFA;AnE2zOA;AmE9wOA5mB;AnEgxOA;AoE/zOA;ApEi0OA;AACA;AACA;AACA;AoE1zOA;AAAA;ApE6zOA;AoE7zOA;ApE+zOA;AoE5zOA;AACA;AACAkK;AACAA;AACAA;AACAA;AACAA;AACA;ApE8zOA;AoE5zOA;AACA;AACA;AACA;AACA;AACA;AAjBA;AAkBA;ApE+zOA;AACA;AACA;AACA;AoEh0OA;AACA;AACA;ApEk0OA;AACA;AACA;AoEl0OA;AACA;AACA;AACA;AACA;AACA;AACA;ApEo0OA;AACA;AACA;AoEr0OA;AAAA;AAAA;AAAA;AAAA;AAAA;ApE40OA;AoE10OA;ApE40OA;AoE10OA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ApE40OA;AoE10OAA;ApE40OA;AoEz0OA;AACA;AACA;AACA;AACA;ApE20OA;AoEz0OAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACA;ApE20OA;AACA;AACA;AACA;AACA;AoEp5OAioB;AAEAX;AACArQ;AACAiR;AACAC;AACAT;AALA;ApE25OA;AoEr1OA5xB;ApEu1OA;AqE/5OA;ArEi6OA;AACA;AACA;AACA;AqEt5OA;AAAA;ArEy5OA;AqEz5OA;ArE25OA;AqEx5OA;AACA;AACA;ArE05OA;AqEx5OAsyB;AAAA;AAAA;AACAA;AAAA;AAAA;AARA;AASA;ArE+5OA;AACA;AACA;AACA;AqEh6OA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ArEk6OA;AACA;AACA;AACA;AACA;AqEt8OAC;AAEAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AATA;ArEi9OA;AqEh7OAhzB;ArEk7OA;AsEr9OA;AtEu9OA;AACA;AACA;AACA;AsE76OA;AAAA;AtEg7OA;AsEh7OA;AtEk7OA;AsE/6OA;AtEi7OA;AsE/6OA;AACA;AACA;AACA;AtEi7OA;AsE/6OA;AACA;AtEi7OA;AsE/6OA;AACA;AACA;AACA;AtEi7OA;AsE/6OA;AACA;AACA;AACA;AtEi7OA;AsE/6OA;AACA;AACA;AACA;AACA;AtEi7OA;AsE/6OA;AACA;AACA;AACA;AtEi7OA;AsE/6OA;AACA;AACA;AACA;AAGA;AACA;AtE+6OA;AsE76OA;AACA;AACA;AtE+6OA;AsE76OA;AACA;AACA;AtE+6OA;AsE76OA;AACA;AACA;AtE+6OA;AsE76OA;AACA;AACA;AtE+6OA;AsE76OA;AACA;AACA;AACA;AACA;AtE+6OA;AsE76OA;AACA;AACA;AtE+6OA;AsE76OA;AACA;AACA;AtE+6OA;AsE76OA;AACA;AACA;AACA;AACA;AtE+6OA;AsE76OA;AACA;AACA;AACA;AACA;AACA;AACA;AArFA;AAsFA;AtEg7OA;AACA;AACA;AACA;AsEj7OA;AACA;AtEm7OA;AACA;AACA;AsEn7OA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AtEq7OA;AACA;AACA;AsEr7OA;AACA;AACA;AtEu7OA;AACA;AACA;AsEv7OA;AACA;AACA;AtEy7OA;AACA;AACA;AsEz7OA;AACA;AACA;AtE27OA;AACA;AACA;AsE37OA;AACA;AACA;AACA;AACA;AACA;AACA;AtE67OA;AACA;AACA;AsE77OA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;AtE+7OA;AACA;AACA;AsE/7OA;AACA;AtEi8OA;AACA;AACA;AsEj8OA;AACA;AtEm8OA;AACA;AACA;AsEn8OA;AACA;AtEq8OA;AACA;AACA;AACA;AACA;AACA;AsEt8OA;AACAizB;AACAC;AACAC;AACAC;AACAC;AALA;AAOA;AACA;AtEw8OA;AACA;AACA;AACA;AACA;AsEhpPAC;AAAAA;AAGApL;AACA3C;AtEipPA;AsE/oPAX;AACAY;AtEipPA;AsE/oPAC;AtEipPA;AsE/oPAC;AACAC;AATA;AAWA4N;AAZA;AAFAD;AAiBA1N;AACAC;AACAC;AACAC;AACAoC;AACAnC;AACAjB;AACAkB;AACAuN;AACAtN;AACAC;AACAG;AACA0B;AACAzB;AACAC;AACAE;AACAC;AACAC;AACAC;AACAC;AApBA;AAhBAwM;AAuCAvM;AACAC;AACAC;AAHA;AtEqpPA;AsEr/OAjnB;AtEu/OA;AuE9rPA;AvEgsPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AuE3sPAyzB;AAAAA;AAGAF;AADA;AAFAE;AAMAC;AACAC;AACAH;AACAI;AACA5L;AACApB;AACAiN;AAPA;AvEotPA;AuExsPA7zB;AvE0sPA;AwE5tPA;AxE8tPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AwEzuPA8zB;AAAAA;AAGAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAjT;AACAkT;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AApBA;AxE+vPA;AwEtuPAj1B;AxEwuPA;AyEpwPA;AzEswPA;AACA;AACA;AACA;AyEzvPA;AAAA;AzE4vPA;AyE5vPA;AzE8vPA;AyE3vPA;AACAA;AACA8c;AACA8J;AACAlb;AACAC;AACAwV;AALA;AzEmwPA;AyE3vPA;AAZA;AAaA;AzE8vPA;AACA;AACA;AACA;AyE7xPA+T;AAAAA;AAGAlH;AACAmH;AACAC;AACAC;AACAC;AACA;AACAC;AACAC;AACAC;AACAnV;AAVA;AzEyyPA;AyE7wPAtgB;AzE+wPA;A0E9yPA;A1EgzPA;AACA;AACA;AACA;A0EvyPA;AAAA;A1E0yPA;A0E1yPA;A1E4yPA;A0EzyPA;AACA;AACA;AACA;AACA;AAPA;AAQA;A1E4yPA;AACA;AACA;AACA;A0E7yPA;AACA;AACA;AACA2tB;AACAA;AACAA;AACA;AACA;A1E+yPA;AACA;AACA;A0E/yPA;AACA;A1EizPA;AACA;AACA;AACA;AACA;A0Ep1PA+H;AAAAA;AAGAC;AACAC;AACAC;AACA/U;AACAgV;AACAC;AANA;A1E41PA;A0E7zPA/1B;A1E+zPA;A2Ej2PA;A3Em2PA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A2E92PAg2B;AAAAA;AAGAL;AACAC;AACAK;AACAC;AACAC;AACAC;AACAC;AAPA;A3Eu3PA;A2E32PAr2B;A3E62PA;A4E53PA;A5E83PA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A4Ej4PA;A5Em4PA;AACA;A4Ej4PA;AACA;AACA;AACA;AACA2tB;AACAA;AACAA;AACA2I;AACA;AACA;A5Em4PA;AACA;AACA;AACA;AACA;A4E55PAC;AAAAA;AAGAC;AACAC;AACAzO;AACA0O;AAJA;A5Ek6PA;A4E74PA12B;A5E+4PA;A6Ev6PA;A7Ey6PA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A6Ep7PA22B;AAAAA;AAGAV;AACAC;AACAxP;AAHA;A7Ey7PA;A6Ej7PA1mB;A7Em7PA;A8E97PA;A9Eg8PA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A8E38PA42B;A9E68PA;A8Ex8PA52B;A9E08PA;A+Eh9PA;A/Ek9PA;AACA;AACA;AACA;A+E38PA;AAAA;A/E88PA;A+E98PA;A/Eg9PA;A+E78PA;AACA;AACA;A/E+8PA;A+E78PA;AACA62B;AACA;A/E+8PA;A+E78PAA;AACA;AACA;AAbA;AAcA;A/Eg9PA;AACA;AACA;AACA;A+Ej9PA;AACA;AACA;A/Em9PA;AACA;AACA;A+En9PA;AACA;AACA;AACA;AACA;A/Eq9PA;AACA;AACA;A+Er9PA;AACA;A/Eu9PA;AACA;AACA;AACA;AACA;A+E//PAC;AAEAxW;AACAqM;AAFA;AADAmK;AAMAC;AADA;A/EkgQA;A+Ej+PA/2B;A/Em+PA;AgF1gQA;AhF4gQA;AACA;AACA;AACA;AgFtgQA;AAAA;AhFygQA;AgFzgQA;AhF2gQA;AgFxgQA;AACA;AhF0gQA;AgFxgQA;AACAg3B;AACAA;AACAA;AACA;AACA;AACA;AhF0gQA;AgFxgQA;AACA;AhF0gQA;AgFxgQA;AhF0gQA;AgFxgQA;AACA;AACA;AACA;AAtBA;AAuBA;AhF2gQA;AACA;AACA;AACA;AgF5gQA;AACA;AACA;AAGA;AhF4gQA;AACA;AACA;AgF5gQA;AACA;AhF8gQA;AACA;AACA;AgF9gQA;AACA;AhFghQA;AACA;AACA;AgFhhQA;AACA;AAGA;AhFghQA;AACA;AACA;AACA;AACA;AgFtkQAC;AAEA3W;AACAc;AACAiU;AACAlU;AAJA;AhF4kQA;AgFzhQAnhB;AhF2hQA;AiFhlQA;AjFklQA;AACA;AACA;AACA;AiFtkQA;AAAA;AjFykQA;AiFzkQA;AjF2kQA;AiFxkQA;AACA;AjF0kQA;AiFxkQA;AACA;AACA;AjF0kQA;AiFxkQA;AACA;AACA;AACA;AACA;AjF0kQA;AiFxkQA;AACA;AACA;AACA;AACA;AACA;AACA;AAtBA;AAuBA;AjF2kQA;AACA;AACA;AACA;AiF5kQA;AACA;AjF8kQA;AACA;AACA;AiF9kQA;AACA;AjFglQA;AACA;AACA;AiFhlQA;AACA;AjFklQA;AACA;AACA;AiFllQA;AjFolQA;AiFllQA;AjFolQA;AiFllQA;AACA;AACA;AACA;AjFolQA;AiFllQA;AACA;AACA;AjFolQA;AiFllQA;AACA;AjFolQA;AiFllQA;AACA;AjFolQA;AiFllQA;AACA;AACA;AjFolQA;AACA;AACA;AiFplQA;AACA;AjFslQA;AACA;AACA;AiFtlQA;AACA;AjFwlQA;AACA;AACA;AiFxlQA;AACA;AACA;AACA;AACA;AACA;AACA;AjF0lQA;AACA;AACA;AiF1lQA;AACA;AACA;AAEA;AACA;AACA;AjF2lQA;AACA;AACA;AiF3lQA;AAEA;AACA;AACA;AjF4lQA;AACA;AACA;AiF5lQA;AACA;AACA;AACA;AjF8lQA;AACA;AACA;AACA;AACA;AiFxsQAk3B;AAEApW;AACAgV;AACAqB;AACAC;AACAC;AACA5B;AANA;AADAyB;AAUArW;AACAyW;AAFA;AjF4sQA;AiF7mQAt3B;AjF+mQA;AkFxtQA;AlF0tQA;AACA;AACA;AACA;AkF/sQA;AAAA;AlFktQA;AkFltQA;AlFotQA;AkFjtQA;AACA;AlFmtQA;AkFjtQA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AlFitQA;AkF/sQA;AACA;AACA;AACA;AlFitQA;AkF/sQA;AACA;AACA;AACA;AACA;AACA;AlFitQA;AkF/sQA;AACA;AACA;AlFitQA;AkF/sQA;AACA;AApCA;AAqCA;AlFktQA;AACA;AACA;AACA;AkFntQA;AACAu3B;AACA;AACA;AlFqtQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AkFxtQA;AAGA;AlFwtQA;AACA;AACA;AkFxtQA;AACA;AlF0tQA;AACA;AACA;AkF1tQA;AACA;AlF4tQA;AACA;AACA;AkF5tQA;AACA;AlF8tQA;AACA;AACA;AACA;AACA;AACA;AkF/tQA;AACA;AACA;AACA;AlFiuQA;AACA;AACA;AkFjuQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AlFmuQA;AACA;AACA;AACA;AACA;AkFr0QAC;AAEArD;AACAsD;AACAC;AACAC;AACAC;AACAC;AACAC;AACA5tB;AARA;AADAstB;AlFi1QA;AkFjvQAx3B;AlFmvQA;AmFp1QA;AnFs1QA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AmFp1QA;AnFs1QA;AACA;AACA;AACA;AmFx0QA;AAAA;AnF20QA;AmF30QA;AnF60QA;AmF10QA;AACA+3B;AACAA;AACAA;AACAA;AACAA;AACA;AACA;AACAA;AnF40QA;AmF10QA;AACA;AACA;AACA;AACA;AACA;AnF40QA;AmF10QA;AAAA;AAAA;AApBA;AAqBA;AnF+0QA;AACA;AACA;AACA;AmFh1QA;AACA;AACA;AnFk1QA;AACA;AACA;AmFl1QA;AACA;AACA;AACA;AACA;AnFo1QA;AACA;AACA;AmFp1QA;AACA;AACA;AACA;AACAA;AACA;AACA;AACAA;AACA;AACA;AACA;AACAA;AACA;AACA;AACA;AACAA;AACA;AAdA;AAgBA;AnFs1QA;AACA;AACA;AmFt1QA;AACA;AnFw1QA;AACA;AACA;AmFx1QA;AACA;AnF01QA;AACA;AACA;AmF11QA;AACA;AACA;AACA;AACA7a;AACA;AACA;AnF41QA;AACA;AACA;AmF51QA;AACA;AACA;AACA;AACA;AnF81QA;AACA;AACA;AmF91QA;AACA;AACA;AACA;AACA;AACA;AnFg2QA;AACA;AACA;AACA;AACA;AmFl8QA8a;AAEAC;AADA;AADAD;AAKA1X;AACAc;AACA8W;AACAC;AACAC;AACAC;AANA;AAJAL;AAaAnX;AADA;AnFq8QA;AmFj3QA7gB;AnFm3QA;AoFh+QA;ApFk+QA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AoF7+QAs4B;AAAAA;AAGAC;AACAzD;AAFA;ApFi/QA;AoF1+QA90B;ApF4+QA;AqFt/QA;ArFw/QA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AqFngRAw4B;AAAAA;AAGAC;AACAC;AACAC;AACAJ;AACAK;AACAC;AANA;ArF2gRA;AqFhgRA74B;ArFkgRA;AsFhhRA;AtFkhRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AsF7hRA84B;AAAAA;AAGAP;AACAzD;AAFA;AtFiiRA;AsF1hRA90B;AtF4hRA;AuFtiRA;AvFwiRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AuFnjRA+4B;AAAAA;AAGAjY;AACAgV;AAFA;AvFujRA;AuFhjRA91B;AvFkjRA;AwF5jRA;AxF8jRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AwFnjRA;AxFqjRA;AACA;AwFnjRA;AACA;AxFqjRA;AACA;AACA;AwFtjRA;AxFwjRA;AwFvjRA;AACA;AACAitB;AACA;AACA;AACA;AxFyjRA;AACA;AACA;AACA;AACA;AwF/lRA+L;AAAAA;AAGAC;AACAC;AACAvM;AACAwM;AACAC;AACAC;AACAC;AACAC;AACAC;AACAnsB;AACAosB;AACAC;AACAC;AACAC;AACAC;AAfA;AAFAb;AAoBAc;AADA;AxFkmRA;AwFjlRA95B;AxFmlRA;AyFxnRA;AzF0nRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AyFroRA+5B;AAAAA;AAGAC;AACAL;AAFA;AzFyoRA;AyFloRA35B;AzFooRA;A0F9oRA;A1FgpRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A0F3pRAi6B;AAAAA;AAGAC;AACAC;AAFA;A1F+pRA;A0FxpRAn6B;A1F0pRA;A2FpqRA;A3FsqRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A2FzqRA;A3F2qRA;AACA;A2FzqRA;AACA;A3F2qRA;AACA;AACA;A2F3qRA;AACA;A3F6qRA;AACA;AACA;A2F7qRA;AACA;AACA;A3F+qRA;AACA;AACA;A2F/qRA;AACA;A3FirRA;AACA;AACA;A2FjrRA;AACA;A3FmrRA;AACA;AACA;A2FnrRA;AACA;A3FqrRA;AACA;AACA;AACA;AACA;A2FttRAo6B;AAAAA;AAGAC;AACAC;AACAvT;AACA9B;AAJA;A3F4tRA;A2F/rRAjlB;A3FisRA;A4FjuRA;A5FmuRA;AACA;AACA;AACA;A4FhtRA;AAAA;A5FmtRA;A4FntRA;A5FqtRA;A4FltRA;AAHA;AAIA;A5FqtRA;AACA;AACA;AACA;A4FttRA;AACA;A5FwtRA;AACA;AACA;AACA;AACA;A4FxvRAu6B;AAAAA;AAGAC;AACAC;AACAtZ;AACA;AACAuZ;AACAC;AACAvQ;AACAC;AACAC;AACAC;AACAqQ;AACAvE;AACAwE;AAbA;AAFAN;AAkBAO;AADA;A5F2vRA;A4F9uRA96B;A5FgvRA;A6F/wRA;A7FixRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A6F5xRA+6B;AAAAA;AAGA3Z;AACA4Z;AACA/G;AACA2B;AACA;AACAO;AACAC;AACA6E;AARA;A7FsyRA;A6FzxRAj7B;A7F2xRA;A8F3yRA;A9F6yRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A8FxzRAk7B;AAAAA;AAGA;AACAC;AACAC;AACAlxB;AACAmxB;AALA;A9F+zRA;A8FrzRAr7B;A9FuzRA;A+Fp0RA;A/Fs0RA;AACA;AACA;AACA;A+FtzRA;AAAA;A/FyzRA;A+FzzRA;A/F2zRA;A+FxzRA;AACAA;AACAmkB;AACAkJ;AACAnJ;AACAoJ;AAJA;A/F+zRA;A+FxzRA;AACAgO;AACAA;AACAA;AACA;A/F0zRA;A+FxzRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A/F0zRA;A+FxzRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjCA;AAkCA;A/F2zRA;AACA;AACA;AACA;A+F5zRA;AACA;AACA;AACA;AACApxB;AACAA;AACA;AACA;AACA;AACA;AACA;AACA;A/F8zRA;AACA;AACA;A+F9zRA;AADA;AAAA;AAAA;AAAA;AAAA;A/Fs0RA;A+Fn0RA;AACA;AACA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACA;A/Fq0RA;AACA;AACA;A+Fr0RA;AACA;AACAA;AACA;AACAA;AACAA;AACAA;AACAA;AACA;AACA;A/Fu0RA;AACA;AACA;AACA;AACA;A+Fp6RAqxB;AAEAC;AACAC;AACAC;AAFA;AADA;AADAH;AAQA3U;AACA+U;AACA;AACAC;AACA;AACAC;AACAC;AACAjV;AAAA;A/Fs6RA;A+F11RA7mB;A/F41RA;AgGx7RA;AACA;AhG07RA;AgGx7RA;AhG07RA;AACA;AACA;AACA;AgG16RA;AAAA;AhG66RA;AgG76RA;AhG+6RA;AgG56RA;AACA;AhG86RA;AgG56RA;AACA;AACA;AARA;AASA;AhG+6RA;AACA;AACA;AACA;AgG96RA;AACA;AACA;AhGg7RA;AACA;AACA;AgGh7RA;AACA;AACA;AhGk7RA;AACA;AACA;AgGj7RA;AACA;AhGm7RA;AgGj7RA;AACA;AhGm7RA;AACA;AACA;AgGl7RA;AACA;AhGo7RA;AACA;AACA;AgGp7RA;AACA;AhGs7RA;AACA;AACA;AgGt7RA;AACA;AhGw7RA;AACA;AACA;AgGx7RA;AACA;AhG07RA;AACA;AACA;AgG17RA;AACA;AhG47RA;AACA;AACA;AgG57RA;AACA;AACA;AACA;AACA;AhG87RA;AACA;AACA;AgG97RA;AACA;AACA;AhGg8RA;AACA;AACA;AgGh8RA;AACA;AhGk8RA;AACA;AACA;AACA;AACA;AACA;AgGn8RA;AACA;AhGq8RA;AACA;AACA;AgGr8RA;AACA;AhGu8RA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AgG/hSA+7B;AAEAC;AACAC;AACAC;AACApvB;AACAqvB;AACAC;AACAC;AACAC;AARA;AADAP;AAaAQ;AACAC;AACAC;AAHA;AhGmiSA;AgG19RAz8B;AhG49RA;AiGrjSA;AjGujSA;AACA;AACA;AACA;AiG7iSA;AAAA;AjGgjSA;AiGhjSA;AjGkjSA;AiGhjSA;AACA;AAHA;AAIA;AjGmjSA;AACA;AACA;AACA;AiGpjSA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AjGsjSA;AACA;AACA;AiGtjSA;AACA;AACA;AACA;AACA;AAAA;AACA;AjGyjSA;AACA;AACA;AiGzjSA;AACA;AACA;AACA;AACA;AACA;AAEA;AjG0jSA;AACA;AACA;AACA;AACA;AiGvmSA08B;AAEAC;AADA;AADAD;AAKApP;AACApJ;AACA0Y;AACA;AACAC;AALA;AjG8mSA;AiGvkSA78B;AjGykSA;AkGrnSA;AlGunSA;AACA;AACA;AACA;AkGvmSA;AAAA;AlG0mSA;AkG1mSA;AlG4mSA;AkG1mSA;AACA;AACA;AlG4mSA;AkG1mSA;AACAs7B;AACAA;AACAA;AACAA;AACA;AlG4mSA;AkGzmSA;AACA;AACA;AACA;AACA;AACApe;AACAA;AACA;AACA;AACA;AlG2mSA;AkGzmSA;AACA;AACA;AACAA;AACAA;AACA+P;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA/P;AACAA;AACA+P;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA/P;AACAA;AACA;AACA;AACA;AlG+mSA;AkG7mSA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjBA;AAmBA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA;AACAA;AACA;AACA;AACA;AACAA;AACAA;AACA;AlG+mSA;AkG7mSA;AACA;AACA;AACA;AACA;AlG+mSA;AkG7mSA;AA3FA;AA4FA;AlGgnSA;AACA;AACA;AACA;AkGjnSA;AACA;AACA;AACA;AACA;AlGmnSA;AACA;AACA;AkGnnSA;AACA;AACA;AACA;AlGqnSA;AkGnnSA;AACA;AACA;AACA;AACA;AACA4f;AACA;AACA;AAEA;AACA;AACA;AACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA;AACA;AACA;AAEA;AACA;AACA;AACAA;AACA;AACA;AACA;AACA;AACA;AlGmnSA;AACA;AACA;AkGnnSA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AlGqnSA;AkGtoSA;AAoBA;AlGqnSA;AACA;AACA;AkGrnSA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AlGunSA;AACA;AACA;AkGvnSA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AlGwnSA;AACA;AACA;AkGxnSA;AACA;AlG0nSA;AACA;AACA;AkG1nSA;AACA;AlG4nSA;AACA;AACA;AACA;AACA;AkG30SAC;AAEAC;AACAC;AACAC;AACAC;AACAC;AACAC;AALA;AADA;AADAN;AAWA9G;AACAC;AACAoH;AACAC;AACAC;AALA;AlGk1SA;AkG/oSAx9B;AlGipSA;AmG/1SA;AnGi2SA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AmGz2SAA;AnG22SA;AoG/2SA;ApGi3SA;AACA;AACA;AACA;AoG52SA;AAAA;ApG+2SA;AoG/2SA;ApGi3SA;AoG/2SA;AACA+O;AACAC;AAFA;ApGo3SA;AoG/2SA;AACAssB;AACAA;AACAA;AACAA;ApGi3SA;AoG/2SA;AACA;AACA;AACA;AACA;AACA;ApGi3SA;AoG/2SA;AACA;AArBA;AAsBA;ApGk3SA;AACA;AACA;AACA;AoGn3SA;AACA;AACA;AACAmC;AACA;ApGq3SA;AoGn3SA;AACA;AACAC;AACA;AACAA;AACA;ApGq3SA;AoGn3SA;AACA;ApGq3SA;AACA;AACA;AoGr3SA;AACA;ApGu3SA;AACA;AACA;AoGv3SA;AACA;ApGy3SA;AACA;AACA;AACA;AACA;AoGh7SAC;AAEA3V;AACA4V;AAFA;AADAD;ApGs7SA;AoGh4SA39B;ApGk4SA;AqGz7SA;ArG27SA;AACA;AACA;AACA;AqGz6SA;AAAA;ArG46SA;AqG56SA;ArG86SA;AqG36SA;AACAA;AACA0L;AACAC;AAFA;ArGg7SA;AqG36SA;AACA;ArG66SA;AqG36SA;AACA;AACA;AACA;AACA;ArG66SA;AqG16SA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ArG46SA;AqG16SA;AACA;AACA;AACA;ArG46SA;AqG16SA;AACA;ArG46SA;AqG16SA;AAxCA;AAyCA;ArG66SA;AACA;AACA;AACA;AACA;AACA;AACA;AqG/6SA;AACA;ArGi7SA;AACA;AACA;AqGj7SA;AACA;ArGm7SA;AACA;AACA;AqGn7SA;AACA;AACA;AACA;AACAzB;AACAA;AACAA;AACA;AACA;AACAA;AACAA;AACAA;AACA;AACA;AACAA;AACAA;AACAA;AACA;AACA;AACAA;AACAA;AACAA;AACA;AACA;AACAA;AACAA;AACAA;AACA;AACA;AACAA;AACAA;AACAA;AACA;AA/BA;AAiCA;ArGq7SA;AACA;AACA;AqGt7SA;ArGw7SA;AqGv7SA;AACA;AACA;AACA;AACA;AACA;AACA+iB;AACA;AACA;AACA;AACA;AACA;AACA;ArGy7SA;AACA;AACA;AqGz7SA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ArG27SA;AACA;AACA;AqG37SA;AACA;ArG67SA;AACA;AACA;AqG77SA;AACA;AACA/iB;AACA;AACAA;AACAA;AACAA;AACAA;AACA;AACA;ArG+7SA;AACA;AACA;AACA;AACA;AqGplTA2zB;AAEAC;AACArC;AACAsC;ArGqlTA;AqGnlTArC;AAJA;AADA;AADAmC;AAUAG;AACAC;AACAtC;AACAnI;AACA0K;AACApC;AACAlV;AACAC;AAAA;ArGslTA;AqGp9SA7mB;ArGs9SA;AsG1mTA;AtG4mTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AsGrnTAA;AtGunTA;AuG1nTA;AvG4nTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AuGhoTA;AACA;AvGkoTA;AuGhoTA;AACA;AACAm+B;AACA;AACA;AACA;AvGkoTA;AACA;AACA;AACA;AACA;AuGrpTAC;AAEA9Q;AACApJ;AAFA;AvGypTA;AuGzoTAlkB;AvG2oTA;AwG7pTA;AxG+pTA;AACA;AACA;AACA;AwGhqTA;AAAA;AxGmqTA;AwGnqTA;AxGqqTA;AwGlqTA;AACA;AACAA;AACA;AACA;AACAA;AARA;AASA;AxGqqTA;AACA;AACA;AACA;AwGtqTAA;AxGwqTA;AyGrrTA;AzGurTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AyGlsTAq+B;AzGosTA;AyGjsTAr+B;AzGmsTA;A0GvsTA;A1GysTA;AACA;AACA;AACA;A0GpsTA;AAAA;A1GusTA;A0GvsTA;A1GysTA;A0GtsTA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;A1G4sTA;A0GntTA;AASA;A1G6sTA;AACA;AACA;AACA;A0G9sTA;AACA;AACA;AAGA;AACA;AACA;AACA;AACAs+B;AACA;AACA;AACA;AACAC;AACA;AACA;AACA;AACA;AAEA;A1G6sTA;AACA;AACA;A0G7sTA;AACA;A1G+sTA;A0G7sTA;AACA;AACA;AACAnV;AACA;AACA;AACA;AACAA;AACA;A1G+sTA;A0G7sTA;AACA;AACA;A1G+sTA;AACA;AACA;A0G/sTA;AACA;AACA;AACA;A1GitTA;AACA;AACA;A0GjtTA;AACA;A1GmtTA;AACA;AACA;A0GntTA;AACA;AACA;AACA;A1GqtTA;AACA;AACA;A0GrtTA;AACA;AACA;AACA;AACA;AACA;A1GutTA;AACA;AACA;A0GvtTA;AACA;AACA;AACA;A1GytTA;AACA;AACA;A0GztTA;AACA;AACA;A1G2tTA;AACA;AACA;A0G3tTA;AACA;AACA;A1G6tTA;AACA;AACA;AACA;AACA;A0GxzTAoV;AAEA1d;AACA2d;AAFA;AADAD;A1G8zTA;A0GruTAx+B;A1GuuTA;A2Gj0TA;A3Gm0TA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A2G90TA0+B;AAAAA;A3Gi1TA;A2G70TA1+B;A3G+0TA;A4Gp1TA;A5Gs1TA;AACA;AACA;AACA;A4G10TA;AAAA;A5G60TA;A4G70TA;A5G+0TA;A4G50TA;A5G80TA;A4G50TA;AACA;AACA;AACA;AACA;AATA;AAUA;A5G+0TA;AACA;AACA;AACA;A4Gh1TA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A5Gk1TA;AACA;AACA;A4Gl1TA;AACA;AACA;AACA;A5Go1TA;A4Gl1TA;AACA;AACA;AACA;AACA;A5Go1TA;A4Gl1TA;AACA;AACA;AACA;AACA2+B;AACAA;AACAA;AACA3+B;AAEA;AACA;AACA;AACA;A5Gm1TA;AACA;AACA;A4Gn1TA;AACA;A5Gq1TA;A4Gn1TA;AACA;AACA;AACA;A5Gq1TA;A4Gn1TA;AACA;AACA;AACA2+B;AACA;AACAA;AACA;AACA;AACA;AACA;AACA;AACA;A5Gq1TA;AACA;AACA;A4Gr1TA;AACA;AACA;AACA;A5Gu1TA;AACA;AACA;A4Gv1TA;AACA;AACA;AACA;AACA;A5Gy1TA;AACA;AACA;A4Gz1TAhR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A5G21TA;AACA;AACA;A4G31TA;AACA;AACA;AACA;AACA3tB;AACA;AACA;AACA;AACA;A5G61TA;AACA;AACA;A4G71TA;AACA;AACA;AACA;AACA;AACA;AACA;A5G+1TA;A4G71TA;AACA;AACA;AACA;AACA;AACA;AACA;A5G+1TA;AACA;AACA;AACA;AACA;A4Gl+TA4+B;AAEApE;AACAwD;AACAn+B;AACAi8B;AACAlV;AACAiY;AACAhY;AAPA;AADA+X;AAWAE;AADA;A5Gq+TA;A4G92TA9+B;A5Gg3TA;A6Gl/TA;A7Go/TA;AACA;AACA;AACA;A6G39TA;AAAA;A7G89TA;A6G99TA;A7Gg+TA;A6G79TA;AACA;A7G+9TA;A6G79TA++B;AACA;AACA;AACA;AACAl/B;AACA;AACA;AACAm/B;AAAA;AAAA;AAAA;A7Gk+TA;A6Gl+TA;AAAA;AAAA;A7Gs+TA;A6Gt+TA;AAAA;AAAA;AAAA;AAAA;A7G4+TA;A6G5+TA;AACA;AAAA;A7G++TA;A6G9+TA;AACA;AACA;AACA;AACA;AACA;AACAA;AACA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACAA;AACA;AACA;AACA;AACA;AACA;AACA;A7G8/TA;A6G5/TA;A7G8/TA;A6G5/TA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAhiB;AACA;AACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA5R;AACAC;AACA4zB;AAEAC;AALA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACAliB;AACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A7G4/TA;A6G1/TA;AACA;AACA;AACA;A7G4/TA;A6G1/TA;AACA;AACA;AACA;A7G4/TA;A6G1/TA;AACAse;AACAA;AACAA;AACAA;AACAA;AACAA;AACA;AA7GA;AA8GA;A7G6/TA;AACA;AACA;AACA;A6G7/TA;AACA;A7G+/TA;AACA;AACA;A6G//TA;AACA;AACA;AACA;AACA;A7GigUA;AACA;AACA;A6GjgUA;AACA6D;AACAA;A7GmgUA;A6GjgUA;A7GmgUA;A6GjgUA;AACA;AACAjiB;AACA;AACA;AACA;AACA;AACAkiB;AACAC;AACAA;AACA;AACAD;AACA/yB;AACA;AACA;AACA;A7GmgUA;AACA;AACA;A6GngUA;AACAizB;A7GqgUA;A6GngUA;AACA;A7GqgUA;A6GngUA;AACA;AACApiB;AACA;AACA;AACA;AACA;AACAkiB;AACAG;AACAA;AACA;AACAH;AACA/yB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A7GqgUA;AACA;AACA;A6GrgUA;AACA;AACAwU;AACAgW;AAIA5V;AANA;AAWA;AACA;AACAqe;AAEAA;AAEA;AACAA;AACAA;AACA;AACA;AACA;A7G+/TA;A6G7/TA;A7G+/TA;AACA;AACA;AACA;A6GhgUA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAxBA;AA0BA;AACA;A7GwhUA;AACA;AACA;AACA;AACA;A6G1xUAE;AAEAC;AACA9S;AACA2H;AACAoL;AACAC;AACAlK;AACAmK;AACAC;AACAC;AACAC;AACAC;AAXA;AADAR;AAeAS;AACAlJ;AACAmJ;AACAC;AACAC;AACAC;AACAC;AACA7K;AACA8K;AACApB;AAVA;A7GsyUA;A6GpjUAn/B;A7GsjUA;A8GvzUA;A9GyzUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A8Gp0UAwgC;A9Gs0UA;A8Gj0UAxgC;A9Gm0UA;A+Gz0UA;A/G20UA;AACA;AACA;AACA;A+Gp0UA;AAAA;A/Gu0UA;A+Gv0UA;A/Gy0UA;A+Gt0UA;A/Gw0UA;A+Gt0UA;A/Gw0UA;A+Gt0UAA;AACA;AACAkiB;AACAA;AACA;AACAliB;AAAA;AAAA;AAZA;AAaA;A/G20UA;AACA;AACA;AACA;A+G50UA;AACA;AACA;AACA0sB;AACA;AACA;A/G80UA;AACA;AACA;A+G90UA;AACA;AACA;AACA;AACA;A/Gg1UA;AACA;AACA;A+Gh1UA;AACA;AACA;AACA;AACA;AACA;A/Gk1UA;AACA;AACA;A+Gl1UA;AACA;AACA;AACA;AACA;AACA;A/Go1UA;AACA;AACA;A+Gp1UA;AACA;A/Gs1UA;AACA;AACA;AACA;AACA;A+G94UA+T;AAEA3U;AADA;AADA2U;AAKAC;AADA;AAJAD;A/Gs5UA;A+Gh2UAzgC;A/Gk2UA;AgHz5UA;AhH25UA;AACA;AACA;AACA;AgHx5UA;AAAA;AhH25UA;AgH35UA;AhH65UA;AgH15UA;AhH45UA;AgH15UAA;AAAA;AAAA;AACA;AANA;AAOA;AhH+5UA;AACA;AACA;AACA;AgHh6UA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AhHk6UA;AACA;AACA;AgHl6UA;AACA;AACA;AACA;AACA;AhHo6UA;AACA;AACA;AACA;AACA;AgHn8UA2gC;AAEA3a;AADA;AhHs8UA;AgHz6UAhmB;AhH26UA;AiH18UA;AjH48UA;AACA;AACA;AACA;AiHx8UA;AAAA;AjH28UA;AiH38UA;AjH68UA;AiH18UA;AACA;AACA;AACA;AANA;AAOA;AjH68UA;AACA;AACA;AACA;AiH98UA;AACA;AACA;AACA2tB;AACAA;AACAA;AACA;AACA;AjHg9UA;AACA;AACA;AiHh9UA;AACA;AjHk9UA;AACA;AACA;AACA;AACA;AiH/+UAiT;AAEA9L;AACAH;AAFA;AjHm/UA;AiHz9UA30B;AjH29UA;AkHv/UA;AlHy/UA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AkHlgVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA8uB;AACAnB;AACA;AACAkT;AACA;AACA;AACA;AACA;AACA;AlHogVA;AACA;AACA;AACA;AACA;AkHtgVA7gC;AlHwgVA;AmH5hVA;AnH8hVA;AACA;AACA;AACA;AmHvhVA;AAAA;AnH0hVA;AmH1hVA;AnH4hVA;AmHzhVA;AACA;AACA;AACA;AACA;AAPA;AAQA;AnH4hVA;AACA;AACA;AACA;AmH5hVA;AACA;AACA;AACA;AnH8hVA;AmH5hVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AnH8hVA;AmH5hVA;AACA;AACA8gC;AACAC;AACAC;AACA;AACAA;AACArT;AAEAA;AACAmT;AACA;AAAA;AACA;AAEAC;AACAD;AACAE;AACA;AACAA;AACArT;AAEAA;AACAoT;AACA;AACA;AnH4hVA;AmH1hVA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AnH6hVA;AACA;AACA;AACA;AACA;AmHpmVAE;AAEAC;AADA;AADAD;AAKAtI;AACAJ;AAFA;AnHwmVA;AmHviVAv4B;AnHyiVA;AoH/mVA;ApHinVA;AACA;AACA;AACA;AoHxmVA;AAAA;ApH2mVA;AoH3mVA;ApH6mVA;AoH1mVA;AACA;AACA;AACA;AACA;AAPA;AAQA;ApH6mVA;AACA;AACA;AACA;AoH9mVA;AACA;ApHgnVA;AoH9mVA;ApHgnVA;AoHpnVA;AAAA;AAAA;AAAA;ApHynVA;AoHlnVA;ApHonVA;AACA;AoH5nVA;AAAA;AAAA;AAAA;ApHioVA;AoHvnVA;AACA;ApHynVA;AACA;AoHznVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAH;AACAA;ApH2nVA;AoHznVAihC;AACA;AACAC;AACAD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAjhC;AACAA;ApH2nVA;AoHznVAkhC;AACA;AACAD;AACAC;AACA;AACA;ApH2nVA;AoHznVA;AACA;AACA;AACA;AACAI;AACA;AACA;AACAC;AACA;AACA;AACA;AACA;ApH2nVA;AACA;AACA;AoH3nVA;AAAA;AAAA;AAGA;ApH6nVA;AACA;AACA;AoH7nVA;AACA;AACA;AACAC;AACAxI;AACA;AACAA;AACAwI;AACA;AACAA;AACAxI;AACA;AACA;AACA;ApH+nVA;AACA;AACA;AoH/nVA;AACA;ApHioVA;AoH/nVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAyI;AACA;AACA;AACAC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA;AACA;AACA;AACAD;AACA;AACA;AACA;AACA;ApHioVA;AoH/nVA;AACA;ApHioVA;AACA;AACA;AACA;AACA;AoH/wVAE;AAEAC;AADA;AADAD;AAKA9I;AACAG;AACAF;AACAJ;AAJA;ApHqxVA;AoH7oVAv4B;ApH+oVA;AqH5xVA;ArH8xVA;AACA;AACA;AACA;AqHrxVA;AAAA;ArHwxVA;AqHxxVA;ArH0xVA;AqHtxVA;AACAA;AACAmM;AACAggB;AACAC;AACAC;AACAC;AALA;ArH8xVA;AqHtxVA;AACA;AAGA;ArHsxVA;AqHpxVA;AACA;AACA;ArHsxVA;AqHpxVA;AACA;AACA;AACA;ArHsxVA;AqHpxVA;AACA;AACA;AACA;AACA;AAhCA;AAiCA;ArHuxVA;AACA;AACA;AACA;AqHxxVA;AACA;AACA;AACA;AACAlO;AACAhB;AACAiB;AACAC;AAJA;AAMA;AACA;AACA;ArH0xVA;AACA;AACA;AqH1xVA;ArH4xVA;AqH1xVA;AACA;AACA;AACA;AACA;AACA;AACA;AACAjS;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ArH4xVA;AACA;AACA;AqH5xVA;AACA;AACA;AACA;AACA;ArH8xVA;AACA;AACA;AACA;AACA;AqHn3VAq1B;AAEA1b;AACA3H;AACAC;AACAqD;AACAvE;AACAgB;AACAujB;AAPA;ArH43VA;AqH1yVA3hC;ArH4yVA;AsHh4VA;AtHk4VA;AACA;AACA;AACA;AsHn4VA;AAAA;AtHs4VA;AsHt4VA;AtHw4VA;AsHr4VA;AACA;AtHu4VA;AsHp4VAA;AAAA;AAAA;AACA;AARA;AASA;AtHy4VA;AACA;AACA;AACA;AsH14VA;AACA;AACAguB;AAGA;AACA;AACA;AtH04VA;AACA;AACA;AsH14VA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA5Q;AACA;AACA;AtH24VA;AACA;AACA;AsH34VA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AtH64VA;AACA;AACA;AsH74VA;AACA;AACA;AACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AtH+4VA;AACA;AACA;AACA;AACA;AsHj5VApd;AtHm5VA;AuHx9VA;AvH09VA;AACA;AACA;AACA;AuHr9VA;AAAA;AvHw9VA;AuHx9VA;AvH09VA;AuHv9VA;AAHA;AAIA;AvH09VA;AACA;AACA;AACA;AuH39VA;AACA;AvH69VA;AACA;AACA;AACA;AACA;AuH/+VA4hC;AAEAxjB;AACAkQ;AACAuT;AAHA;AvHo/VA;AuHr+VA7hC;AvHu+VA;AwHx/VA;AxH0/VA;AACA;AACA;AACA;AwHr/VA;AAAA;AxHw/VA;AwHt/VA;AAFA;AxH2/VA;AwHx/VA;AACAA;AACAmhB;AACAzV;AAFA;AAIA;AxH0/VA;AwHx/VA;AACA4vB;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACA;AxH0/VA;AwHx/VA;AACA;AACA;AACA;AACA;AACA;AxH0/VA;AwHx/VA;AA7BA;AA8BA;AxH2/VA;AACA;AACA;AACA;AwH5/VA;AACA;AxH8/VA;AACA;AACA;AwH9/VA;AACA;AxHggWA;AACA;AACA;AwHhgWA;AACA;AACA;AACA;AxHkgWA;AACA;AACA;AwHlgWA;AACA;AACA;AxHogWA;AACA;AACA;AwHpgWA;AACA;AxHsgWA;AACA;AACA;AwHtgWA;AACA;AACA;AACA;AACApxB;AACAA;AACA;AACAA;AACA;AACA;AxHwgWA;AACA;AACA;AACA;AACA;AwH9kWA43B;AAEAC;AACA5gB;AACAuQ;AAHA;AxHmlWA;AwHhhWA1xB;AxHkhWA;AyHvlWA;AzHylWA;AACA;AACA;AACA;AyHtlWA;AAAA;AzHylWA;AyHzlWA;AzH2lWA;AyHzlWA;AACA;AACA;AAJA;AAKA;AzH4lWA;AACA;AACA;AACA;AyH7lWA;AACA;AzH+lWA;AACA;AACA;AyH/lWA;AACA;AACA;AzHimWA;AACA;AACA;AACA;AACA;AyHtnWAgiC;AAEAC;AADA;AzHynWA;AyHvmWAjiC;AzHymWA;A0H7nWA;A1H+nWA;AACA;AACA;AACA;A0HtnWA;AAAA;A1HynWA;A0HznWA;A1H2nWA;A0HxnWA;AACA;AACA;A1H0nWA;A0HxnWA;AACA;A1H0nWA;A0HxnWA;AACA;AACA;AAZA;AAaA;A1H2nWA;AACA;AACA;AACA;A0H3nWA;AACA;A1H6nWA;AACA;AACA;A0H7nWA;AACA;A1H+nWA;AACA;AACA;A0H/nWA;AACA;A1HioWA;AACA;AACA;A0HjoWA;AACA;A1HmoWA;AACA;AACA;A0HnoWA;AACA;A1HqoWA;AACA;AACA;A0HroWA;AACA;AAGA;A1HqoWA;AACA;AACA;A0HroWA;AACA;AACA;AACA;AACA;AACA;AACAq3B;AACAA;AACAA;AACAA;AACAA;A1HuoWA;A0HroWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A1HuoWA;AACA;AACA;A0HvoWA1J;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A1HyoWA;AACA;AACA;A0HzoWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA9tB;AAMAqiC;AACA;AACAriC;AAMA;AACA;A1HioWA;AACA;AACA;A0HjoWA;AACA;AACA;A1HmoWA;AACA;AACA;A0HnoWA;AAIA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;A1HgoWA;AACA;AACA;A0HhoWA;AACA;AACA;AACA;AACA;AACA;A1HkoWA;AACA;AACA;A0HloWA;AACA;A1HooWA;AACA;AACA;A0HpoWA;AACA;AACA;AACA;A1HsoWA;A0HpoWA;AACA;AACA;AACA;AACA;AACA;AACA2iB;A1HsoWA;A0HpoWA;AACA;AACAA;AACA;AACA;AAGA+U;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA/U;AACA;AACA;AACA0f;AACA3K;AAIA;AACA;AACA/U;AACA;AACA+U;AAIA;A1H6nWA;A0H3nWA;A1H6nWA;A0H3nWA;AACA;AACA;AACAA;A1H6nWA;A0H3nWA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAv3B;AACA;A1H4nWA;A0H1nWA;AACA;AACA;A1H4nWA;A0H1nWA;AACA;AACA;AACA;A1H4nWA;AACA;AACA;A0H5nWA;AACA;AACAmiC;AACA;AACA;AACA;A1H8nWA;AACA;AACA;A0H9nWA;AACAzgB;AACA;AACA;AACA;AACA;A1HgoWA;AACA;AACA;AACA;AACA;A0H12WA0gB;AAEAC;AACAhL;AACAvW;AAHA;AADAshB;AAOAE;AADA;AANAF;A1Ho3WA;A0H5oWApiC;A1H8oWA;A2Hv3WA;A3Hy3WA;AACA;AACA;AACA;A2H11WA;AAAA;A3H61WA;A2H71WA;A3H+1WA;A2H51WA;AACA;AACA;AACA;AACA;AACA;A3H81WA;A2H51WA;AACA;AACA;AACA;AACA;A3H81WA;A2H31WA;AACAs7B;AACAA;AACAA;AACAA;AACA;A3H61WA;A2H31WA;AACA;AACA;AACA;AACA;AACApe;AACAA;AACA;AACA;AACA;A3H61WA;A2H31WA;AACA;AACA;AACAA;AACAA;AACA+P;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA/P;AACAA;AACA+P;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA/P;AACAA;AACA;AACA;AACA;AACA;A3Hi2WA;A2H/1WA;AACA;AACA;AACA;AACA;A3Hi2WA;A2H/1WA;AACAA;AACAA;AACA;AACA;AACA;AACAA;AACAA;AACA;AACA;A3Hi2WA;A2H/1WA;A3Hi2WA;A2H/1WA;AACA;AACA;AACA;AACA;AACA;AACA;A3Hi2WA;A2Hz7WA;AA0FA;A3Hk2WA;AACA;AACA;AACA;A2Hn2WA;AACA;A3Hq2WA;AACA;AACA;A2Hr2WA;AACA;A3Hu2WA;AACA;AACA;A2Hv2WA;AACA;AACA;AACA;AACA;AAEA;A3Hw2WA;AACA;AACA;A2Hx2WA;AACA;A3H02WA;AACA;AACA;A2H12WA;AACA;A3H42WA;AACA;AACA;A2H52WA;AACA;A3H82WA;A2H52WA;AACA;AACA;AACA;AACA;AACA;AACAqlB;A3H82WA;A2H52WA;AACA;AACAA;AACA;AACA;AACAA;AACA;AACA;AAEA;AACA;A3H62WA;A2H32WA;AACA;AACA;AACA;A3H62WA;A2H12WA;AACA;AACA;AACA;AACAzF;AACA;AACA;AAEA;AACA;AACA;AACAA;AACA;AACA;AAEA;AACA;AACA;AACAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACAA;AACA;AACA;AAEA;AACA;AACA;AACAA;AACA;AACA;AAEA;AACA;AACA;AACAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA;AACA;AACA;AACA;AACA;AACA;AACA;A3Hs2WA;AACA;AACA;A2Ht2WA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A3Hw2WA;AACA;AACA;A2Hx2WA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;A3Hy2WA;AACA;AACA;A2Hx2WA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;A3H02WA;AACA;AACA;A2H12WA;AACA;A3H42WA;AACA;AACA;A2H52WA;AACA;A3H82WA;AACA;AACA;A2H92WA;AACA;A3Hg3WA;AACA;AACA;A2Hh3WA;AACA;A3Hk3WA;AACA;AACA;A2Hl3WA;AACA;AACA;AACA;AACA;A3Ho3WA;A2Hl3WA;AACA;A3Ho3WA;A2Hl3WA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArBA;AAuBA;AACA;AACA;A3Ho3WA;AACA;AACA;A2Hp3WA;AACA;A3Hs3WA;AACA;AACA;A2Ht3WA;AACA;A3Hw3WA;AACA;AACA;A2Hz3WA;A3H23WA;A2H13WA;AACA;AACA;AACA;A3H43WA;A2H13WA;AACA;AACA;AACA;AACAvgB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A3H43WA;AACA;AACA;A2H53WA;AACA;AACA;AACA;AACA;AACA;AACA8a;AACAA;AACAA;AACAA;AACAA;A3H83WA;A2H53WA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A3H83WA;A2H53WA;AACA;AACA;AACA;AAEA;A3H63WA;AACA;AACA;A2H73WA;AACA;AACA;AACA;A3H+3WA;A2H73WA;AACA;AACA;AACA;AACA;AACA;AACA7U;A3H+3WA;A2H73WA;AACA;AACAA;AACA;AACA;AAGA+U;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA/U;AACA;AACA;AACA0f;AACA3K;AAIA;AACA;AACA/U;AACA;AACA+U;AAIA;A3Hs3WA;A2Hp3WA;A3Hs3WA;A2Hp3WA;AACA;AACA;AACAA;A3Hs3WA;A2Hp3WA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAv3B;AACA;A3Hq3WA;A2Hn3WA;AACA;AACA;A3Hq3WA;A2Hn3WA;AACA;AACA;AACA;A3Hq3WA;AACA;AACA;A2Hr3WAwiC;AACAA;AACAA;AACAA;AACA;A3Hu3WA;AACA;AACA;A2Hv3WA;A3Hy3WA;A2Hv3WA;AACA;AACA;AACA;AACA;AACA;AACA;A3Hy3WA;A2Hv3WA;AACA;AACA;AACA;A3Hy3WA;AACA;AACA;AACA;AACA;A2Hh2XAC;AAEAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AAXA;AADA;AADAZ;AAiBA3M;AACAC;AACAuN;AACAC;AACA5K;AACA1C;AACAC;AACAoH;AACAC;A3Hi2XA;A2H/1XAiG;AACAC;AAZA;AAhBAhB;AA+BAiB;AADA;A3Hm2XA;A2H55WA1jC;A3H85WA;A4Hp4XA;A5Hs4XA;AACA;AACA;AACA;A4Hx2XA;AAAA;A5H22XA;A4H32XA;A5H62XA;A4H12XA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A5H42XA;A4H12XA;AACA;AACA;A5H42XA;A4Hz2XA;AACAs7B;AACAA;AACAA;AACAA;AACA;A5H22XA;A4Hz2XA;AACA;AACA;AACA;AACA;AACApe;AACAA;AACA;AACA;AACA;A5H22XA;A4Hz2XA;AACA;AACA;AACAA;AACAA;AACA+P;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA/P;AACAA;AACA+P;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA/P;AACAA;AACA;AACA;AACA;AACA;A5H+2XA;A4H72XA;AACA;AACA;AACA;AACA;A5H+2XA;A4H72XA;AACAA;AACAA;AACA;AACA;AACA;AACAA;AACAA;AACA;AACA;A5H+2XA;A4H72XA;A5H+2XA;A4H72XA;AACA;AACA;AACA;A5H+2XA;A4Hp8XA;AAwFA;A5H+2XA;AACA;AACA;AACA;A4Hh3XA;AACA;A5Hk3XA;AACA;AACA;A4Hl3XA;AACA;A5Ho3XA;AACA;AACA;A4Hp3XA;A5Hs3XA;A4Hn3XA;A5Hq3XA;A4Hn3XA;AACA;A5Hq3XA;A4Hn3XA;AACA;AACA;AACA;AACA;AACA;AACAqlB;A5Hq3XA;A4Hn3XA;AACA;AACAA;AACA;AACA;AACAA;AACA;AACA;AAEA;AACA;A5Ho3XA;A4Hl3XA;AACA;AACA;AACA;A5Ho3XA;A4Hj3XA;AACA;AACA;AACA;AACAzF;AACA;AACA;AAEA;AACA;AACA;AACAA;AACA;AACA;AAEA;AACA;AACA;AACAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACAA;AACA;AACA;AAEA;AACA;AACA;AACAA;AACA;AACA;AAEA;AACA;AACA;AACAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA;AACA;AACA;AACA;AACA;AACA;AACA;A5H62XA;AACA;AACA;A4H52XA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A5H82XA;AACA;AACA;A4H92XA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;A5H+2XA;AACA;AACA;A4H92XA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;A5Hg3XA;AACA;AACA;A4Hh3XA;AACA;A5Hk3XA;AACA;AACA;A4Hl3XA;AACA;A5Ho3XA;AACA;AACA;A4Hp3XA;AACA;A5Hs3XA;AACA;AACA;A4Ht3XA;AACA;A5Hw3XA;AACA;AACA;A4Hx3XA;AACA;AACA;AACA;AACA;A5H03XA;A4Hx3XA;AACA;A5H03XA;A4Hx3XA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArBA;AAuBA;AACA;AACA;A5H03XA;AACA;AACA;A4H13XA;AACA;A5H43XA;AACA;AACA;A4H53XA;AACA;A5H83XA;AACA;AACA;A4H/3XA;A5Hi4XA;A4Hh4XA;AACA;AACA;AACA;A5Hk4XA;A4Hh4XA;AACA;AACA;AACA;AACAvgB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A5Hk4XA;AACA;AACA;A4Hl4XA;AACA;AACA;AACA;AACA;AACA;AACA8a;AACAA;AACAA;AACAA;AACAA;A5Ho4XA;A4Hl4XA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A5Ho4XA;A4Hl4XA;AACA;AACA;AACA;AAEA;A5Hm4XA;AACA;AACA;A4Hn4XA;AACA;AACA;AACA;A5Hq4XA;A4Hn4XA;AACA;AACA;AACA;AACA;AACA;AACA7U;A5Hq4XA;A4Hn4XA;AACA;AACAA;AACA;AACA;AAGA+U;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA/U;AACA;AACA;AACA0f;AACA3K;AAIA;AACA;AACA/U;AACA;AACA+U;AAIA;A5H43XA;A4H13XA;A5H43XA;A4H13XA;AACA;AACA;AACAA;A5H43XA;A4H13XA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAv3B;AACA;A5H23XA;A4Hz3XA;AACA;AACA;A5H23XA;A4Hz3XA;AACA;AACA;AACA;A5H23XA;AACA;AACA;A4H33XA;AACAwiC;AACAA;AACA;AACA;AACAA;AACA;AACAA;AACA;AACA;AACA;AACA;AACAA;AACA;AACA;AACA;A5H63XA;AACA;AACA;A4H73XA;A5H+3XA;A4H73XA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A5H+3XA;AACA;AACA;AACA;AACA;A4Hr2YAmB;AAEAC;AACA70B;AACAC;AACA2zB;AACAkB;AACAC;AACAhB;AACAC;AACAC;AACAC;AACAC;AACAC;AAXA;AADA;AADAQ;AAiBA3b;AACA8M;AACAgB;AACAC;AACAuN;AACAC;A5Hs2YA;A4Hp2YAtN;AACAC;AACAoH;AACAC;AAXA;AAhBAoG;AA8BAD;AADA;A5Hw2YA;A4Hj6XA1jC;A5Hm6XA;A6Hx4YA;A7H04YA;AACA;AACA;AACA;A6Hv4YA;AAAA;A7H04YA;A6H14YA;A7H44YA;A6Hz4YA;AACAA;AACAoL;AACAC;AACAG;AAHA;A7H+4YA;A6Hz4YA;AACAxL;AACAoL;AACAC;AAFA;A7H84YA;A6Hz4YA;AACA;AACA;AACA;AACA;AACA;AACA;AAtBA;AAuBA;A7H44YA;AACA;AACA;AACA;A6H74YA;AACAnB;AACAA;AACA;A7H+4YA;AACA;AACA;AACA;AACA;A6Hp7YA65B;AAEA9Y;AADA;A7Hu7YA;A6Hr5YAjrB;A7Hu5YA;A8H37YA;A9H67YA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A8Hx8YAgkC;A9H08YA;A8Hr8YAhkC;A9Hu8YA;A+H78YA;A/H+8YA;AACA;AACA;AACA;A+H58YA;AAAA;A/H+8YA;A+H/8YA;A/Hi9YA;A+H98YA;AACA;AAJA;AAKA;A/Hi9YA;AACA;AACA;AACA;A+Hl9YA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA+uB;A/Ho9YA;A+Hl9YApB;AACA;A/Ho9YA;A+Hl9YAkT;AACA;AACA;AACA;AACA;AACA;A/Ho9YA;AACA;AACA;AACA;AACA;A+Hz/YAoD;AAEA1L;AADA;A/H4/YA;A+H19YAv4B;A/H49YA;AgIhgZA;AhIkgZA;AACA;AACA;AACA;AgI9/YA;AAAA;AhIigZA;AgIjgZA;AhImgZA;AgIhgZA;AACAA;AACAoL;AACAC;AAFA;AhIqgZA;AgIhgZA;AACA;AACA;AACA;AhIkgZA;AgIhgZA;AhIkgZA;AgIhgZA;AAhBA;AAiBA;AhImgZA;AACA;AACA;AACA;AgIpgZA;AACAnB;AACAA;AACA;AhIsgZA;AACA;AACA;AACA;AACA;AgItiZAg6B;AAEAjF;AACAC;AAFA;AhI0iZA;AgI7gZAl/B;AhI+gZA;AiI9iZA;AjIgjZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AiI3jZAmkC;AjI6jZA;AiIxjZAnkC;AjI0jZA;AkIhkZA;AlIkkZA;AACA;AACA;AACA;AkI9jZA;AAAA;AlIikZA;AkIjkZA;AlImkZA;AkIhkZA;AlIkkZA;AkIhkZAA;AACA;AACA;AACA;AACA;AACAA;AAAA;AAAA;AAVA;AAWA;AlIqkZA;AACA;AACA;AACA;AkItkZA;AACA;AACA;AACA0sB;AACA;AACA;AlIwkZA;AACA;AACA;AkIxkZA;AACA;AACA;AACA;AACAngB;AACA63B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AlI0kZA;AACA;AACA;AkI1kZA;AACA;AACA;AACA;AACA;AACA;AlI4kZA;AACA;AACA;AkI5kZA;AACA;AACA;AACA;AACA;AACA;AlI8kZA;AACA;AACA;AkI9kZA;AACA;AACA;AACA;AACA;AACA;AACA;AlIglZA;AACA;AACA;AACA;AACA;AkIppZAC;AAEA3D;AADA;AADA2D;AlIypZA;AkIvlZArkC;AlIylZA;AmI5pZA;AnI8pZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AmIzqZAskC;AAEAC;AACAC;AACAC;AAFA;AADA;AADAH;AAQAI;AACAC;AACAzK;AACA0K;AACAC;AACAhe;AACAie;AACA3K;AARA;AnImrZA;AmItqZAn6B;AnIwqZA;AoI7rZA;ApI+rZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AoItrZA;ApIwrZA;AACA;AoItrZA;AACA;ApIwrZA;AACA;AACA;AACA;AACA;AoIrtZA+kC;AAEAC;AACAC;AACAC;AACAC;AAHA;AADA;AADAJ;AASAK;AACAC;AACAC;AACAC;AACAC;AACAC;AACA5R;AACA6R;AACAC;AACAC;AAVA;ApIiuZA;AoI9sZA5lC;ApIgtZA;AqI5uZA;ArI8uZA;AACA;AACA;AACA;AqIvuZA;AAAA;ArI0uZA;AqI1uZA;ArI4uZA;AqIzuZA;ArI2uZA;AqIzuZA;AALA;AAMA;ArI4uZA;AACA;AACA;AACA;AqI9uZA;ArIgvZA;AqI/uZA;AACA;ArIivZA;AACA;AqI/uZA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACAuM;AACA;AACA;AACA;ArImvZA;AACA;AACA;AqInvZA;AACA;AACA;AACA;AACA;AACA;ArIqvZA;AACA;AACA;AACA;AACA;AqI7xZAs5B;AAEA/oB;AACAgpB;AACAC;AACAnd;AAJA;AADAid;ArIqyZA;AqI/vZA7lC;ArIiwZA;AsIxyZA;AACA;AACA;AACA;AACA;AtI0yZA;AsIvyZA;AtIyyZA;AsIvyZA;AtIyyZA;AACA;AACA;AACA;AsIlxZA;AAAA;AtIqxZA;AsIrxZA;AtIuxZA;AsIpxZA;AtIsxZA;AsIpxZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AtIsxZA;AsIpxZA;AAdA;AAeA;AtIuxZA;AACA;AACA;AACA;AsIzxZA;AtI2xZA;AsI1xZA;AACA;AACA;AACAke;AACA;AACA;AACA;AACA;AtI4xZA;AACA;AACA;AACA;AACA;AsIj1ZA8nB;AAEAC;AACAC;AADA;AADA;AADAF;AAOAG;AACAC;AACAvP;AACAwP;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAtmB;AACAhE;AACAuqB;AtIk1ZA;AsIh1ZAC;AAhBA;AtIm2ZA;AACA;AsItzZAC;AACAvM;AACA2L;AACAC;AACAvP;AACAwP;AACAC;AACAC;AACAS;AACAP;AACAC;AACAC;AACAC;AACAtmB;AACAhE;AACAuqB;AAdA;AAgBAI;AACAd;AACAC;AACAvP;AACAwP;AACAC;AACAC;AACAS;AACAP;AACAC;AACAC;AACAC;AACAtmB;AACAhE;AACAuqB;AAdA;AAgBAK;AACAf;AACAC;AACAvP;AACAwP;AACAC;AACAC;AACAS;AACAP;AACAC;AACAC;AACAC;AACAtmB;AACAhE;AACAuqB;AAdA;AAjCA;AtIy2ZA;AsItzZA7mC;AACAA;AACAA;AtIwzZA;AuI36ZA;AvI66ZA;AACA;AACA;AACA;AuIr5ZA;AAAA;AvIw5ZA;AuIx5ZA;AvI05ZA;AuIv5ZA;AACAmnC;AACAA;AACAA;AACAA;AACAA;AACAA;AACA;AACA;AACA;AvIy5ZA;AuIv5ZA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AvIu5ZA;AuIr5ZA;AACA;AvIu5ZA;AuIr5ZA;AACA;AvIu5ZA;AuIr5ZA;AAhCA;AAiCA;AvIw5ZA;AACA;AACA;AACA;AuIx5ZA;AACA;AACA;AACA;AACA;AACA/B;AACA;AACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AvI05ZA;AuIx5ZA;AACA;AACA;AACA;AvI05ZA;AACA;AACA;AuI15ZA;AACA;AvI45ZA;AACA;AACA;AuI55ZA;AACA;AvI85ZA;AACA;AACA;AuI95ZA;AACA;AvIg6ZA;AACA;AACA;AuIh6ZA;AACA;AvIk6ZA;AACA;AACA;AuIl6ZA;AACA;AACA;AvIo6ZA;AACA;AACA;AuIp6ZA;AACA;AvIs6ZA;AACA;AACA;AuIt6ZA;AACA;AvIw6ZA;AACA;AACA;AuIx6ZA;AACA;AACA;AACAl7B;AACA;AACA;AACAA;AACAA;AACA;AACA;AACAA;AACAA;AACA;AACA;AACA;AACAA;AACAA;AAfA;AAiBA;AACA;AvI06ZA;AACA;AACA;AuI16ZA;AACA;AACA;AACAk9B;AACA;AACA;AACAA;AACA;AACA;AACAA;AACA;AACA;AACAA;AACA;AAZA;AAcA;AACA;AACA;AvI46ZA;AACA;AACA;AuI56ZA;AACA;AACA;AACAC;AACA;AACA;AACAA;AACA;AACA;AACAA;AACA;AATA;AAWA;AACA;AACA;AvI86ZA;AACA;AACA;AuI96ZA;AACA;AvIg7ZA;AACA;AACA;AuIh7ZA;AACA;AvIk7ZA;AACA;AACA;AuIl7ZA;AACA;AACA;AACA;AvIo7ZA;AuIl7ZA;AACA;AACA;AACA;AACA;AvIo7ZA;AuIl7ZA;AACA;AACA;AACA;AACA;AACA;AACA;AACAr6B;AACA;AACAgQ;AACA;AACA;AACA;AvIo7ZA;AuIl7ZA;AvIo7ZA;AuIl7ZA;AACA;AACA;AvIo7ZA;AACA;AACA;AuIp7ZA;AACA;AACA;AACA9S;AACA;AACA;AACAA;AAMA;AACA;AACAA;AACA;AACA;AACAA;AACA;AAjBA;AAmBA;AvIi7ZA;AACA;AACA;AuIj7ZA;AACA;AACA;AACA;AACAA;AACA;AACA;AACA;AvIm7ZA;AACA;AACA;AACA;AACA;AuI5paAo9B;AAEAC;AACAC;AACAC;AACAruB;AACAI;AACAkuB;AACA98B;AANA;AADA;AADA08B;AAYAnmB;AACAb;AACAqnB;AACAvmB;AACAwmB;AACAhC;AACAiC;AACAC;AACA59B;AACA69B;AACA9R;AACAC;AAZA;AvI0qaA;AuI98ZAl2B;AvIg9ZA;AwIxraA;AxI0raA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AwIrsaAgoC;AAAAA;AAGA/T;AACAW;AAFA;AxIysaA;AwIlsaA50B;AxIosaA;AyI9saA;AzIgtaA;AACA;AACA;AACA;AyIrqaA;AAAA;AzIwqaA;AyIrqaA;AAHA;AzI2qaA;AyIvqaA;AACA;AACA;AACA;AzIyqaA;AyIvqaA;AACAioC;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACA;AACA;AACAA;AACAA;AACA;AzIyqaA;AyIvqaA;AACA;AACA;AzIyqaA;AyIvqaA;AAAA;AAAA;AA7BA;AA8BA;AzI4qaA;AACA;AACA;AACA;AyI7qaA;AACA;AzI+qaA;AACA;AACA;AyI/qaA;AACA;AzIiraA;AACA;AACA;AyIjraA;AAEA;AACA;AzIkraA;AACA;AACA;AyIlraA;AACA;AACA;AACA;AACA;AzIoraA;AACA;AACA;AyIpraA;AACA;AACA;AACA;AACA;AzIsraA;AACA;AACA;AyItraA;AACA;AzIwraA;AACA;AACA;AyIxraA;AACA;AzI0raA;AACA;AACA;AyI1raA;AACA;AzI4raA;AACA;AACA;AyI5raA;AACA;AzI8raA;AACA;AACA;AyI9raA;AACA;AzIgsaA;AACA;AACA;AyIhsaA;AACA;AzIksaA;AACA;AACA;AyIlsaA;AACA;AzIosaA;AACA;AACA;AyIpsaA;AACA;AzIssaA;AACA;AACA;AyItsaA;AACA;AzIwsaA;AACA;AACA;AyIxsaA;AACA;AzI0saA;AACA;AACA;AyI1saA;AACA;AzI4saA;AACA;AACA;AyI5saA;AACA;AzI8saA;AACA;AACA;AyI9saA;AACA;AzIgtaA;AACA;AACA;AyIhtaA;AACA;AzIktaA;AACA;AACA;AyIltaA;AzIotaA;AyIltaA;AzIotaA;AyIltaA;AACA;AACA;AACA;AzIotaA;AACA;AACA;AyIptaA;AACA;AzIstaA;AACA;AACA;AyIttaA;AACA;AzIwtaA;AACA;AACA;AyIxtaA;AACA;AACA;AACA;AACA;AACA;AzI0taA;AyIxtaA;AACA;AACA;AACA;AzI0taA;AACA;AACA;AACA;AyI3taA;AAOA;AACA;AACA;AACA;AACA;AACA/9B;AACA;AACA;AACA;AACA;AzIutaA;AACA;AACA;AyIvtaA;AACA;AzIytaA;AACA;AACA;AACA;AACA;AyIz5aAg+B;AAEAC;AACAC;AACAC;AACAC;AACAC;AACApnB;AACA8U;AACAC;AACAsS;AACAC;AACAC;AACAC;AACAC;AACAxnB;AACAymB;AACAgB;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAhR;AACAiR;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACArpB;AACAspB;AACAjC;AACAkC;AACA/B;AACAlC;AArCA;AADAsC;AAyCA4B;AACAC;AAFA;AzI65aA;AyIvwaA/pC;AzIywaA;A0Ix8aA;A1I08aA;AACA;AACA;AACA;A0I38aA;AAAA;A1I88aA;A0I98aA;A1Ig9aA;A0I98aA;AACAioC;AACAA;AACAA;AALA;AAMA;A1Ii9aA;AACA;AACA;AACA;A0Il9aAjoC;A1Io9aA;A2I99aA;A3Ig+aA;AACA;AACA;AACA;A2I/7aA;AAAA;A3Ik8aA;A2Il8aA;A3Io8aA;A2Il8aA;AACA+3B;AACAA;AACAA;AACA;AACA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACA;A3Io8aA;AACA;AACA;AACA;AACA;AACA;A2Il8aA;AACA;AACAA;A3Io8aA;A2Il8aA;AACA;AACA;AACA;AACA;AACA;AACA;A3Io8aA;A2Il8aA;AACA;AACA;AACA;AACA;AACA;A3Io8aA;A2Il8aA;AAAA;AAAA;A3Is8aA;A2Ip8aA;AAAA;AAAA;A3Iw8aA;A2It8aA;AAjDA;AAkDA;A3Iy8aA;AACA;AACA;AACA;A2I18aA;AACA;AAEA;A3I28aA;AACA;AACA;AACA;A2I38aA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;AAkBA;A3I68aA;AACA;AACA;A2I78aA;AACA;A3I+8aA;AACA;AACA;A2I/8aA;AACA;A3Ii9aA;AACA;AACA;A2Ij9aA;AACA;AACA;A3Im9aA;AACA;AACA;A2In9aA;AACA;AACA;A3Iq9aA;AACA;AACA;AACA;A2Ir9aA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;A3Ii+aA;A2Ir9aA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAaA;A3Is9aA;AACA;AACA;A2It9aA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A3Iw9aA;AACA;AACA;A2Ix9aA;AACA;AACA;AACA;AACAA;AACA;AACA;AACAA;AACA;AACA;AACA;AACAA;AACA;AACA;AACA;AACAA;AACA;AAdA;AAgBA;A3I09aA;AACA;AACA;A2I19aA;AACA;A3I49aA;AACA;AACA;A2I59aA;AACA;A3I89aA;AACA;AACA;AACA;A2I79aA;AACA;AACA;AACA7a;AACA;A3I+9aA;A2I79aAA;AACA;AACA;A3I+9aA;AACA;AACA;A2I99aA;AACA;AACA;AACA;AACA;A3Ig+aA;AACA;AACA;A2Ih+aA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A3Ik+aA;A2Ih+aA;AACA;AACA;AACA;A3Ik+aA;A2Ih+aA;AACA;A3Ik+aA;A2Ih+aA;AACA;A3Ik+aA;A2Ih+aA;AACA;AACA;AACA;AACA;AACA;AACA;A3Ik+aA;A2Ih+aA;AACA;A3Ik+aA;A2Ih+aA;AACA;AACA;AACA;A3Ik+aA;AACA;AACA;A2Il+aA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A3Im+aA;AACA;AACA;AACA;AACA;A2InvbA8sB;AAEA/R;AACArtB;AACAq/B;AACAC;AACAC;AACA/wB;AACAC;AACAC;AACAE;AACAC;AACAC;AACA8tB;AACA4C;AACAC;AACAC;AAdA;AADA;AADAN;AAoBA7oB;AACAb;AACAc;AACA8W;AACAC;AACAC;AACAC;AACAuN;AACAiC;AACAC;AAVA;AAnBAkC;AAgCAnpB;AADA;A3IsvbA;A2IvgbA7gB;A3IygbA;A4IxxbA;A5I0xbA;AACA;AACA;AACA;A4InxbA;AAAA;A5IsxbA;A4ItxbA;A5IwxbA;A4IrxbA;AAHA;AAIA;A5IwxbA;AACA;AACA;AACA;A4IzxbA;AACA;AACA0sB;AAFA;AAAA;AAAA;A5IgybA;A4I5xbA;AACA;AACA;AAEA6d;AACA;AACA;AACA7d;AACA;AACA;A5I6xbA;AACA;AACA;A4I7xbA;AACA;AACA;AACA;A5I+xbA;AACA;AACA;AACA;AACA;A4Ip0bA8d;AAEA9J;AACAriB;AACAC;AACAmsB;AAJA;AADAD;A5I40bA;A4IzybAxqC;A5I2ybA;A6I/0bA;A7Ii1bA;AACA;AACA;AACA;A6I70bA;AAAA;A7Ig1bA;A6Ih1bA;A7Ik1bA;A6I/0bA;AACA;AAJA;AAKA;A7Ik1bA;AACA;AACA;AACA;A6Ih2bA0qC;AAEAt/B;AACAC;AAFA;A7Io2bA;A6Ix1bArL;A7I01bA;A8Ix2bA;A9I02bA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A8Ir3bA2qC;AAAAA;AAGAC;AADA;A9Iw3bA;A8Il3bA5qC;A9Io3bA;A+I73bA;A/I+3bA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A+I14bA6qC;A/I44bA;A+Iv4bA7qC;A/Iy4bA;AgJ/4bA;AhJi5bA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AgJ55bA8qC;AhJ85bA;AgJz5bA9qC;AhJ25bA;AiJj6bA;AjJm6bA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AiJr6bA;AjJu6bA;AACA;AiJr6bA;AACA;AACA;AACA;AjJu6bA;AiJr6bA;AjJu6bA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AiJj8bA+qC;AAAAA;AAGAjqB;AACAkqB;AACA7Z;AACA/S;AACA6sB;AALA;AjJw8bA;AiJn7bAjrC;AjJq7bA;AkJ78bA;AlJ+8bA;AACA;AACA;AACA;AkJt8bA;AAAA;AlJy8bA;AkJz8bA;AlJ28bA;AkJz8bA;AlJ28bA;AkJz8bA;AACA;AACAA;AACA8c;AACAoP;AACAD;AACAjG;AACAklB;AACAxH;AACAyH;AACAC;AACAC;AACAC;AACA/oB;AAHA;AARA;AAcA;AACAviB;AlJ28bA;AkJz8bA;AACAurC;AAAA;AlJ48bA;AkJ58bA;AAAA;AACAxmB;AAAA;AlJg9bA;AkJh9bA;AAAAjB;AAAA;AlJo9bA;AkJp9bA;AAAA;AACA0nB;AAAA;AlJw9bA;AkJx9bA;AAAA1nB;AAAA;AlJ49bA;AkJ59bA;AAAA;AACA8gB;AAAA;AlJg+bA;AkJh+bA;AAAA9gB;AAAA;AlJo+bA;AkJp+bA;AAAA;AACA2nB;AAAA;AlJw+bA;AkJx+bA;AAAA;AACAC;AAAA;AlJ4+bA;AkJ5+bA;AAAA;AACAC;AAAA;AlJg/bA;AkJh/bA;AAAA;AACAC;AAAA;AlJo/bA;AkJp/bA;AAAA9nB;AAAA;AlJw/bA;AkJx/bA;AAAA;AARA;AAvBA;AAiCA;AlJ4/bA;AACA;AACA;AACA;AkJ7/bA;AlJ+/bA;AkJ9/bA;AACA;AACAvX;AACAA;AACAi/B;AACA;AlJggcA;AkJ9/bA;AACA;AACA;AAAA;AACA;AAAA;AlJkgcA;AkJ//bAK;AACAA;AACAA;AACA;AACA;AlJigcA;AkJ//bA;AACA;AACA;AACA3gC;AACA;AACA;AACAA;AACA;AACA;AACAA;AACA;AACAA;AACA;AACA;AACA;AACAA;AACA;AACA;AACAsgC;AlJigcA;AkJ//bAtgC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA6Z;AACA;AACA;AACA;AACA;AACA;AACA;AACAymB;AACA;AACAA;AACAj/B;AACA;AACAi/B;AACAA;AACAj/B;AACA;AACAA;AACA;AACA;AACAA;AACA;AACA;AACAi/B;AACAj/B;AACA;AACA;AlJigcA;AkJ//bA;AACA;AlJigcA;AkJ//bA;AlJigcA;AkJ//bAi/B;AACA;AACAA;AADA;AAAA;AAAA;AAAA;AlJsgcA;AkJngcA;AACAj/B;AAGAA;AACA;AACA;AlJmgcA;AkJjgcA;AlJmgcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AkJ1gcA;AlJ4gcA;AACA;AACA;AACA;AkJ9gcA;AlJghcA;AkJ/gcA;AACA;AACAu/B;AACAA;AACA;AACA;AACA;AlJihcA;AACA;AACA;AkJlhcA;AlJohcA;AkJnhcA;AACA;AACA;AACA;AlJqhcA;AACA;AACA;AkJthcA;AlJwhcA;AkJvhcA;AACA;AlJyhcA;AACA;AACA;AkJzhcAv/B;AACA;AlJ2hcA;AACA;AACA;AkJ5hcA;AlJ8hcA;AkJ7hcA;AACAu/B;AACA;AACA;AACA;AlJ+hcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AkJ7hcA;AACA;AlJ+hcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AkJlycAC;AAAAA;AAGArI;AACA5mB;AACAkvB;AACA/mB;AACA2D;AACAqjB;AANA;AlJ0ycA;AkJ5icAjsC;AlJ8icA;AmJ/ycA;AACA;AACA;AnJizcA;AmJ/ycA;AnJizcA;AACA;AACA;AACA;AmJrycA;AAAA;AnJwycA;AmJxycA;AnJ0ycA;AmJvycA;AACA;AnJyycA;AmJvycA;AACA;AACA;AARA;AASA;AnJ0ycA;AACA;AACA;AACA;AmJ3ycA;AACA;AACA;AACA;AnJ6ycA;AACA;AACA;AmJ9ycA;AnJgzcA;AmJ/ycA;AnJizcA;AmJ/ycA;AACA;AACA;AnJizcA;AmJ/ycA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AnJizcA;AACA;AACA;AmJjzcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AnJmzcA;AACA;AACA;AmJnzcA;AACA;AACA;AACA;AnJqzcA;AACA;AACA;AmJrzcA;AACA;AACA;AACA;AnJuzcA;AACA;AACA;AACA;AACA;AmJp4cAksC;AAEAC;AADA;AADAD;AAKA1R;AACA3T;AACAZ;AACAnH;AAJA;AAJAotB;AAWAE;AADA;AnJu4cA;AmJt0cApsC;AnJw0cA;AoJx5cA;ApJ05cA;AACA;AACA;AACA;AoJ14cA;AAAA;ApJ64cA;AoJ74cA;ApJ+4cA;AoJ54cA;ApJ84cA;AoJ54cA;AACAqsC;AACAA;AACAA;AACAA;AACAA;AACAA;AACA;ApJ84cA;AoJ54cAA;AACA;AACA;AACA;AACA9/B;AACA;AACA;AACA;AACA;AACA;AACA8/B;AACA;AACA;AACA;AACA;AA5BA;AA6BA;ApJ+4cA;AACA;AACA;AACA;AoJh5cA;AACA;AACA;AACA;ApJk5cA;AACA;AACA;AACA;AACA;AoJ18cAC;AAAAA;AAGAC;AACAC;AACAC;AACAC;AACArW;AACAvX;AANA;AAFAwtB;AAWA;ApJ28cA;AACA;AACA;AACA;AoJ/8cA;ApJi9cA;AoJr6cAtsC;ApJu6cA;AqJ99cA;ArJg+cA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AqJ3+cA2sC;AAAAA;AAGA;AADA;AAFAA;AAMA;AADA;ArJ8+cA;AqJx+cA3sC;ArJ0+cA;AsJt/cA;AtJw/cA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AsJngdA4sC;AAAAA;AAGAC;AACA;AACAC;AACAC;AtJogdA;AsJlgdA;AACAC;AtJogdA;AsJlgdA;AACAC;AtJogdA;AsJlgdA;AACAC;AACAC;AACAC;AAdA;AADA;AAFAR;AAqBAS;AADA;AApBAT;AAwBAU;AAGAvD;AAJA;AtJugdA;AsJ3/cA/pC","file":"qt.js","sourcesContent":[";(function(global) {\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar QmlWeb = {};\n\nglobal.QmlWeb = QmlWeb;\n\nvar objectIds = 0;\n\nvar QObject = function () {\n  function QObject(parent) {\n    _classCallCheck(this, QObject);\n\n    this.$parent = parent;\n    if (parent && parent.$tidyupList) {\n      parent.$tidyupList.push(this);\n    }\n\n    // List of things to tidy up when deleting this object.\n    this.$tidyupList = [];\n    this.$properties = {};\n    this.$signals = [];\n\n    this.objectId = objectIds++;\n  }\n\n  _createClass(QObject, [{\n    key: \"$delete\",\n    value: function $delete() {\n      if (this.$Component) {\n        this.$Component.destruction();\n      }\n\n      while (this.$tidyupList.length > 0) {\n        var item = this.$tidyupList[0];\n        if (item.$delete) {\n          // It's a QObject\n          item.$delete();\n        } else {\n          // It must be a signal\n          item.disconnect(this);\n        }\n      }\n\n      for (var i in this.$properties) {\n        var prop = this.$properties[i];\n        while (prop.$tidyupList.length > 0) {\n          prop.$tidyupList[0].disconnect(prop);\n        }\n      }\n\n      if (this.$parent && this.$parent.$tidyupList) {\n        var index = this.$parent.$tidyupList.indexOf(this);\n        this.$parent.$tidyupList.splice(index, 1);\n      }\n\n      // must do this:\n      // 1) parent will be notified and erase object from it's children.\n      // 2) DOM node will be removed.\n      this.parent = undefined;\n\n      // Disconnect any slots connected to any of our signals. Do this after\n      // clearing the parent, as that relies on parentChanged being handled.\n      for (var _i in this.$signals) {\n        this.$signals[_i].disconnect();\n      }\n    }\n\n    // must have a `destroy` method\n    // http://doc.qt.io/qt-5/qtqml-javascript-dynamicobjectcreation.html\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.$delete();\n    }\n  }, {\n    key: \"$toString\",\n    value: function $toString() {\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      return this.constructor.name + \"(\" + args.join(\", \") + \")\";\n    }\n  }]);\n\n  return QObject;\n}();\n\nQmlWeb.QObject = QObject;\n\nvar JSItemModel = function () {\n  function JSItemModel() {\n    _classCallCheck(this, JSItemModel);\n\n    this.roleNames = [];\n\n    var Signal = QmlWeb.Signal;\n    this.dataChanged = Signal.signal([{ type: \"int\", name: \"startIndex\" }, { type: \"int\", name: \"endIndex\" }]);\n    this.rowsInserted = Signal.signal([{ type: \"int\", name: \"startIndex\" }, { type: \"int\", name: \"endIndex\" }]);\n    this.rowsMoved = Signal.signal([{ type: \"int\", name: \"sourceStartIndex\" }, { type: \"int\", name: \"sourceEndIndex\" }, { type: \"int\", name: \"destinationIndex\" }]);\n    this.rowsRemoved = Signal.signal([{ type: \"int\", name: \"startIndex\" }, { type: \"int\", name: \"endIndex\" }]);\n    this.modelReset = Signal.signal();\n  }\n\n  _createClass(JSItemModel, [{\n    key: \"setRoleNames\",\n    value: function setRoleNames(names) {\n      this.roleNames = names;\n    }\n  }]);\n\n  return JSItemModel;\n}();\n\nQmlWeb.JSItemModel = JSItemModel;\n\nvar QColor = function () {\n  function QColor() {\n    _classCallCheck(this, QColor);\n\n    this.$changed = new QmlWeb.Signal();\n    this.$r = this.$g = this.$b = 0;\n    this.$a = 1;\n    var val = arguments.length <= 0 ? undefined : arguments[0];\n    if (arguments.length >= 3) {\n      this.$r = arguments.length <= 0 ? undefined : arguments[0];\n      this.$g = arguments.length <= 1 ? undefined : arguments[1];\n      this.$b = arguments.length <= 2 ? undefined : arguments[2];\n      if (arguments.length >= 4) {\n        this.$a = arguments.length <= 3 ? undefined : arguments[3];\n      }\n    } else if (val instanceof QColor) {\n      // Copy constructor\n      this.$a = val.a;\n      this.$r = val.r;\n      this.$g = val.g;\n      this.$b = val.b;\n    } else if (typeof val === \"string\") {\n      var lval = val.toLowerCase();\n      if (QColor.colormap[lval]) {\n        var rgb = QColor.colormap[lval];\n        this.$r = rgb[0] / 255;\n        this.$g = rgb[1] / 255;\n        this.$b = rgb[2] / 255;\n      } else if (lval === \"transparent\") {\n        this.$a = 0;\n      } else if (lval[0] === \"#\") {\n        var hex = lval.substr(1);\n        if (hex.length === 3) {\n          this.$r = parseInt(hex[0], 16) / 15;\n          this.$g = parseInt(hex[1], 16) / 15;\n          this.$b = parseInt(hex[2], 16) / 15;\n        } else {\n          var _rgb = hex.match(/.{2}/g).map(function (x) {\n            return parseInt(x, 16);\n          });\n          if (_rgb.length === 4) {\n            this.$a = _rgb.shift() / 255;\n          }\n          this.$r = _rgb[0] / 255;\n          this.$g = _rgb[1] / 255;\n          this.$b = _rgb[2] / 255;\n        }\n      } else {\n        throw new Error(\"Can not convert \" + val + \" to color\");\n      }\n    } else if (typeof val !== \"undefined\") {\n      throw new Error(\"Can not assign \" + (typeof val === \"undefined\" ? \"undefined\" : _typeof(val)) + \" to QColor\");\n    }\n  }\n\n  _createClass(QColor, [{\n    key: \"toString\",\n    value: function toString() {\n      if (this.$string) return this.$string;\n      var argb = [this.$a, this.$r, this.$g, this.$b].map(function (x) {\n        return (Math.round(x * 255) + 0x100).toString(16).substr(-2);\n      });\n      if (argb[0] === \"ff\") {\n        argb.shift(); // We don't need alpha if it's ff\n      }\n      this.$string = \"#\" + argb.join(\"\");\n      return \"#\" + argb.join(\"\");\n    }\n  }, {\n    key: \"$css\",\n    get: function get() {\n      if (this.$cssValue) return this.$cssValue;\n      if (this.$a === 1) {\n        this.$cssValue = this.toString();\n      } else if (this.$a === 0) {\n        this.$cssValue = \"transparent\";\n      } else {\n        var intr = Math.round(this.$r * 255);\n        var intg = Math.round(this.$g * 255);\n        var intb = Math.round(this.$b * 255);\n        this.$cssValue = \"rgba(\" + intr + \",\" + intg + \",\" + intb + \",\" + this.$a + \")\";\n      }\n      return this.$cssValue;\n    }\n  }, {\n    key: \"r\",\n    get: function get() {\n      return this.$r;\n    },\n    set: function set(r) {\n      this.$r = r;\n      this.$string = this.$cssValue = null;\n      this.$changed.execute();\n    }\n  }, {\n    key: \"g\",\n    get: function get() {\n      return this.$g;\n    },\n    set: function set(g) {\n      this.$g = g;\n      this.$string = this.$cssValue = null;\n      this.$changed.execute();\n    }\n  }, {\n    key: \"b\",\n    get: function get() {\n      return this.$b;\n    },\n    set: function set(b) {\n      this.$b = b;\n      this.$string = this.$cssValue = null;\n      this.$changed.execute();\n    }\n  }, {\n    key: \"a\",\n    get: function get() {\n      return this.$a;\n    },\n    set: function set(a) {\n      this.$a = a;\n      this.$string = this.$cssValue = null;\n      this.$changed.execute();\n    }\n  }, {\n    key: \"hsvHue\",\n    get: function get() {\n      var v = this.hsvValue;\n      var m = Math.min(this.$r, this.$g, this.$b);\n      if (v === m) return -1;\n      if (v === this.$r) return ((this.$g - this.$b) / (v - m) + 1) % 1 / 6;\n      if (v === this.$g) return ((this.$b - this.$r) / (v - m) + 2) / 6;\n      if (v === this.$b) return ((this.$r - this.$g) / (v - m) + 4) / 6;\n      throw new Error();\n    },\n    set: function set(h) {\n      var rgb = QColor.$hsv(h, this.hsvSaturation, this.hsvValue);\n      this.$r = rgb[0];\n      this.$g = rgb[1];\n      this.$b = rgb[2];\n      this.$string = this.$cssValue = null;\n      this.$changed.execute();\n    }\n  }, {\n    key: \"hsvSaturation\",\n    get: function get() {\n      var v = this.hsvValue;\n      if (v === 0) return 0;\n      return 1 - Math.min(this.$r, this.$g, this.$b) / v;\n    },\n    set: function set(s) {\n      var rgb = QColor.$hsv(this.hsvHue, s, this.hsvValue);\n      this.$r = rgb[0];\n      this.$g = rgb[1];\n      this.$b = rgb[2];\n      this.$string = this.$cssValue = null;\n      this.$changed.execute();\n    }\n  }, {\n    key: \"hsvValue\",\n    get: function get() {\n      return Math.max(this.$r, this.$g, this.$b);\n    },\n    set: function set(v) {\n      var rgb = QColor.$hsv(this.hsvHue, this.hsvSaturation, v);\n      this.$r = rgb[0];\n      this.$g = rgb[1];\n      this.$b = rgb[2];\n      this.$string = this.$cssValue = null;\n      this.$changed.execute();\n    }\n  }, {\n    key: \"hslHue\",\n    get: function get() {\n      return this.hsvHue;\n    },\n    set: function set(h) {\n      var rgb = QColor.$hsl(h, this.hslSaturation, this.hslLightness);\n      this.$r = rgb[0];\n      this.$g = rgb[1];\n      this.$b = rgb[2];\n      this.$string = this.$cssValue = null;\n      this.$changed.execute();\n    }\n  }, {\n    key: \"hslSaturation\",\n    get: function get() {\n      var max = Math.max(this.$r, this.$g, this.$b);\n      var min = Math.min(this.$r, this.$g, this.$b);\n      if (max === min) return 0;\n      return (max - min) / (1 - Math.abs(1 - max - min));\n    },\n    set: function set(s) {\n      var rgb = QColor.$hsl(this.hslHue, s, this.hslLightness);\n      this.$r = rgb[0];\n      this.$g = rgb[1];\n      this.$b = rgb[2];\n      this.$string = this.$cssValue = null;\n      this.$changed.execute();\n    }\n  }, {\n    key: \"hslLightness\",\n    get: function get() {\n      var max = Math.max(this.$r, this.$g, this.$b);\n      var min = Math.min(this.$r, this.$g, this.$b);\n      return (max + min) / 2;\n    },\n    set: function set(l) {\n      var rgb = QColor.$hsl(this.hslHue, this.hslSaturation, l);\n      this.$r = rgb[0];\n      this.$g = rgb[1];\n      this.$b = rgb[2];\n      this.$string = this.$cssValue = null;\n      this.$changed.execute();\n    }\n  }], [{\n    key: \"$hsv\",\n    value: function $hsv(h, s, v) {\n      var c = v * s;\n      var m = v - c;\n      return QColor.$hcma(h, c, m);\n    }\n  }, {\n    key: \"$hsl\",\n    value: function $hsl(h, s, l) {\n      var c = (1 - Math.abs(2 * l - 1)) * s;\n      var m = l - c / 2;\n      return QColor.$hcma(h, c, m);\n    }\n  }, {\n    key: \"$hcma\",\n    value: function $hcma(h, c, m) {\n      var hh = h > 0 ? h * 6 % 6 : 0;\n      var x = c * (1 - Math.abs(hh % 2 - 1));\n      var rgb = void 0;\n      switch (Math.floor(hh)) {\n        case 0:\n          rgb = [c, x, 0];\n          break;\n        case 1:\n          rgb = [x, c, 0];\n          break;\n        case 2:\n          rgb = [0, c, x];\n          break;\n        case 3:\n          rgb = [0, x, c];\n          break;\n        case 4:\n          rgb = [x, 0, c];\n          break;\n        case 5:\n          rgb = [c, 0, x];\n          break;\n      }\n      return rgb.map(function (y) {\n        return Math.min(1, y + m);\n      });\n    }\n  }, {\n    key: \"darker\",\n    value: function darker(baseColor) {\n      var factor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\n\n      var color = baseColor instanceof QColor ? baseColor : new QColor(baseColor);\n      var v = color.hsvValue / factor;\n      // Undocumented in Qt, but this matches the observed Qt behaviour\n      var s = color.hsvSaturation - Math.max(0, v - 1);\n      return QColor.hsva(color.hsvHue, Math.max(0, s), Math.min(1, v), color.a);\n    }\n  }, {\n    key: \"lighter\",\n    value: function lighter(baseColor) {\n      var factor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1.5;\n\n      var color = baseColor instanceof QColor ? baseColor : new QColor(baseColor);\n      var v = color.hsvValue * factor;\n      // Undocumented in Qt, but this matches the observed Qt behaviour\n      var s = color.hsvSaturation - Math.max(0, v - 1);\n      return QColor.hsva(color.hsvHue, Math.max(0, s), Math.min(1, v), color.a);\n    }\n  }, {\n    key: \"equal\",\n    value: function equal(lhs, rhs) {\n      var a = lhs instanceof QColor ? lhs : new QColor(lhs);\n      var b = rhs instanceof QColor ? rhs : new QColor(rhs);\n      return a.toString() === b.toString();\n    }\n  }]);\n\n  return QColor;\n}();\n\nQColor.rgba = function (r, g, b) {\n  var a = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n  return new QColor(r, g, b, a);\n};\n\nQColor.hsva = function (h, s, v) {\n  var a = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n  return new (Function.prototype.bind.apply(QColor, [null].concat(_toConsumableArray(QColor.$hsv(h, s, v)), [a])))();\n};\n\nQColor.hsla = function (h, s, l) {\n  var a = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n  return new (Function.prototype.bind.apply(QColor, [null].concat(_toConsumableArray(QColor.$hsl(h, s, l)), [a])))();\n};\n\nQColor.colormap = { // https://www.w3.org/TR/SVG/types.html#ColorKeywords\n  aliceblue: [240, 248, 255],\n  antiquewhite: [250, 235, 215],\n  aqua: [0, 255, 255],\n  aquamarine: [127, 255, 212],\n  azure: [240, 255, 255],\n  beige: [245, 245, 220],\n  bisque: [255, 228, 196],\n  black: [0, 0, 0],\n  blanchedalmond: [255, 235, 205],\n  blue: [0, 0, 255],\n  blueviolet: [138, 43, 226],\n  brown: [165, 42, 42],\n  burlywood: [222, 184, 135],\n  cadetblue: [95, 158, 160],\n  chartreuse: [127, 255, 0],\n  chocolate: [210, 105, 30],\n  coral: [255, 127, 80],\n  cornflowerblue: [100, 149, 237],\n  cornsilk: [255, 248, 220],\n  crimson: [220, 20, 60],\n  cyan: [0, 255, 255],\n  darkblue: [0, 0, 139],\n  darkcyan: [0, 139, 139],\n  darkgoldenrod: [184, 134, 11],\n  darkgray: [169, 169, 169],\n  darkgreen: [0, 100, 0],\n  darkgrey: [169, 169, 169],\n  darkkhaki: [189, 183, 107],\n  darkmagenta: [139, 0, 139],\n  darkolivegreen: [85, 107, 47],\n  darkorange: [255, 140, 0],\n  darkorchid: [153, 50, 204],\n  darkred: [139, 0, 0],\n  darksalmon: [233, 150, 122],\n  darkseagreen: [143, 188, 143],\n  darkslateblue: [72, 61, 139],\n  darkslategray: [47, 79, 79],\n  darkslategrey: [47, 79, 79],\n  darkturquoise: [0, 206, 209],\n  darkviolet: [148, 0, 211],\n  deeppink: [255, 20, 147],\n  deepskyblue: [0, 191, 255],\n  dimgray: [105, 105, 105],\n  dimgrey: [105, 105, 105],\n  dodgerblue: [30, 144, 255],\n  firebrick: [178, 34, 34],\n  floralwhite: [255, 250, 240],\n  forestgreen: [34, 139, 34],\n  fuchsia: [255, 0, 255],\n  gainsboro: [220, 220, 220],\n  ghostwhite: [248, 248, 255],\n  gold: [255, 215, 0],\n  goldenrod: [218, 165, 32],\n  gray: [128, 128, 128],\n  grey: [128, 128, 128],\n  green: [0, 128, 0],\n  greenyellow: [173, 255, 47],\n  honeydew: [240, 255, 240],\n  hotpink: [255, 105, 180],\n  indianred: [205, 92, 92],\n  indigo: [75, 0, 130],\n  ivory: [255, 255, 240],\n  khaki: [240, 230, 140],\n  lavender: [230, 230, 250],\n  lavenderblush: [255, 240, 245],\n  lawngreen: [124, 252, 0],\n  lemonchiffon: [255, 250, 205],\n  lightblue: [173, 216, 230],\n  lightcoral: [240, 128, 128],\n  lightcyan: [224, 255, 255],\n  lightgoldenrodyellow: [250, 250, 210],\n  lightgray: [211, 211, 211],\n  lightgreen: [144, 238, 144],\n  lightgrey: [211, 211, 211],\n  lightpink: [255, 182, 193],\n  lightsalmon: [255, 160, 122],\n  lightseagreen: [32, 178, 170],\n  lightskyblue: [135, 206, 250],\n  lightslategray: [119, 136, 153],\n  lightslategrey: [119, 136, 153],\n  lightsteelblue: [176, 196, 222],\n  lightyellow: [255, 255, 224],\n  lime: [0, 255, 0],\n  limegreen: [50, 205, 50],\n  linen: [250, 240, 230],\n  magenta: [255, 0, 255],\n  maroon: [128, 0, 0],\n  mediumaquamarine: [102, 205, 170],\n  mediumblue: [0, 0, 205],\n  mediumorchid: [186, 85, 211],\n  mediumpurple: [147, 112, 219],\n  mediumseagreen: [60, 179, 113],\n  mediumslateblue: [123, 104, 238],\n  mediumspringgreen: [0, 250, 154],\n  mediumturquoise: [72, 209, 204],\n  mediumvioletred: [199, 21, 133],\n  midnightblue: [25, 25, 112],\n  mintcream: [245, 255, 250],\n  mistyrose: [255, 228, 225],\n  moccasin: [255, 228, 181],\n  navajowhite: [255, 222, 173],\n  navy: [0, 0, 128],\n  oldlace: [253, 245, 230],\n  olive: [128, 128, 0],\n  olivedrab: [107, 142, 35],\n  orange: [255, 165, 0],\n  orangered: [255, 69, 0],\n  orchid: [218, 112, 214],\n  palegoldenrod: [238, 232, 170],\n  palegreen: [152, 251, 152],\n  paleturquoise: [175, 238, 238],\n  palevioletred: [219, 112, 147],\n  papayawhip: [255, 239, 213],\n  peachpuff: [255, 218, 185],\n  peru: [205, 133, 63],\n  pink: [255, 192, 203],\n  plum: [221, 160, 221],\n  powderblue: [176, 224, 230],\n  purple: [128, 0, 128],\n  red: [255, 0, 0],\n  rosybrown: [188, 143, 143],\n  royalblue: [65, 105, 225],\n  saddlebrown: [139, 69, 19],\n  salmon: [250, 128, 114],\n  sandybrown: [244, 164, 96],\n  seagreen: [46, 139, 87],\n  seashell: [255, 245, 238],\n  sienna: [160, 82, 45],\n  silver: [192, 192, 192],\n  skyblue: [135, 206, 235],\n  slateblue: [106, 90, 205],\n  slategray: [112, 128, 144],\n  slategrey: [112, 128, 144],\n  snow: [255, 250, 250],\n  springgreen: [0, 255, 127],\n  steelblue: [70, 130, 180],\n  tan: [210, 180, 140],\n  teal: [0, 128, 128],\n  thistle: [216, 191, 216],\n  tomato: [255, 99, 71],\n  turquoise: [64, 224, 208],\n  violet: [238, 130, 238],\n  wheat: [245, 222, 179],\n  white: [255, 255, 255],\n  whitesmoke: [245, 245, 245],\n  yellow: [255, 255, 0],\n  yellowgreen: [154, 205, 50]\n};\nQColor.nonNullableType = true;\nQColor.requireConstructor = true;\n\nQmlWeb.QColor = QColor;\n\nvar QFont = function (_QmlWeb$QObject) {\n  _inherits(QFont, _QmlWeb$QObject);\n\n  function QFont(parent) {\n    _classCallCheck(this, QFont);\n\n    var _this = _possibleConstructorReturn(this, (QFont.__proto__ || Object.getPrototypeOf(QFont)).call(this, parent));\n\n    _this.Font = QFont.Font;\n\n    var Font = _this.Font;\n\n    QmlWeb.createProperties(_this, {\n      bold: \"bool\",\n      capitalization: { type: \"enum\", initialValue: Font.MixedCase },\n      family: { type: \"string\", initialValue: \"sans-serif\" },\n      italic: \"bool\",\n      letterSpacing: \"real\",\n      pixelSize: { type: \"int\", initialValue: 13 },\n      pointSize: { type: \"real\", initialValue: 10 },\n      strikeout: \"bool\",\n      underline: \"bool\",\n      weight: { type: \"enum\", initialValue: Font.Normal },\n      wordSpacing: \"real\"\n    });\n\n    _this.$sizeLock = false;\n\n    _this.boldChanged.connect(_this, _this.$onBoldChanged);\n    _this.capitalizationChanged.connect(_this, _this.$onCapitalizationChanged);\n    _this.familyChanged.connect(_this, _this.$onFamilyChanged);\n    _this.italicChanged.connect(_this, _this.$onItalicChanged);\n    _this.letterSpacingChanged.connect(_this, _this.$onLetterSpacingChanged);\n    _this.pixelSizeChanged.connect(_this, _this.$onPixelSizeChanged);\n    _this.pointSizeChanged.connect(_this, _this.$onPointSizeChanged);\n    _this.strikeoutChanged.connect(_this, _this.$onStrikeoutChanged);\n    _this.underlineChanged.connect(_this, _this.$onUnderlineChanged);\n    _this.weightChanged.connect(_this, _this.$onWidthChanged);\n    _this.wordSpacingChanged.connect(_this, _this.$onWordSpacingChanged);\n    return _this;\n  }\n\n  _createClass(QFont, [{\n    key: \"$onBoldChanged\",\n    value: function $onBoldChanged(newVal) {\n      var Font = this.Font;\n      this.weight = newVal ? Font.Bold : Font.Normal;\n    }\n  }, {\n    key: \"$onCapitalizationChanged\",\n    value: function $onCapitalizationChanged(newVal) {\n      var style = this.$parent.dom.firstChild.style;\n      style.fontVariant = newVal === this.Font.SmallCaps ? \"small-caps\" : \"none\";\n      style.textTransform = this.$capitalizationToTextTransform(newVal);\n    }\n  }, {\n    key: \"$onFamilyChanged\",\n    value: function $onFamilyChanged(newVal) {\n      var style = this.$parent.dom.firstChild.style;\n      style.fontFamily = newVal;\n    }\n  }, {\n    key: \"$onItalicChanged\",\n    value: function $onItalicChanged(newVal) {\n      var style = this.$parent.dom.firstChild.style;\n      style.fontStyle = newVal ? \"italic\" : \"normal\";\n    }\n  }, {\n    key: \"$onLetterSpacingChanged\",\n    value: function $onLetterSpacingChanged(newVal) {\n      var style = this.$parent.dom.firstChild.style;\n      style.letterSpacing = newVal !== undefined ? newVal + \"px\" : \"\";\n    }\n  }, {\n    key: \"$onPixelSizeChanged\",\n    value: function $onPixelSizeChanged(newVal) {\n      if (!this.$sizeLock) {\n        this.pointSize = newVal * 0.75;\n      }\n      var val = newVal + \"px\";\n      this.$parent.dom.style.fontSize = val;\n      this.$parent.dom.firstChild.style.fontSize = val;\n    }\n  }, {\n    key: \"$onPointSizeChanged\",\n    value: function $onPointSizeChanged(newVal) {\n      this.$sizeLock = true;\n      this.pixelSize = Math.round(newVal / 0.75);\n      this.$sizeLock = false;\n    }\n  }, {\n    key: \"$onStrikeoutChanged\",\n    value: function $onStrikeoutChanged(newVal) {\n      var style = this.$parent.dom.firstChild.style;\n      style.textDecoration = newVal ? \"line-through\" : this.$parent.font.underline ? \"underline\" : \"none\";\n    }\n  }, {\n    key: \"$onUnderlineChanged\",\n    value: function $onUnderlineChanged(newVal) {\n      var style = this.$parent.dom.firstChild.style;\n      style.textDecoration = this.$parent.font.strikeout ? \"line-through\" : newVal ? \"underline\" : \"none\";\n    }\n  }, {\n    key: \"$onWidthChanged\",\n    value: function $onWidthChanged(newVal) {\n      var style = this.$parent.dom.firstChild.style;\n      style.fontWeight = this.$weightToCss(newVal);\n    }\n  }, {\n    key: \"$onWordSpacingChanged\",\n    value: function $onWordSpacingChanged(newVal) {\n      var style = this.$parent.dom.firstChild.style;\n      style.wordSpacing = newVal !== undefined ? newVal + \"px\" : \"\";\n    }\n  }, {\n    key: \"$weightToCss\",\n    value: function $weightToCss(weight) {\n      var Font = this.Font;\n      switch (weight) {\n        case Font.Thin:\n          return \"100\";\n        case Font.ExtraLight:\n          return \"200\";\n        case Font.Light:\n          return \"300\";\n        case Font.Normal:\n          return \"400\";\n        case Font.Medium:\n          return \"500\";\n        case Font.DemiBold:\n          return \"600\";\n        case Font.Bold:\n          return \"700\";\n        case Font.ExtraBold:\n          return \"800\";\n        case Font.Black:\n          return \"900\";\n      }\n      return \"normal\";\n    }\n  }, {\n    key: \"$capitalizationToTextTransform\",\n    value: function $capitalizationToTextTransform(capitalization) {\n      var Font = this.Font;\n      switch (capitalization) {\n        case Font.AllUppercase:\n          return \"uppercase\";\n        case Font.AllLowercase:\n          return \"lowercase\";\n        case Font.Capitalize:\n          return \"capitalize\";\n      }\n      return \"none\";\n    }\n  }]);\n\n  return QFont;\n}(QmlWeb.QObject);\n\nQFont.Font = {\n  // Capitalization\n  MixedCase: 0,\n  AllUppercase: 1,\n  AllLowercase: 2,\n  SmallCaps: 3,\n  Capitalize: 4,\n  // Weight\n  Thin: 0,\n  ExtraLight: 12,\n  Light: 25,\n  Normal: 50,\n  Medium: 57,\n  DemiBold: 63,\n  Bold: 75,\n  ExtraBold: 81,\n  Black: 87\n};\nQFont.requireParent = true;\n\n\nQmlWeb.QFont = QFont;\nglobal.Font = QFont.Font; // HACK\n\nvar QMatrix4x4 = function (_QmlWeb$QObject2) {\n  _inherits(QMatrix4x4, _QmlWeb$QObject2);\n\n  function QMatrix4x4() {\n    _classCallCheck(this, QMatrix4x4);\n\n    var _this2 = _possibleConstructorReturn(this, (QMatrix4x4.__proto__ || Object.getPrototypeOf(QMatrix4x4)).call(this));\n\n    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    var data = args;\n    if (args.length === 0) {\n      data = [];\n      for (var row = 1; row <= 4; row++) {\n        for (var col = 1; col <= 4; col++) {\n          data.push(col === row ? 1 : 0);\n        }\n      }\n    } else if (args.length === 1 && args[0] instanceof QMatrix4x4) {\n      data = [];\n      for (var _row = 1; _row <= 4; _row++) {\n        for (var _col = 1; _col <= 4; _col++) {\n          var name = \"m\" + _row + _col;\n          data.push(args[0][name]);\n        }\n      }\n    } else if (args.length !== 16) {\n      throw new Error(\"Invalid arguments\");\n    }\n    for (var _row2 = 1; _row2 <= 4; _row2++) {\n      for (var _col2 = 1; _col2 <= 4; _col2++) {\n        var _name = \"m\" + _row2 + _col2;\n        var value = data[4 * (_row2 - 1) + _col2 - 1];\n        QmlWeb.createProperty(\"real\", _this2, _name, { initialValue: value });\n      }\n    }\n    return _this2;\n  }\n\n  _createClass(QMatrix4x4, [{\n    key: \"toString\",\n    value: function toString() {\n      return _get(QMatrix4x4.prototype.__proto__ || Object.getPrototypeOf(QMatrix4x4.prototype), \"$toString\", this).call(this, this.m11, this.m12, this.m13, this.m14, this.m21, this.m22, this.m23, this.m24, this.m31, this.m32, this.m33, this.m34, this.m41, this.m42, this.m43, this.m44);\n    }\n  }, {\n    key: \"times\",\n    value: function times(a) {\n      if (a instanceof QmlWeb.QMatrix4x4) {\n        var t = this;\n        return new QmlWeb.QMatrix4x4(t.m11 * a.m11 + t.m12 * a.m21 + t.m13 * a.m31 + t.m14 * a.m41, t.m11 * a.m12 + t.m12 * a.m22 + t.m13 * a.m32 + t.m14 * a.m42, t.m11 * a.m13 + t.m12 * a.m23 + t.m13 * a.m33 + t.m14 * a.m43, t.m11 * a.m14 + t.m12 * a.m24 + t.m13 * a.m34 + t.m14 * a.m44, t.m21 * a.m11 + t.m22 * a.m21 + t.m23 * a.m31 + t.m24 * a.m41, t.m21 * a.m12 + t.m22 * a.m22 + t.m23 * a.m32 + t.m24 * a.m42, t.m21 * a.m13 + t.m22 * a.m23 + t.m23 * a.m33 + t.m24 * a.m43, t.m21 * a.m14 + t.m22 * a.m24 + t.m23 * a.m34 + t.m24 * a.m44, t.m31 * a.m11 + t.m32 * a.m21 + t.m33 * a.m31 + t.m34 * a.m41, t.m31 * a.m12 + t.m32 * a.m22 + t.m33 * a.m32 + t.m34 * a.m42, t.m31 * a.m13 + t.m32 * a.m23 + t.m33 * a.m33 + t.m34 * a.m43, t.m31 * a.m14 + t.m32 * a.m24 + t.m33 * a.m34 + t.m34 * a.m44, t.m41 * a.m11 + t.m42 * a.m21 + t.m43 * a.m31 + t.m44 * a.m41, t.m41 * a.m12 + t.m42 * a.m22 + t.m43 * a.m32 + t.m44 * a.m42, t.m41 * a.m13 + t.m42 * a.m23 + t.m43 * a.m33 + t.m44 * a.m43, t.m41 * a.m14 + t.m42 * a.m24 + t.m43 * a.m34 + t.m44 * a.m44);\n      }\n      if (a instanceof QmlWeb.QVector4D) {\n        var _t = this;\n        return new QmlWeb.QVector4D(_t.m11 * a.x + _t.m12 * a.y + _t.m13 * a.z + _t.m14 * a.w, _t.m21 * a.x + _t.m22 * a.y + _t.m23 * a.z + _t.m24 * a.w, _t.m31 * a.x + _t.m32 * a.y + _t.m33 * a.z + _t.m34 * a.w, _t.m41 * a.x + _t.m42 * a.y + _t.m43 * a.z + _t.m44 * a.w);\n      }\n      if (a instanceof QmlWeb.QVector3D) {\n        var v = this.times(new QmlWeb.QVector4D(a.x, a.y, a.z, 1));\n        return new QmlWeb.QVector3D(v.x / v.w, v.y / v.w, v.z / v.w);\n      }\n      return new QMatrix4x4(this.m11 * a, this.m12 * a, this.m13 * a, this.m14 * a, this.m21 * a, this.m22 * a, this.m23 * a, this.m24 * a, this.m31 * a, this.m32 * a, this.m33 * a, this.m34 * a, this.m41 * a, this.m42 * a, this.m43 * a, this.m44 * a);\n    }\n  }, {\n    key: \"plus\",\n    value: function plus(other) {\n      var a = other instanceof QMatrix4x4 ? other : new QMatrix4x4();\n      return new QMatrix4x4(this.m11 + a.m11, this.m12 + a.m12, this.m13 + a.m13, this.m14 + a.m14, this.m21 + a.m21, this.m22 + a.m22, this.m23 + a.m23, this.m24 + a.m24, this.m31 + a.m31, this.m32 + a.m32, this.m33 + a.m33, this.m34 + a.m34, this.m41 + a.m41, this.m42 + a.m42, this.m43 + a.m43, this.m44 + a.m44);\n    }\n  }, {\n    key: \"minus\",\n    value: function minus(other) {\n      var a = other instanceof QMatrix4x4 ? other : new QMatrix4x4();\n      return new QMatrix4x4(this.m11 - a.m11, this.m12 - a.m12, this.m13 - a.m13, this.m14 - a.m14, this.m21 - a.m21, this.m22 - a.m22, this.m23 - a.m23, this.m24 - a.m24, this.m31 - a.m31, this.m32 - a.m32, this.m33 - a.m33, this.m34 - a.m34, this.m41 - a.m41, this.m42 - a.m42, this.m43 - a.m43, this.m44 - a.m44);\n    }\n  }, {\n    key: \"row\",\n    value: function row(i) {\n      var _this3 = this;\n\n      var row = i + 1;\n      var arr = [1, 2, 3, 4].map(function (col) {\n        return _this3[\"m\" + row + col];\n      });\n      return new (Function.prototype.bind.apply(QmlWeb.QVector4D, [null].concat(_toConsumableArray(arr))))();\n    }\n  }, {\n    key: \"column\",\n    value: function column(i) {\n      var _this4 = this;\n\n      var col = i + 1;\n      var arr = [1, 2, 3, 4].map(function (row) {\n        return _this4[\"m\" + row + col];\n      });\n      return new (Function.prototype.bind.apply(QmlWeb.QVector4D, [null].concat(_toConsumableArray(arr))))();\n    }\n  }, {\n    key: \"determinant\",\n    value: function determinant() {\n      // Laplace expansion\n      var t = this;\n      var s0 = t.m11 * t.m22 - t.m12 * t.m21;\n      var c5 = t.m33 * t.m44 - t.m34 * t.m43;\n      var s1 = t.m11 * t.m23 - t.m13 * t.m21;\n      var c4 = t.m32 * t.m44 - t.m34 * t.m42;\n      var s2 = t.m11 * t.m24 - t.m14 * t.m21;\n      var c3 = t.m32 * t.m43 - t.m33 * t.m42;\n      var s3 = t.m12 * t.m23 - t.m13 * t.m22;\n      var c2 = t.m31 * t.m44 - t.m34 * t.m41;\n      var s4 = t.m12 * t.m24 - t.m14 * t.m22;\n      var c1 = t.m31 * t.m43 - t.m33 * t.m41;\n      var s5 = t.m13 * t.m24 - t.m14 * t.m23;\n      var c0 = t.m31 * t.m42 - t.m32 * t.m41;\n      return s0 * c5 - s1 * c4 + s2 * c3 + s3 * c2 - s4 * c1 + s5 * c0;\n    }\n  }, {\n    key: \"inverted\",\n    value: function inverted() {\n      // Laplace expansion\n      var t = this;\n      var s0 = t.m11 * t.m22 - t.m12 * t.m21;\n      var c5 = t.m33 * t.m44 - t.m34 * t.m43;\n      var s1 = t.m11 * t.m23 - t.m13 * t.m21;\n      var c4 = t.m32 * t.m44 - t.m34 * t.m42;\n      var s2 = t.m11 * t.m24 - t.m14 * t.m21;\n      var c3 = t.m32 * t.m43 - t.m33 * t.m42;\n      var s3 = t.m12 * t.m23 - t.m13 * t.m22;\n      var c2 = t.m31 * t.m44 - t.m34 * t.m41;\n      var s4 = t.m12 * t.m24 - t.m14 * t.m22;\n      var c1 = t.m31 * t.m43 - t.m33 * t.m41;\n      var s5 = t.m13 * t.m24 - t.m14 * t.m23;\n      var c0 = t.m31 * t.m42 - t.m32 * t.m41;\n      var det = s0 * c5 - s1 * c4 + s2 * c3 + s3 * c2 - s4 * c1 + s5 * c0;\n      var adj = [+t.m22 * c5 - t.m23 * c4 + t.m24 * c3, -t.m12 * c5 + t.m13 * c4 - t.m14 * c3, +t.m42 * s5 - t.m43 * s4 + t.m44 * s3, -t.m32 * s5 + t.m33 * s4 - t.m34 * s3, -t.m21 * c5 + t.m23 * c2 - t.m24 * c1, +t.m11 * c5 - t.m13 * c2 + t.m14 * c1, -t.m41 * s5 + t.m43 * s2 - t.m44 * s1, +t.m31 * s5 - t.m33 * s2 + t.m34 * s1, +t.m21 * c4 - t.m22 * c2 + t.m24 * c0, -t.m11 * c4 + t.m12 * c2 - t.m14 * c0, +t.m41 * s4 - t.m42 * s2 + t.m44 * s0, -t.m31 * s4 + t.m32 * s2 - t.m34 * s0, -t.m21 * c3 + t.m22 * c1 - t.m23 * c0, +t.m11 * c3 - t.m12 * c1 + t.m13 * c0, -t.m41 * s3 + t.m42 * s1 - t.m43 * s0, +t.m31 * s3 - t.m32 * s1 + t.m33 * s0];\n      return new (Function.prototype.bind.apply(QMatrix4x4, [null].concat(_toConsumableArray(adj.map(function (x) {\n        return x / det;\n      })))))();\n    }\n  }, {\n    key: \"transposed\",\n    value: function transposed() {\n      return new QMatrix4x4(this.m11, this.m21, this.m31, this.m41, this.m12, this.m22, this.m32, this.m42, this.m13, this.m23, this.m33, this.m43, this.m14, this.m24, this.m34, this.m44);\n    }\n  }, {\n    key: \"fuzzyEquals\",\n    value: function fuzzyEquals(a) {\n      var epsilon = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.00001;\n\n      for (var row = 1; row <= 4; row++) {\n        for (var col = 1; col <= 4; col++) {\n          var name = \"m\" + row + col;\n          if (Math.abs(this[name] - a[name]) > epsilon) {\n            return false;\n          }\n        }\n      }\n      return true;\n    }\n  }]);\n\n  return QMatrix4x4;\n}(QmlWeb.QObject);\n\nQMatrix4x4.nonNullableType = true;\nQMatrix4x4.requireConstructor = true;\n\n\nQmlWeb.QMatrix4x4 = QMatrix4x4;\n\nvar QPointF = function (_QmlWeb$QObject3) {\n  _inherits(QPointF, _QmlWeb$QObject3);\n\n  function QPointF() {\n    _classCallCheck(this, QPointF);\n\n    var _this5 = _possibleConstructorReturn(this, (QPointF.__proto__ || Object.getPrototypeOf(QPointF)).call(this));\n\n    for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      args[_key3] = arguments[_key3];\n    }\n\n    var data = args;\n    if (args.length === 0) {\n      data = [0, 0];\n    } else if (args.length === 1 && typeof args[0] === \"string\") {\n      data = args[0].split(\",\").map(function (x) {\n        return parseFloat(x.trim());\n      });\n      if (data.length !== 2) throw new Error(\"point expected\");\n    } else if (args.length === 1 && args[0] instanceof QPointF) {\n      data = [args[0].x, args[0].y];\n    } else if (args.length !== 2) {\n      throw new Error(\"Invalid arguments\");\n    }\n    QmlWeb.createProperties(_this5, {\n      x: { type: \"real\", initialValue: data[0] },\n      y: { type: \"real\", initialValue: data[1] }\n    });\n    return _this5;\n  }\n\n  _createClass(QPointF, [{\n    key: \"toString\",\n    value: function toString() {\n      return _get(QPointF.prototype.__proto__ || Object.getPrototypeOf(QPointF.prototype), \"$toString\", this).call(this, this.x, this.y);\n    }\n  }]);\n\n  return QPointF;\n}(QmlWeb.QObject);\n\nQPointF.nonNullableType = true;\nQPointF.requireConstructor = true;\n\n\nQmlWeb.QPointF = QPointF;\n\nvar QQuaternion = function (_QmlWeb$QObject4) {\n  _inherits(QQuaternion, _QmlWeb$QObject4);\n\n  function QQuaternion() {\n    _classCallCheck(this, QQuaternion);\n\n    var _this6 = _possibleConstructorReturn(this, (QQuaternion.__proto__ || Object.getPrototypeOf(QQuaternion)).call(this));\n\n    for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      args[_key4] = arguments[_key4];\n    }\n\n    var data = args;\n    if (args.length === 1 && typeof args[0] === \"string\") {\n      data = args[0].split(\",\").map(function (x) {\n        return parseFloat(x.trim());\n      });\n      if (data.length !== 4) data = [];\n    } else if (args.length === 1 && args[0] instanceof QQuaternion) {\n      data = [args[0].scalar, args[0].x, args[0].y, args[0].z];\n    }\n    if (data.length === 0) {\n      data = [1, 0, 0, 0];\n    } else if (data.length !== 4) {\n      throw new Error(\"Invalid arguments\");\n    }\n    QmlWeb.createProperties(_this6, {\n      scalar: { type: \"real\", initialValue: data[0] },\n      x: { type: \"real\", initialValue: data[1] },\n      y: { type: \"real\", initialValue: data[2] },\n      z: { type: \"real\", initialValue: data[3] }\n    });\n    return _this6;\n  }\n\n  _createClass(QQuaternion, [{\n    key: \"toString\",\n    value: function toString() {\n      return _get(QQuaternion.prototype.__proto__ || Object.getPrototypeOf(QQuaternion.prototype), \"$toString\", this).call(this, this.scalar, this.x, this.y, this.z);\n    }\n  }]);\n\n  return QQuaternion;\n}(QmlWeb.QObject);\n\nQQuaternion.nonNullableType = true;\nQQuaternion.requireConstructor = true;\n\n\nQmlWeb.QQuaternion = QQuaternion;\n\nvar QRectF = function (_QmlWeb$QObject5) {\n  _inherits(QRectF, _QmlWeb$QObject5);\n\n  function QRectF() {\n    _classCallCheck(this, QRectF);\n\n    var _this7 = _possibleConstructorReturn(this, (QRectF.__proto__ || Object.getPrototypeOf(QRectF)).call(this));\n\n    for (var _len5 = arguments.length, args = Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n      args[_key5] = arguments[_key5];\n    }\n\n    var data = args;\n    if (args.length === 0) {\n      data = [0, 0, 0, 0];\n    } else if (args.length === 1 && typeof args[0] === \"string\") {\n      var mask = /^\\s*[-\\d.]+\\s*,\\s*[-\\d.]+\\s*,\\s*[-\\d.]+\\s*x\\s*[-\\d.]+\\s*$/;\n      if (!args[0].match(mask)) throw new Error(\"rect expected\");\n      data = args[0].replace(\"x\", \",\").split(\",\").map(function (x) {\n        return parseFloat(x.trim());\n      });\n    } else if (args.length === 1 && args[0] instanceof QRectF) {\n      data = [args[0].x, args[0].y, args[0].z, args[0].width];\n    } else if (args.length !== 4) {\n      throw new Error(\"Invalid arguments\");\n    }\n    QmlWeb.createProperties(_this7, {\n      x: { type: \"real\", initialValue: data[0] },\n      y: { type: \"real\", initialValue: data[1] },\n      width: { type: \"real\", initialValue: data[2] },\n      height: { type: \"real\", initialValue: data[3] }\n    });\n    return _this7;\n  }\n\n  _createClass(QRectF, [{\n    key: \"toString\",\n    value: function toString() {\n      return _get(QRectF.prototype.__proto__ || Object.getPrototypeOf(QRectF.prototype), \"$toString\", this).call(this, this.x, this.y, this.width, this.height);\n    }\n  }]);\n\n  return QRectF;\n}(QmlWeb.QObject);\n\nQRectF.nonNullableType = true;\nQRectF.requireConstructor = true;\n\n\nQmlWeb.QRectF = QRectF;\n\nvar QSizeF = function (_QmlWeb$QObject6) {\n  _inherits(QSizeF, _QmlWeb$QObject6);\n\n  function QSizeF() {\n    _classCallCheck(this, QSizeF);\n\n    var _this8 = _possibleConstructorReturn(this, (QSizeF.__proto__ || Object.getPrototypeOf(QSizeF)).call(this));\n\n    for (var _len6 = arguments.length, args = Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n      args[_key6] = arguments[_key6];\n    }\n\n    var data = args;\n    if (args.length === 0) {\n      data = [-1, -1];\n    } else if (args.length === 1 && typeof args[0] === \"string\") {\n      data = args[0].split(\"x\").map(function (x) {\n        return parseFloat(x.trim());\n      });\n      if (data.length !== 2) throw new Error(\"size expected\");\n    } else if (args.length === 1 && args[0] instanceof QSizeF) {\n      data = [args[0].width, args[0].height];\n    } else if (args.length !== 2) {\n      throw new Error(\"Invalid arguments\");\n    }\n    QmlWeb.createProperties(_this8, {\n      width: { type: \"real\", initialValue: data[0] },\n      height: { type: \"real\", initialValue: data[1] }\n    });\n    return _this8;\n  }\n\n  _createClass(QSizeF, [{\n    key: \"toString\",\n    value: function toString() {\n      return _get(QSizeF.prototype.__proto__ || Object.getPrototypeOf(QSizeF.prototype), \"$toString\", this).call(this, this.width, this.height);\n    }\n  }]);\n\n  return QSizeF;\n}(QmlWeb.QObject);\n\nQSizeF.nonNullableType = true;\nQSizeF.requireConstructor = true;\n\n\nQmlWeb.QSizeF = QSizeF;\n\nvar QVector2D = function (_QmlWeb$QObject7) {\n  _inherits(QVector2D, _QmlWeb$QObject7);\n\n  function QVector2D() {\n    _classCallCheck(this, QVector2D);\n\n    var _this9 = _possibleConstructorReturn(this, (QVector2D.__proto__ || Object.getPrototypeOf(QVector2D)).call(this));\n\n    for (var _len7 = arguments.length, args = Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n      args[_key7] = arguments[_key7];\n    }\n\n    var data = args;\n    if (args.length === 1 && typeof args[0] === \"string\") {\n      data = args[0].split(\",\").map(function (x) {\n        return parseFloat(x.trim());\n      });\n      if (data.length !== 2) data = [];\n    } else if (args.length === 1 && args[0] instanceof QVector2D) {\n      data = [args[0].x, args[0].y];\n    }\n    if (data.length === 0) {\n      data = [0, 0];\n    } else if (data.length !== 2) {\n      throw new Error(\"Invalid arguments\");\n    }\n    QmlWeb.createProperties(_this9, {\n      x: { type: \"real\", initialValue: data[0] },\n      y: { type: \"real\", initialValue: data[1] }\n    });\n    return _this9;\n  }\n\n  _createClass(QVector2D, [{\n    key: \"toString\",\n    value: function toString() {\n      return _get(QVector2D.prototype.__proto__ || Object.getPrototypeOf(QVector2D.prototype), \"$toString\", this).call(this, this.x, this.y);\n    }\n  }, {\n    key: \"dotProduct\",\n    value: function dotProduct(a) {\n      if (a instanceof QVector2D) {\n        return a.x * this.x + a.y * this.y;\n      }\n      return 0;\n    }\n  }, {\n    key: \"times\",\n    value: function times(a) {\n      if (a instanceof QVector2D) {\n        return new QVector2D(this.x * a.x, this.y * a.y);\n      }\n      return new QVector2D(this.x * a, this.y * a);\n    }\n  }, {\n    key: \"plus\",\n    value: function plus(a) {\n      if (a instanceof QVector2D) {\n        return new QVector2D(this.x + a.x, this.y + a.y);\n      }\n      return new QVector2D(this.x, this.y);\n    }\n  }, {\n    key: \"minus\",\n    value: function minus(a) {\n      if (a instanceof QVector2D) {\n        return new QVector2D(this.x - a.x, this.y - a.y);\n      }\n      return new QVector2D(this.x, this.y);\n    }\n  }, {\n    key: \"normalized\",\n    value: function normalized() {\n      var length = this.length();\n      return this.times(1 / (length === 0 ? 1 : length));\n    }\n  }, {\n    key: \"length\",\n    value: function length() {\n      return Math.sqrt(this.dotProduct(this));\n    }\n  }, {\n    key: \"toVector3d\",\n    value: function toVector3d() {\n      return new QmlWeb.QVector3D(this.x, this.y, 0);\n    }\n  }, {\n    key: \"toVector4d\",\n    value: function toVector4d() {\n      return new QmlWeb.QVector4D(this.x, this.y, 0, 0);\n    }\n  }, {\n    key: \"fuzzyEquals\",\n    value: function fuzzyEquals(a) {\n      var epsilon = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.00001;\n\n      return [this.x - a.x, this.y - a.y].every(function (delta) {\n        return Math.abs(delta) <= epsilon;\n      });\n    }\n  }]);\n\n  return QVector2D;\n}(QmlWeb.QObject);\n\nQVector2D.nonNullableType = true;\nQVector2D.requireConstructor = true;\n\n\nQmlWeb.QVector2D = QVector2D;\n\nvar QVector3D = function (_QmlWeb$QObject8) {\n  _inherits(QVector3D, _QmlWeb$QObject8);\n\n  function QVector3D() {\n    _classCallCheck(this, QVector3D);\n\n    var _this10 = _possibleConstructorReturn(this, (QVector3D.__proto__ || Object.getPrototypeOf(QVector3D)).call(this));\n\n    for (var _len8 = arguments.length, args = Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {\n      args[_key8] = arguments[_key8];\n    }\n\n    var data = args;\n    if (args.length === 1 && typeof args[0] === \"string\") {\n      data = args[0].split(\",\").map(function (x) {\n        return parseFloat(x.trim());\n      });\n      if (data.length !== 3) data = [];\n    } else if (args.length === 1 && args[0] instanceof QVector3D) {\n      data = [args[0].x, args[0].y, args[0].z];\n    }\n    if (data.length === 0) {\n      data = [0, 0, 0];\n    } else if (data.length !== 3) {\n      throw new Error(\"Invalid arguments\");\n    }\n    QmlWeb.createProperties(_this10, {\n      x: { type: \"real\", initialValue: data[0] },\n      y: { type: \"real\", initialValue: data[1] },\n      z: { type: \"real\", initialValue: data[2] }\n    });\n    return _this10;\n  }\n\n  _createClass(QVector3D, [{\n    key: \"toString\",\n    value: function toString() {\n      return _get(QVector3D.prototype.__proto__ || Object.getPrototypeOf(QVector3D.prototype), \"$toString\", this).call(this, this.x, this.y, this.z);\n    }\n  }, {\n    key: \"crossProduct\",\n    value: function crossProduct(a) {\n      if (a instanceof QVector3D) {\n        return new QVector3D(this.y * a.z - this.z * a.y, this.z * a.x - this.x * a.z, this.x * a.y - this.y * a.x);\n      }\n      return new QVector3D();\n    }\n  }, {\n    key: \"dotProduct\",\n    value: function dotProduct(a) {\n      if (a instanceof QVector3D) {\n        return a.x * this.x + a.y * this.y + a.z * this.z;\n      }\n      return 0;\n    }\n  }, {\n    key: \"times\",\n    value: function times(a) {\n      if (a instanceof QmlWeb.QMatrix4x4) {\n        var v = new QmlWeb.QVector4D(this.x, this.y, this.z, 1).times(a);\n        return new QVector3D(v.x / v.w, v.y / v.w, v.z / v.w);\n      }\n      if (a instanceof QVector3D) {\n        return new QVector3D(this.x * a.x, this.y * a.y, this.z * a.z);\n      }\n      return new QVector3D(this.x * a, this.y * a, this.z * a);\n    }\n  }, {\n    key: \"plus\",\n    value: function plus(a) {\n      if (a instanceof QVector3D) {\n        return new QVector3D(this.x + a.x, this.y + a.y, this.z + a.z);\n      }\n      return new QVector3D(this.x, this.y, this.z);\n    }\n  }, {\n    key: \"minus\",\n    value: function minus(a) {\n      if (a instanceof QVector3D) {\n        return new QVector3D(this.x - a.x, this.y - a.y, this.z - a.z);\n      }\n      return new QVector3D(this.x, this.y, this.z);\n    }\n  }, {\n    key: \"normalized\",\n    value: function normalized() {\n      var length = this.length();\n      return this.times(1 / (length === 0 ? 1 : length));\n    }\n  }, {\n    key: \"length\",\n    value: function length() {\n      return Math.sqrt(this.dotProduct(this));\n    }\n  }, {\n    key: \"toVector2d\",\n    value: function toVector2d() {\n      return new QmlWeb.QVector2D(this.x, this.y);\n    }\n  }, {\n    key: \"toVector4d\",\n    value: function toVector4d() {\n      return new QmlWeb.QVector4D(this.x, this.y, this.z, 0);\n    }\n  }, {\n    key: \"fuzzyEquals\",\n    value: function fuzzyEquals(a) {\n      var epsilon = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.00001;\n\n      return [this.x - a.x, this.y - a.y, this.z - a.z].every(function (delta) {\n        return Math.abs(delta) <= epsilon;\n      });\n    }\n  }]);\n\n  return QVector3D;\n}(QmlWeb.QObject);\n\nQVector3D.nonNullableType = true;\nQVector3D.requireConstructor = true;\n\n\nQmlWeb.QVector3D = QVector3D;\n\nvar QVector4D = function (_QmlWeb$QObject9) {\n  _inherits(QVector4D, _QmlWeb$QObject9);\n\n  function QVector4D() {\n    _classCallCheck(this, QVector4D);\n\n    var _this11 = _possibleConstructorReturn(this, (QVector4D.__proto__ || Object.getPrototypeOf(QVector4D)).call(this));\n\n    for (var _len9 = arguments.length, args = Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {\n      args[_key9] = arguments[_key9];\n    }\n\n    var data = args;\n    if (args.length === 1 && typeof args[0] === \"string\") {\n      data = args[0].split(\",\").map(function (x) {\n        return parseFloat(x.trim());\n      });\n      if (data.length !== 4) data = [];\n    } else if (args.length === 1 && args[0] instanceof QVector4D) {\n      data = [args[0].x, args[0].y, args[0].z, args[0].w];\n    }\n    if (data.length === 0) {\n      data = [0, 0, 0, 0];\n    } else if (data.length !== 4) {\n      throw new Error(\"Invalid arguments\");\n    }\n    QmlWeb.createProperties(_this11, {\n      x: { type: \"real\", initialValue: data[0] },\n      y: { type: \"real\", initialValue: data[1] },\n      z: { type: \"real\", initialValue: data[2] },\n      w: { type: \"real\", initialValue: data[3] }\n    });\n    return _this11;\n  }\n\n  _createClass(QVector4D, [{\n    key: \"toString\",\n    value: function toString() {\n      return _get(QVector4D.prototype.__proto__ || Object.getPrototypeOf(QVector4D.prototype), \"$toString\", this).call(this, this.x, this.y, this.z, this.w);\n    }\n  }, {\n    key: \"dotProduct\",\n    value: function dotProduct(a) {\n      if (a instanceof QVector4D) {\n        return a.x * this.x + a.y * this.y + a.z * this.z + a.w * this.w;\n      }\n      return 0;\n    }\n  }, {\n    key: \"times\",\n    value: function times(a) {\n      if (a instanceof QmlWeb.QMatrix4x4) {\n        var t = this;\n        return new QVector4D(t.x * a.m11 + t.y * a.m21 + t.z * a.m31 + t.w * a.m41, t.x * a.m12 + t.y * a.m22 + t.z * a.m32 + t.w * a.m42, t.x * a.m13 + t.y * a.m23 + t.z * a.m33 + t.w * a.m43, t.x * a.m14 + t.y * a.m24 + t.z * a.m34 + t.w * a.m44);\n      }\n      if (a instanceof QVector4D) {\n        var _t2 = this;\n        return new QVector4D(_t2.x * a.x, _t2.y * a.y, _t2.z * a.z, _t2.w * a.w);\n      }\n      return new QVector4D(this.x * a, this.y * a, this.z * a, this.w * a);\n    }\n  }, {\n    key: \"plus\",\n    value: function plus(a) {\n      if (a instanceof QVector4D) {\n        var t = this;\n        return new QVector4D(t.x + a.x, t.y + a.y, t.z + a.z, t.w + a.w);\n      }\n      return new QVector4D(this.x, this.y, this.z, this.w);\n    }\n  }, {\n    key: \"minus\",\n    value: function minus(a) {\n      if (a instanceof QVector4D) {\n        var t = this;\n        return new QVector4D(t.x - a.x, t.y - a.y, t.z - a.z, t.w - a.w);\n      }\n      return new QVector4D(this.x, this.y, this.z, this.w);\n    }\n  }, {\n    key: \"normalized\",\n    value: function normalized() {\n      var length = this.length();\n      return this.times(1 / (length === 0 ? 1 : length));\n    }\n  }, {\n    key: \"length\",\n    value: function length() {\n      return Math.sqrt(this.dotProduct(this));\n    }\n  }, {\n    key: \"toVector2d\",\n    value: function toVector2d() {\n      return new QmlWeb.QVector2D(this.x, this.y);\n    }\n  }, {\n    key: \"toVector3d\",\n    value: function toVector3d() {\n      return new QmlWeb.QVector3D(this.x, this.y, this.z);\n    }\n  }, {\n    key: \"fuzzyEquals\",\n    value: function fuzzyEquals(a) {\n      var epsilon = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.00001;\n\n      return [this.x - a.x, this.y - a.y, this.z - a.z, this.w - a.w].every(function (delta) {\n        return Math.abs(delta) <= epsilon;\n      });\n    }\n  }]);\n\n  return QVector4D;\n}(QmlWeb.QObject);\n\nQVector4D.nonNullableType = true;\nQVector4D.requireConstructor = true;\n\n\nQmlWeb.QVector4D = QVector4D;\n\nvar Signal = function () {\n  function Signal() {\n    var _this12 = this;\n\n    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, Signal);\n\n    this.connectedSlots = [];\n    this.signal = null;\n\n    this.obj = options.obj;\n    this.options = options;\n\n    this.signal = function () {\n      return _this12.execute.apply(_this12, arguments);\n    };\n    this.signal.parameters = params;\n    this.signal.connect = this.connect.bind(this);\n    this.signal.disconnect = this.disconnect.bind(this);\n    this.signal.isConnected = this.isConnected.bind(this);\n\n    // TODO Fix Keys that don't have an obj for the signal\n    if (this.obj && this.obj.$signals !== undefined) {\n      this.obj.$signals.push(this.signal);\n    }\n  }\n\n  _createClass(Signal, [{\n    key: \"execute\",\n    value: function execute() {\n      QmlWeb.QMLProperty.pushEvalStack();\n\n      for (var _len10 = arguments.length, args = Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {\n        args[_key10] = arguments[_key10];\n      }\n\n      for (var i in this.connectedSlots) {\n        var desc = this.connectedSlots[i];\n        if (desc.type & Signal.QueuedConnection) {\n          Signal.$addQueued(desc, args);\n        } else {\n          Signal.$execute(desc, args);\n        }\n      }\n      QmlWeb.QMLProperty.popEvalStack();\n    }\n  }, {\n    key: \"connect\",\n    value: function connect() {\n      var type = Signal.AutoConnection;\n\n      for (var _len11 = arguments.length, args = Array(_len11), _key11 = 0; _key11 < _len11; _key11++) {\n        args[_key11] = arguments[_key11];\n      }\n\n      if (typeof args[args.length - 1] === \"number\") {\n        type = args.pop();\n      }\n      if (type & Signal.UniqueConnection) {\n        if (this.isConnected.apply(this, args)) {\n          return;\n        }\n      }\n      if (args.length === 1) {\n        this.connectedSlots.push({ thisObj: global, slot: args[0], type: type });\n      } else if (typeof args[1] === \"string\" || args[1] instanceof String) {\n        if (args[0].$tidyupList && args[0] !== this.obj) {\n          args[0].$tidyupList.push(this.signal);\n        }\n        var slot = args[0][args[1]];\n        this.connectedSlots.push({ thisObj: args[0], slot: slot, type: type });\n      } else {\n        if (args[0].$tidyupList && (!this.obj || args[0] !== this.obj && args[0] !== this.obj.$parent)) {\n          args[0].$tidyupList.push(this.signal);\n        }\n        this.connectedSlots.push({ thisObj: args[0], slot: args[1], type: type });\n      }\n\n      // Notify object of connect\n      if (this.options.obj && this.options.obj.$connectNotify) {\n        this.options.obj.$connectNotify(this.options);\n      }\n    }\n  }, {\n    key: \"disconnect\",\n    value: function disconnect() {\n      for (var _len12 = arguments.length, args = Array(_len12), _key12 = 0; _key12 < _len12; _key12++) {\n        args[_key12] = arguments[_key12];\n      }\n\n      // type meaning:\n      //  1 = function, 2 = string\n      //  3 = object with string method,  4 = object with function\n      // No args means disconnect everything connected to this signal\n      var callType = args.length === 1 ? args[0] instanceof Function ? 1 : 2 : typeof args[1] === \"string\" || args[1] instanceof String ? 3 : 4;\n      for (var i = 0; i < this.connectedSlots.length; i++) {\n        var _connectedSlots$i = this.connectedSlots[i],\n            slot = _connectedSlots$i.slot,\n            thisObj = _connectedSlots$i.thisObj;\n\n        if (args.length === 0 || callType === 1 && slot === args[0] || callType === 2 && thisObj === args[0] || callType === 3 && thisObj === args[0] && slot === args[0][args[1]] || thisObj === args[0] && slot === args[1]) {\n          if (thisObj) {\n            var index = thisObj.$tidyupList.indexOf(this.signal);\n            if (index >= 0) {\n              thisObj.$tidyupList.splice(index, 1);\n            }\n          }\n          this.connectedSlots.splice(i, 1);\n          // We have removed an item from the list so the indexes shifted one\n          // backwards\n          i--;\n        }\n      }\n\n      // Notify object of disconnect\n      if (this.options.obj && this.options.obj.$disconnectNotify) {\n        this.options.obj.$disconnectNotify(this.options);\n      }\n    }\n  }, {\n    key: \"isConnected\",\n    value: function isConnected() {\n      for (var _len13 = arguments.length, args = Array(_len13), _key13 = 0; _key13 < _len13; _key13++) {\n        args[_key13] = arguments[_key13];\n      }\n\n      var callType = args.length === 1 ? 1 : typeof args[1] === \"string\" || args[1] instanceof String ? 2 : 3;\n      for (var i in this.connectedSlots) {\n        var _connectedSlots$i2 = this.connectedSlots[i],\n            slot = _connectedSlots$i2.slot,\n            thisObj = _connectedSlots$i2.thisObj;\n\n        if (callType === 1 && slot === args[0] || callType === 2 && thisObj === args[0] && slot === args[0][args[1]] || thisObj === args[0] && slot === args[1]) {\n          return true;\n        }\n      }\n      return false;\n    }\n  }], [{\n    key: \"signal\",\n    value: function signal() {\n      for (var _len14 = arguments.length, args = Array(_len14), _key14 = 0; _key14 < _len14; _key14++) {\n        args[_key14] = arguments[_key14];\n      }\n\n      return new (Function.prototype.bind.apply(Signal, [null].concat(args)))().signal;\n    }\n  }, {\n    key: \"$execute\",\n    value: function $execute(desc, args) {\n      try {\n        desc.slot.apply(desc.thisObj, args);\n      } catch (err) {\n        console.error(\"Signal slot error:\", err.message, err, desc.slot ? Function.prototype.toString.call(desc.slot) : \"desc.slot is undefined!\");\n      }\n    }\n  }, {\n    key: \"$addQueued\",\n    value: function $addQueued(desc, args) {\n      if (Signal.$queued.length === 0) {\n        if (global.setImmediate) {\n          global.setImmediate(Signal.$executeQueued);\n        } else {\n          global.setTimeout(Signal.$executeQueued, 0);\n        }\n      }\n      Signal.$queued.push([desc, args]);\n    }\n  }, {\n    key: \"$executeQueued\",\n    value: function $executeQueued() {\n      // New queued signals should be executed on next tick of the event loop\n      var queued = Signal.$queued;\n      Signal.$queued = [];\n\n      QmlWeb.QMLProperty.pushEvalStack();\n      for (var i in queued) {\n        Signal.$execute.apply(Signal, _toConsumableArray(queued[i]));\n      }\n      QmlWeb.QMLProperty.popEvalStack();\n    }\n  }]);\n\n  return Signal;\n}();\n\nSignal.$queued = [];\nSignal.AutoConnection = 0;\nSignal.DirectConnection = 1;\nSignal.QueuedConnection = 2;\nSignal.UniqueConnection = 128;\n\n\nQmlWeb.Signal = Signal;\n\nvar Qt = {\n  openUrlExternally: function openUrlExternally(url) {\n    var page = window.open(url, \"_blank\");\n    page.focus();\n  },\n  // Load file, parse and construct as Component (.qml)\n  createComponent: function createComponent(name) {\n    var engine = QmlWeb.engine;\n\n    var file = engine.$resolvePath(name);\n\n    // If \"name\" was a full URL, \"file\" will be equivalent to name and this\n    // will try and load the Component from the full URL, otherwise, this\n    // doubles as checking for the file in the current directory.\n    var tree = engine.loadComponent(file);\n\n    // If the Component is not found, and it is not a URL, look for \"name\" in\n    // this context's importSearchPaths\n    if (!tree) {\n      var nameIsUrl = engine.$parseURI(name) !== undefined;\n      if (!nameIsUrl) {\n        var moreDirs = engine.importSearchPaths(QmlWeb.executionContext.importContextId);\n        for (var i = 0; i < moreDirs.length; i++) {\n          file = \"\" + moreDirs[i] + name;\n          tree = engine.loadComponent(file);\n          if (tree) break;\n        }\n      }\n    }\n\n    if (!tree) {\n      return undefined;\n    }\n\n    var QMLComponent = QmlWeb.getConstructor(\"QtQml\", \"2.0\", \"Component\");\n    var component = new QMLComponent({\n      object: tree,\n      context: QmlWeb.executionContext\n    });\n    component.$basePath = engine.extractBasePath(file);\n    component.$imports = tree.$imports;\n    component.$file = file; // just for debugging\n\n    engine.loadImports(tree.$imports, component.$basePath, component.importContextId);\n\n    return component;\n  },\n\n  createQmlObject: function createQmlObject(src, parent, file) {\n    var tree = QmlWeb.parseQML(src, file);\n\n    // Create and initialize objects\n\n    var QMLComponent = QmlWeb.getConstructor(\"QtQml\", \"2.0\", \"Component\");\n    var component = new QMLComponent({\n      object: tree,\n      parent: parent,\n      context: QmlWeb.executionContext\n    });\n\n    var engine = QmlWeb.engine;\n    engine.loadImports(tree.$imports, undefined, component.importContextId);\n\n    var resolvedFile = file || Qt.resolvedUrl(\"createQmlObject_function\");\n    component.$basePath = engine.extractBasePath(resolvedFile);\n    component.$imports = tree.$imports; // for later use\n    // not just for debugging, but for basepath too, see above\n    component.$file = resolvedFile;\n\n    var obj = component.createObject(parent);\n\n    var QMLOperationState = QmlWeb.QMLOperationState;\n    if (engine.operationState !== QMLOperationState.Init && engine.operationState !== QMLOperationState.Idle) {\n      // We don't call those on first creation, as they will be called\n      // by the regular creation-procedures at the right time.\n      engine.$initializePropertyBindings();\n\n      engine.callCompletedSignals();\n    }\n\n    return obj;\n  },\n\n  // Returns url resolved relative to the URL of the caller.\n  // http://doc.qt.io/qt-5/qml-qtqml-qt.html#resolvedUrl-method\n  resolvedUrl: function resolvedUrl(url) {\n    return QmlWeb.qmlUrl(url);\n  },\n\n  // Basic QML types constructors\n  point: function point() {\n    for (var _len15 = arguments.length, args = Array(_len15), _key15 = 0; _key15 < _len15; _key15++) {\n      args[_key15] = arguments[_key15];\n    }\n\n    return new (Function.prototype.bind.apply(QmlWeb.QPointF, [null].concat(args)))();\n  },\n  rect: function rect() {\n    for (var _len16 = arguments.length, args = Array(_len16), _key16 = 0; _key16 < _len16; _key16++) {\n      args[_key16] = arguments[_key16];\n    }\n\n    return new (Function.prototype.bind.apply(QmlWeb.QRectF, [null].concat(args)))();\n  },\n  size: function size() {\n    for (var _len17 = arguments.length, args = Array(_len17), _key17 = 0; _key17 < _len17; _key17++) {\n      args[_key17] = arguments[_key17];\n    }\n\n    return new (Function.prototype.bind.apply(QmlWeb.QSizeF, [null].concat(args)))();\n  },\n  vector2d: function vector2d() {\n    for (var _len18 = arguments.length, args = Array(_len18), _key18 = 0; _key18 < _len18; _key18++) {\n      args[_key18] = arguments[_key18];\n    }\n\n    return new (Function.prototype.bind.apply(QmlWeb.QVector2D, [null].concat(args)))();\n  },\n  vector3d: function vector3d() {\n    for (var _len19 = arguments.length, args = Array(_len19), _key19 = 0; _key19 < _len19; _key19++) {\n      args[_key19] = arguments[_key19];\n    }\n\n    return new (Function.prototype.bind.apply(QmlWeb.QVector3D, [null].concat(args)))();\n  },\n  vector4d: function vector4d() {\n    for (var _len20 = arguments.length, args = Array(_len20), _key20 = 0; _key20 < _len20; _key20++) {\n      args[_key20] = arguments[_key20];\n    }\n\n    return new (Function.prototype.bind.apply(QmlWeb.QVector4D, [null].concat(args)))();\n  },\n  quaternion: function quaternion() {\n    for (var _len21 = arguments.length, args = Array(_len21), _key21 = 0; _key21 < _len21; _key21++) {\n      args[_key21] = arguments[_key21];\n    }\n\n    return new (Function.prototype.bind.apply(QmlWeb.QQuaternion, [null].concat(args)))();\n  },\n  matrix4x4: function matrix4x4() {\n    for (var _len22 = arguments.length, args = Array(_len22), _key22 = 0; _key22 < _len22; _key22++) {\n      args[_key22] = arguments[_key22];\n    }\n\n    return new (Function.prototype.bind.apply(QmlWeb.QMatrix4x4, [null].concat(args)))();\n  },\n\n  // Colors\n  rgba: function rgba() {\n    var _QmlWeb$QColor;\n\n    return (_QmlWeb$QColor = QmlWeb.QColor).rgba.apply(_QmlWeb$QColor, arguments);\n  },\n  hsla: function hsla() {\n    var _QmlWeb$QColor2;\n\n    return (_QmlWeb$QColor2 = QmlWeb.QColor).hsla.apply(_QmlWeb$QColor2, arguments);\n  },\n  hsva: function hsva() {\n    var _QmlWeb$QColor3;\n\n    return (_QmlWeb$QColor3 = QmlWeb.QColor).hsva.apply(_QmlWeb$QColor3, arguments);\n  },\n  colorEqual: function colorEqual() {\n    var _QmlWeb$QColor4;\n\n    return (_QmlWeb$QColor4 = QmlWeb.QColor).equal.apply(_QmlWeb$QColor4, arguments);\n  },\n  darker: function darker() {\n    var _QmlWeb$QColor5;\n\n    return (_QmlWeb$QColor5 = QmlWeb.QColor).darker.apply(_QmlWeb$QColor5, arguments);\n  },\n  lighter: function lighter() {\n    var _QmlWeb$QColor6;\n\n    return (_QmlWeb$QColor6 = QmlWeb.QColor).lighter.apply(_QmlWeb$QColor6, arguments);\n  },\n\n  include: function include(path) {\n    var engine = QmlWeb.engine;\n\n    var uri = engine.$resolvePath(path);\n\n    /* Handle recursive includes */\n    if (QmlWeb.executionContext.$qmlJsIncludes === undefined) {\n      QmlWeb.executionContext.$qmlJsIncludes = [];\n    }\n\n    if (QmlWeb.executionContext.$qmlJsIncludes.indexOf(uri) >= 0) {\n      return;\n    }\n\n    QmlWeb.executionContext.$qmlJsIncludes.push(uri);\n\n    var js = engine.loadJS(uri);\n\n    if (!js) {\n      console.error(\"Unable to load JavaScript module:\", uri, path);\n      return;\n    }\n\n    QmlWeb.importJavascriptInContext(js, QmlWeb.executionContext);\n  },\n\n\n  platform: {\n    os: \"qmlweb\"\n  },\n\n  // Buttons masks\n  LeftButton: 1,\n  RightButton: 2,\n  MiddleButton: 4,\n  // Modifiers masks\n  NoModifier: 0,\n  ShiftModifier: 1,\n  ControlModifier: 2,\n  AltModifier: 4,\n  MetaModifier: 8,\n  KeypadModifier: 16, // Note: Not available in web\n  // Layout directions\n  LeftToRight: 0,\n  RightToLeft: 1,\n  // Orientations\n  Vertical: 0,\n  Horizontal: 1,\n  // Keys\n  Key_Escape: 27,\n  Key_Tab: 9,\n  Key_Backtab: 245,\n  Key_Backspace: 8,\n  Key_Return: 13,\n  Key_Enter: 13,\n  Key_Insert: 45,\n  Key_Delete: 46,\n  Key_Pause: 19,\n  Key_Print: 42,\n  Key_SysReq: 0,\n  Key_Clear: 12,\n  Key_Home: 36,\n  Key_End: 35,\n  Key_Left: 37,\n  Key_Up: 38,\n  Key_Right: 39,\n  Key_Down: 40,\n  Key_PageUp: 33,\n  Key_PageDown: 34,\n  Key_Shift: 16,\n  Key_Control: 17,\n  Key_Meta: 91,\n  Key_Alt: 18,\n  Key_AltGr: 0,\n  Key_CapsLock: 20,\n  Key_NumLock: 144,\n  Key_ScrollLock: 145,\n  Key_F1: 112, Key_F2: 113, Key_F3: 114, Key_F4: 115, Key_F5: 116, Key_F6: 117,\n  Key_F7: 118, Key_F8: 119, Key_F9: 120, Key_F10: 121, Key_F11: 122,\n  Key_F12: 123, Key_F13: 124, Key_F14: 125, Key_F15: 126, Key_F16: 127,\n  Key_F17: 128, Key_F18: 129, Key_F19: 130, Key_F20: 131, Key_F21: 132,\n  Key_F22: 133, Key_F23: 134, Key_F24: 135,\n  Key_F25: 0, Key_F26: 0, Key_F27: 0, Key_F28: 0, Key_F29: 0, Key_F30: 0,\n  Key_F31: 0, Key_F32: 0, Key_F33: 0, Key_F34: 0, Key_F35: 0,\n  Key_Super_L: 0,\n  Key_Super_R: 0,\n  Key_Menu: 0,\n  Key_Hyper_L: 0,\n  Key_Hyper_R: 0,\n  Key_Help: 6,\n  Key_Direction_L: 0,\n  Key_Direction_R: 0,\n  Key_Space: 32,\n  Key_Any: 32,\n  Key_Exclam: 161,\n  Key_QuoteDbl: 162,\n  Key_NumberSign: 163,\n  Key_Dollar: 164,\n  Key_Percent: 165,\n  Key_Ampersant: 166,\n  Key_Apostrophe: 222,\n  Key_ParenLeft: 168,\n  Key_ParenRight: 169,\n  Key_Asterisk: 170,\n  Key_Plus: 171,\n  Key_Comma: 188,\n  Key_Minus: 173,\n  Key_Period: 190,\n  Key_Slash: 191,\n  Key_0: 48, Key_1: 49, Key_2: 50, Key_3: 51, Key_4: 52,\n  Key_5: 53, Key_6: 54, Key_7: 55, Key_8: 56, Key_9: 57,\n  Key_Colon: 58,\n  Key_Semicolon: 59,\n  Key_Less: 60,\n  Key_Equal: 61,\n  Key_Greater: 62,\n  Key_Question: 63,\n  Key_At: 64,\n  Key_A: 65, Key_B: 66, Key_C: 67, Key_D: 68, Key_E: 69, Key_F: 70, Key_G: 71,\n  Key_H: 72, Key_I: 73, Key_J: 74, Key_K: 75, Key_L: 76, Key_M: 77, Key_N: 78,\n  Key_O: 79, Key_P: 80, Key_Q: 81, Key_R: 82, Key_S: 83, Key_T: 84, Key_U: 85,\n  Key_V: 86, Key_W: 87, Key_X: 88, Key_Y: 89, Key_Z: 90,\n  Key_BracketLeft: 219,\n  Key_Backslash: 220,\n  Key_BracketRight: 221,\n  Key_AsciiCircum: 160,\n  Key_Underscore: 167,\n  Key_QuoteLeft: 0,\n  Key_BraceLeft: 174,\n  Key_Bar: 172,\n  Key_BraceRight: 175,\n  Key_AsciiTilde: 176,\n  Key_Back: 0,\n  Key_Forward: 0,\n  Key_Stop: 0,\n  Key_VolumeDown: 182,\n  Key_VolumeUp: 183,\n  Key_VolumeMute: 181,\n  Key_multiply: 106,\n  Key_add: 107,\n  Key_substract: 109,\n  Key_divide: 111,\n  Key_News: 0,\n  Key_OfficeHome: 0,\n  Key_Option: 0,\n  Key_Paste: 0,\n  Key_Phone: 0,\n  Key_Calendar: 0,\n  Key_Reply: 0,\n  Key_Reload: 0,\n  Key_RotateWindows: 0,\n  Key_RotationPB: 0,\n  Key_RotationKB: 0,\n  Key_Save: 0,\n  Key_Send: 0,\n  Key_Spell: 0,\n  Key_SplitScreen: 0,\n  Key_Support: 0,\n  Key_TaskPane: 0,\n  Key_Terminal: 0,\n  Key_Tools: 0,\n  Key_Travel: 0,\n  Key_Video: 0,\n  Key_Word: 0,\n  Key_Xfer: 0,\n  Key_ZoomIn: 0,\n  Key_ZoomOut: 0,\n  Key_Away: 0,\n  Key_Messenger: 0,\n  Key_WebCam: 0,\n  Key_MailForward: 0,\n  Key_Pictures: 0,\n  Key_Music: 0,\n  Key_Battery: 0,\n  Key_Bluetooth: 0,\n  Key_WLAN: 0,\n  Key_UWB: 0,\n  Key_AudioForward: 0,\n  Key_AudioRepeat: 0,\n  Key_AudioRandomPlay: 0,\n  Key_Subtitle: 0,\n  Key_AudioCycleTrack: 0,\n  Key_Time: 0,\n  Key_Hibernate: 0,\n  Key_View: 0,\n  Key_TopMenu: 0,\n  Key_PowerDown: 0,\n  Key_Suspend: 0,\n  Key_ContrastAdjust: 0,\n  Key_MediaLast: 0,\n  Key_unknown: -1,\n  Key_Call: 0,\n  Key_Camera: 0,\n  Key_CameraFocus: 0,\n  Key_Context1: 0,\n  Key_Context2: 0,\n  Key_Context3: 0,\n  Key_Context4: 0,\n  Key_Flip: 0,\n  Key_Hangup: 0,\n  Key_No: 0,\n  Key_Select: 93,\n  Key_Yes: 0,\n  Key_ToggleCallHangup: 0,\n  Key_VoiceDial: 0,\n  Key_LastNumberRedial: 0,\n  Key_Execute: 43,\n  Key_Printer: 42,\n  Key_Play: 250,\n  Key_Sleep: 95,\n  Key_Zoom: 251,\n  Key_Cancel: 3,\n  // Align\n  AlignLeft: 0x0001,\n  AlignRight: 0x0002,\n  AlignHCenter: 0x0004,\n  AlignJustify: 0x0008,\n  AlignTop: 0x0020,\n  AlignBottom: 0x0040,\n  AlignVCenter: 0x0080,\n  AlignCenter: 0x0084,\n  AlignBaseline: 0x0100,\n  AlignAbsolute: 0x0010,\n  AlignLeading: 0x0001,\n  AlignTrailing: 0x0002,\n  AlignHorizontal_Mask: 0x001f,\n  AlignVertical_Mask: 0x01e0,\n  // Screen\n  PrimaryOrientation: 0,\n  PortraitOrientation: 1,\n  LandscapeOrientation: 2,\n  InvertedPortraitOrientation: 4,\n  InvertedLandscapeOrientation: 8,\n  // CursorShape\n  ArrowCursor: 0,\n  UpArrowCursor: 1,\n  CrossCursor: 2,\n  WaitCursor: 3,\n  IBeamCursor: 4,\n  SizeVerCursor: 5,\n  SizeHorCursor: 6,\n  SizeBDiagCursor: 7,\n  SizeFDiagCursor: 8,\n  SizeAllCursor: 9,\n  BlankCursor: 10,\n  SplitVCursor: 11,\n  SplitHCursor: 12,\n  PointingHandCursor: 13,\n  ForbiddenCursor: 14,\n  WhatsThisCursor: 15,\n  BusyCursor: 16,\n  OpenHandCursor: 17,\n  ClosedHandCursor: 18,\n  DragCopyCursor: 19,\n  DragMoveCursor: 20,\n  DragLinkCursor: 21,\n  LastCursor: 21, //DragLinkCursor,\n  BitmapCursor: 24,\n  CustomCursor: 25,\n  // ScrollBar Policy\n  ScrollBarAsNeeded: 0,\n  ScrollBarAlwaysOff: 1,\n  ScrollBarAlwaysOn: 2\n};\n\nQmlWeb.Qt = Qt;\n\nvar QMLBinding = function () {\n  /**\r\n   * Create QML binding.\r\n   * @param {Variant} val Sourcecode or function representing the binding\r\n   * @param {Array} tree Parser tree of the binding\r\n   * @return {Object} Object representing the binding\r\n   */\n  function QMLBinding(val, tree) {\n    _classCallCheck(this, QMLBinding);\n\n    // this.isFunction states whether the binding is a simple js statement or a\n    // function containing a return statement. We decide this on whether it is a\n    // code block or not. If it is, we require a return statement. If it is a\n    // code block it could though also be a object definition, so we need to\n    // check that as well (it is, if the content is labels).\n    this.isFunction = tree && tree[0] === \"block\" && tree[1][0] && tree[1][0][0] !== \"label\";\n    this.src = val;\n    this.compiled = false;\n  }\n\n  _createClass(QMLBinding, [{\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        src: this.src,\n        deps: JSON.stringify(this.deps),\n        tree: JSON.stringify(this.tree)\n      };\n    }\n  }, {\n    key: \"eval\",\n    value: function _eval(object, context, basePath) {\n      QmlWeb.executionContext = context;\n      if (basePath) {\n        QmlWeb.engine.$basePath = basePath;\n      }\n      // .call is needed for `this` support\n      return this.impl.call(object, object, context);\n    }\n\n    /**\r\n    * Compile binding. Afterwards you may call binding.eval to evaluate.\r\n    */\n\n  }, {\n    key: \"compile\",\n    value: function compile() {\n      this.src = this.src.trim();\n      this.impl = QMLBinding.bindSrc(this.src, this.isFunction);\n      this.compiled = true;\n    }\n  }], [{\n    key: \"bindSrc\",\n    value: function bindSrc(src, isFunction) {\n      return new Function(\"__executionObject\", \"__executionContext\", \"\\n      with(QmlWeb) with(__executionContext) with(__executionObject) {\\n        \" + (isFunction ? \"\" : \"return\") + \" \" + src + \"\\n      }\\n    \");\n    }\n  }]);\n\n  return QMLBinding;\n}();\n\nQmlWeb.QMLBinding = QMLBinding;\n\nfunction QMLBoolean(val) {\n  return !!val;\n}\nQMLBoolean.plainType = true;\nQmlWeb.qmlBoolean = QMLBoolean;\n\n// There can only be one running QMLEngine.\n// This variable points to the currently running engine.\nQmlWeb.engine = null;\n\nQmlWeb.useShadowDom = true;\n\nvar geometryProperties = [\"width\", \"height\", \"fill\", \"x\", \"y\", \"left\", \"right\", \"top\", \"bottom\"];\n\n// QML engine. EXPORTED.\n\nvar QMLEngine = function () {\n  function QMLEngine(element) {\n    var _this13 = this;\n\n    _classCallCheck(this, QMLEngine);\n\n    //----------Public Members----------\n    this.onceFunc = false;\n    this.fps = 60;\n    // Math.floor, causes bugs to timing?\n    this.$interval = Math.floor(1000 / this.fps);\n    this.dom = element || document.body;\n\n    // Target for the DOM children\n    this.domTarget = this.dom;\n    if (QmlWeb.useShadowDom && this.dom.attachShadow) {\n      this.domTarget = this.dom.attachShadow({ mode: \"open\" });\n    }\n\n    // Cached component trees (post-QmlWeb.convertToEngine)\n    this.components = {};\n\n    // Cached parsed JS files (post-QmlWeb.jsparse)\n    this.js = {};\n\n    // List of Component.completed signals\n    this.completedSignals = [];\n\n    // Current operation state of the engine (Idle, init, etc.)\n    this.operationState = 1;\n\n    // List of properties whose values are bindings. For internal use only.\n    this.bindedProperties = [];\n\n    // List of operations to perform later after init. For internal use only.\n    this.pendingOperations = [];\n\n    // Root object of the engine\n    this.rootObject = null;\n\n    // Base path of qml engine (used for resource loading)\n    this.$basePath = \"\";\n\n    // Module import paths overrides\n    this.userAddedModulePaths = {};\n\n    // Stores data for setImportPathList(), importPathList(), and addImportPath\n    this.userAddedImportPaths = [];\n\n    //----------Private Members---------\n\n    // Ticker resource id and ticker callbacks\n    this._tickers = [];\n    this._lastTick = Date.now();\n\n    // Callbacks for stopping or starting the engine\n    this._whenStop = [];\n    this._whenStart = [];\n\n    // Keyboard management\n    this.$initKeyboard();\n\n    //----------Construct----------\n\n    // No QML stuff should stand out the root element\n    this.dom.style.overflow = \"hidden\";\n\n    // Needed to make absolute positioning work\n    if (!this.dom.style.position) {\n      var style = window.getComputedStyle(this.dom);\n      if (style.getPropertyValue(\"position\") === \"static\") {\n        this.dom.style.position = \"relative\";\n        this.dom.style.top = \"0\";\n        this.dom.style.left = \"0\";\n      }\n    }\n\n    window.addEventListener(\"resize\", function () {\n      return _this13.updateGeometry();\n    });\n  }\n\n  //---------- Public Methods ----------\n\n  _createClass(QMLEngine, [{\n    key: \"updateGeometry\",\n    value: function updateGeometry() {\n      // we have to call `this.implicitHeight =` and `this.implicitWidth =`\n      // each time the root element changes it's geometry\n      // to reposition child elements of qml scene\n      var width = void 0;\n      var height = void 0;\n\n      if (this.dom === document.body) {\n        width = window.innerWidth;\n        height = window.innerHeight;\n        this.dom.style.margin = '0';\n        this.dom.style.padding = '0';\n      } else {\n        var style = window.getComputedStyle(this.dom);\n        width = parseFloat(style.getPropertyValue(\"width\"));\n        height = parseFloat(style.getPropertyValue(\"height\"));\n      }\n\n      if (width) {\n        this.rootObject.width = width; //временно\n      }\n      if (height) {\n        this.rootObject.height = height; //временно\n      }\n    }\n\n    // Start the engine\n\n  }, {\n    key: \"start\",\n    value: function start() {\n      if (!this.onceFunc) {\n        this.rootObject.dom.insertAdjacentHTML(\"beforeend\", \"\\n      <style>\\n        .ListView, .GridView, .MouseArea, .Flickable {\\n              overflow: auto;\\n              -ms-overflow-style: none;\\n              scrollbar-width: none;\\n        }\\n\\n        .ListView::-webkit-scrollbar, .GridView::-webkit-scrollbar, .MouseArea::-webkit-scrollbar, .Flickable::-webkit-scrollbar {\\n              width: 0;\\n              height: 0;\\n        }\\n        .unselectable {\\n          -webkit-touch-callout: none;\\n          -webkit-user-select: none;\\n          -khtml-user-select: none;\\n          -moz-user-select: none;\\n          -ms-user-select: none;\\n          user-select: none;           \\n        }\\n      </style>\");\n        this.onceFunc = true;\n      }\n\n      QmlWeb.engine = this;\n      var QMLOperationState = QmlWeb.QMLOperationState;\n      if (this.operationState !== QMLOperationState.Running) {\n        this.operationState = QMLOperationState.Running;\n        this._tickerId = setInterval(this._tick.bind(this), this.$interval);\n        this._whenStart.forEach(function (callback) {\n          return callback();\n        });\n      }\n    }\n\n    // Stop the engine\n\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      var QMLOperationState = QmlWeb.QMLOperationState;\n      if (this.operationState === QMLOperationState.Running) {\n        clearInterval(this._tickerId);\n        this.operationState = QMLOperationState.Idle;\n        this._whenStop.forEach(function (callback) {\n          return callback();\n        });\n      }\n    }\n\n    // eslint-disable-next-line max-len\n    /** from http://docs.closure-library.googlecode.com/git/local_closure_goog_uri_uri.js.source.html\r\n     *\r\n     * Removes dot segments in given path component, as described in\r\n     * RFC 3986, section 5.2.4.\r\n     *\r\n     * @param {string} path A non-empty path component.\r\n     * @return {string} Path component with removed dot segments.\r\n     */\n\n  }, {\n    key: \"removeDotSegments\",\n    value: function removeDotSegments(path) {\n      // path.startsWith(\"/\") is not supported in some browsers\n      var leadingSlash = path && path[0] === \"/\";\n      var segments = path.split(\"/\");\n      var out = [];\n\n      for (var pos = 0; pos < segments.length;) {\n        var segment = segments[pos++];\n\n        if (segment === \".\") {\n          if (leadingSlash && pos === segments.length) {\n            out.push(\"\");\n          }\n        } else if (segment === \"..\") {\n          if (out.length > 1 || out.length === 1 && out[0] !== \"\") {\n            out.pop();\n          }\n          if (leadingSlash && pos === segments.length) {\n            out.push(\"\");\n          }\n        } else {\n          out.push(segment);\n          leadingSlash = true;\n        }\n      }\n\n      return out.join(\"/\");\n    }\n  }, {\n    key: \"extractBasePath\",\n    value: function extractBasePath(file) {\n      // work both in url (\"/\") and windows (\"\\\", from file://d:\\test\\) notation\n      var basePath = file.split(/[/\\\\]/);\n      basePath[basePath.length - 1] = \"\";\n      return basePath.join(\"/\");\n    }\n  }, {\n    key: \"extractFileName\",\n    value: function extractFileName(file) {\n      return file.split(/[/\\\\]/).pop();\n    }\n\n    // Load file, parse and construct (.qml or .qml.js)\n\n  }, {\n    key: \"loadFile\",\n    value: function loadFile(file) {\n      var parentComponent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n      // Create an anchor element to get the absolute path from the DOM\n      if (!this.$basePathA) {\n        this.$basePathA = document.createElement(\"a\");\n      }\n      this.$basePathA.href = this.extractBasePath(file);\n      this.$basePath = this.$basePathA.href;\n      var fileName = this.extractFileName(file);\n      var tree = this.loadComponent(this.$resolvePath(fileName));\n      return this.loadQMLTree(tree, parentComponent, file);\n    }\n\n    // parse and construct qml\n    // file is not required; only for debug purposes\n    // This function is only used by the QmlWeb tests\n\n  }, {\n    key: \"loadQML\",\n    value: function loadQML(src) {\n      var parentComponent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var file = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;\n\n      return this.loadQMLTree(QmlWeb.parseQML(src, file), parentComponent, file);\n    }\n  }, {\n    key: \"loadQMLTree\",\n    value: function loadQMLTree(tree) {\n      var parentComponent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var file = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;\n\n      QmlWeb.engine = this;\n\n      // Create and initialize objects\n      var QMLComponent = QmlWeb.getConstructor(\"QtQml\", \"2.0\", \"Component\");\n      var component = new QMLComponent({\n        object: tree,\n        parent: parentComponent\n      });\n\n      this.loadImports(tree.$imports, undefined, component.importContextId);\n      component.$basePath = this.$basePath;\n      component.$imports = tree.$imports; // for later use\n      component.$file = file; // just for debugging\n\n      this.rootObject = component.$createObject(parentComponent);\n      if (this.rootObject.dom) {\n        this.domTarget.appendChild(this.rootObject.dom);\n      }\n      this.$initializePropertyBindings();\n\n      this.start();\n\n      this.updateGeometry();\n\n      this.callCompletedSignals();\n\n      return component;\n    }\n  }, {\n    key: \"rootContext\",\n    value: function rootContext() {\n      return this.rootObject.$context;\n    }\n\n    // next 3 methods used in Qt.createComponent for qml files lookup\n    // http://doc.qt.io/qt-5/qqmlengine.html#addImportPath\n\n  }, {\n    key: \"addImportPath\",\n    value: function addImportPath(dirpath) {\n      this.userAddedImportPaths.push(dirpath);\n    }\n\n    /* Add this dirpath to be checked for components. This is the result of\r\n     * something like:\r\n     *\r\n     * import \"SomeDir/AnotherDirectory\"\r\n     *\r\n     * The importContextId ensures it is only accessible from the file in which\r\n     * it was imported. */\n\n  }, {\n    key: \"addComponentImportPath\",\n    value: function addComponentImportPath(importContextId, dirpath, qualifier) {\n      if (!this.componentImportPaths) {\n        this.componentImportPaths = {};\n      }\n      if (!this.componentImportPaths[importContextId]) {\n        this.componentImportPaths[importContextId] = {};\n      }\n\n      var paths = this.componentImportPaths[importContextId];\n\n      if (qualifier) {\n        if (!paths.qualified) {\n          paths.qualified = {};\n        }\n        paths.qualified[qualifier] = dirpath;\n      } else {\n        if (!paths.unqualified) {\n          paths.unqualified = [];\n        }\n        paths.unqualified.push(dirpath);\n      }\n    }\n  }, {\n    key: \"importSearchPaths\",\n    value: function importSearchPaths(importContextId) {\n      if (!this.componentImportPaths) {\n        return [];\n      }\n      var paths = this.componentImportPaths[importContextId];\n      if (!paths) {\n        return [];\n      }\n      return paths.unqualified || [];\n    }\n  }, {\n    key: \"qualifiedImportPath\",\n    value: function qualifiedImportPath(importContextId, qualifier) {\n      if (!this.componentImportPaths) {\n        return \"\";\n      }\n      var paths = this.componentImportPaths[importContextId];\n      if (!paths || !paths.qualified) {\n        return \"\";\n      }\n      return paths.qualified[qualifier] || \"\";\n    }\n  }, {\n    key: \"setImportPathList\",\n    value: function setImportPathList(arrayOfDirs) {\n      this.userAddedImportPaths = arrayOfDirs;\n    }\n  }, {\n    key: \"importPathList\",\n    value: function importPathList() {\n      return this.userAddedImportPaths;\n    }\n\n    // `addModulePath` defines conrete path for module lookup\n    // e.g. addModulePath(\"QtQuick.Controls\", \"http://example.com/controls\")\n    // will force system to `import QtQuick.Controls` module from\n    // `http://example.com/controls/qmldir`\n\n  }, {\n    key: \"addModulePath\",\n    value: function addModulePath(moduleName, dirPath) {\n      // Keep the mapping. It will be used in loadImports() function.\n      // Remove trailing slash as it required for `readQmlDir`.\n      this.userAddedModulePaths[moduleName] = dirPath.replace(/\\/$/, \"\");\n    }\n  }, {\n    key: \"registerProperty\",\n    value: function registerProperty(obj, propName) {\n      var dependantProperties = [];\n      var value = obj[propName];\n\n      var getter = function getter() {\n        var QMLProperty = QmlWeb.QMLProperty;\n        if (QMLProperty.evaluatingProperty && dependantProperties.indexOf(QMLProperty.evaluatingProperty) === -1) {\n          dependantProperties.push(QMLProperty.evaluatingProperty);\n        }\n        return value;\n      };\n\n      var setter = function setter(newVal) {\n        value = newVal;\n        for (var i in dependantProperties) {\n          dependantProperties[i].update();\n        }\n      };\n\n      QmlWeb.setupGetterSetter(obj, propName, getter, setter);\n    }\n  }, {\n    key: \"loadImports\",\n    value: function loadImports(importsArray) {\n      var currentFileDir = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.$basePath;\n      var importContextId = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;\n\n      if (!this.qmldirsContents) {\n        this.qmldirsContents = {}; // cache\n\n        // putting initial keys in qmldirsContents - is a hack. We should find a\n        // way to explain to qmlweb, is this built-in module or qmldir-style\n        // module.\n        for (var module in QmlWeb.modules) {\n          if (module !== \"Main\") {\n            this.qmldirsContents[module] = {};\n          }\n        }\n      }\n\n      if (!this.qmldirs) {\n        this.qmldirs = {}; // resulting components lookup table\n      }\n\n      if (!importsArray || importsArray.length === 0) {\n        return;\n      }\n\n      for (var i = 0; i < importsArray.length; i++) {\n        this.loadImport(importsArray[i], currentFileDir, importContextId);\n      }\n    }\n  }, {\n    key: \"loadImport\",\n    value: function loadImport(entry, currentFileDir, importContextId) {\n      var name = entry[1];\n\n      // is it url to remote resource\n      var nameIsUrl = name.indexOf(\"//\") === 0 || name.indexOf(\"://\") >= 0;\n      // is it a module name, e.g. QtQuick, QtQuick.Controls, etc\n      var nameIsQualifiedModuleName = entry[4];\n      // is it a js file\n      var nameIsJs = name.slice(-3) === \".js\";\n      // local [relative] dir\n      var nameIsDir = !nameIsQualifiedModuleName && !nameIsUrl && !nameIsJs;\n\n      if (nameIsDir) {\n        name = this.$resolvePath(name, currentFileDir);\n        if (name[name.length - 1] === \"/\") {\n          // remove trailing slash as it required for `readQmlDir`\n          name = name.substr(0, name.length - 1);\n        }\n      }\n\n      var content = this.qmldirsContents[name];\n      // check if we have already loaded that qmldir file\n      if (!content) {\n        if (nameIsQualifiedModuleName && this.userAddedModulePaths[name]) {\n          // 1. we have qualified module and user had configured path for that\n          // module with this.addModulePath\n          content = QmlWeb.readQmlDir(this.userAddedModulePaths[name]);\n        } else if (nameIsUrl || nameIsDir) {\n          // 2. direct load\n          // nameIsUrl => url do not need dirs\n          // nameIsDir => already computed full path above\n          content = QmlWeb.readQmlDir(name);\n        } else if (nameIsJs) {\n          // 3. Js file, don't need qmldir\n        } else {\n          // 4. qt-style lookup for qualified module\n          var probableDirs = [currentFileDir].concat(this.importPathList());\n          var diredName = name.replace(/\\./g, \"/\");\n\n          for (var k = 0; k < probableDirs.length; k++) {\n            var file = probableDirs[k] + diredName;\n            content = QmlWeb.readQmlDir(file);\n            if (content) {\n              break;\n            }\n          }\n        }\n        this.qmldirsContents[name] = content;\n      }\n\n      /* If there is no qmldir, add these directories to the list of places to\r\n        * search for components (within this import scope). \"noqmldir\" is\r\n        * inserted into the qmldir cache to avoid future attempts at fetching\r\n        * the qmldir file, but we always need to the call to\r\n        * \"addComponentImportPath\" for these sorts of directories. */\n      if (!content || content === \"noqmldir\") {\n        if (nameIsDir) {\n          if (entry[3]) {\n            /* Use entry[1] directly, as we don't want to include the\r\n              * basePath, otherwise it gets prepended twice in\r\n              * createComponent. */\n            this.addComponentImportPath(importContextId, entry[1] + \"/\", entry[3]);\n          } else {\n            this.addComponentImportPath(importContextId, name + \"/\");\n          }\n        }\n\n        this.qmldirsContents[name] = \"noqmldir\";\n        return;\n      }\n\n      // copy founded externals to global var\n      // TODO actually we have to copy it to current component\n      for (var attrname in content.externals) {\n        this.qmldirs[attrname] = content.externals[attrname];\n      }\n\n      // keep already loaded qmldir files\n      this.qmldirsContents[name] = content;\n    }\n  }, {\n    key: \"size\",\n    value: function size() {\n      return {\n        width: this.rootObject.getWidth(),\n        height: this.rootObject.getHeight()\n      };\n    }\n  }, {\n    key: \"focusedElement\",\n    value: function focusedElement() {\n      return this.rootContext().activeFocus;\n    }\n\n    //---------- Private Methods ----------\n\n  }, {\n    key: \"$initKeyboard\",\n    value: function $initKeyboard() {\n      var _this14 = this;\n\n      document.onkeypress = function (e) {\n        var focusedElement = _this14.focusedElement();\n        var event = QmlWeb.eventToKeyboard(e || window.event);\n        var eventName = QmlWeb.keyboardSignals[event.key];\n\n        while (focusedElement && !event.accepted) {\n          var backup = focusedElement.$context.event;\n          focusedElement.$context.event = event;\n          focusedElement.Keys.pressed(event);\n          if (eventName) {\n            focusedElement.Keys[eventName](event);\n          }\n          focusedElement.$context.event = backup;\n          if (event.accepted) {\n            e.preventDefault();\n          } else {\n            focusedElement = focusedElement.$parent;\n          }\n        }\n      };\n\n      document.onkeyup = function (e) {\n        var focusedElement = _this14.focusedElement();\n        var event = QmlWeb.eventToKeyboard(e || window.event);\n\n        while (focusedElement && !event.accepted) {\n          var backup = focusedElement.$context.event;\n          focusedElement.$context.event = event;\n          focusedElement.Keys.released(event);\n          focusedElement.$context.event = backup;\n          if (event.accepted) {\n            e.preventDefault();\n          } else {\n            focusedElement = focusedElement.$parent;\n          }\n        }\n      };\n    }\n  }, {\n    key: \"_tick\",\n    value: function _tick() {\n      var now = Date.now();\n      var elapsed = now - this._lastTick;\n      this._lastTick = now;\n      this._tickers.forEach(function (ticker) {\n        return ticker(now, elapsed);\n      });\n    }\n\n    // Load resolved file, parse and construct as Component (.qml)\n\n  }, {\n    key: \"loadComponent\",\n    value: function loadComponent(file) {\n      if (file in this.components) {\n        return this.components[file];\n      }\n\n      var uri = this.$parseURI(file);\n      if (!uri) {\n        return undefined;\n      }\n\n      var tree = void 0;\n      if (uri.scheme === \"qrc://\") {\n        tree = QmlWeb.qrc[uri.path];\n        if (!tree) {\n          return undefined;\n        }\n        // QmlWeb.qrc contains pre-parsed Component objects, but they still need\n        // convertToEngine called on them.\n        tree = QmlWeb.convertToEngine(tree);\n      } else {\n        var src = QmlWeb.getUrlContents(file, true);\n        if (!src) {\n          console.error(\"QMLEngine.loadComponent: Failed to load:\", file);\n          return undefined;\n        }\n\n        console.log(\"QMLEngine.loadComponent: Loading file:\", file);\n        tree = QmlWeb.parseQML(src, file);\n      }\n\n      if (!tree) {\n        return undefined;\n      }\n\n      if (tree.$children.length !== 1) {\n        console.error(\"QMLEngine.loadComponent: Failed to load:\", file, \": A QML component must only contain one root element!\");\n        return undefined;\n      }\n\n      tree.$file = file;\n      this.components[file] = tree;\n      return tree;\n    }\n\n    // Load resolved file and parse as JavaScript\n\n  }, {\n    key: \"loadJS\",\n    value: function loadJS(file) {\n      if (file in this.js) {\n        return this.js[file];\n      }\n\n      var uri = this.$parseURI(file);\n      if (!uri) {\n        return undefined;\n      }\n\n      var jsData = void 0;\n      if (uri.scheme === \"qrc://\") {\n        jsData = QmlWeb.qrc[uri.path];\n      } else {\n        QmlWeb.loadParser();\n        jsData = QmlWeb.jsparse(QmlWeb.getUrlContents(file));\n      }\n\n      if (!jsData) {\n        return undefined;\n      }\n\n      // Remove any \".pragma\" statements, as they are not valid JavaScript\n      jsData.source = jsData.source.replace(/\\.pragma.*(?:\\r\\n|\\r|\\n)/, \"\\n\");\n\n      var contextSetter = new Function(\"$context\", \"\\n      with(QmlWeb) with ($context) {\\n        \" + jsData.source + \"\\n      }\\n      \" + jsData.exports.map(function (sym) {\n        return \"$context.\" + sym + \" = \" + sym + \";\";\n      }).join(\"\") + \"\\n    \");\n\n      this.js[file] = contextSetter;\n\n      return contextSetter;\n    }\n  }, {\n    key: \"$registerStart\",\n    value: function $registerStart(f) {\n      this._whenStart.push(f);\n    }\n  }, {\n    key: \"$registerStop\",\n    value: function $registerStop(f) {\n      this._whenStop.push(f);\n    }\n  }, {\n    key: \"$addTicker\",\n    value: function $addTicker(t) {\n      this._tickers.push(t);\n    }\n  }, {\n    key: \"$removeTicker\",\n    value: function $removeTicker(t) {\n      var index = this._tickers.indexOf(t);\n      if (index !== -1) {\n        this._tickers.splice(index, 1);\n      }\n    }\n  }, {\n    key: \"$initializePropertyBindings\",\n    value: function $initializePropertyBindings() {\n      // Initialize property bindings\n      // we use `while`, because $initializePropertyBindings may be called\n      // recursive (because of Loader and/or createQmlObject )\n      while (this.bindedProperties.length > 0) {\n        var property = this.bindedProperties.shift();\n\n        if (!property.binding) {\n          // Probably, the binding was overwritten by an explicit value. Ignore.\n          continue;\n        }\n\n        if (property.needsUpdate) {\n          property.update();\n        } else if (geometryProperties.indexOf(property.name) >= 0) {\n          // It is possible that bindings with these names was already evaluated\n          // during eval of other bindings but in that case $updateHGeometry and\n          // $updateVGeometry could be blocked during their eval.\n          // So we call them explicitly, just in case.\n          var _obj = property.obj,\n              changed = property.changed;\n\n          if (_obj.$updateHGeometry && changed.isConnected(_obj, _obj.$updateHGeometry)) {\n            _obj.$updateHGeometry(property.val, property.val, property.name);\n          }\n          if (_obj.$updateVGeometry && changed.isConnected(_obj, _obj.$updateVGeometry)) {\n            _obj.$updateVGeometry(property.val, property.val, property.name);\n          }\n        }\n      }\n\n      this.$initializeAliasSignals();\n    }\n\n    // This parses the full URL into scheme, authority and path\n\n  }, {\n    key: \"$parseURI\",\n    value: function $parseURI(uri) {\n      var match = uri.match(/^([^/]*?:\\/\\/)(.*?)(\\/.*)$/);\n      if (match) {\n        return {\n          scheme: match[1],\n          authority: match[2],\n          path: match[3]\n        };\n      }\n      return undefined;\n    }\n\n    // Return a path to load the file\n\n  }, {\n    key: \"$resolvePath\",\n    value: function $resolvePath(file) {\n      var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.$basePath;\n\n      // probably, replace :// with :/ ?\n      if (!file || file.indexOf(\"://\") !== -1) {\n        return file;\n      }\n\n      var schemes = [\"data:\", \"blob:\", \"about:\"];\n      for (var i = 0; i < schemes.length; i++) {\n        if (file.lastIndexOf(schemes[i], 0) === 0) {\n          return file;\n        }\n      }\n\n      var basePathURI = this.$parseURI(basePath);\n      if (!basePathURI) {\n        return file;\n      }\n\n      var path = basePathURI.path;\n      if (file.indexOf(\"/\") === 0) {\n        path = file;\n      } else {\n        path = \"\" + path + file;\n      }\n\n      // Remove duplicate slashes and dot segments in the path\n      path = this.removeDotSegments(path.replace(/([^:]\\/)\\/+/g, \"$1\"));\n\n      return \"\" + basePathURI.scheme + basePathURI.authority + path;\n    }\n\n    // Return a DOM-valid path to load the image (fileURL is an already-resolved\n    // URL)\n\n  }, {\n    key: \"$resolveImageURL\",\n    value: function $resolveImageURL(fileURL) {\n      var uri = this.$parseURI(fileURL);\n      // If we are within the resource system, look up a \"real\" path that can be\n      // used by the DOM. If not found, return the path itself without the\n      // \"qrc://\" scheme.\n      if (uri && uri.scheme === \"qrc://\") {\n        return QmlWeb.qrc[uri.path] || uri.path;\n      }\n\n      // Something we can't parse, just pass it through\n      return fileURL;\n    }\n  }, {\n    key: \"$initializeAliasSignals\",\n    value: function $initializeAliasSignals() {\n      // Perform pending operations. Now we use it only to init alias's \"changed\"\n      // handlers, that's why we have such strange function name.\n      while (this.pendingOperations.length > 0) {\n        var op = this.pendingOperations.shift();\n        op[0](op[1], op[2], op[3]);\n      }\n      this.pendingOperations = [];\n    }\n  }, {\n    key: \"callCompletedSignals\",\n    value: function callCompletedSignals() {\n      // the while loop is better than for..in loop, because completedSignals\n      // array might change dynamically when some completed signal handlers will\n      // create objects dynamically via createQmlObject or Loader\n      while (this.completedSignals.length > 0) {\n        var handler = this.completedSignals.shift();\n        handler();\n      }\n    }\n  }]);\n\n  return QMLEngine;\n}();\n\nQmlWeb.QMLEngine = QMLEngine;\n\nfunction QMLInteger(val) {\n  return val | 0;\n}\nQMLInteger.plainType = true;\nQmlWeb.qmlInteger = QMLInteger;\n\nfunction QMLList(meta) {\n  var list = [];\n  if (meta.object instanceof Array) {\n    for (var i in meta.object) {\n      list.push(QmlWeb.construct({\n        object: meta.object[i],\n        parent: meta.parent,\n        context: meta.context\n      }));\n    }\n  } else if (meta.object instanceof QmlWeb.QMLMetaElement) {\n    list.push(QmlWeb.construct({\n      object: meta.object,\n      parent: meta.parent,\n      context: meta.context\n    }));\n  }\n\n  return list;\n}\nQMLList.plainType = true;\nQmlWeb.qmlList = QMLList;\n\nfunction QMLNumber(val) {\n  return +val;\n}\nQMLNumber.plainType = true;\nQmlWeb.qmlNumber = QMLNumber;\n\nvar QMLOperationState = {\n  Idle: 1,\n  Init: 2,\n  Running: 3\n};\n\nQmlWeb.QMLOperationState = QMLOperationState;\n\nvar QMLProperty = function () {\n  function QMLProperty(type, obj, name) {\n    _classCallCheck(this, QMLProperty);\n\n    this.obj = obj;\n    this.name = name;\n    this.changed = QmlWeb.Signal.signal([], { obj: obj });\n    this.binding = null;\n    this.objectScope = null;\n    this.componentScope = null;\n    this.value = undefined;\n    this.type = type;\n    this.animation = null;\n    this.needsUpdate = true;\n\n    // This list contains all signals that hold references to this object.\n    // It is needed when deleting, as we need to tidy up all references to this\n    // object.\n    this.$tidyupList = [];\n  }\n\n  // Called by update and set to actually set this.val, performing any type\n  // conversion required.\n\n\n  _createClass(QMLProperty, [{\n    key: \"$setVal\",\n    value: function $setVal(val, componentScope) {\n      var _this15 = this;\n\n      var constructors = QmlWeb.constructors;\n      if (constructors[this.type] === QmlWeb.qmlList) {\n        this.val = QmlWeb.qmlList({\n          object: val,\n          parent: this.obj,\n          context: componentScope\n        });\n      } else if (val instanceof QmlWeb.QMLMetaElement) {\n        var QMLComponent = QmlWeb.getConstructor(\"QtQml\", \"2.0\", \"Component\");\n        if (constructors[val.$class] === QMLComponent || constructors[this.type] === QMLComponent) {\n          this.val = new QMLComponent({\n            object: val,\n            parent: this.obj,\n            context: componentScope\n          });\n          /* $basePath must be set here so that Components that are assigned to\r\n           * properties (e.g. Repeater delegates) can properly resolve child\r\n           * Components that live in the same directory in\r\n           * Component.createObject. */\n          this.val.$basePath = componentScope.$basePath;\n        } else {\n          this.val = QmlWeb.construct({\n            object: val,\n            parent: this.obj,\n            context: componentScope\n          });\n        }\n      } else if (!constructors[this.type]) {\n        this.val = val;\n      } else if (constructors[this.type].requireParent) {\n        this.val = new constructors[this.type](this.obj, val);\n      } else if (val === undefined && constructors[this.type].nonNullableType) {\n        this.val = new constructors[this.type]();\n      } else if (constructors[this.type].requireConstructor) {\n        this.val = new constructors[this.type](val);\n      } else if (val instanceof Object || val === undefined || val === null) {\n        this.val = val;\n      } else if (constructors[this.type].plainType) {\n        this.val = constructors[this.type](val);\n      } else {\n        this.val = new constructors[this.type](val);\n      }\n      if (this.val && this.val.$changed) {\n        this.val.$changed.connect(function () {\n          var oldVal = _this15.val; // TODO\n          _this15.changed(_this15.val, oldVal, _this15.name);\n        });\n      } else if (this.val && this.val.$properties) {\n        Object.keys(this.val.$properties).forEach(function (pname) {\n          var prop = _this15.val.$properties[pname];\n          if (!prop || !prop.connect) return;\n          // TODO: oldVal\n          prop.connect(function () {\n            return _this15.changed(_this15.val, _this15.val, _this15.name);\n          });\n        });\n      }\n    }\n\n    // Updater recalculates the value of a property if one of the dependencies\n    // changed\n\n  }, {\n    key: \"update\",\n    value: function update() {\n      this.needsUpdate = false;\n\n      if (!this.binding) {\n        return;\n      }\n\n      var oldVal = this.val;\n\n      try {\n        QMLProperty.pushEvaluatingProperty(this);\n        if (!this.binding.compiled) {\n          this.binding.compile();\n        }\n        this.$setVal(this.binding.eval(this.objectScope, this.componentScope, this.componentScopeBasePath), this.componentScope);\n      } catch (e) {\n        console.log(\"QMLProperty.update binding error:\", e, Function.prototype.toString.call(this.binding.eval));\n      } finally {\n        QMLProperty.popEvaluatingProperty();\n      }\n\n      if (this.animation) {\n        this.animation.$actions = [{\n          target: this.animation.target || this.obj,\n          property: this.animation.property || this.name,\n          from: this.animation.from || oldVal,\n          to: this.animation.to || this.val\n        }];\n        this.animation.restart();\n      }\n\n      if (this.val !== oldVal) {\n        this.changed(this.val, oldVal, this.name);\n      }\n    }\n\n    // Define getter\n\n  }, {\n    key: \"get\",\n    value: function get() {\n      //if (this.needsUpdate && !QMLProperty.evaluatingPropertyPaused) {\n      if (this.needsUpdate && QmlWeb.engine.operationState !== QmlWeb.QMLOperationState.Init) {\n        this.update();\n      }\n\n      // If this call to the getter is due to a property that is dependant on this\n      // one, we need it to take track of changes\n      if (QMLProperty.evaluatingProperty) {\n        //console.log(this,QMLProperty.evaluatingPropertyStack.slice(0),this.val);\n        this.changed.connect(QMLProperty.evaluatingProperty, QMLProperty.prototype.update, QmlWeb.Signal.UniqueConnection);\n      }\n\n      return this.val;\n    }\n    // Define setter\n\n  }, {\n    key: \"set\",\n    value: function set(newVal, reason, objectScope, componentScope) {\n      var oldVal = this.val;\n\n      var val = newVal;\n      if (val instanceof QmlWeb.QMLBinding) {\n        if (!objectScope || !componentScope) {\n          throw new Error(\"Internal error: binding assigned without scope\");\n        }\n        this.binding = val;\n        this.objectScope = objectScope;\n        this.componentScope = componentScope;\n        this.componentScopeBasePath = componentScope.$basePath;\n\n        if (QmlWeb.engine.operationState !== QmlWeb.QMLOperationState.Init) {\n          if (!val.compiled) {\n            val.compile();\n          }\n          try {\n            QMLProperty.pushEvaluatingProperty(this);\n            this.needsUpdate = false;\n            val = this.binding.eval(objectScope, componentScope, this.componentScopeBasePath);\n          } finally {\n            QMLProperty.popEvaluatingProperty();\n          }\n        } else {\n          QmlWeb.engine.bindedProperties.push(this);\n          return;\n        }\n      } else {\n        if (reason !== QMLProperty.ReasonAnimation) {\n          this.binding = null;\n        }\n        if (val instanceof Array) {\n          val = val.slice(); // Copies the array\n        }\n      }\n\n      if (reason === QMLProperty.ReasonInit && typeof val === \"undefined\") {\n        if (QMLProperty.typeInitialValues.hasOwnProperty(this.type)) {\n          val = QMLProperty.typeInitialValues[this.type];\n        }\n      }\n\n      this.$setVal(val, componentScope);\n\n      if (this.val !== oldVal) {\n        if (this.animation && reason === QMLProperty.ReasonUser) {\n          this.animation.running = false;\n          this.animation.$actions = [{\n            target: this.animation.target || this.obj,\n            property: this.animation.property || this.name,\n            from: this.animation.from || oldVal,\n            to: this.animation.to || this.val\n          }];\n          this.animation.running = true;\n        }\n        if (this.obj.$syncPropertyToRemote instanceof Function && reason === QMLProperty.ReasonUser) {\n          // is a remote object from e.g. a QWebChannel\n          this.obj.$syncPropertyToRemote(this.name, val);\n        } else {\n          this.changed(this.val, oldVal, this.name);\n        }\n      }\n    }\n  }], [{\n    key: \"pushEvalStack\",\n    value: function pushEvalStack() {\n      QMLProperty.evaluatingPropertyStackOfStacks.push(QMLProperty.evaluatingPropertyStack);\n      QMLProperty.evaluatingPropertyStack = [];\n      QMLProperty.evaluatingProperty = undefined;\n      //  console.log(\"evaluatingProperty=>undefined due to push stck \");\n    }\n  }, {\n    key: \"popEvalStack\",\n    value: function popEvalStack() {\n      QMLProperty.evaluatingPropertyStack = QMLProperty.evaluatingPropertyStackOfStacks.pop() || [];\n      QMLProperty.evaluatingProperty = QMLProperty.evaluatingPropertyStack[QMLProperty.evaluatingPropertyStack.length - 1];\n    }\n  }, {\n    key: \"pushEvaluatingProperty\",\n    value: function pushEvaluatingProperty(prop) {\n      // TODO say warnings if already on stack. This means binding loop.\n      // BTW actually we do not loop because needsUpdate flag is reset before\n      // entering update again.\n      if (QMLProperty.evaluatingPropertyStack.indexOf(prop) >= 0) {\n        console.error(\"Property binding loop detected for property\", prop.name, [prop].slice(0));\n      }\n      QMLProperty.evaluatingProperty = prop;\n      QMLProperty.evaluatingPropertyStack.push(prop); //keep stack of props\n    }\n  }, {\n    key: \"popEvaluatingProperty\",\n    value: function popEvaluatingProperty() {\n      QMLProperty.evaluatingPropertyStack.pop();\n      QMLProperty.evaluatingProperty = QMLProperty.evaluatingPropertyStack[QMLProperty.evaluatingPropertyStack.length - 1];\n    }\n  }]);\n\n  return QMLProperty;\n}();\n\n// Property that is currently beeing evaluated. Used to get the information\n// which property called the getter of a certain other property for\n// evaluation and is thus dependant on it.\n\n\nQMLProperty.evaluatingProperty = undefined;\nQMLProperty.evaluatingPropertyPaused = false;\nQMLProperty.evaluatingPropertyStack = [];\nQMLProperty.evaluatingPropertyStackOfStacks = [];\n\nQMLProperty.typeInitialValues = {\n  int: 0,\n  real: 0,\n  double: 0,\n  string: \"\",\n  bool: false,\n  list: [],\n  enum: 0,\n  url: \"\"\n};\n\nQMLProperty.ReasonUser = 0;\nQMLProperty.ReasonInit = 1;\nQMLProperty.ReasonAnimation = 2;\n\nQmlWeb.QMLProperty = QMLProperty;\n\nfunction QMLString(val) {\n  return \"\" + val;\n}\nQMLString.plainType = true;\nQmlWeb.qmlString = QMLString;\n\nfunction QMLUrl(val) {\n  return QmlWeb.engine.$resolvePath(\"\" + val);\n}\nQMLUrl.plainType = true;\nQmlWeb.qmlUrl = QMLUrl;\n\nfunction QMLVariant(val) {\n  return val;\n}\nQMLVariant.plainType = true;\nQmlWeb.qmlVariant = QMLVariant;\n\nwindow.addEventListener(\"load\", function () {\n  var metaTags = document.getElementsByTagName(\"body\");\n  for (var i = 0; i < metaTags.length; ++i) {\n    var metaTag = metaTags[i];\n    var source = metaTag.getAttribute(\"data-qml\");\n    if (source) {\n      QmlWeb.qmlEngine = new QmlWeb.QMLEngine();\n      QmlWeb.qmlEngine.loadFile(source);\n      QmlWeb.qmlEngine.start();\n      break;\n    }\n  }\n});\n\nvar anchorNames = [\"left\", \"right\", \"top\", \"bottom\", \"verticalCenter\", \"horizontalCenter\"];\n\nvar ignoreProps = [\"x\", \"y\", \"z\", \"scale\", \"rotation\", \"implicitWidth\", \"implicitHeight\"];\n\nfunction getProperties(file) {\n  // TODO: implement a cleaner way\n\n  var div = document.createElement(\"div\");\n  var engine = new QmlWeb.QMLEngine(div);\n  engine.loadFile(file);\n\n  var qml = engine.rootObject;\n  var properties = Object.keys(qml.$properties).filter(function (name) {\n    // Invalid names\n    if (!name.match(/^[a-z]+$/i) || name === \"is\") return false;\n\n    // We don't need anchors\n    if (anchorNames.indexOf(name) !== -1) return false;\n\n    // These properties are not supported in a good way on top-level items\n    if (ignoreProps.indexOf(name) !== -1) return false;\n\n    var type = qml.$properties[name].type;\n    return [\"real\", \"color\", \"int\", \"bool\", \"string\"].indexOf(type) !== -1;\n  });\n\n  engine.stop();\n  return properties;\n}\n\nfunction registerElement(name, file) {\n  // Delay until the document is fully loaded\n  if (document.readyState === \"loading\") {\n    document.addEventListener(\"DOMContentLoaded\", function () {\n      registerElement(name, file);\n    });\n    return;\n  }\n\n  // Bail out if Custom Elements v1 are not present\n  if (!window.customElements) {\n    throw new Error(\"window.customElements are not supported. Consider installing a polyfill.\");\n  }\n\n  // We need attributes list at this point, those form a static property\n  var properties = getProperties(file);\n  var attributes = properties.map(function (pname) {\n    return pname.toLowerCase();\n  });\n  var attr2prop = properties.reduce(function (map, pname) {\n    map[pname.toLowerCase()] = pname;\n    return map;\n  }, {});\n\n  var QmlElement = function (_HTMLElement) {\n    _inherits(QmlElement, _HTMLElement);\n\n    function QmlElement() {\n      _classCallCheck(this, QmlElement);\n\n      return _possibleConstructorReturn(this, (QmlElement.__proto__ || Object.getPrototypeOf(QmlElement)).apply(this, arguments));\n    }\n\n    _createClass(QmlElement, [{\n      key: \"connectedCallback\",\n      value: function connectedCallback() {\n        var _this17 = this;\n\n        // Default wrapper display is inline-block to support native width/height\n        var computedStyle = window.getComputedStyle(this);\n        if (computedStyle.display === \"inline\") {\n          this.style.display = \"inline-block\";\n        }\n\n        var engine = this.engine = new QmlWeb.QMLEngine(this);\n        engine.loadFile(file);\n        engine.start();\n        var qml = this.qml = engine.rootObject;\n\n        // Bind attributes\n        attributes.forEach(function (attr) {\n          var pname = attr2prop[attr] || attr;\n          var val = _this17.getAttribute(attr);\n          if (typeof val === \"string\") {\n            qml[pname] = val;\n          }\n          _this17.applyAttribute(attr);\n          Object.defineProperty(_this17, attr, {\n            get: function get() {\n              return this.qml[pname];\n            },\n            set: function set(value) {\n              this.qml[pname] = value;\n              this.applyAttribute(attr);\n            }\n          });\n          qml.$properties[pname].changed.connect(function () {\n            return _this17.applyAttribute(attr);\n          });\n        });\n\n        // Set and update wrapper width/height\n        this.style.width = qml.width + \"px\";\n        this.style.height = qml.height + \"px\";\n        qml.$properties.width.changed.connect(function (width) {\n          _this17.style.width = width + \"px\";\n        });\n        qml.$properties.height.changed.connect(function (height) {\n          _this17.style.height = height + \"px\";\n        });\n      }\n    }, {\n      key: \"attributeChangedCallback\",\n      value: function attributeChangedCallback(attr, oldValue, newValue) {\n        if (!this.qml) return;\n        var pname = attr2prop[attr] || attr;\n        var prop = this.qml.$properties[pname];\n        if (!prop) return;\n        switch (prop.type) {\n          case \"bool\":\n            this.qml[pname] = typeof newValue === \"string\";\n            break;\n          default:\n            this.qml[pname] = newValue;\n        }\n      }\n    }, {\n      key: \"applyAttribute\",\n      value: function applyAttribute(attr) {\n        var pname = attr2prop[attr] || attr;\n        var prop = this.qml.$properties[pname];\n        if (!prop) {\n          this.deleteAttribute(attr);\n          return;\n        }\n        var value = this.qml[pname];\n        switch (prop.type) {\n          case \"bool\":\n            if (value) {\n              this.setAttribute(attr, \"\");\n            } else {\n              this.removeAttribute(attr);\n            }\n            break;\n          default:\n            this.setAttribute(attr, this.qml[pname]);\n        }\n      }\n    }], [{\n      key: \"observedAttributes\",\n      get: function get() {\n        return attributes;\n      }\n    }]);\n\n    return QmlElement;\n  }(HTMLElement);\n\n  window.customElements.define(name, QmlElement);\n}\n\nQmlWeb.registerElement = registerElement;\n\nvar Easing = {\n  Linear: 1,\n  InQuad: 2, OutQuad: 3, InOutQuad: 4, OutInQuad: 5,\n  InCubic: 6, OutCubic: 7, InOutCubic: 8, OutInCubic: 9,\n  InQuart: 10, OutQuart: 11, InOutQuart: 12, OutInQuart: 13,\n  InQuint: 14, OutQuint: 15, InOutQuint: 16, OutInQuint: 17,\n  InSine: 18, OutSine: 19, InOutSine: 20, OutInSine: 21,\n  InExpo: 22, OutExpo: 23, InOutExpo: 24, OutInExpo: 25,\n  InCirc: 26, OutCirc: 27, InOutCirc: 28, OutInCirc: 29,\n  InElastic: 30, OutElastic: 31, InOutElastic: 32, OutInElastic: 33,\n  InBack: 34, OutBack: 35, InOutBack: 36, OutInBack: 37,\n  InBounce: 38, OutBounce: 39, InOutBounce: 40, OutInBounce: 41\n};\n\n// eslint-disable-next-line complexity\nQmlWeb.$ease = function (type, period, amplitude, overshoot, t) {\n  switch (type) {\n    // Linear\n    case Easing.Linear:\n      return t;\n\n    // Quad\n    case Easing.InQuad:\n      return Math.pow(t, 2);\n    case Easing.OutQuad:\n      return -Math.pow(t - 1, 2) + 1;\n    case Easing.InOutQuad:\n      if (t < 0.5) {\n        return 2 * Math.pow(t, 2);\n      }\n      return -2 * Math.pow(t - 1, 2) + 1;\n    case Easing.OutInQuad:\n      if (t < 0.5) {\n        return -2 * Math.pow(t - 0.5, 2) + 0.5;\n      }\n      return 2 * Math.pow(t - 0.5, 2) + 0.5;\n\n    // Cubic\n    case Easing.InCubic:\n      return Math.pow(t, 3);\n    case Easing.OutCubic:\n      return Math.pow(t - 1, 3) + 1;\n    case Easing.InOutCubic:\n      if (t < 0.5) {\n        return 4 * Math.pow(t, 3);\n      }\n      return 4 * Math.pow(t - 1, 3) + 1;\n    case Easing.OutInCubic:\n      return 4 * Math.pow(t - 0.5, 3) + 0.5;\n\n    // Quart\n    case Easing.InQuart:\n      return Math.pow(t, 4);\n    case Easing.OutQuart:\n      return -Math.pow(t - 1, 4) + 1;\n    case Easing.InOutQuart:\n      if (t < 0.5) {\n        return 8 * Math.pow(t, 4);\n      }\n      return -8 * Math.pow(t - 1, 4) + 1;\n    case Easing.OutInQuart:\n      if (t < 0.5) {\n        return -8 * Math.pow(t - 0.5, 4) + 0.5;\n      }\n      return 8 * Math.pow(t - 0.5, 4) + 0.5;\n\n    // Quint\n    case Easing.InQuint:\n      return Math.pow(t, 5);\n    case Easing.OutQuint:\n      return Math.pow(t - 1, 5) + 1;\n    case Easing.InOutQuint:\n      if (t < 0.5) {\n        return 16 * Math.pow(t, 5);\n      }\n      return 16 * Math.pow(t - 1, 5) + 1;\n    case Easing.OutInQuint:\n      if (t < 0.5) {\n        return 16 * Math.pow(t - 0.5, 5) + 0.5;\n      }\n      return 16 * Math.pow(t - 0.5, 5) + 0.5;\n\n    // Sine\n    case Easing.InSine:\n      return -Math.cos(0.5 * Math.PI * t) + 1;\n    case Easing.OutSine:\n      return Math.sin(0.5 * Math.PI * t);\n    case Easing.InOutSine:\n      return -0.5 * Math.cos(Math.PI * t) + 0.5;\n    case Easing.OutInSine:\n      if (t < 0.5) {\n        return 0.5 * Math.sin(Math.PI * t);\n      }\n      return -0.5 * Math.sin(Math.PI * t) + 1;\n\n    // Expo\n    case Easing.InExpo:\n      return 1 / 1023 * (Math.pow(2, 10 * t) - 1);\n    case Easing.OutExpo:\n      return -1024 / 1023 * (Math.pow(2, -10 * t) - 1);\n    case Easing.InOutExpo:\n      if (t < 0.5) {\n        return 1 / 62 * (Math.pow(2, 10 * t) - 1);\n      }\n      return -512 / 31 * Math.pow(2, -10 * t) + 63 / 62;\n    case Easing.OutInExpo:\n      if (t < 0.5) {\n        return -16 / 31 * (Math.pow(2, -10 * t) - 1);\n      }\n      return 1 / 1984 * Math.pow(2, 10 * t) + 15 / 31;\n\n    // Circ\n    case Easing.InCirc:\n      return 1 - Math.sqrt(1 - t * t);\n    case Easing.OutCirc:\n      return Math.sqrt(1 - Math.pow(t - 1, 2));\n    case Easing.InOutCirc:\n      if (t < 0.5) {\n        return 0.5 * (1 - Math.sqrt(1 - 4 * t * t));\n      }\n      return 0.5 * (Math.sqrt(1 - 4 * Math.pow(t - 1, 2)) + 1);\n    case Easing.OutInCirc:\n      if (t < 0.5) {\n        return 0.5 * Math.sqrt(1 - Math.pow(2 * t - 1, 2));\n      }\n      return 0.5 * (2 - Math.sqrt(1 - Math.pow(2 * t - 1, 2)));\n\n    // Elastic\n    case Easing.InElastic:\n      return -amplitude * Math.pow(2, 10 * t - 10) * Math.sin(2 * t * Math.PI / period - Math.asin(1 / amplitude));\n    case Easing.OutElastic:\n      return amplitude * Math.pow(2, -10 * t) * Math.sin(2 * t * Math.PI / period - Math.asin(1 / amplitude)) + 1;\n    case Easing.InOutElastic:\n      if (t < 0.5) {\n        return -0.5 * amplitude * Math.pow(2, 20 * t - 10) * Math.sin(4 * t * Math.PI / period - Math.asin(1 / amplitude));\n      }\n      return -0.5 * amplitude * Math.pow(2, -20 * t + 10) * Math.sin(4 * t * Math.PI / period + Math.asin(1 / amplitude)) + 1;\n    case Easing.OutInElastic:\n      if (t < 0.5) {\n        return 0.5 * amplitude * Math.pow(2, -20 * t) * Math.sin(4 * t * Math.PI / period - Math.asin(1 / amplitude)) + 0.5;\n      }\n      return -0.5 * amplitude * Math.pow(2, 20 * t - 20) * Math.sin(4 * t * Math.PI / period - Math.asin(1 / amplitude)) + 0.5;\n\n    // Back\n    case Easing.InBack:\n      return (overshoot + 1) * Math.pow(t, 3) - overshoot * Math.pow(t, 2);\n    case Easing.OutBack:\n      return (overshoot + 1) * Math.pow(t - 1, 3) + overshoot * Math.pow(t - 1, 2) + 1;\n    case Easing.InOutBack:\n      if (t < 0.5) {\n        return 4 * (overshoot + 1) * Math.pow(t, 3) - 2 * overshoot * Math.pow(t, 2);\n      }\n      return 0.5 * (overshoot + 1) * Math.pow(2 * t - 2, 3) + overshoot / 2 * Math.pow(2 * t - 2, 2) + 1;\n    case Easing.OutInBack:\n      if (t < 0.5) {\n        return 0.5 * ((overshoot + 1) * Math.pow(2 * t - 1, 3) + overshoot * Math.pow(2 * t - 1, 2) + 1);\n      }\n      return 4 * (overshoot + 1) * Math.pow(t - 0.5, 3) - 2 * overshoot * Math.pow(t - 0.5, 2) + 0.5;\n    // Bounce\n    case Easing.InBounce:\n      if (t < 1 / 11) {\n        return -amplitude * 121 / 16 * (t * t - 1 / 11 * t);\n      } else if (t < 3 / 11) {\n        return -amplitude * 121 / 16 * (t * t - 4 / 11 * t + 3 / 121);\n      } else if (t < 7 / 11) {\n        return -amplitude * 121 / 16 * (t * t - 10 / 11 * t + 21 / 121);\n      }\n      return -(121 / 16) * (t * t - 2 * t + 1) + 1;\n    case Easing.OutBounce:\n      if (t < 4 / 11) {\n        return 121 / 16 * t * t;\n      } else if (t < 8 / 11) {\n        return amplitude * (121 / 16) * (t * t - 12 / 11 * t + 32 / 121) + 1;\n      } else if (t < 10 / 11) {\n        return amplitude * (121 / 16) * (t * t - 18 / 11 * t + 80 / 121) + 1;\n      }\n      return amplitude * (121 / 16) * (t * t - 21 / 11 * t + 10 / 11) + 1;\n    case Easing.InOutBounce:\n      if (t < 1 / 22) {\n        return -amplitude * 121 / 8 * (t * t - 1 / 22 * t);\n      } else if (t < 3 / 22) {\n        return -amplitude * 121 / 8 * (t * t - 2 / 11 * t + 3 / 484);\n      } else if (t < 7 / 22) {\n        return -amplitude * 121 / 8 * (t * t - 5 / 11 * t + 21 / 484);\n      } else if (t < 11 / 22) {\n        return -121 / 8 * (t * t - t + 0.25) + 0.5;\n      } else if (t < 15 / 22) {\n        return 121 / 8 * (t * t - t) + 137 / 32;\n      } else if (t < 19 / 22) {\n        return amplitude * 121 / 8 * (t * t - 17 / 11 * t + 285 / 484) + 1;\n      } else if (t < 21 / 22) {\n        return amplitude * 121 / 8 * (t * t - 20 / 11 * t + 399 / 484) + 1;\n      }\n      return amplitude * 121 / 8 * (t * t - 43 / 22 * t + 21 / 22) + 1;\n    case Easing.OutInBounce:\n      if (t < 4 / 22) {\n        return 121 / 8 * t * t;\n      } else if (t < 8 / 22) {\n        return -amplitude * 121 / 8 * (t * t - 6 / 11 * t + 8 / 121) + 0.5;\n      } else if (t < 10 / 22) {\n        return -amplitude * 121 / 8 * (t * t - 9 / 11 * t + 20 / 121) + 0.5;\n      } else if (t < 11 / 22) {\n        return -amplitude * 121 / 8 * (t * t - 21 / 22 * t + 5 / 22) + 0.5;\n      } else if (t < 12 / 22) {\n        return amplitude * 121 / 8 * (t * t - 23 / 22 * t + 3 / 11) + 0.5;\n      } else if (t < 14 / 22) {\n        return amplitude * 121 / 8 * (t * t - 13 / 11 * t + 42 / 121) + 0.5;\n      } else if (t < 18 / 22) {\n        return amplitude * 121 / 8 * (t * t - 16 / 11 * t + 63 / 121) + 0.5;\n      }\n      return -121 / 8 * (t * t - 2 * t + 117 / 121) + 0.5;\n\n    // Default\n    default:\n      console.error(\"Unsupported animation type: \", type);\n      return t;\n  }\n};\n\nQmlWeb.Easing = Easing;\n\n/* eslint accessor-pairs: 0 */\n\nfunction setupGetter(obj, propName, func) {\n  Object.defineProperty(obj, propName, {\n    get: func,\n    configurable: true,\n    enumerable: true\n  });\n}\n\nfunction setupSetter(obj, propName, func) {\n  Object.defineProperty(obj, propName, {\n    set: func,\n    configurable: true,\n    enumerable: false\n  });\n}\n\nfunction setupGetterSetter(obj, propName, getter, setter) {\n  Object.defineProperty(obj, propName, {\n    get: getter,\n    set: setter,\n    configurable: true,\n    enumerable: false\n  });\n}\n\nQmlWeb.setupGetter = setupGetter;\nQmlWeb.setupSetter = setupSetter;\nQmlWeb.setupGetterSetter = setupGetterSetter;\n\nvar QmlWebHelpers = function () {\n  function QmlWebHelpers() {\n    _classCallCheck(this, QmlWebHelpers);\n  }\n\n  _createClass(QmlWebHelpers, null, [{\n    key: \"arrayFindIndex\",\n    value: function arrayFindIndex(array, callback) {\n      // Note: does not support thisArg, we don't need that\n      if (!Array.prototype.findIndex) {\n        for (var key in array) {\n          if (callback(array[key], key, array)) {\n            return key;\n          }\n        }\n        return -1;\n      }\n      return Array.prototype.findIndex.call(array, callback);\n    }\n  }, {\n    key: \"mergeObjects\",\n    value: function mergeObjects() {\n      var merged = {};\n\n      for (var _len23 = arguments.length, args = Array(_len23), _key23 = 0; _key23 < _len23; _key23++) {\n        args[_key23] = arguments[_key23];\n      }\n\n      for (var i in args) {\n        var arg = args[i];\n        if (!arg) {\n          continue;\n        }\n        for (var key in arg) {\n          merged[key] = arg[key];\n        }\n      }\n      return merged;\n    }\n  }]);\n\n  return QmlWebHelpers;\n}();\n\nQmlWeb.helpers = QmlWebHelpers;\n\n/* eslint-disable no-unused-vars */\n\nfunction formatString(sourceText, n) {\n  var text = sourceText;\n  if (typeof n !== \"undefined\") {\n    if (typeof n !== \"number\") {\n      throw new Error(\"(n) must be a number\");\n    }\n    text = text.replace(/%n/, n.toString(10));\n  }\n  return text;\n}\n\nQmlWeb.qsTr = function (sourceText, disambiguation, n) {\n  return formatString(sourceText, n);\n};\n\nQmlWeb.qsTrId = function (id, n) {\n  return formatString(id, n);\n};\n\nQmlWeb.qsTranslate = function (context, sourceText, disambiguation, n) {\n  return formatString(sourceText, n);\n};\n\n// Somewhy these are documented, but not defined in Qt QML 5.10\n/*\r\nQmlWeb.qsTrIdNoOp = function(id) {\r\n  return id;\r\n};\r\n\r\nQmlWeb.qsTrNoOp = function(sourceText, disambiguation) {\r\n  return sourceText;\r\n};\r\n\r\nQmlWeb.qsTranslateNoOp = function(context, sourceText, disambiguation) {\r\n  return sourceText;\r\n};\r\n*/\n\n/* @license\r\n\r\nMIT License\r\n\r\nCopyright (c) 2011 Lauri Paimen <lauri@paimen.info>\r\nCopyright (c) 2015 Pavel Vasev <pavel.vasev@gmail.com> - initial and working\r\n                                                         import implementation.\r\nCopyright (c) 2016 QmlWeb contributors\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of\r\nthis software and associated documentation files (the \"Software\"), to deal in\r\nthe Software without restriction, including without limitation the rights to\r\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\r\nthe Software, and to permit persons to whom the Software is furnished to do so,\r\nsubject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\r\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\r\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\r\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\r\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n*/\n\n/**\r\n * Get URL contents.\r\n * @param url {String} Url to fetch.\r\n * @param skipExceptions {bool} when turned on, ignore exeptions and return\r\n *        false. This feature is used by readQmlDir.\r\n * @private\r\n * @return {mixed} String of contents or false in errors.\r\n */\nfunction getUrlContents(url, skipExceptions) {\n  if (typeof QmlWeb.urlContentCache[url] === \"undefined\") {\n    var xhr = new XMLHttpRequest();\n    xhr.open(\"GET\", url, false);\n\n    if (skipExceptions) {\n      try {\n        xhr.send(null);\n      } catch (e) {\n        return false;\n      }\n      // it is OK to not have logging here, because DeveloperTools already will\n      // have red log record\n    } else {\n      xhr.send(null);\n    }\n\n    if (xhr.status !== 200 && xhr.status !== 0) {\n      // 0 if accessing with file://\n      console.log(\"Retrieving \" + url + \" failed: \" + xhr.responseText, xhr);\n      return false;\n    }\n    QmlWeb.urlContentCache[url] = xhr.responseText;\n  }\n  return QmlWeb.urlContentCache[url];\n}\nif (typeof QmlWeb.urlContentCache === \"undefined\") {\n  QmlWeb.urlContentCache = {};\n}\n\n/**\r\n * Read qmldir spec file at directory.\r\n * @param url Url of the directory\r\n * @return {Object} Object, where .internals lists qmldir internal references\r\n *                          and .externals lists qmldir external references.\r\n */\n\n/*  Note on how importing works.\r\n\r\nparseQML gives us `tree.$imports` variable, which contains information from\r\n`import` statements.\r\n\r\nAfter each call to parseQML, we call engine.loadImports(tree.$imports).\r\nIt in turn invokes readQmlDir() calls for each import, with respect to current\r\ncomponent base path and engine.importPathList().\r\n\r\nWe keep all component names from all qmldir files in global variable\r\n`engine.qmldir`.\r\n\r\nIn construct() function, we use `engine.qmldir` for component url lookup.\r\n\r\nReference import info: http://doc.qt.io/qt-5/qtqml-syntax-imports.html\r\nAlso please look at notes and TODO's in qtcore.js::loadImports() and\r\nqtcore.js::construct() methods.\r\n*/\n\nfunction readQmlDir(url) {\n  // in case 'url' is empty, do not attach \"/\"\n  // Q1: when this happen?\n  var qmldirFileUrl = url.length > 0 ? url + \"/qmldir\" : \"qmldir\";\n\n  var parsedUrl = QmlWeb.engine.$parseURI(qmldirFileUrl);\n\n  var qmldir = void 0;\n  if (parsedUrl.scheme === \"qrc://\") {\n    qmldir = QmlWeb.qrc[parsedUrl.path];\n  } else {\n    qmldir = getUrlContents(qmldirFileUrl, true) || undefined;\n  }\n\n  var internals = {};\n  var externals = {};\n\n  if (qmldir === undefined) {\n    return false;\n  }\n\n  // we have to check for \"://\"\n  // In that case, item path is meant to be absolute, and we have no need to\n  // prefix it with base url\n  function makeurl(path) {\n    if (path.indexOf(\"://\") > 0) {\n      return path;\n    }\n    return url + \"/\" + path;\n  }\n\n  var lines = qmldir.split(/\\r?\\n/);\n  for (var i = 0; i < lines.length; i++) {\n    var line = lines[i].trim();\n    if (!line.length || line[0] === \"#\") continue; // Empty line or comment\n    var parts = line.split(/\\s+/);\n    var res = {};\n    switch (parts[0]) {\n      case \"designersupported\": // Just a flag for IDE\n      case \"typeinfo\":\n        // For IDE code completion etc\n        break;\n      case \"plugin\":\n      case \"classname\":\n      case \"depends\":\n      case \"module\":\n        console.log(url + \": qmldir \\\"\" + parts[0] + \"\\\" entries are not supported\");\n        break;\n      case \"internal\":\n      case \"singleton\":\n        res[parts[0]] = true;\n        parts.shift();\n      // fall through\n      default:\n        if (parts.length === 2) {\n          res.url = makeurl(parts[1]);\n        } else {\n          res.version = parts[1];\n          res.url = makeurl(parts[2]);\n        }\n        externals[parts[0]] = res;\n    }\n  }\n  return { internals: internals, externals: externals };\n}\n\nQmlWeb.getUrlContents = getUrlContents;\nQmlWeb.readQmlDir = readQmlDir;\n\nfunction importJavascriptInContext(contextSetter, $context) {\n  /* Set the QmlWeb.executionContext so that any internal calls to Qt.include\r\n   * will have the proper context */\n  var oldExecutionContext = QmlWeb.executionContext;\n  QmlWeb.executionContext = $context;\n  contextSetter($context);\n  QmlWeb.executionContext = oldExecutionContext;\n}\n\nQmlWeb.importJavascriptInContext = importJavascriptInContext;\n\nQmlWeb.keyCodeToQt = function (e) {\n  var Qt = QmlWeb.Qt;\n  e.keypad = e.keyCode >= 96 && e.keyCode <= 111;\n  if (e.keyCode === Qt.Key_Tab && e.shiftKey) {\n    return Qt.Key_Backtab;\n  }\n  if (e.keyCode >= 97 && e.keyCode <= 122) {\n    return e.keyCode - (97 - Qt.Key_A);\n  }\n  return e.keyCode;\n};\n\nQmlWeb.eventToKeyboard = function (e) {\n  return {\n    accepted: false,\n    count: 1,\n    isAutoRepeat: false,\n    key: QmlWeb.keyCodeToQt(e),\n    modifiers: e.ctrlKey * QmlWeb.Qt.CtrlModifier | e.altKey * QmlWeb.Qt.AltModifier | e.shiftKey * QmlWeb.Qt.ShiftModifier | e.metaKey * QmlWeb.Qt.MetaModifier | e.keypad * QmlWeb.Qt.KeypadModifier,\n    text: String.fromCharCode(e.charCode)\n  };\n};\n\nQmlWeb.keyboardSignals = {};\n[\"asterisk\", \"back\", \"backtab\", \"call\", \"cancel\", \"delete\", \"escape\", \"flip\", 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, \"hangup\", \"menu\", \"no\", \"return\", \"select\", \"space\", \"tab\", \"volumeDown\", \"volumeUp\", \"yes\", \"up\", \"right\", \"down\", \"left\"].forEach(function (key) {\n  var name = key.toString();\n  var qtName = \"Key_\" + name[0].toUpperCase() + name.slice(1);\n  var prefix = typeof key === \"number\" ? \"digit\" : \"\";\n  QmlWeb.keyboardSignals[QmlWeb.Qt[qtName]] = \"\" + prefix + name + \"Pressed\";\n});\n\nQmlWeb.executionContext = null;\n\nvar modules = {\n  Main: {\n    int: QmlWeb.qmlInteger,\n    real: QmlWeb.qmlNumber,\n    double: QmlWeb.qmlNumber,\n    string: QmlWeb.qmlString,\n    bool: QmlWeb.qmlBoolean,\n    list: QmlWeb.qmlList,\n    color: QmlWeb.QColor,\n    font: QmlWeb.QFont,\n    size: QmlWeb.QSizeF,\n    point: QmlWeb.QPointF,\n    rect: QmlWeb.QRectF,\n    vector2d: QmlWeb.QVector2D,\n    vector3d: QmlWeb.QVector3D,\n    vector4d: QmlWeb.QVector4D,\n    quaternion: QmlWeb.QQuaternion,\n    matrix4x4: QmlWeb.QMatrix4x4,\n    enum: QmlWeb.qmlNumber,\n    url: QmlWeb.qmlUrl,\n    variant: QmlWeb.qmlVariant,\n    var: QmlWeb.qmlVariant\n  }\n};\n\n// All object constructors\nQmlWeb.constructors = modules.Main;\n\nvar perImportContextConstructors = {};\nvar importContextIds = 0;\n\n// Helper. Adds a type to the constructor list\nfunction registerGlobalQmlType(name, type) {\n  QmlWeb[type.name] = type;\n  QmlWeb.constructors[name] = type;\n  modules.Main[name] = type;\n}\n\n// Helper. Register a type to a module\nfunction registerQmlType(spec) {\n  if (!/.*_.*/.test(spec.name)) {\n    throw new Error(\"Invalid class name: \" + spec.name);\n  }\n\n  var name = spec.name.replace(/.*_/, \"\");\n  var module = spec.name.replace(/(_[0-9]+)?_[^_]+$/, \"\").replace(/_/g, \".\");\n\n  spec.$qmlTypeInfo = {\n    enums: spec.hasOwnProperty(\"enums\") ? spec.enums : {},\n    signals: spec.hasOwnProperty(\"signals\") ? spec.signals : {},\n    properties: spec.hasOwnProperty(\"properties\") ? spec.properties : {},\n    defaultProperty: spec.defaultProperty\n  };\n\n  if (spec.hasOwnProperty(\"global\") && spec.global) {\n    registerGlobalQmlType(name, spec);\n  }\n\n  var moduleDescriptor = {\n    name: name,\n    versions: spec.hasOwnProperty(\"versions\") ? spec.versions : /.*/,\n    constructor: spec\n  };\n  if (!modules.hasOwnProperty(module)) {\n    modules[module] = [];\n  }\n  modules[module].push(moduleDescriptor);\n\n  // TODO: Move to module initialization?\n  /*\r\n    http://doc.qt.io/qt-5/qtqml-syntax-objectattributes.html#attached-properties-and-attached-signal-handlers\r\n      Some object treated as Attached. For example, Component.\r\n    Here, we set property to object `QMLBaseObject.prototype` with name of that\r\n    object, and with specific getter func.\r\n    E.g., we create \"someitem.Component\" here.\r\n    Later, if somebody will read that property, the getter will be invoked.\r\n    Here all getters are set to `getAttachedObject` only, which is actually\r\n    dedicated for Component attached object.\r\n    The code of `getAttachedObject` checks whether $Component internal\r\n    variable exist, and creates it if it absent.\r\n    Then, `getAttachedObject` adds self \"completed\" signal to global\r\n    `engine.completedSignals`.\r\n    That is how completed handlers gathered into global list. This list then\r\n    is called by `engine.callCompletedSignals`.\r\n      p.s. At the moment, Repeater and Loader manually call\r\n    `Component.completed` signals on objects they create.\r\n    At the same time, those signals are still pushed to\r\n    `engine.completedSignals` by getAttachedObject.\r\n  */\n  if (spec.getAttachedObject) {\n    var QMLBaseObject = QmlWeb.getConstructor(\"QtQml\", \"2.0\", \"QtObject\");\n    QmlWeb.setupGetter(QMLBaseObject.prototype, name, spec.getAttachedObject);\n  }\n}\n\nfunction getConstructor(moduleName, version, name) {\n  if (typeof modules[moduleName] !== \"undefined\") {\n    for (var i = 0; i < modules[moduleName].length; ++i) {\n      var type = modules[moduleName][i];\n      if (type.name === name && type.versions.test(version)) {\n        return type.constructor;\n      }\n    }\n  }\n  return null;\n}\n\nfunction getModuleConstructors(moduleName, version) {\n  var constructors = {};\n  if (typeof modules[moduleName] === \"undefined\") {\n    console.warn(\"module \\\"\" + moduleName + \"\\\" not found\");\n    return constructors;\n  }\n  for (var i = 0; i < modules[moduleName].length; ++i) {\n    var module = modules[moduleName][i];\n    if (module.versions.test(version)) {\n      constructors[module.name] = module.constructor;\n    }\n  }\n  return constructors;\n}\n\nfunction loadImports(self, imports) {\n  var mergeObjects = QmlWeb.helpers.mergeObjects;\n  var constructors = mergeObjects(modules.Main);\n  if (imports.filter(function (row) {\n    return row[1] === \"QtQml\";\n  }).length === 0 && imports.filter(function (row) {\n    return row[1] === \"QtQuick\";\n  }).length === 1) {\n    imports.push([\"qmlimport\", \"QtQml\", 2, \"\", true]);\n  }\n  for (var i = 0; i < imports.length; ++i) {\n    var _imports$i = _slicedToArray(imports[i], 4),\n        moduleName = _imports$i[1],\n        moduleVersion = _imports$i[2],\n        moduleAlias = _imports$i[3];\n\n    if (typeof moduleVersion !== \"number\") continue;\n    var versionString = moduleVersion % 1 === 0 ? moduleVersion.toFixed(1) : moduleVersion.toString();\n    var moduleConstructors = getModuleConstructors(moduleName, versionString);\n\n    if (moduleAlias !== \"\") {\n      constructors[moduleAlias] = mergeObjects(constructors[moduleAlias], moduleConstructors);\n    } else {\n      constructors = mergeObjects(constructors, moduleConstructors);\n    }\n  }\n  self.importContextId = importContextIds++;\n  perImportContextConstructors[self.importContextId] = constructors;\n  QmlWeb.constructors = constructors; // TODO: why do we need this?\n}\n\n/**\r\n * QML Object constructor.\r\n * @param {Object} meta Meta information about the object and the creation\r\n *                      context\r\n * @return {Object} New qml object\r\n */\nfunction construct(meta) {\n  var item = void 0;\n\n  var constructors = perImportContextConstructors[meta.context.importContextId];\n\n  var classComponents = meta.object.$class.split(\".\");\n  for (var ci = 0; ci < classComponents.length; ++ci) {\n    var c = classComponents[ci];\n    constructors = constructors[c];\n    if (constructors === undefined) {\n      break;\n    }\n  }\n\n  if (constructors !== undefined) {\n    var _constructor = constructors;\n    meta.super = _constructor;\n    item = new _constructor(meta);\n    meta.super = undefined;\n  } else {\n    // Load component from file. Please look at import.js for main notes.\n    // Actually, we have to use that order:\n    // 1) try to load component from current basePath\n    // 2) from importPathList\n    // 3) from directories in imports statements and then\n    // 4) from qmldir files\n    // Currently we support only 1,2 and 4 and use order: 4,1,2\n    // TODO: engine.qmldirs is global for all loaded components.\n    //       That's not qml's original behaviour.\n    var qdirInfo = QmlWeb.engine.qmldirs[meta.object.$class];\n    // Are we have info on that component in some imported qmldir files?\n\n    /* This will also be set in applyProperties, but needs to be set here\r\n     * for Qt.createComponent to have the correct context. */\n    QmlWeb.executionContext = meta.context;\n\n    var filePath = void 0;\n    if (qdirInfo) {\n      filePath = qdirInfo.url;\n    } else if (classComponents.length === 2) {\n      var qualified = QmlWeb.engine.qualifiedImportPath(meta.context.importContextId, classComponents[0]);\n      filePath = \"\" + qualified + classComponents[1] + \".qml\";\n    } else {\n      filePath = classComponents[0] + \".qml\";\n    }\n\n    var component = QmlWeb.Qt.createComponent(filePath);\n\n    if (!component) {\n      throw new Error(\"No constructor found for \" + meta.object.$class);\n    }\n\n    item = component.$createObject(meta.parent);\n    if (typeof item.dom !== \"undefined\") {\n      item.dom.className += \" \" + classComponents[classComponents.length - 1];\n      if (meta.object.id) {\n        item.dom.className += \"  \" + meta.object.id;\n      }\n    }\n    // Handle default properties\n  }\n\n  // id\n  if (meta.object.id) {\n    QmlWeb.setupGetterSetter(meta.context, meta.object.id, function () {\n      return item;\n    }, function () {});\n  }\n\n  // keep path in item for probale use it later in Qt.resolvedUrl\n  item.$context.$basePath = QmlWeb.engine.$basePath; //gut\n\n  // We want to use the item's scope, but this Component's imports\n  item.$context.importContextId = meta.context.importContextId;\n\n  // Apply properties (Bindings won't get evaluated, yet)\n  QmlWeb.applyProperties(meta.object, item, item, item.$context);\n\n  return item;\n}\n\nQmlWeb.modules = modules;\nQmlWeb.registerGlobalQmlType = registerGlobalQmlType;\nQmlWeb.registerQmlType = registerQmlType;\nQmlWeb.getConstructor = getConstructor;\nQmlWeb.loadImports = loadImports;\nQmlWeb.construct = construct;\n\n/**\r\n * Create property getters and setters for object.\r\n * @param {Object} obj Object for which gsetters will be set\r\n * @param {String} propName Property name\r\n * @param {Object} [options] Options that allow finetuning of the property\r\n */\nfunction createProperty(type, obj, propName) {\n  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n  var QMLProperty = QmlWeb.QMLProperty;\n  var prop = new QMLProperty(type, obj, propName);\n  obj[propName + \"Changed\"] = prop.changed;\n  obj.$properties[propName] = prop;\n  obj.$properties[propName].set(options.initialValue, QMLProperty.ReasonInit);\n\n  var getter = function getter() {\n    return obj.$properties[propName].get();\n  };\n  var setter = void 0;\n  if (options.readOnly) {\n    setter = function setter(newVal) {\n      if (!obj.$canEditReadOnlyProperties) {\n        throw new Error(\"property '\" + propName + \"' has read only access\");\n      }\n      obj.$properties[propName].set(newVal, QMLProperty.ReasonUser);\n    };\n  } else {\n    setter = function setter(newVal) {\n      obj.$properties[propName].set(newVal, QMLProperty.ReasonUser);\n    };\n  }\n  QmlWeb.setupGetterSetter(obj, propName, getter, setter);\n  if (obj.$isComponentRoot) {\n    var skip = false;\n    if (options.noContextOverride) {\n      // Don't override context properties if options.noContextOverride is on\n      var descr = Object.getOwnPropertyDescriptor(obj.$context, propName);\n      skip = descr && (descr.get || descr.set);\n    }\n    if (!skip) {\n      QmlWeb.setupGetterSetter(obj.$context, propName, getter, setter);\n    }\n  }\n}\n\n/**\r\n * Create property getters and setters for object.\r\n * @param {Object} obj Object for which gsetters will be set\r\n * @param {Object} properties An object containing properties descriptors\r\n */\nfunction createProperties(obj, properties) {\n  Object.keys(properties).forEach(function (name) {\n    var desc = properties[name];\n    if (typeof desc === \"string\") {\n      desc = { type: desc };\n    }\n    createProperty(desc.type, obj, name, desc);\n  });\n}\n\n/**\r\n * Apply properties from metaObject to item.\r\n * @param {Object} metaObject Source of properties\r\n * @param {Object} item Target of property apply\r\n * @param {Object} objectScope Scope in which properties should be evaluated\r\n * @param {Object} componentScope Component scope in which properties should be\r\n *                 evaluated\r\n */\nfunction applyProperties(metaObject, item, objectScopeIn, componentScope) {\n  var QMLProperty = QmlWeb.QMLProperty;\n  var objectScope = objectScopeIn || item;\n  QmlWeb.executionContext = componentScope;\n\n  var children = metaObject.$children;\n  if (children && children.length > 0) {\n    if (item.$defaultProperty) {\n      // TODO: detect based on property type, not children count?\n      var value = children.length === 1 ? children[0] : children;\n      item.$properties[item.$defaultProperty].set(value, QMLProperty.ReasonInit, objectScope, componentScope);\n    } else {\n      throw new Error(\"Cannot assign to unexistant default property\");\n    }\n  }\n  // We purposefully set the default property AFTER using it, in order to only\n  // have it applied for instanciations of this component, but not for its\n  // internal children\n  if (metaObject.$defaultProperty) {\n    item.$defaultProperty = metaObject.$defaultProperty;\n  }\n\n  for (var i in metaObject) {\n    var _value = metaObject[i];\n    if (i === \"id\" || i === \"$class\") {\n      // keep them\n      item[i] = _value;\n      continue;\n    }\n\n    // skip global id's and internal values\n    if (i === \"id\" || i[0] === \"$\") {\n      // TODO: what? See above.\n      continue;\n    }\n\n    // slots\n    if (i.indexOf(\"on\") === 0 && i.length > 2 && /[A-Z]/.test(i[2])) {\n      var signalName = i[2].toLowerCase() + i.slice(3);\n      if (connectSignal(item, signalName, _value, objectScope, componentScope)) {\n        continue;\n      }\n      if (item.$setCustomSlot) {\n        item.$setCustomSlot(signalName, _value, objectScope, componentScope);\n        continue;\n      }\n    }\n\n    if (_value instanceof Object) {\n      if (applyProperty(item, i, _value, objectScope, componentScope)) {\n        continue;\n      }\n    }\n\n    if (item.$properties && i in item.$properties) {\n      item.$properties[i].set(_value, QMLProperty.ReasonInit, objectScope, componentScope);\n    } else if (i in item) {\n      item[i] = _value;\n    } else if (item.$setCustomData) {\n      item.$setCustomData(i, _value);\n    } else {\n      console.warn(\"Cannot assign to non-existent property \\\"\" + i + \"\\\". Ignoring assignment.\");\n    }\n  }\n}\n\nfunction applyProperty(item, i, value, objectScope, componentScope) {\n  var QMLProperty = QmlWeb.QMLProperty;\n\n  if (value instanceof QmlWeb.QMLSignalDefinition) {\n    item.$Signals[i] = QmlWeb.Signal.signal(value.parameters);\n    if (!(i in item)) {\n      item[i] = item.$Signals[i];\n      if (item.$isComponentRoot) {\n        componentScope[i] = item[i];\n      }\n    }\n    return true;\n  }\n\n  if (value instanceof QmlWeb.QMLMethod) {\n    value.compile();\n    item[i] = value.eval(objectScope, componentScope, componentScope.$basePath);\n    if (item.$isComponentRoot) {\n      componentScope[i] = item[i];\n    }\n    return true;\n  }\n\n  if (value instanceof QmlWeb.QMLAliasDefinition) {\n    // TODO\n    // 1. Alias must be able to point to prop or id of local object,\n    //    eg: property alias q: t\n    // 2. Alias may have same name as id it points to: property alias\n    //    someid: someid\n    // 3. Alias proxy (or property proxy) to proxy prop access to selected\n    //    incapsulated object. (think twice).\n    createProperty(\"alias\", item, i, { noContextOverride: true });\n    item.$properties[i].componentScope = componentScope;\n    item.$properties[i].componentScopeBasePath = componentScope.$basePath;\n    item.$properties[i].val = value;\n    item.$properties[i].get = function () {\n      var obj = this.componentScope[this.val.objectName];\n      var propertyName = this.val.propertyName;\n      return propertyName ? obj.$properties[propertyName].get() : obj;\n    };\n    item.$properties[i].set = function (newVal, reason, _objectScope, _componentScope) {\n      if (!this.val.propertyName) {\n        throw new Error(\"Cannot set alias property pointing to an QML object.\");\n      }\n      var obj = this.componentScope[this.val.objectName];\n      var prop = obj.$properties[this.val.propertyName];\n      prop.set(newVal, reason, _objectScope, _componentScope);\n    };\n\n    if (value.propertyName) {\n      var con = function con(prop) {\n        var obj = prop.componentScope[prop.val.objectName];\n        if (!obj) {\n          console.error(\"qtcore: target object \", prop.val.objectName, \" not found for alias \", prop);\n          return;\n        }\n        var targetProp = obj.$properties[prop.val.propertyName];\n        if (!targetProp) {\n          console.error(\"qtcore: target property [\", prop.val.objectName, \"].\", prop.val.propertyName, \" not found for alias \", prop.name);\n          return;\n        }\n        // targetProp.changed.connect( prop.changed );\n        // it is not sufficient to connect to `changed` of source property\n        // we have to propagate own changed to it too\n        // seems the best way to do this is to make them identical?..\n        // prop.changed = targetProp.changed;\n        // obj[`${i}Changed`] = prop.changed;\n        // no. because those object might be destroyed later.\n        var loopWatchdog = false;\n        targetProp.changed.connect(item, function () {\n          for (var _len24 = arguments.length, args = Array(_len24), _key24 = 0; _key24 < _len24; _key24++) {\n            args[_key24] = arguments[_key24];\n          }\n\n          if (loopWatchdog) return;\n          loopWatchdog = true;\n          prop.changed.apply(item, args);\n          loopWatchdog = false;\n        });\n        prop.changed.connect(obj, function () {\n          for (var _len25 = arguments.length, args = Array(_len25), _key25 = 0; _key25 < _len25; _key25++) {\n            args[_key25] = arguments[_key25];\n          }\n\n          if (loopWatchdog) return;\n          loopWatchdog = true;\n          targetProp.changed.apply(obj, args);\n          loopWatchdog = false;\n        });\n      };\n      QmlWeb.engine.pendingOperations.push([con, item.$properties[i]]);\n    }\n    return true;\n  }\n\n  if (value instanceof QmlWeb.QMLPropertyDefinition) {\n    createProperty(value.type, item, i);\n    item.$properties[i].set(value.value, QMLProperty.ReasonInit, objectScope, componentScope);\n    return true;\n  }\n\n  if (item[i] && value instanceof QmlWeb.QMLMetaPropertyGroup) {\n    // Apply properties one by one, otherwise apply at once\n    applyProperties(value, item[i], objectScope, componentScope);\n    return true;\n  }\n\n  return false;\n}\n\nfunction connectSignal(item, signalName, value, objectScope, componentScope) {\n  var signal = item.$Signals && item.$Signals[signalName] || item[signalName];\n  if (!signal) {\n    console.warn(\"No signal called \" + signalName + \" found!\");\n    return undefined;\n  } else if (typeof signal.connect !== \"function\") {\n    console.warn(signalName + \" is not a signal!\");\n    return undefined;\n  }\n\n  if (!value.compiled) {\n    var params = [];\n    for (var j in signal.parameters) {\n      params.push(signal.parameters[j].name);\n    }\n    // Wrap value.src in IIFE in case it includes a \"return\"\n    value.src = \"(\\n      function(\" + params.join(\", \") + \") {\\n        QmlWeb.executionContext = __executionContext;\\n        const bp = QmlWeb.engine.$basePath;\\n        QmlWeb.engine.$basePath = \\\"\" + componentScope.$basePath + \"\\\";\\n        try {\\n          (function() {\\n            \" + value.src + \"\\n          })();\\n        } finally {\\n          QmlWeb.engine.$basePath = bp;\\n        }\\n      }\\n    )\";\n    value.isFunction = false;\n    value.compile();\n  }\n  // Don't pass in __basePath argument, as QMLEngine.$basePath is set in the\n  // value.src, as we need it set at the time the slot is called.\n  var slot = value.eval(objectScope, componentScope);\n  signal.connect(item, slot);\n  return slot;\n}\n\nQmlWeb.createProperty = createProperty;\nQmlWeb.createProperties = createProperties;\nQmlWeb.applyProperties = applyProperties;\nQmlWeb.connectSignal = connectSignal;\n\n/* @license\r\n\r\nMIT License\r\n\r\nCopyright (c) 2011 Lauri Paimen <lauri@paimen.info>\r\nCopyright (c) 2013 Anton Kreuzkamp <akreuzkamp@web.de>\r\nCopyright (c) 2016 QmlWeb contributors\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of\r\nthis software and associated documentation files (the \"Software\"), to deal in\r\nthe Software without restriction, including without limitation the rights to\r\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\r\nthe Software, and to permit persons to whom the Software is furnished to do so,\r\nsubject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\r\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\r\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\r\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\r\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n*/\n\nvar QMLMethod = function (_QmlWeb$QMLBinding) {\n  _inherits(QMLMethod, _QmlWeb$QMLBinding);\n\n  function QMLMethod() {\n    _classCallCheck(this, QMLMethod);\n\n    return _possibleConstructorReturn(this, (QMLMethod.__proto__ || Object.getPrototypeOf(QMLMethod)).apply(this, arguments));\n  }\n\n  return QMLMethod;\n}(QmlWeb.QMLBinding);\n\n/**\r\n * Create an object representing a QML property definition.\r\n * @param {String} type The type of the property\r\n * @param {Array} value The default value of the property\r\n * @return {Object} Object representing the defintion\r\n */\n\n\nvar QMLPropertyDefinition = function QMLPropertyDefinition(type, value) {\n  _classCallCheck(this, QMLPropertyDefinition);\n\n  this.type = type;\n  this.value = value;\n};\n\nvar QMLAliasDefinition = function QMLAliasDefinition(objName, propName) {\n  _classCallCheck(this, QMLAliasDefinition);\n\n  this.objectName = objName;\n  this.propertyName = propName;\n};\n\n/**\r\n * Create an object representing a QML signal definition.\r\n * @param {Array} params The parameters the signal ships\r\n * @return {Object} Object representing the defintion\r\n */\n\n\nvar QMLSignalDefinition = function QMLSignalDefinition(params) {\n  _classCallCheck(this, QMLSignalDefinition);\n\n  this.parameters = params;\n};\n\n/**\r\n * Create an object representing a group of QML properties (like anchors).\r\n * @return {Object} Object representing the group\r\n */\n\n\nvar QMLMetaPropertyGroup = function QMLMetaPropertyGroup() {\n  _classCallCheck(this, QMLMetaPropertyGroup);\n};\n\n/**\r\n * Create an object representing a QML element.\r\n * @param {String} type Type of the element\r\n * @param {String} onProp Name of the property specified with the \"on\" keyword\r\n */\n\n\nvar QMLMetaElement = function QMLMetaElement(type, onProp) {\n  _classCallCheck(this, QMLMetaElement);\n\n  this.$class = type;\n  this.$children = [];\n  this.$on = onProp;\n};\n\n// Convert parser tree to the format understood by engine\n\n\nfunction convertToEngine(tree) {\n  var type = tree[0];\n  var walker = convertToEngine.walkers[type];\n  if (!walker) {\n    console.log(\"No walker for \" + type);\n    return undefined;\n  }\n  return walker.apply(undefined, _toConsumableArray(tree.slice(1)));\n}\n\nconvertToEngine.stringifyDots = function (elem) {\n  var sub = elem;\n  var path = [];\n  while (sub[0] === \"dot\") {\n    path.push(sub[1]);\n    sub = sub[2];\n  }\n  path.push(sub);\n  return path.join(\".\");\n};\n\nconvertToEngine.applyProp = function (item, name, val) {\n  var curr = item; // output structure\n  var sub = name; // input structure\n  while (sub[0] === \"dot\") {\n    if (!curr[sub[1]]) {\n      curr[sub[1]] = new QMLMetaPropertyGroup();\n    }\n    curr = curr[sub[1]];\n    sub = sub[2];\n  }\n  curr[sub] = val;\n};\n\nconvertToEngine.walkers = {\n  toplevel: function toplevel(imports, statement) {\n    var item = { $class: \"Component\" };\n    item.$imports = imports;\n    item.$children = [convertToEngine(statement)];\n    return item;\n  },\n  qmlelem: function qmlelem(elem, onProp, statements) {\n    var item = new QMLMetaElement(convertToEngine.stringifyDots(elem), onProp);\n\n    for (var i in statements) {\n      var statement = statements[i];\n      var name = statement[1];\n      var val = convertToEngine(statement);\n      switch (statement[0]) {\n        case \"qmldefaultprop\":\n          item.$defaultProperty = name;\n          item[name] = val;\n          break;\n        case \"qmlprop\":\n        case \"qmlpropdef\":\n        case \"qmlaliasdef\":\n        case \"qmlmethod\":\n        case \"qmlsignaldef\":\n          convertToEngine.applyProp(item, name, val);\n          break;\n        case \"qmlelem\":\n          item.$children.push(val);\n          break;\n        case \"qmlobjdef\":\n          throw new Error(\"qmlobjdef support was removed, update qmlweb-parser to ^0.3.0.\");\n        case \"qmlobj\":\n          // Create object to item\n          item[name] = item[name] || new QMLMetaPropertyGroup();\n          for (var j in val) {\n            item[name][j] = val[j];\n          }\n          break;\n        default:\n          console.log(\"Unknown statement\", statement);\n      }\n    }\n\n    return item;\n  },\n  qmlprop: function qmlprop(name, tree, src) {\n    if (name === \"id\") {\n      // id property\n      return tree[1][1];\n    }\n    return convertToEngine.bindout(tree, src);\n  },\n  qmlobjdef: function qmlobjdef(name, property, tree, src) {\n    return convertToEngine.bindout(tree, src);\n  },\n  qmlobj: function qmlobj(elem, statements) {\n    var item = {};\n    for (var i in statements) {\n      var statement = statements[i];\n      var name = statement[1];\n      var val = convertToEngine(statement);\n      if (statement[0] === \"qmlprop\") {\n        convertToEngine.applyProp(item, name, val);\n      }\n    }\n    return item;\n  },\n  qmlmethod: function qmlmethod(name, tree, src) {\n    return new QMLMethod(src);\n  },\n  qmlpropdef: function qmlpropdef(name, type, tree, src) {\n    return new QMLPropertyDefinition(type, tree ? convertToEngine.bindout(tree, src) : undefined);\n  },\n  qmlaliasdef: function qmlaliasdef(name, objName, propName) {\n    return new QMLAliasDefinition(objName, propName);\n  },\n  qmlsignaldef: function qmlsignaldef(name, params) {\n    return new QMLSignalDefinition(params);\n  },\n  qmldefaultprop: function qmldefaultprop(tree) {\n    return convertToEngine(tree);\n  },\n  name: function name(src) {\n    if (src === \"true\" || src === \"false\") {\n      return src === \"true\";\n    } else if (typeof src === \"boolean\") {\n      // TODO: is this needed? kept for compat with ==\n      return src;\n    }\n    return new QmlWeb.QMLBinding(src, [\"name\", src]);\n  },\n  num: function num(src) {\n    return +src;\n  },\n  string: function string(src) {\n    return String(src);\n  },\n  array: function array(tree, src) {\n    var a = [];\n    var isList = false;\n    var hasBinding = false;\n    for (var i in tree) {\n      var val = convertToEngine.bindout(tree[i]);\n      a.push(val);\n\n      if (val instanceof QMLMetaElement) {\n        isList = true;\n      } else if (val instanceof QmlWeb.QMLBinding) {\n        hasBinding = true;\n      }\n    }\n\n    if (hasBinding) {\n      if (isList) {\n        throw new TypeError(\"An array may either contain bindings or Element definitions.\");\n      }\n      return new QmlWeb.QMLBinding(src, tree);\n    }\n\n    return a;\n  }\n};\n\n// Try to bind out tree and return static variable instead of binding\nconvertToEngine.bindout = function (statement, binding) {\n  // We want to process the content of the statement\n  // (but still handle the case, we get the content directly)\n  var tree = statement[0] === \"stat\" ? statement[1] : statement;\n\n  var type = tree[0];\n  var walker = convertToEngine.walkers[type];\n  if (walker) {\n    return walker.apply(undefined, _toConsumableArray(tree.slice(1)));\n  }\n  return new QmlWeb.QMLBinding(binding, tree);\n};\n\nfunction loadParser() {\n  if (typeof QmlWeb.parse !== \"undefined\") {\n    return;\n  }\n\n  console.log(\"Loading parser...\");\n  var tags = document.getElementsByTagName(\"script\");\n  for (var i in tags) {\n    if (tags[i].src && tags[i].src.match(/\\/(qt|qmlweb)\\./)) {\n      var src = tags[i].src.replace(/\\/(qt|qmlweb)\\.(es201.\\.)?/, \"/qmlweb.parser.\");\n      // TODO: rewrite to async loading\n      var xhr = new XMLHttpRequest();\n      xhr.open(\"GET\", src, false);\n      xhr.send(null);\n      if (xhr.status !== 200 && xhr.status !== 0) {\n        // xhr.status === 0 if accessing with file://\n        throw new Error(\"Could not load QmlWeb parser!\");\n      }\n      new Function(xhr.responseText)();\n      return;\n    }\n  }\n}\n\n// Function to parse qml and output tree expected by engine\nfunction parseQML(src, file) {\n  loadParser();\n  QmlWeb.parse.nowParsingFile = file;\n  var parsetree = QmlWeb.parse(src, QmlWeb.parse.QmlDocument);\n  return convertToEngine(parsetree);\n}\n\nQmlWeb.QMLMethod = QMLMethod;\nQmlWeb.QMLPropertyDefinition = QMLPropertyDefinition;\nQmlWeb.QMLAliasDefinition = QMLAliasDefinition;\nQmlWeb.QMLSignalDefinition = QMLSignalDefinition;\nQmlWeb.QMLMetaPropertyGroup = QMLMetaPropertyGroup;\nQmlWeb.QMLMetaElement = QMLMetaElement;\nQmlWeb.convertToEngine = convertToEngine;\nQmlWeb.loadParser = loadParser;\nQmlWeb.parseQML = parseQML;\n\n/*\r\n\r\nQmlWeb.qrc is analogous to the Qt Resource System. It is expected to map a path\r\nwithin the resource system to the following pieces of data:\r\n\r\n1) For a QML Component, it is the return value of QmlWeb.parse\r\n2) For a JavaScript file, it is the return value of QmlWeb.jsparse\r\n2) For an image, it is any URL that an <img> tag can accept (e.g. a standard\r\n   URL to an image resource, or a \"data:\" URI). If there is no entry for a\r\n   given qrc image path, it will fall back to passing the path right through to\r\n   the DOM. This is mainly a convenience until support for images is added to\r\n   gulp-qmlweb.\r\n\r\nThe \"data-qml\" tag on <body> can be set to a \"qrc://\" URL like\r\n\"qrc:///root.qml\" to use a pre-parsed \"/root.qml\" from QmlWeb.qrc.\r\n\r\nSince relative URLs are resolved relative to the URL of the containing\r\ncomponent, any relative URL set within a file in the resource system will also\r\nresolve within the resource system. To access a Component, JavaScript or image\r\nfile that is stored outside of the resources system from within the resource\r\nsystem, a full URL must be used (e.g. \"http://www.example.com/images/foo.png\").\r\n\r\nVice-versa, in order to access a Component, JavaScript or image file that is\r\nstored within the resource system from outside of the resource system, a full\r\n\"qrc://\" URL must be used (e.g. \"qrc:///images/foo.png\").\r\n\r\nMore details here: http://doc.qt.io/qt-5/qml-url.html\r\n\r\n*/\nQmlWeb.qrc = {};\n\nQmlWeb.screenshot = function (div, options) {\n  var rect = div.getBoundingClientRect();\n  var offset = {\n    width: div.offsetWidth,\n    height: div.offsetHeight,\n    top: rect.top,\n    left: rect.left\n  };\n  for (var win = window; win !== window.top; win = win.parent) {\n    var rectframe = win.frameElement.getBoundingClientRect();\n    offset.top += rectframe.top;\n    offset.left += rectframe.left;\n  }\n  var fileName = options && options.fileName || undefined;\n\n  var image = void 0;\n  if (window.top.chromeScreenshot) {\n    image = document.createElement(\"img\");\n    window.top.chromeScreenshot({ offset: offset, fileName: fileName }).then(function (base64) {\n      image.src = \"data:image/png;base64,\" + base64;\n    });\n  } else if (window.top.callPhantom) {\n    var base64 = window.top.callPhantom(\"render\", { offset: offset, fileName: fileName });\n    image = document.createElement(\"img\");\n    image.src = \"data:image/png;base64,\" + base64;\n  } else {\n    throw new Error(\"Screenshots are not supported on this platform\");\n  }\n  return image;\n};\n\nQmlWeb.image2canvas = function (img) {\n  var canvas = document.createElement(\"canvas\");\n  var ctx = canvas.getContext(\"2d\");\n  canvas.height = img.height;\n  canvas.width = img.width;\n  ctx.drawImage(img, 0, 0);\n  return { canvas: canvas, ctx: ctx };\n};\n\nQmlWeb.image2dataUrl = function (img) {\n  var _QmlWeb$image2canvas = QmlWeb.image2canvas(img),\n      canvas = _QmlWeb$image2canvas.canvas;\n\n  return canvas.toDataURL(\"image/png\", 1);\n};\n\nQmlWeb.image2pixels = function (img) {\n  var _QmlWeb$image2canvas2 = QmlWeb.image2canvas(img),\n      ctx = _QmlWeb$image2canvas2.ctx;\n\n  return ctx.getImageData(0, 0, img.width, img.height).data;\n};\n\nQmlWeb.imagesEqual = function (a, b) {\n  if (a.width !== b.width || a.height !== b.height) {\n    return false;\n  }\n  return QmlWeb.image2dataUrl(a) === QmlWeb.image2dataUrl(b);\n};\n\n// Base object for all qml elements\n\nvar QtQml_QtObject = function (_QmlWeb$QObject10) {\n  _inherits(QtQml_QtObject, _QmlWeb$QObject10);\n\n  function QtQml_QtObject(meta) {\n    _classCallCheck(this, QtQml_QtObject);\n\n    var _this19 = _possibleConstructorReturn(this, (QtQml_QtObject.__proto__ || Object.getPrototypeOf(QtQml_QtObject)).call(this, meta.parent));\n\n    _this19.$Signals = {};\n\n\n    _this19.$isComponentRoot = meta.isComponentRoot;\n    _this19.$context = meta.context;\n\n    // Component get own properties\n    _this19.$attributes = [];\n    for (var key in meta.object) {\n      if (!meta.object.hasOwnProperty(key) || !meta.object[key]) {\n        continue;\n      }\n      var name = meta.object[key].__proto__.constructor.name;\n      if (name === \"QMLPropertyDefinition\" || name === \"QMLAliasDefinition\") {\n        _this19.$attributes.push(key);\n      }\n    }\n\n    var Signal = QmlWeb.Signal;\n\n    _this19.Keys = new QmlWeb.QObject(_this19);\n    _this19.Keys.asteriskPresed = Signal.signal();\n    _this19.Keys.backPressed = Signal.signal();\n    _this19.Keys.backtabPressed = Signal.signal();\n    _this19.Keys.callPressed = Signal.signal();\n    _this19.Keys.cancelPressed = Signal.signal();\n    _this19.Keys.deletePressed = Signal.signal();\n    for (var i = 0; i < 10; ++i) {\n      _this19.Keys[\"digit\" + i + \"Pressed\"] = Signal.signal();\n    }\n    _this19.Keys.escapePressed = Signal.signal();\n    _this19.Keys.flipPressed = Signal.signal();\n    _this19.Keys.hangupPressed = Signal.signal();\n    _this19.Keys.leftPressed = Signal.signal();\n    _this19.Keys.menuPressed = Signal.signal();\n    _this19.Keys.noPressed = Signal.signal();\n    _this19.Keys.pressed = Signal.signal();\n    _this19.Keys.released = Signal.signal();\n    _this19.Keys.returnPressed = Signal.signal();\n    _this19.Keys.rightPressed = Signal.signal();\n    _this19.Keys.selectPressed = Signal.signal();\n    _this19.Keys.spacePressed = Signal.signal();\n    _this19.Keys.tabPressed = Signal.signal();\n    _this19.Keys.upPressed = Signal.signal();\n    _this19.Keys.volumeDownPressed = Signal.signal();\n    _this19.Keys.volumeUpPressed = Signal.signal();\n    _this19.Keys.yesPressed = Signal.signal();\n\n    // Initialize properties, signals, etc.\n    var types = [];\n    var type = meta.super;\n    while (type) {\n      types.unshift(type);\n      type = Object.getPrototypeOf(type);\n    }\n    types.forEach(function (entry) {\n      if (!entry.hasOwnProperty(\"$qmlTypeInfo\")) return;\n      var info = entry.$qmlTypeInfo || {};\n\n      Object.keys(info.enums).forEach(function (name) {\n        // TODO: not exported to the whole file scope yet\n        _this19[name] = info.enums[name];\n\n        if (!global[name]) {\n          global[name] = _this19[name]; // HACK\n        }\n      });\n\n      QmlWeb.createProperties(_this19, info.properties);\n\n      Object.keys(info.signals).forEach(function (name) {\n        var params = info.signals[name];\n        _this19.$Signals[name] = QmlWeb.Signal.signal(params);\n        if (!(name in _this19)) _this19[name] = _this19.$Signals[name];\n      });\n\n      if (info.defaultProperty) {\n        _this19.$defaultProperty = info.defaultProperty;\n      }\n    });\n    meta.initialized = true;\n    return _this19;\n  }\n\n  _createClass(QtQml_QtObject, [{\n    key: \"getAttributes\",\n    value: function getAttributes() {\n      return this.$attributes;\n    }\n  }]);\n\n  return QtQml_QtObject;\n}(QmlWeb.QObject);\n\nQmlWeb.registerQmlType(QtQml_QtObject);\n\n// eslint-disable-next-line no-undef\n\nvar QtBluetooth_BluetoothDiscoveryModel = function (_QtQml_QtObject) {\n  _inherits(QtBluetooth_BluetoothDiscoveryModel, _QtQml_QtObject);\n\n  function QtBluetooth_BluetoothDiscoveryModel() {\n    _classCallCheck(this, QtBluetooth_BluetoothDiscoveryModel);\n\n    return _possibleConstructorReturn(this, (QtBluetooth_BluetoothDiscoveryModel.__proto__ || Object.getPrototypeOf(QtBluetooth_BluetoothDiscoveryModel)).apply(this, arguments));\n  }\n\n  return QtBluetooth_BluetoothDiscoveryModel;\n}(QtQml_QtObject);\n\nQtBluetooth_BluetoothDiscoveryModel.enums = {\n  BluetoothDiscoveryModel: {\n    FullServiceDiscovery: 1, MinimalServiceDiscovery: 0, DeviceDiscovery: 2,\n    NoError: 0, InputOutputError: 1, PoweredOffError: 2,\n    InvalidBluetoothAdapterError: 4, UnknownError: 3\n  }\n};\nQtBluetooth_BluetoothDiscoveryModel.properties = {\n  discoveryMode: { type: \"enum\", initialValue: 3 }, // MinimalServiceDiscovery\n  error: { type: \"enum\", initialValue: 0 }, // NoError\n  remoteAddress: \"string\",\n  running: \"bool\",\n  uuidFilter: \"string\",\n  url: \"url\"\n};\nQtBluetooth_BluetoothDiscoveryModel.signals = {\n  deviceDiscovered: [{ type: \"string\", name: \"device\" }],\n  serviceDiscovered: [{ type: \"string\", name: \"device\" }]\n};\n\nQmlWeb.registerQmlType(QtBluetooth_BluetoothDiscoveryModel);\n\n// eslint-disable-next-line no-undef\n\nvar QtMultimedia_Audio = function (_QtQml_QtObject2) {\n  _inherits(QtMultimedia_Audio, _QtQml_QtObject2);\n\n  function QtMultimedia_Audio() {\n    _classCallCheck(this, QtMultimedia_Audio);\n\n    return _possibleConstructorReturn(this, (QtMultimedia_Audio.__proto__ || Object.getPrototypeOf(QtMultimedia_Audio)).apply(this, arguments));\n  }\n\n  _createClass(QtMultimedia_Audio, [{\n    key: \"pause\",\n    value: function pause() {\n      // TODO\n    }\n  }, {\n    key: \"play\",\n    value: function play() {\n      // TODO\n    }\n  }, {\n    key: \"seek\",\n    value: function seek() /* offset */{\n      // TODO\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      // TODO\n    }\n  }, {\n    key: \"supportedAudioRoles\",\n    value: function supportedAudioRoles() {\n      // TODO\n    }\n  }]);\n\n  return QtMultimedia_Audio;\n}(QtQml_QtObject);\n\nQtMultimedia_Audio.versions = /^5\\./;\nQtMultimedia_Audio.enums = {\n  Audio: {\n    Available: 0, Busy: 2, Unavailable: 1, ResourceMissing: 3,\n\n    NoError: 0, ResourceError: 1, FormatError: 2, NetworkError: 4,\n    AccessDenied: 8, ServiceMissing: 16,\n\n    StoppedState: 0, PlayingState: 1, PausedState: 2,\n\n    NoMedia: 0, Loading: 1, Loaded: 2, Buffering: 4, Stalled: 8,\n    EndOfMedia: 16, InvalidMedia: 32, UnknownStatus: 64\n  }\n};\nQtMultimedia_Audio.properties = {\n  audioRole: \"enum\", // TODO\n  autoLoad: { type: \"bool\", initialValue: true },\n  autoPlay: \"bool\",\n  availability: \"enum\", // Audio.Available\n  duration: \"int\",\n  error: \"enum\", // Audio.NoError\n  errorString: \"string\",\n  hasAudio: \"bool\",\n  hasVideo: \"bool\",\n  loops: { type: \"int\", initialValue: 1 },\n  mediaObject: \"var\",\n  // TODO: metaData\n  muted: \"bool\",\n  playbackRate: { type: \"real\", initialValue: 1 },\n  playbackState: \"enum\", // Audio.StoppedState\n  playlinst: \"Playlist\",\n  position: \"int\",\n  seekable: \"bool\",\n  source: \"url\",\n  status: \"enum\", // Audio.NoMedia\n  volume: { type: \"real\", initialValue: 1 }\n};\nQtMultimedia_Audio.signals = {\n  error: [{ type: \"enum\", name: \"error\" }, { type: \"string\", name: \"errorString\" }],\n  paused: [],\n  playing: [],\n  stopped: []\n};\n\nQmlWeb.registerQmlType(QtMultimedia_Audio);\n\n// eslint-disable-next-line no-undef\n\nvar QtMultimedia_Camera = function (_QtQml_QtObject3) {\n  _inherits(QtMultimedia_Camera, _QtQml_QtObject3);\n\n  function QtMultimedia_Camera() {\n    _classCallCheck(this, QtMultimedia_Camera);\n\n    return _possibleConstructorReturn(this, (QtMultimedia_Camera.__proto__ || Object.getPrototypeOf(QtMultimedia_Camera)).apply(this, arguments));\n  }\n\n  return QtMultimedia_Camera;\n}(QtQml_QtObject);\n\nQtMultimedia_Camera.versions = /^5\\./;\nQtMultimedia_Camera.enums = {\n  Camera: {\n    Available: 0, Busy: 2, Unavailable: 1, ResourceMissing: 3,\n\n    UnloadedState: 0, LoadedState: 1, ActiveState: 2\n  }\n};\nQtMultimedia_Camera.properties = {\n  availability: \"enum\", // Camera.Available\n  cameraState: { type: \"enum\", initialValue: 2 }, // Camera.ActiveState\n  cameraStatus: \"enum\", // TODO\n  captureMode: \"enum\", // TODO\n  deviceId: \"string\",\n  digitalZoom: { type: \"real\", initialValue: 1 },\n  displayName: \"string\",\n  errorCode: \"enum\", // TODO\n  errorString: \"string\",\n  lockStatus: \"enum\", // TODO\n  maximumDigitalZoom: \"real\",\n  maximumOpticalZoom: \"real\",\n  opticalZoom: { type: \"real\", initialValue: 1 },\n  orientation: \"int\",\n  position: \"enum\" // TODO\n};\nQtMultimedia_Camera.signals = {\n  error: [{ type: \"enum\", name: \"errorCode\" }, { type: \"string\", name: \"errorString\" }]\n};\n\nQmlWeb.registerQmlType(QtMultimedia_Camera);\n\n// eslint-disable-next-line no-undef\n\nvar QtMultimedia_MediaPlayer = function (_QtQml_QtObject4) {\n  _inherits(QtMultimedia_MediaPlayer, _QtQml_QtObject4);\n\n  function QtMultimedia_MediaPlayer() {\n    _classCallCheck(this, QtMultimedia_MediaPlayer);\n\n    return _possibleConstructorReturn(this, (QtMultimedia_MediaPlayer.__proto__ || Object.getPrototypeOf(QtMultimedia_MediaPlayer)).apply(this, arguments));\n  }\n\n  return QtMultimedia_MediaPlayer;\n}(QtQml_QtObject);\n\nQtMultimedia_MediaPlayer.versions = /^5\\./;\nQtMultimedia_MediaPlayer.enums = {\n  MediaPlayer: {\n    Available: 0, Busy: 2, Unavailable: 1, ResourceMissing: 3,\n\n    NoError: 0, ResourceError: 1, FormatError: 2, NetworkError: 4,\n    AccessDenied: 8, ServiceMissing: 16,\n\n    StoppedState: 0, PlayingState: 1, PausedState: 2,\n\n    NoMedia: 0, Loading: 1, Loaded: 2, Buffering: 4, Stalled: 8,\n    EndOfMedia: 16, InvalidMedia: 32, UnknownStatus: 64\n  }\n};\nQtMultimedia_MediaPlayer.properties = {\n  audioRole: \"enum\", // TODO\n  autoLoad: { type: \"bool\", initialValue: true },\n  autoPlay: \"bool\",\n  availability: \"enum\", // MediaPlayer.Available\n  bufferProgress: \"real\",\n  duration: \"int\",\n  error: \"enum\", // MediaPlayer.NoError\n  errorString: \"string\",\n  hasAudio: \"bool\",\n  hasVideo: \"bool\",\n  loops: \"int\",\n  muted: \"bool\",\n  playbackRate: { type: \"real\", initialValue: 1 },\n  playbackState: \"enum\", // MediaPlayer.StoppedState\n  position: \"int\",\n  seekable: \"bool\",\n  source: \"url\",\n  status: \"enum\", // MediaPlayer.NoMedia\n  volume: \"real\"\n};\nQtMultimedia_MediaPlayer.signals = {\n  error: [{ type: \"enum\", name: \"error\" }, { type: \"string\", name: \"errorString\" }],\n  paused: [],\n  playing: [],\n  stopped: []\n};\n\nQmlWeb.registerQmlType(QtMultimedia_MediaPlayer);\n\n// eslint-disable-next-line no-undef\n\nvar QtNfc_NearField = function (_QtQml_QtObject5) {\n  _inherits(QtNfc_NearField, _QtQml_QtObject5);\n\n  function QtNfc_NearField() {\n    _classCallCheck(this, QtNfc_NearField);\n\n    return _possibleConstructorReturn(this, (QtNfc_NearField.__proto__ || Object.getPrototypeOf(QtNfc_NearField)).apply(this, arguments));\n  }\n\n  return QtNfc_NearField;\n}(QtQml_QtObject);\n\nQtNfc_NearField.properties = {\n  filter: \"list\",\n  messageRecords: \"list\",\n  orderMatch: \"bool\",\n  polling: \"bool\"\n};\nQtNfc_NearField.signals = {\n  tagFound: [],\n  tagRemoved: []\n};\n\nQmlWeb.registerQmlType(QtNfc_NearField);\n\n// eslint-disable-next-line no-undef\n\nvar QtQml_Binding = function (_QtQml_QtObject6) {\n  _inherits(QtQml_Binding, _QtQml_QtObject6);\n\n  function QtQml_Binding(meta) {\n    _classCallCheck(this, QtQml_Binding);\n\n    var _this25 = _possibleConstructorReturn(this, (QtQml_Binding.__proto__ || Object.getPrototypeOf(QtQml_Binding)).call(this, meta));\n\n    _this25.$property = undefined;\n\n    _this25.valueChanged.connect(_this25, _this25.$onValueChanged);\n    _this25.targetChanged.connect(_this25, _this25.$updateBinding);\n    _this25.propertyChanged.connect(_this25, _this25.$updateBinding);\n    _this25.whenChanged.connect(_this25, _this25.$updateBinding);\n    return _this25;\n  }\n\n  _createClass(QtQml_Binding, [{\n    key: \"$updateBinding\",\n    value: function $updateBinding() {\n      if (!this.when || !this.target || !this.target.hasOwnProperty(this.property) || this.value === undefined) {\n        this.$property = undefined;\n        return;\n      }\n      this.$property = this.target.$properties[this.property];\n      this.$onValueChanged(this.value); // trigger value update\n    }\n  }, {\n    key: \"$onValueChanged\",\n    value: function $onValueChanged(value) {\n      if (value !== undefined && this.$property) {\n        this.$property.set(value);\n      }\n    }\n  }]);\n\n  return QtQml_Binding;\n}(QtQml_QtObject);\n\nQtQml_Binding.properties = {\n  target: { type: \"QtObject\", initialValue: null },\n  property: { type: \"string\", initialValue: \"\" },\n  value: { type: \"var\", initialValue: undefined },\n  when: { type: \"bool\", initialValue: true }\n};\n\nQmlWeb.registerQmlType(QtQml_Binding);\n\nvar QMLContext = function () {\n  function QMLContext() {\n    _classCallCheck(this, QMLContext);\n  }\n\n  _createClass(QMLContext, [{\n    key: \"nameForObject\",\n    value: function nameForObject(obj) {\n      for (var name in this) {\n        if (this[name] === obj) {\n          return name;\n        }\n      }\n      return undefined;\n    }\n  }]);\n\n  return QMLContext;\n}();\n\n// eslint-disable-next-line no-undef\n\n\nvar QtQml_Component = function (_QtQml_QtObject7) {\n  _inherits(QtQml_Component, _QtQml_QtObject7);\n\n  function QtQml_Component(meta) {\n    _classCallCheck(this, QtQml_Component);\n\n    var _this26 = _possibleConstructorReturn(this, (QtQml_Component.__proto__ || Object.getPrototypeOf(QtQml_Component)).call(this, meta));\n\n    if (QmlWeb.constructors[meta.object.$class] === QtQml_Component) {\n      _this26.$metaObject = meta.object.$children[0];\n    } else {\n      _this26.$metaObject = meta.object;\n    }\n    _this26.$context = meta.context;\n\n    _this26.$jsImports = [];\n\n    if (meta.object.$imports instanceof Array) {\n      var moduleImports = [];\n      var loadImport = function loadImport(importDesc) {\n        if (/\\.js$/.test(importDesc[1])) {\n          _this26.$jsImports.push(importDesc);\n        } else {\n          moduleImports.push(importDesc);\n        }\n      };\n\n      for (var i = 0; i < meta.object.$imports.length; ++i) {\n        loadImport(meta.object.$imports[i]);\n      }\n      QmlWeb.loadImports(_this26, moduleImports);\n    }\n\n    /* If this Component does not have any imports, it is likely one that was\r\n     * created within another Component file. It should inherit the\r\n     * importContextId of the Component file it was created within. */\n    if (_this26.importContextId === undefined) {\n      _this26.importContextId = meta.context.importContextId;\n    }\n    return _this26;\n  }\n\n  _createClass(QtQml_Component, [{\n    key: \"finalizeImports\",\n    value: function finalizeImports($context) {\n      var engine = QmlWeb.engine;\n      for (var i = 0; i < this.$jsImports.length; ++i) {\n        var importDesc = this.$jsImports[i];\n        var js = engine.loadJS(engine.$resolvePath(importDesc[1]));\n\n        if (!js) {\n          console.log(\"Component.finalizeImports: failed to import JavaScript\", importDesc[1]);\n          continue;\n        }\n\n        if (importDesc[3] !== \"\") {\n          $context[importDesc[3]] = {};\n          QmlWeb.importJavascriptInContext(js, $context[importDesc[3]]);\n        } else {\n          QmlWeb.importJavascriptInContext(js, $context);\n        }\n      }\n    }\n  }, {\n    key: \"$createObject\",\n    value: function $createObject(parent) {\n      var properties = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var context = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.$context;\n\n      var engine = QmlWeb.engine;\n      var oldState = engine.operationState;\n      engine.operationState = QmlWeb.QMLOperationState.Init;\n      // change base path to current component base path\n      var bp = engine.$basePath;\n      engine.$basePath = this.$basePath ? this.$basePath : engine.$basePath;\n\n      var newContext = context ? Object.create(context) : new QMLContext();\n\n      if (this.importContextId !== undefined) {\n        newContext.importContextId = this.importContextId;\n      }\n\n      var item = QmlWeb.construct({\n        object: this.$metaObject,\n        parent: parent,\n        context: newContext,\n        isComponentRoot: true\n      });\n\n      this.finalizeImports(item.$context);\n\n      Object.keys(properties).forEach(function (propname) {\n        item[propname] = properties.propname;\n      });\n\n      // change base path back\n      // TODO looks a bit hacky\n      engine.$basePath = bp;\n\n      engine.operationState = oldState;\n      return item;\n    }\n  }, {\n    key: \"createObject\",\n    value: function createObject(parent) {\n      var properties = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      var item = this.$createObject(parent, properties);\n      var QMLItem = QmlWeb.getConstructor(\"QtQuick\", \"2.0\", \"Item\");\n\n      if (item instanceof QMLItem) {\n        item.$properties.parent.set(parent, QmlWeb.QMLProperty.ReasonInit);\n      }\n\n      return item;\n    }\n  }], [{\n    key: \"getAttachedObject\",\n    value: function getAttachedObject() {\n      // see QMLEngine.js for explanation how it is used.\n      if (!this.$Component) {\n        this.$Component = new QmlWeb.QObject(this);\n        this.$Component.completed = QmlWeb.Signal.signal([]);\n        QmlWeb.engine.completedSignals.push(this.$Component.completed);\n\n        this.$Component.destruction = QmlWeb.Signal.signal([]);\n      }\n      return this.$Component;\n    }\n  }]);\n\n  return QtQml_Component;\n}(QtQml_QtObject);\n\nQtQml_Component.global = true;\n\nQmlWeb.registerQmlType(QtQml_Component);\n\n// eslint-disable-next-line no-undef\n\nvar QtQml_Connections = function (_QtQml_QtObject8) {\n  _inherits(QtQml_Connections, _QtQml_QtObject8);\n\n  function QtQml_Connections(meta) {\n    _classCallCheck(this, QtQml_Connections);\n\n    var _this27 = _possibleConstructorReturn(this, (QtQml_Connections.__proto__ || Object.getPrototypeOf(QtQml_Connections)).call(this, meta));\n\n    _this27.target = _this27.$parent;\n    _this27.$connections = {};\n\n    _this27.$old_target = _this27.target;\n    _this27.targetChanged.connect(_this27, _this27.$onTargetChanged);\n    _this27.Component.completed.connect(_this27, _this27.Component$onCompleted);\n    return _this27;\n  }\n\n  _createClass(QtQml_Connections, [{\n    key: \"$onTargetChanged\",\n    value: function $onTargetChanged() {\n      this.$reconnectTarget();\n    }\n  }, {\n    key: \"Component$onCompleted\",\n    value: function Component$onCompleted() {\n      this.$reconnectTarget();\n    }\n  }, {\n    key: \"$reconnectTarget\",\n    value: function $reconnectTarget() {\n      var old_target = this.$old_target;\n      for (var i in this.$connections) {\n        var c = this.$connections[i];\n        if (c._currentConnection && old_target && old_target[i] && typeof old_target[i].disconnect === \"function\") {\n          old_target[i].disconnect(c._currentConnection);\n        }\n        if (this.target) {\n          c._currentConnection = QmlWeb.connectSignal(this.target, i, c.value, c.objectScope, c.componentScope);\n        }\n      }\n      this.$old_target = this.target;\n    }\n  }, {\n    key: \"$setCustomSlot\",\n    value: function $setCustomSlot(propName, value, objectScope, componentScope) {\n      this.$connections[propName] = { value: value, objectScope: objectScope, componentScope: componentScope };\n    }\n  }]);\n\n  return QtQml_Connections;\n}(QtQml_QtObject);\n\nQtQml_Connections.properties = {\n  target: \"QtObject\",\n  ignoreUnknownSignals: \"bool\"\n};\n\nQmlWeb.registerQmlType(QtQml_Connections);\n\n// eslint-disable-next-line no-undef\n\nvar QtQml_Timer = function (_QtQml_QtObject9) {\n  _inherits(QtQml_Timer, _QtQml_QtObject9);\n\n  function QtQml_Timer(meta) {\n    _classCallCheck(this, QtQml_Timer);\n\n    var _this28 = _possibleConstructorReturn(this, (QtQml_Timer.__proto__ || Object.getPrototypeOf(QtQml_Timer)).call(this, meta));\n\n    _this28.$properties.parent.set(_this28.$parent, QmlWeb.QMLProperty.ReasonInit);\n\n    /* This ensures that if the user toggles the \"running\" property manually,\r\n     * the timer will trigger. */\n    _this28.runningChanged.connect(_this28, _this28.$onRunningChanged);\n\n    QmlWeb.engine.$addTicker(function () {\n      return _this28.$ticker.apply(_this28, arguments);\n    });\n\n    QmlWeb.engine.$registerStart(function () {\n      if (_this28.running) {\n        _this28.restart();\n      }\n    });\n\n    QmlWeb.engine.$registerStop(function () {\n      return _this28.stop();\n    });\n    return _this28;\n  }\n\n  _createClass(QtQml_Timer, [{\n    key: \"start\",\n    value: function start() {\n      this.running = true;\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      this.running = false;\n    }\n  }, {\n    key: \"restart\",\n    value: function restart() {\n      this.stop();\n      this.start();\n    }\n  }, {\n    key: \"$ticker\",\n    value: function $ticker(now) {\n      if (!this.running) return;\n      if (now - this.$prevTrigger >= this.interval) {\n        this.$prevTrigger = now;\n        this.$trigger();\n      }\n    }\n  }, {\n    key: \"$onRunningChanged\",\n    value: function $onRunningChanged() {\n      if (this.running) {\n        this.$prevTrigger = Date.now();\n        if (this.triggeredOnStart) {\n          this.$trigger();\n        }\n      }\n    }\n  }, {\n    key: \"$trigger\",\n    value: function $trigger() {\n      if (!this.repeat) {\n        // We set the value directly in order to be able to emit the\n        // runningChanged signal after triggered, like Qt does it.\n        this.$properties.running.val = false;\n      }\n\n      // Trigger this.\n      this.triggered();\n\n      if (!this.repeat) {\n        // Emit changed signal manually after setting the value manually above.\n        this.runningChanged();\n      }\n    }\n  }]);\n\n  return QtQml_Timer;\n}(QtQml_QtObject);\n\nQtQml_Timer.properties = {\n  interval: { type: \"int\", initialValue: 1000 },\n  parent: { type: \"QtObject\", readOnly: true },\n  repeat: \"bool\",\n  running: \"bool\",\n  triggeredOnStart: \"bool\"\n};\nQtQml_Timer.signals = {\n  triggered: []\n};\n\nQmlWeb.registerQmlType(QtQml_Timer);\n\n// eslint-disable-next-line no-undef\n\nvar QtQuick_Layouts_Layout = function (_QtQml_QtObject10) {\n  _inherits(QtQuick_Layouts_Layout, _QtQml_QtObject10);\n\n  function QtQuick_Layouts_Layout(meta) {\n    _classCallCheck(this, QtQuick_Layouts_Layout);\n\n    var _this29 = _possibleConstructorReturn(this, (QtQuick_Layouts_Layout.__proto__ || Object.getPrototypeOf(QtQuick_Layouts_Layout)).call(this, meta));\n\n    throw new Error(\"Do not create objects of type Layout\");\n    return _this29;\n  }\n\n  _createClass(QtQuick_Layouts_Layout, null, [{\n    key: \"getAttachedObject\",\n    value: function getAttachedObject() {\n      if (!this.$Layout) {\n        this.$Layout = new QmlWeb.QObject(this);\n        QmlWeb.createProperties(this.$Layout, {\n          alignment: \"enum\",\n          bottomMargin: \"real\",\n          column: \"int\",\n          columnSpan: \"int\",\n          fillHeight: \"bool\",\n          fillWidth: \"bool\",\n          leftMargin: \"real\",\n          margins: \"real\",\n          maximumHeight: \"real\",\n          maximumWidth: \"real\",\n          minimumHeight: \"real\",\n          minimumWidth: \"real\",\n          preferredHeight: \"real\",\n          preferredWidth: \"real\",\n          rightMargin: \"real\",\n          row: \"int\",\n          rowSpan: \"int\",\n          topMargin: \"real\"\n        });\n      }\n      return this.$Layout;\n    }\n  }]);\n\n  return QtQuick_Layouts_Layout;\n}(QtQml_QtObject);\n\nQtQuick_Layouts_Layout.versions = /^1\\./;\n\nQmlWeb.registerQmlType(QtQuick_Layouts_Layout);\n\n// eslint-disable-next-line no-undef\n\nvar QtQuick_Particles_Direction = function (_QtQml_QtObject11) {\n  _inherits(QtQuick_Particles_Direction, _QtQml_QtObject11);\n\n  function QtQuick_Particles_Direction() {\n    _classCallCheck(this, QtQuick_Particles_Direction);\n\n    return _possibleConstructorReturn(this, (QtQuick_Particles_Direction.__proto__ || Object.getPrototypeOf(QtQuick_Particles_Direction)).apply(this, arguments));\n  }\n\n  return QtQuick_Particles_Direction;\n}(QtQml_QtObject);\n\nQtQuick_Particles_Direction.versions = /^2\\./;\n\nQmlWeb.registerQmlType(QtQuick_Particles_Direction);\n\n// eslint-disable-next-line no-undef, max-len\n\nvar QtQuick_Particles_AngleDirection = function (_QtQuick_Particles_Di) {\n  _inherits(QtQuick_Particles_AngleDirection, _QtQuick_Particles_Di);\n\n  function QtQuick_Particles_AngleDirection() {\n    _classCallCheck(this, QtQuick_Particles_AngleDirection);\n\n    return _possibleConstructorReturn(this, (QtQuick_Particles_AngleDirection.__proto__ || Object.getPrototypeOf(QtQuick_Particles_AngleDirection)).apply(this, arguments));\n  }\n\n  return QtQuick_Particles_AngleDirection;\n}(QtQuick_Particles_Direction);\n\nQtQuick_Particles_AngleDirection.versions = /^2\\./;\nQtQuick_Particles_AngleDirection.properties = {\n  angle: \"real\",\n  angleVariation: \"real\",\n  magnitude: \"real\",\n  magnitudeVariation: \"real\"\n};\n\nQmlWeb.registerQmlType(QtQuick_Particles_AngleDirection);\n\n// eslint-disable-next-line no-undef\n\nvar QtQuick_Window_Screen = function (_QtQml_QtObject12) {\n  _inherits(QtQuick_Window_Screen, _QtQml_QtObject12);\n\n  function QtQuick_Window_Screen(meta) {\n    _classCallCheck(this, QtQuick_Window_Screen);\n\n    var _this32 = _possibleConstructorReturn(this, (QtQuick_Window_Screen.__proto__ || Object.getPrototypeOf(QtQuick_Window_Screen)).call(this, meta));\n\n    throw new Error(\"Screen can only be used via the attached property.\");\n    return _this32;\n  }\n\n  _createClass(QtQuick_Window_Screen, null, [{\n    key: \"getAttachedObject\",\n    value: function getAttachedObject() {\n      if (!QtQuick_Window_Screen.$Screen) {\n        var screen = QtQuick_Window_Screen.$Screen = new QmlWeb.QObject();\n        // TODO: read-only\n        QmlWeb.createProperties(screen, {\n          name: \"string\",\n          orientation: \"enum\",\n          orientationUpdateMask: \"enum\",\n          primaryOrientation: \"enum\",\n          pixelDensity: \"real\",\n          devicePixelRatio: \"real\",\n          desktopAvailableHeight: \"int\",\n          desktopAvailableWidth: \"int\",\n          height: \"int\",\n          width: \"int\"\n        });\n        screen.name = window.navigator.appName;\n        screen.devicePixelRatio = window.devicePixelRatio;\n        screen.pixelDensity = window.devicePixelRatio * 96 / 25.4; // per mm\n        QtQuick_Window_Screen.$populateScreen();\n        window.addEventListener(\"resize\", function () {\n          return QtQuick_Window_Screen.$populateScreen();\n        });\n\n        // TODO: orientation\n        var _Qt = QmlWeb.Qt;\n        screen.orientationUpdateMask = 0;\n        screen.orientation = _Qt.PrimaryOrientation;\n        screen.primaryOrientation = _Qt.PrimaryOrientation;\n      }\n      return QtQuick_Window_Screen.$Screen;\n    }\n  }, {\n    key: \"$populateScreen\",\n    value: function $populateScreen() {\n      var screen = QtQuick_Window_Screen.$Screen;\n      screen.desktopAvailableHeight = window.outerHeight;\n      screen.desktopAvailableWidth = window.outerWidth;\n      screen.height = window.innerHeight;\n      screen.width = window.innerWidth;\n    }\n  }]);\n\n  return QtQuick_Window_Screen;\n}(QtQml_QtObject);\n\nQmlWeb.registerQmlType(QtQuick_Window_Screen);\n\n// eslint-disable-next-line no-undef\n\nvar QtQuick_Animation = function (_QtQml_QtObject13) {\n  _inherits(QtQuick_Animation, _QtQml_QtObject13);\n\n  function QtQuick_Animation() {\n    _classCallCheck(this, QtQuick_Animation);\n\n    return _possibleConstructorReturn(this, (QtQuick_Animation.__proto__ || Object.getPrototypeOf(QtQuick_Animation)).apply(this, arguments));\n  }\n\n  _createClass(QtQuick_Animation, [{\n    key: \"restart\",\n    value: function restart() {\n      this.stop();\n      this.start();\n    }\n  }, {\n    key: \"start\",\n    value: function start() {\n      this.running = true;\n      this.started();\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      this.running = false;\n      this.stopped();\n    }\n  }, {\n    key: \"pause\",\n    value: function pause() {\n      this.paused = true;\n    }\n  }, {\n    key: \"resume\",\n    value: function resume() {\n      this.paused = false;\n    }\n  }, {\n    key: \"complete\",\n    value: function complete() {\n      this.running = false;\n      this.stopped();\n      this.finished();\n      //console.log(\"Unbound method for\", this);\n    }\n  }]);\n\n  return QtQuick_Animation;\n}(QtQml_QtObject);\n\nQtQuick_Animation.enums = {\n  Animation: { Infinite: -1 },\n  Easing: QmlWeb.Easing\n};\nQtQuick_Animation.properties = {\n  alwaysRunToEnd: \"bool\",\n  loops: { type: \"int\", initialValue: 1 },\n  paused: \"bool\",\n  running: \"bool\"\n};\nQtQuick_Animation.signals = {\n  finished: [],\n  started: [],\n  stopped: []\n};\n\nQmlWeb.registerQmlType(QtQuick_Animation);\n\n// eslint-disable-next-line no-undef\n\nvar QtQuick_Animator = function (_QtQuick_Animation) {\n  _inherits(QtQuick_Animator, _QtQuick_Animation);\n\n  function QtQuick_Animator(meta) {\n    _classCallCheck(this, QtQuick_Animator);\n\n    var _this34 = _possibleConstructorReturn(this, (QtQuick_Animator.__proto__ || Object.getPrototypeOf(QtQuick_Animator)).call(this, meta));\n\n    _this34.easing = new QmlWeb.QObject(_this34);\n    QmlWeb.createProperties(_this34.easing, {\n      type: { type: \"enum\", initialValue: _this34.Easing.Linear },\n      amplitude: { type: \"real\", initialValue: 1 },\n      overshoot: { type: \"real\", initialValue: 1.70158 },\n      period: { type: \"real\", initialValue: 0.3 },\n      bezierCurve: \"list\"\n    });\n    return _this34;\n  }\n\n  return QtQuick_Animator;\n}(QtQuick_Animation);\n\nQtQuick_Animator.versions = /^2\\./;\nQtQuick_Animator.properties = {\n  duration: { type: \"int\", initialValue: 250 },\n  from: \"real\",\n  target: \"Item\",\n  to: \"real\"\n};\n\nQmlWeb.registerQmlType(QtQuick_Animator);\n\n// eslint-disable-next-line no-undef\n\nvar QtQuick_Behavior = function (_QtQml_QtObject14) {\n  _inherits(QtQuick_Behavior, _QtQml_QtObject14);\n\n  function QtQuick_Behavior(meta) {\n    _classCallCheck(this, QtQuick_Behavior);\n\n    var _this35 = _possibleConstructorReturn(this, (QtQuick_Behavior.__proto__ || Object.getPrototypeOf(QtQuick_Behavior)).call(this, meta));\n\n    _this35.$on = meta.object.$on;\n\n    _this35.animationChanged.connect(_this35, _this35.$onAnimationChanged);\n    _this35.enabledChanged.connect(_this35, _this35.$onEnabledChanged);\n    return _this35;\n  }\n\n  _createClass(QtQuick_Behavior, [{\n    key: \"$onAnimationChanged\",\n    value: function $onAnimationChanged(newVal) {\n      newVal.target = this.$parent;\n      newVal.property = this.$on;\n      this.$parent.$properties[this.$on].animation = newVal;\n    }\n  }, {\n    key: \"$onEnabledChanged\",\n    value: function $onEnabledChanged(newVal) {\n      this.$parent.$properties[this.$on].animation = newVal ? this.animation : null;\n    }\n  }]);\n\n  return QtQuick_Behavior;\n}(QtQml_QtObject);\n\nQtQuick_Behavior.properties = {\n  animation: \"Animation\",\n  enabled: { type: \"bool\", initialValue: true }\n};\nQtQuick_Behavior.defaultProperty = \"animation\";\n\nQmlWeb.registerQmlType(QtQuick_Behavior);\n\n// eslint-disable-next-line no-undef\n\nvar QtQuick_FontLoader = function (_QtQml_QtObject15) {\n  _inherits(QtQuick_FontLoader, _QtQml_QtObject15);\n\n  function QtQuick_FontLoader(meta) {\n    _classCallCheck(this, QtQuick_FontLoader);\n\n    var _this36 = _possibleConstructorReturn(this, (QtQuick_FontLoader.__proto__ || Object.getPrototypeOf(QtQuick_FontLoader)).call(this, meta));\n\n    _this36.$lastName = \"\";\n    _this36.$inTouchName = false;\n\n    /*\r\n      Maximum timeout is the maximum time for a font to load. If font isn't\r\n      loaded in this time, the status is set to Error.\r\n      For both cases (with and without FontLoader.js) if the font takes more\r\n      than the maximum timeout to load, dimensions recalculations for elements\r\n      that are using this font will not be triggered or will have no effect.\r\n        FontLoader.js uses only the last timeout. The state and name properties\r\n      are set immediately when the font loads. If the font could not be loaded,\r\n      the Error status will be set only when this timeout expires. If the font\r\n      loading takes more than the timeout, the name property is set, but the\r\n      status is set to Error.\r\n        Fallback sets the font name immediately and touches it several times to\r\n      trigger dimensions recalcuations. The status is set to Error and should\r\n      not be used.\r\n    */\n    // 15 seconds maximum\n    _this36.$timeouts = [20, 50, 100, 300, 500, 1000, 3000, 5000, 10000, 15000];\n\n    _this36.sourceChanged.connect(_this36, _this36.$onSourceChanged);\n    _this36.nameChanged.connect(_this36, _this36.$onNameChanged);\n    return _this36;\n  }\n\n  _createClass(QtQuick_FontLoader, [{\n    key: \"$loadFont\",\n    value: function $loadFont(fontName, fontFace) {\n      var _this37 = this;\n\n      /* global FontLoader */\n      if (this.$lastName === fontName || this.$inTouchName) {\n        return;\n      }\n      this.$lastName = fontName;\n\n      if (!fontName) {\n        this.status = this.FontLoader.Null;\n        return;\n      }\n      this.status = this.FontLoader.Loading;\n\n      var promise = void 0;\n      if (fontFace) {\n        promise = fontFace.loaded;\n      } else if (document.fonts && document.fonts.load) {\n        promise = document.fonts.load(fontName);\n      }\n\n      if (promise) {\n        promise.then(function () {\n          if (_this37.$lastName !== fontName) return;\n          _this37.name = fontName;\n          _this37.status = _this37.FontLoader.Ready;\n        }, function () {\n          if (_this37.$lastName !== fontName) return;\n          _this37.status = _this37.FontLoader.Error;\n        });\n      } else if (typeof FontLoader === \"function\") {\n        var fontLoader = new FontLoader([fontName], {\n          fontsLoaded: function fontsLoaded(error) {\n            if (error !== null) {\n              if (_this37.$lastName === fontName && error.notLoadedFontFamilies[0] === fontName) {\n                // Set the name for the case of font loading after the timeout.\n                _this37.name = fontName;\n                _this37.status = _this37.FontLoader.Error;\n              }\n            }\n          },\n          fontLoaded: function fontLoaded(font) {\n            if (_this37.$lastName === fontName && font.family === fontName) {\n              _this37.name = fontName;\n              _this37.status = _this37.FontLoader.Ready;\n            }\n          }\n        }, this.$timeouts[this.$timeouts.length - 1]);\n        // Else I get problems loading multiple fonts (FontLoader.js bug?)\n        FontLoader.testDiv = null;\n        fontLoader.loadFonts();\n      } else {\n        console.warn(\"FontLoader.js library is not loaded.\\nYou should load FontLoader.js if you want to use QtQuick FontLoader elements.\\nRefs: https://github.com/smnh/FontLoader.\");\n        // You should not rely on 'status' property without FontLoader.js.\n        this.status = this.FontLoader.Error;\n        this.name = fontName;\n        this.$cycleTouchName(fontName, 0);\n      }\n    }\n  }, {\n    key: \"$cycleTouchName\",\n    value: function $cycleTouchName(fontName, i) {\n      var _this38 = this;\n\n      if (this.$lastName !== fontName) {\n        return;\n      }\n      if (i > 0) {\n        var name = this.name;\n        this.$inTouchName = true;\n        // Calling this.nameChanged() is not enough, we have to actually change\n        // the value to flush the bindings.\n        this.name = \"sans-serif\";\n        this.name = name;\n        this.$inTouchName = false;\n      }\n      if (i < this.$timeouts.length) {\n        setTimeout(function () {\n          _this38.$cycleTouchName(fontName, i + 1);\n        }, this.$timeouts[i] - (i > 0 ? this.$timeouts[i - 1] : 0));\n      }\n    }\n  }, {\n    key: \"$onSourceChanged\",\n    value: function $onSourceChanged(font_src) {\n      // Load font by source url\n      var rand = Math.round(Math.random() * 1e15);\n      var fontName = \"font_\" + Date.now().toString(36) + \"_\" + rand.toString(36);\n      if (typeof FontFace !== \"undefined\" && document.fonts && document.fonts.add) {\n        var fontFace = new FontFace(fontName, \"url('\" + font_src + \"')\");\n        document.fonts.add(fontFace);\n        fontFace.load();\n        this.$loadFont(fontName, fontFace);\n        return;\n      }\n      if (!this.$domStyle) {\n        this.$domStyle = document.createElement(\"style\");\n      }\n      this.$domStyle.innerHTML = \"@font-face {\\n      font-family: \" + fontName + \";\\n      src: url('\" + font_src + \"');\\n    }\";\n      document.getElementsByTagName(\"head\")[0].appendChild(this.$domStyle);\n      this.$loadFont(fontName);\n    }\n  }, {\n    key: \"$onNameChanged\",\n    value: function $onNameChanged(fontName) {\n      // Load font by the name\n      this.$loadFont(fontName);\n    }\n  }]);\n\n  return QtQuick_FontLoader;\n}(QtQml_QtObject);\n\nQtQuick_FontLoader.enums = {\n  FontLoader: { Null: 0, Ready: 1, Loading: 2, Error: 3 }\n};\nQtQuick_FontLoader.properties = {\n  name: \"string\",\n  source: \"url\",\n  status: \"enum\" // FontLoader.Null\n};\n\nQmlWeb.registerQmlType(QtQuick_FontLoader);\n\nvar QtQuick_GradientStop = function (_QtQml_QtObject16) {\n  _inherits(QtQuick_GradientStop, _QtQml_QtObject16);\n\n  function QtQuick_GradientStop(meta) {\n    _classCallCheck(this, QtQuick_GradientStop);\n\n    var _this39 = _possibleConstructorReturn(this, (QtQuick_GradientStop.__proto__ || Object.getPrototypeOf(QtQuick_GradientStop)).call(this, meta));\n\n    _this39.positionChanged.connect(_this39, _this39.$positionChanged);\n    _this39.colorChanged.connect(_this39, _this39.$colorChanged);\n    //this.$parent.stops.push({position: this.position, color: this.color})\n    return _this39;\n  }\n\n  _createClass(QtQuick_GradientStop, [{\n    key: \"$colorChanged\",\n    value: function $colorChanged() {\n      //console.log(this.color)\n    }\n  }, {\n    key: \"$positionChanged\",\n    value: function $positionChanged() {\n      //console.log(this.position)\n    }\n  }]);\n\n  return QtQuick_GradientStop;\n}(QtQml_QtObject);\n\nQtQuick_GradientStop.properties = {\n  color: { type: \"color\", initialValue: \"black\" },\n  position: \"real\"\n};\n\nQmlWeb.registerQmlType(QtQuick_GradientStop);\n\n// eslint-disable-next-line no-undef\n\nvar QtQuick_Item = function (_QtQml_QtObject17) {\n  _inherits(QtQuick_Item, _QtQml_QtObject17);\n\n  function QtQuick_Item(meta) {\n    _classCallCheck(this, QtQuick_Item);\n\n    var _this40 = _possibleConstructorReturn(this, (QtQuick_Item.__proto__ || Object.getPrototypeOf(QtQuick_Item)).call(this, meta));\n\n    if (!_this40.dom) {\n      // Create a dom element for this item.\n      _this40.dom = document.createElement(meta.tagName || \"div\");\n    }\n    _this40.dom.style.position = \"absolute\";\n    _this40.dom.style.pointerEvents = \"none\";\n    if (meta.style) {\n      for (var key in meta.style) {\n        if (!meta.style.hasOwnProperty(key)) continue;\n        _this40.dom.style[key] = meta.style[key];\n      }\n    }\n\n    // In case the class is qualified, only use the last part for the css class\n    // name.\n    var classComponent = meta.object.$class.split(\".\").pop();\n    _this40.dom.className = \"\" + classComponent + (_this40.id ? \" \" + _this40.id : \"\");\n    _this40.css = _this40.dom.style;\n    _this40.impl = null; // Store the actually drawn element\n\n    _this40.css.boxSizing = \"border-box\";\n\n    if (_this40.$isComponentRoot) {\n      QmlWeb.createProperty(\"var\", _this40, \"activeFocus\");\n    }\n\n    _this40.parentChanged.connect(_this40, _this40.$onParentChanged_);\n    _this40.dataChanged.connect(_this40, _this40.$onDataChanged);\n    _this40.stateChanged.connect(_this40, _this40.$onStateChanged);\n    _this40.visibleChanged.connect(_this40, _this40.$onVisibleChanged_);\n    _this40.clipChanged.connect(_this40, _this40.$onClipChanged);\n    _this40.zChanged.connect(_this40, _this40.$onZChanged);\n    _this40.xChanged.connect(_this40, _this40.$onXChanged);\n    _this40.yChanged.connect(_this40, _this40.$onYChanged);\n    _this40.widthChanged.connect(_this40, _this40.$onWidthChanged_);\n    _this40.heightChanged.connect(_this40, _this40.$onHeightChanged_);\n    _this40.focusChanged.connect(_this40, _this40.$onFocusChanged_);\n\n    _this40.widthChanged.connect(_this40, _this40.$updateHGeometry);\n    _this40.heightChanged.connect(_this40, _this40.$updateVGeometry);\n    _this40.implicitWidthChanged.connect(_this40, _this40.$onImplicitWidthChanged);\n    _this40.implicitHeightChanged.connect(_this40, _this40.$onImplicitHeightChanged);\n\n    _this40.$isUsingImplicitWidth = true;\n    _this40.$isUsingImplicitHeight = true;\n\n    _this40.anchors = new QmlWeb.QObject(_this40);\n    QmlWeb.createProperties(_this40.anchors, {\n      left: \"var\",\n      right: \"var\",\n      top: \"var\",\n      bottom: \"var\",\n      horizontalCenter: \"var\",\n      verticalCenter: \"var\",\n      fill: \"Item\",\n      centerIn: \"Item\",\n      margins: \"real\",\n      leftMargin: \"real\",\n      rightMargin: \"real\",\n      topMargin: \"real\",\n      bottomMargin: \"real\"\n    });\n    _this40.anchors.leftChanged.connect(_this40, _this40.$updateHGeometry);\n    _this40.anchors.rightChanged.connect(_this40, _this40.$updateHGeometry);\n    _this40.anchors.topChanged.connect(_this40, _this40.$updateVGeometry);\n    _this40.anchors.bottomChanged.connect(_this40, _this40.$updateVGeometry);\n    _this40.anchors.horizontalCenterChanged.connect(_this40, _this40.$updateHGeometry);\n    _this40.anchors.verticalCenterChanged.connect(_this40, _this40.$updateVGeometry);\n    _this40.anchors.fillChanged.connect(_this40, _this40.$updateHGeometry);\n    _this40.anchors.fillChanged.connect(_this40, _this40.$updateVGeometry);\n    _this40.anchors.centerInChanged.connect(_this40, _this40.$updateHGeometry);\n    _this40.anchors.centerInChanged.connect(_this40, _this40.$updateVGeometry);\n    _this40.anchors.leftMarginChanged.connect(_this40, _this40.$updateHGeometry);\n    _this40.anchors.rightMarginChanged.connect(_this40, _this40.$updateHGeometry);\n    _this40.anchors.topMarginChanged.connect(_this40, _this40.$updateVGeometry);\n    _this40.anchors.bottomMarginChanged.connect(_this40, _this40.$updateVGeometry);\n    _this40.anchors.marginsChanged.connect(_this40, _this40.$updateHGeometry);\n    _this40.anchors.marginsChanged.connect(_this40, _this40.$updateVGeometry);\n\n    // childrenRect property\n    _this40.childrenRect = new QmlWeb.QObject(_this40);\n    QmlWeb.createProperties(_this40.childrenRect, {\n      x: \"real\", // TODO ro\n      y: \"real\", // TODO ro\n      width: \"real\", // TODO ro\n      height: \"real\" // TODO ro\n    });\n\n    _this40.rotationChanged.connect(_this40, _this40.$updateTransform);\n    _this40.scaleChanged.connect(_this40, _this40.$updateTransform);\n    _this40.transformChanged.connect(_this40, _this40.$updateTransform);\n\n    _this40.Component.completed.connect(_this40, _this40.Component$onCompleted_);\n    _this40.opacityChanged.connect(_this40, _this40.$calculateOpacity);\n    if (_this40.$parent) {\n      _this40.$parent.$opacityChanged.connect(_this40, _this40.$calculateOpacity);\n    }\n\n    _this40.spacing = 0;\n    _this40.$revertActions = [];\n    _this40.css.left = _this40.x + \"px\";\n    _this40.css.top = _this40.y + \"px\";\n\n    _this40.disabledList = [];\n    return _this40;\n  }\n\n  _createClass(QtQuick_Item, [{\n    key: \"mapToItem\",\n    value: function mapToItem(item, x, y) {\n      return {\n        x: item.x + x + this.parent.x,\n        y: item.y + y + this.parent.y\n      };\n    }\n  }, {\n    key: \"$firstParentForWheel\",\n    value: function $firstParentForWheel() {\n      var item = this.parent;\n      while (item.parent && !(item instanceof QtQuick_ListView || item instanceof QtQuick_GridView || item instanceof QtQuick_Flickable)) {\n        item = item.parent;\n      }\n      return item instanceof QtQuick_ListView || item instanceof QtQuick_GridView || item instanceof QtQuick_Flickable ? item : null;\n    }\n  }, {\n    key: \"$offAllMouseEvent\",\n    value: function $offAllMouseEvent() {\n      var _this41 = this;\n\n      var item = this.parent;\n      while (item.parent) {\n        item = item.parent;\n      }\n      this.areaList = [];\n      var func = function func(item) {\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = item.children[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var child = _step.value;\n\n            if (child != _this41) {\n              if (child instanceof QtQuick_MouseArea || child instanceof QtQuick_ListView || child instanceof QtQuick_GridView || child instanceof QtQuick_Flickable) {\n                if (child.enabled) {\n                  child.enabled = false;\n                  _this41.disabledList.push(child);\n                }\n              }\n            }\n            func(child);\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n      };\n      func(item);\n    }\n  }, {\n    key: \"$onAllMouseEvent\",\n    value: function $onAllMouseEvent() {\n      obj = this.disabledList.pop();\n      while (obj) {\n        obj.enabled = true;\n        obj = this.disabledList.pop();\n      }\n    }\n  }, {\n    key: \"$onParentChanged_\",\n    value: function $onParentChanged_(newParent, oldParent, propName) {\n      if (oldParent) {\n        oldParent.children.splice(oldParent.children.indexOf(this), 1);\n        oldParent.childrenChanged();\n        oldParent.dom.removeChild(this.dom);\n      }\n      if (newParent && newParent.children.indexOf(this) === -1) {\n        newParent.children.push(this);\n        newParent.childrenChanged();\n      }\n      if (newParent) {\n        newParent.dom.appendChild(this.dom);\n      }\n      this.$updateHGeometry(newParent, oldParent, propName);\n      this.$updateVGeometry(newParent, oldParent, propName);\n    }\n  }, {\n    key: \"$onDataChanged\",\n    value: function $onDataChanged(newData) {\n      var QMLItem = QmlWeb.getConstructor(\"QtQuick\", \"2.0\", \"Item\");\n      for (var i in newData) {\n        var child = newData[i];\n        if (child instanceof QMLItem) {\n          child.parent = this; // This will also add it to children.\n        } else {\n          this.resources.push(child);\n        }\n      }\n    }\n  }, {\n    key: \"$onStateChanged\",\n    value: function $onStateChanged(newVal, oldVal) {\n      // let oldState; // TODO: do we need oldState?\n      var newState = void 0;\n      for (var i = 0; i < this.states.length; i++) {\n        if (this.states[i].name === newVal) {\n          newState = this.states[i];\n        }\n        /*\r\n        else if (this.states[i].name === oldVal) {\r\n          oldState = this.states[i];\r\n        }\r\n        */\n      }\n\n      var actions = this.$revertActions.slice();\n\n      // Get current values for revert actions\n\n      for (var _i2 in actions) {\n        var action = actions[_i2];\n        action.from = action.target[action.property];\n      }\n      if (newState) {\n        var changes = newState.$getAllChanges();\n\n        // Get all actions we need to do and create actions to revert them\n        for (var _i3 = 0; _i3 < changes.length; _i3++) {\n          this.$applyChange(actions, changes[_i3]);\n        }\n      }\n\n      // Set all property changes and fetch the actual values afterwards\n      // The latter is needed for transitions. We need to set all properties\n      // before we fetch the values because properties can be interdependent.\n\n      var transitionProps = [];\n      for (var n = 0; n < this.transitions.length; n++) {\n        var _transition = this.transitions[n];\n        for (var k = 0; k < _transition.$properties.animations.val.length; k++) {\n          transitionProps = _transition.$properties.animations.val[k].$props;\n        }\n      }\n      for (var _i4 in actions) {\n        var _action = actions[_i4];\n        if (transitionProps.indexOf(_action.property) < 0) {\n          _action.target.$properties[_action.property].set(_action.value, QmlWeb.QMLProperty.ReasonUser, _action.target, newState ? newState.$context : _action.target.$context);\n        }\n      }\n\n      for (var _i5 in actions) {\n        var _action2 = actions[_i5];\n        //action.to = action.target[action.property];\n        if (_action2.explicit) {\n          // Remove binding\n          _action2.target[_action2.property] = _action2.target[_action2.property];\n          _action2.value = _action2.target[_action2.property];\n        }\n      }\n\n      // Find the best transition to use\n      var transition = void 0;\n      var rating = 0;\n      for (var _i6 = 0; _i6 < this.transitions.length; _i6++) {\n        // We need to stop running transitions, so let's do\n        // it while iterating through the transitions anyway\n        this.transitions[_i6].$stop();\n        var curTransition = this.transitions[_i6];\n        var curRating = 0;\n        if (curTransition.from === oldVal || curTransition.reversible && curTransition.from === newVal) {\n          curRating += 2;\n        } else if (curTransition.from === \"*\") {\n          curRating++;\n        } else {\n          continue;\n        }\n        if (curTransition.to === newVal || curTransition.reversible && curTransition.to === oldVal) {\n          curRating += 2;\n        } else if (curTransition.to === \"*\") {\n          curRating++;\n        } else {\n          continue;\n        }\n        if (curRating > rating) {\n          rating = curRating;\n          transition = curTransition;\n        }\n      }\n      if (transition) {\n        transition.$start(actions);\n      }\n    }\n  }, {\n    key: \"$applyChange\",\n    value: function $applyChange(actions, change) {\n      var _this42 = this;\n\n      var arrayFindIndex = QmlWeb.helpers.arrayFindIndex;\n\n      var _loop = function _loop(j) {\n        var item = change.$actions[j];\n\n        var action = {\n          target: change.target,\n          property: item.property,\n          origValue: change.target.$properties[item.property].binding || change.target.$properties[item.property].val,\n          value: item.value,\n          from: change.target[item.property],\n          to: item.value,\n          explicit: change.explicit\n        };\n\n        var actionIndex = arrayFindIndex(actions, function (element) {\n          return element.target === action.target && element.property === action.property;\n        });\n        if (actionIndex !== -1) {\n          actions[actionIndex] = action;\n        } else {\n          actions.push(action);\n        }\n\n        // Look for existing revert action, else create it\n        var revertIndex = arrayFindIndex(_this42.$revertActions, function (element) {\n          return element.target === change.target && element.property === item.property;\n        });\n        if (revertIndex !== -1 && !change.restoreEntryValues) {\n          // We don't want to revert, so remove it\n          _this42.$revertActions.splice(revertIndex, 1);\n        } else if (revertIndex === -1 && change.restoreEntryValues) {\n          _this42.$revertActions.push({\n            target: change.target,\n            property: item.property,\n            value: change.target.$properties[item.property].binding || change.target.$properties[item.property].val,\n            from: undefined,\n            to: change.target[item.property]\n          });\n        }\n      };\n\n      for (var j = 0; j < change.$actions.length; j++) {\n        _loop(j);\n      }\n    }\n  }, {\n    key: \"$onVisibleChanged_\",\n    value: function $onVisibleChanged_(newVal) {\n      this.css.visibility = newVal ? \"inherit\" : \"hidden\";\n    }\n  }, {\n    key: \"$onClipChanged\",\n    value: function $onClipChanged(newVal) {\n      this.css.overflow = newVal ? \"hidden\" : \"visible\";\n    }\n  }, {\n    key: \"$onZChanged\",\n    value: function $onZChanged() {\n      this.$updateTransform();\n    }\n  }, {\n    key: \"$onXChanged\",\n    value: function $onXChanged(newVal) {\n      this.css.left = newVal + \"px\";\n      this.$updateHGeometry();\n    }\n  }, {\n    key: \"$onYChanged\",\n    value: function $onYChanged(newVal) {\n      this.css.top = newVal + \"px\";\n      this.$updateVGeometry();\n    }\n  }, {\n    key: \"$onWidthChanged_\",\n    value: function $onWidthChanged_(newVal) {\n      this.css.width = newVal ? newVal + \"px\" : \"auto\";\n    }\n  }, {\n    key: \"$onHeightChanged_\",\n    value: function $onHeightChanged_(newVal) {\n      this.css.height = newVal ? newVal + \"px\" : \"auto\";\n    }\n  }, {\n    key: \"$onFocusChanged_\",\n    value: function $onFocusChanged_(newVal) {\n      if (newVal) {\n        if (this.dom.firstChild) {\n          this.dom.firstChild.focus();\n        }\n        document.qmlFocus = this;\n        this.$context.activeFocus = this;\n      } else if (document.qmlFocus === this) {\n        document.getElementsByTagName(\"BODY\")[0].focus();\n        document.qmlFocus = QmlWeb.engine.rootContext().base;\n        this.$context.activeFocus = null;\n      }\n    }\n  }, {\n    key: \"setupFocusOnDom\",\n    value: function setupFocusOnDom(element) {\n      var _this43 = this;\n\n      element.addEventListener(\"focus\", function () {\n        _this43.focus = true;\n      });\n      element.addEventListener(\"blur\", function () {\n        _this43.focus = false;\n      });\n    }\n  }, {\n    key: \"$updateTransform\",\n    value: function $updateTransform() {\n      var QMLTranslate = QmlWeb.getConstructor(\"QtQuick\", \"2.0\", \"Translate\");\n      var QMLRotation = QmlWeb.getConstructor(\"QtQuick\", \"2.0\", \"Rotation\");\n      var QMLScale = QmlWeb.getConstructor(\"QtQuick\", \"2.0\", \"Scale\");\n      var transform = \"rotate(\" + this.rotation + \"deg) scale(\" + this.scale + \")\";\n      var filter = \"\";\n      var transformStyle = \"preserve-3d\";\n\n      for (var i = 0; i < this.transform.length; i++) {\n        var t = this.transform[i];\n        if (t instanceof QMLRotation) {\n          var ax = t.axis;\n          transform += \" rotate3d(\" + ax.x + \", \" + ax.y + \", \" + ax.z + \", \" + ax.angle + \"deg)\";\n        } else if (t instanceof QMLScale) {\n          transform += \" scale(\" + t.xScale + \", \" + t.yScale + \")\";\n        } else if (t instanceof QMLTranslate) {\n          transform += \" translate(\" + t.x + \"px, \" + t.y + \"px)\";\n        } else if (typeof t.transformType !== \"undefined\") {\n          if (t.transformType === \"filter\") {\n            filter += t.operation + \"(\" + t.parameters + \") \";\n          }\n        } else if (typeof t === \"string\") {\n          transform += t;\n        }\n      }\n      if (typeof this.z === \"number\") {\n        transform += \" translate3d(0, 0, \" + this.z + \"px)\";\n        // should also consider z as zIndex for stacking order behaviour of qml\n        // see http://doc.qt.io/qt-5/qml-qtquick-item.html#z-prop\n        this.dom.style.zIndex = this.z;\n      }\n      this.dom.style.transform = transform;\n      this.dom.style.transformStyle = transformStyle;\n      this.dom.style.webkitTransform = transform; // Chrome, Safari and Opera\n      this.dom.style.webkitTransformStyle = transformStyle;\n      this.dom.style.msTransform = transform; // IE\n      this.dom.style.filter = filter;\n      this.dom.style.webkitFilter = filter; // Chrome, Safari and Opera\n    }\n  }, {\n    key: \"Component$onCompleted_\",\n    value: function Component$onCompleted_() {\n      this.$calculateOpacity();\n    }\n  }, {\n    key: \"$calculateOpacity\",\n    value: function $calculateOpacity() {\n      // TODO: reset all opacity on layer.enabled changed\n      /*\r\n      if (false) { // TODO: check layer.enabled\r\n        this.css.opacity = this.opacity;\r\n      }\r\n      */\n      var parentOpacity = this.$parent && this.$parent.$opacity || 1;\n      this.$opacity = this.opacity * parentOpacity;\n      if (this.impl) {\n        this.impl.style.opacity = this.$opacity;\n      }\n    }\n  }, {\n    key: \"$onImplicitWidthChanged\",\n    value: function $onImplicitWidthChanged() {\n      if (this.$isUsingImplicitWidth) {\n        this.width = this.implicitWidth;\n        this.$isUsingImplicitWidth = true;\n      }\n    }\n  }, {\n    key: \"$onImplicitHeightChanged\",\n    value: function $onImplicitHeightChanged() {\n      if (this.$isUsingImplicitHeight) {\n        this.height = this.implicitHeight;\n        this.$isUsingImplicitHeight = true;\n      }\n    }\n  }, {\n    key: \"$updateHGeometry\",\n    value: function $updateHGeometry(newVal, oldVal, propName) {\n      var anchors = this.anchors || this;\n      if (this.$updatingHGeometry) {\n        return;\n      }\n      this.$updatingHGeometry = true;\n\n      var flags = QmlWeb.Signal.UniqueConnection;\n      var lM = anchors.leftMargin || anchors.margins;\n      var rM = anchors.rightMargin || anchors.margins;\n      var w = this.width;\n      var left = this.parent ? this.parent.left : 0;\n\n      // Width\n      if (propName === \"width\") {\n        this.$isUsingImplicitWidth = false;\n      }\n\n      // Position TODO: Layouts\n\n      var u = {}; // our update object\n\n      if (anchors.fill !== undefined) {\n        var fill = anchors.fill;\n        var props = fill.$properties;\n        props.left.changed.connect(this, this.$updateHGeometry, flags);\n        props.right.changed.connect(this, this.$updateHGeometry, flags);\n        props.width.changed.connect(this, this.$updateHGeometry, flags);\n\n        this.$isUsingImplicitWidth = false;\n        u.width = fill.width - lM - rM;\n        u.x = fill.left - left + lM;\n        u.left = fill.left + lM;\n        u.right = fill.right - rM;\n        u.horizontalCenter = (u.left + u.right) / 2;\n      } else if (anchors.centerIn !== undefined) {\n        var horizontalCenter = anchors.centerIn.$properties.horizontalCenter;\n        horizontalCenter.changed.connect(this, this.$updateHGeometry, flags);\n\n        u.horizontalCenter = anchors.centerIn.horizontalCenter;\n        u.x = u.horizontalCenter - w / 2 - left;\n        u.left = u.horizontalCenter - w / 2;\n        u.right = u.horizontalCenter + w / 2;\n      } else if (anchors.left !== undefined) {\n        u.left = anchors.left + lM;\n        if (anchors.right !== undefined) {\n          u.right = anchors.right - rM;\n          this.$isUsingImplicitWidth = false;\n          u.width = u.right - u.left;\n          u.x = u.left - left;\n          u.horizontalCenter = (u.right + u.left) / 2;\n        } else if (anchors.horizontalCenter !== undefined) {\n          u.horizontalCenter = anchors.horizontalCenter;\n          this.$isUsingImplicitWidth = false;\n          u.width = (u.horizontalCenter - u.left) * 2;\n          u.x = u.left - left;\n          u.right = 2 * u.horizontalCenter - u.left;\n        } else {\n          u.x = u.left - left;\n          u.right = u.left + w;\n          u.horizontalCenter = u.left + w / 2;\n        }\n      } else if (anchors.right !== undefined) {\n        u.right = anchors.right - rM;\n        if (anchors.horizontalCenter !== undefined) {\n          u.horizontalCenter = anchors.horizontalCenter;\n          this.$isUsingImplicitWidth = false;\n          u.width = (u.right - u.horizontalCenter) * 2;\n          u.x = 2 * u.horizontalCenter - u.right - left;\n          u.left = 2 * u.horizontalCenter - u.right;\n        } else {\n          u.x = u.right - w - left;\n          u.left = u.right - w;\n          u.horizontalCenter = u.right - w / 2;\n        }\n      } else if (anchors.horizontalCenter !== undefined) {\n        u.horizontalCenter = anchors.horizontalCenter;\n        u.x = u.horizontalCenter - w / 2 - left;\n        u.left = u.horizontalCenter - w / 2;\n        u.right = u.horizontalCenter + w / 2;\n      } else {\n        if (this.parent) {\n          var leftProp = this.parent.$properties.left;\n          leftProp.changed.connect(this, this.$updateHGeometry, flags);\n        }\n\n        u.left = this.x + left;\n        u.right = u.left + w;\n        u.horizontalCenter = u.left + w / 2;\n      }\n\n      for (var key in u) {\n        this[key] = u[key];\n      }\n\n      this.$updatingHGeometry = false;\n\n      if (this.parent) this.$updateChildrenRect(this.parent);\n    }\n  }, {\n    key: \"$updateVGeometry\",\n    value: function $updateVGeometry(newVal, oldVal, propName) {\n      var anchors = this.anchors || this;\n      if (this.$updatingVGeometry) {\n        return;\n      }\n      this.$updatingVGeometry = true;\n\n      var flags = QmlWeb.Signal.UniqueConnection;\n      var tM = anchors.topMargin || anchors.margins;\n      var bM = anchors.bottomMargin || anchors.margins;\n      var h = this.height;\n      var top = this.parent ? this.parent.top : 0;\n\n      // HeighttopProp\n      if (propName === \"height\") {\n        this.$isUsingImplicitHeight = false;\n      }\n\n      // Position TODO: Layouts\n\n      var u = {}; // our update object\n\n      if (anchors.fill !== undefined) {\n        var fill = anchors.fill;\n        var props = fill.$properties;\n        props.top.changed.connect(this, this.$updateVGeometry, flags);\n        props.bottom.changed.connect(this, this.$updateVGeometry, flags);\n        props.height.changed.connect(this, this.$updateVGeometry, flags);\n\n        this.$isUsingImplicitHeight = false;\n        u.height = fill.height - tM - bM;\n        u.y = fill.top - top + tM;\n        u.top = fill.top + tM;\n        u.bottom = fill.bottom - bM;\n        u.verticalCenter = (u.top + u.bottom) / 2;\n      } else if (anchors.centerIn !== undefined) {\n        var verticalCenter = anchors.centerIn.$properties.verticalCenter;\n        verticalCenter.changed.connect(this, this.$updateVGeometry, flags);\n\n        u.verticalCenter = anchors.centerIn.verticalCenter;\n        u.y = u.verticalCenter - h / 2 - top;\n        u.top = u.verticalCenter - h / 2;\n        u.bottom = u.verticalCenter + h / 2;\n      } else if (anchors.top !== undefined) {\n        u.top = anchors.top + tM;\n        if (anchors.bottom !== undefined) {\n          u.bottom = anchors.bottom - bM;\n          this.$isUsingImplicitHeight = false;\n          u.height = u.bottom - u.top;\n          u.y = u.top - top;\n          u.verticalCenter = (u.bottom + u.top) / 2;\n        } else if ((u.verticalCenter = anchors.verticalCenter) !== undefined) {\n          this.$isUsingImplicitHeight = false;\n          u.height = (u.verticalCenter - u.top) * 2;\n          u.y = u.top - top;\n          u.bottom = 2 * u.verticalCenter - u.top;\n        } else {\n          u.y = u.top - top;\n          u.bottom = u.top + h;\n          u.verticalCenter = u.top + h / 2;\n        }\n      } else if (anchors.bottom !== undefined) {\n        u.bottom = anchors.bottom - bM;\n        if ((u.verticalCenter = anchors.verticalCenter) !== undefined) {\n          this.$isUsingImplicitHeight = false;\n          u.height = (u.bottom - u.verticalCenter) * 2;\n          u.y = 2 * u.verticalCenter - u.bottom - top;\n          u.top = 2 * u.verticalCenter - u.bottom;\n        } else {\n          u.y = u.bottom - h - top;\n          u.top = u.bottom - h;\n          u.verticalCenter = u.bottom - h / 2;\n        }\n      } else if (anchors.verticalCenter !== undefined) {\n        u.verticalCenter = anchors.verticalCenter;\n        u.y = u.verticalCenter - h / 2 - top;\n        u.top = u.verticalCenter - h / 2;\n        u.bottom = u.verticalCenter + h / 2;\n      } else {\n        if (this.parent) {\n          var topProp = this.parent.$properties.top;\n          topProp.changed.connect(this, this.$updateVGeometry, flags);\n        }\n\n        u.top = this.y + top;\n        u.bottom = u.top + h;\n        u.verticalCenter = u.top + h / 2;\n      }\n\n      for (var key in u) {\n        this[key] = u[key];\n      }\n\n      this.$updatingVGeometry = false;\n\n      if (this.parent) this.$updateChildrenRect(this.parent);\n    }\n  }, {\n    key: \"$updateChildrenRect\",\n    value: function $updateChildrenRect(component) {\n      if (!component || !component.children || component.children.length === 0) {\n        return;\n      }\n      var children = component.children;\n\n      var maxWidth = 0;\n      var maxHeight = 0;\n      var minX = children.length > 0 ? children[0].x : 0;\n      var minY = children.length > 0 ? children[0].y : 0;\n\n      for (var i = 0; i < children.length; i++) {\n        var child = children[i];\n        maxWidth = Math.max(maxWidth, child.x + child.width);\n        maxHeight = Math.max(maxHeight, child.y + child.heighth);\n        minX = Math.min(minX, child.x);\n        minY = Math.min(minX, child.y);\n      }\n\n      component.childrenRect.x = minX;\n      component.childrenRect.y = minY;\n      component.childrenRect.width = maxWidth;\n      component.childrenRect.height = maxHeight;\n    }\n  }]);\n\n  return QtQuick_Item;\n}(QtQml_QtObject);\n\nQtQuick_Item.properties = {\n  $opacity: { type: \"real\", initialValue: 1 },\n  parent: \"Item\",\n  antialiasing: \"bool\",\n  state: \"string\",\n  states: \"list\",\n  transitions: \"list\",\n  data: \"list\",\n  children: \"list\",\n  resources: \"list\",\n  transform: \"list\",\n  x: \"real\",\n  y: \"real\",\n  z: \"real\",\n  width: \"real\",\n  height: \"real\",\n  implicitWidth: \"real\",\n  implicitHeight: \"real\",\n  left: \"real\",\n  right: \"real\",\n  top: \"real\",\n  bottom: \"real\",\n  horizontalCenter: \"real\",\n  verticalCenter: \"real\",\n  rotation: \"real\",\n  scale: { type: \"real\", initialValue: 1 },\n  opacity: { type: \"real\", initialValue: 1 },\n  visible: { type: \"bool\", initialValue: true },\n  clip: \"bool\",\n  focus: \"bool\",\n  enabled: { type: \"bool\", initialValue: true }\n\n};\nQtQuick_Item.defaultProperty = \"data\";\n\nQmlWeb.registerQmlType(QtQuick_Item);\n\n// eslint-disable-next-line no-undef\n\nvar QmlWeb_Dom_DomElement = function (_QtQuick_Item) {\n  _inherits(QmlWeb_Dom_DomElement, _QtQuick_Item);\n\n  function QmlWeb_Dom_DomElement(meta) {\n    _classCallCheck(this, QmlWeb_Dom_DomElement);\n\n    meta.tagName = meta.object.tagName || meta.tagName;\n\n    var _this44 = _possibleConstructorReturn(this, (QmlWeb_Dom_DomElement.__proto__ || Object.getPrototypeOf(QmlWeb_Dom_DomElement)).call(this, meta));\n\n    for (var key in meta.object.attrs) {\n      if (!meta.object.attrs.hasOwnProperty(key)) continue;\n      _this44.dom[key] = meta.object.attrs[key];\n    }\n    for (var _key26 in meta.object.style) {\n      if (!meta.object.style.hasOwnProperty(_key26)) continue;\n      _this44.dom.style[_key26] = meta.object.style[_key26];\n    }\n\n    _this44.htmlChanged.connect(function () {\n      _this44.dom.innerHTML = _this44.html;\n    });\n    _this44.textChanged.connect(function () {\n      _this44.dom.innerText = _this44.text;\n    });\n    return _this44;\n  }\n\n  return QmlWeb_Dom_DomElement;\n}(QtQuick_Item);\n\nQmlWeb_Dom_DomElement.properties = {\n  attrs: { type: \"var\", initialValue: {} },\n  style: { type: \"var\", initialValue: {} },\n  html: { type: \"string\", initialValue: \"\" },\n  text: { type: \"string\", initialValue: \"\" },\n  tagName: { type: \"string\", initialValue: \"div\" }\n};\n\nQmlWeb.registerQmlType(QmlWeb_Dom_DomElement);\n\n// eslint-disable-next-line no-undef\n\nvar QmlWeb_Dom_DomDiv = function (_QmlWeb_Dom_DomElemen) {\n  _inherits(QmlWeb_Dom_DomDiv, _QmlWeb_Dom_DomElemen);\n\n  function QmlWeb_Dom_DomDiv() {\n    _classCallCheck(this, QmlWeb_Dom_DomDiv);\n\n    return _possibleConstructorReturn(this, (QmlWeb_Dom_DomDiv.__proto__ || Object.getPrototypeOf(QmlWeb_Dom_DomDiv)).apply(this, arguments));\n  }\n\n  return QmlWeb_Dom_DomDiv;\n}(QmlWeb_Dom_DomElement);\n\nQmlWeb.registerQmlType(QmlWeb_Dom_DomDiv);\n\n// eslint-disable-next-line no-undef\n\nvar QmlWeb_Dom_DomParagraph = function (_QmlWeb_Dom_DomElemen2) {\n  _inherits(QmlWeb_Dom_DomParagraph, _QmlWeb_Dom_DomElemen2);\n\n  function QmlWeb_Dom_DomParagraph(meta) {\n    _classCallCheck(this, QmlWeb_Dom_DomParagraph);\n\n    meta.tagName = \"p\";\n    if (!meta.style) meta.style = {};\n    meta.style.margin = 0;\n    return _possibleConstructorReturn(this, (QmlWeb_Dom_DomParagraph.__proto__ || Object.getPrototypeOf(QmlWeb_Dom_DomParagraph)).call(this, meta));\n  }\n\n  return QmlWeb_Dom_DomParagraph;\n}(QmlWeb_Dom_DomElement);\n\nQmlWeb.registerQmlType(QmlWeb_Dom_DomParagraph);\n\n// eslint-disable-next-line no-undef\n\nvar QmlWeb_RestModel = function (_QtQuick_Item2) {\n  _inherits(QmlWeb_RestModel, _QtQuick_Item2);\n\n  function QmlWeb_RestModel(meta) {\n    _classCallCheck(this, QmlWeb_RestModel);\n\n    var _this47 = _possibleConstructorReturn(this, (QmlWeb_RestModel.__proto__ || Object.getPrototypeOf(QmlWeb_RestModel)).call(this, meta));\n\n    _this47.attributes = _this47.getAttributes();\n    _this47.runningRequests = 0;\n    return _this47;\n  }\n\n  _createClass(QmlWeb_RestModel, [{\n    key: \"fetch\",\n    value: function fetch() {\n      var _this48 = this;\n\n      this.$ajax({\n        method: \"GET\",\n        mimeType: this.mimetype,\n        success: function success(xhr) {\n          _this48.$xhrReadResponse(xhr);\n          _this48.fetched();\n        }\n      });\n    }\n  }, {\n    key: \"remove\",\n    value: function remove() {\n      var _this49 = this;\n\n      this.$ajax({\n        method: \"DELETE\",\n        success: function success() {\n          _this49.destroy();\n        }\n      });\n    }\n  }, {\n    key: \"create\",\n    value: function create() {\n      this.$sendToServer(\"POST\");\n    }\n  }, {\n    key: \"save\",\n    value: function save() {\n      this.$sendToServer(\"PUT\");\n    }\n  }, {\n    key: \"$sendToServer\",\n    value: function $sendToServer(method) {\n      var _this50 = this;\n\n      this.$ajax({\n        method: method,\n        mimeType: this.queryMimeType,\n        body: this.$generateBodyForPostQuery(),\n        success: function success(xhr) {\n          _this50.$xhrReadResponse(xhr);\n          _this50.saved();\n        }\n      });\n    }\n  }, {\n    key: \"$generateBodyForPostQuery\",\n    value: function $generateBodyForPostQuery() {\n      var object = {};\n      for (var i = 0; i < this.attributes.length; ++i) {\n        object[this.attributes[i]] = this.$properties[this.attributes[i]].get();\n      }\n      console.log(object);\n      switch (this.queryMimeType) {\n        case \"application/json\":\n        case \"text/json\":\n          return JSON.stringify(object);\n        case \"application/x-www-urlencoded\":\n          return this.$objectToUrlEncoded(object);\n      }\n      return undefined;\n    }\n  }, {\n    key: \"$objectToUrlEncoded\",\n    value: function $objectToUrlEncoded(object, prefix) {\n      var parts = [];\n      for (var key in object) {\n        if (object.hasOwnProperty(key)) {\n          var value = object[key];\n          if (typeof prefix !== \"undefined\") {\n            key = prefix + \"[\" + key + \"]\";\n          }\n          if ((typeof value === \"undefined\" ? \"undefined\" : _typeof(value)) === \"object\") {\n            parts.push(this.$objectToUrlEncoded(value, key));\n          } else {\n            var ekey = this.$myEncodeURIComponent(key);\n            var evalue = this.$myEncodeURIComponent(value);\n            parts.push(ekey + \"=\" + evalue);\n          }\n        }\n      }\n      return parts.join(\"&\");\n    }\n  }, {\n    key: \"$myEncodeURIComponent\",\n    value: function $myEncodeURIComponent(str) {\n      return encodeURIComponent(str).replace(/[!'()*]/g, function (c) {\n        return \"%\" + c.charCodeAt(0).toString(16);\n      });\n    }\n  }, {\n    key: \"$ajax\",\n    value: function $ajax(options) {\n      var _this51 = this;\n\n      var xhr = new XMLHttpRequest();\n      xhr.overrideMimeType(this.mimeType);\n      xhr.onreadystatechange = function () {\n        if (xhr.readyState === XMLHttpRequest.DONE) {\n          if (xhr.status === 200) {\n            options.success(xhr);\n          } else {\n            options.failure(xhr);\n          }\n          _this51.runningRequests -= 1;\n          if (_this51.runningRequests <= 0) {\n            _this51.isLoading = false;\n          }\n        }\n      };\n      xhr.open(options.method, this.url, true);\n      if (typeof options.body !== \"undefined\") {\n        xhr.setRequestHeader(\"Content-Type\", this.queryMimeType);\n        xhr.send(options.body);\n      } else {\n        xhr.send(null);\n      }\n      this.runningRequests += 1;\n      this.isLoading = true;\n    }\n  }, {\n    key: \"$xhrReadResponse\",\n    value: function $xhrReadResponse(xhr) {\n      var responseObject = void 0;\n      if (this.mimeType === \"application/json\" || this.mimeType === \"text/json\") {\n        responseObject = JSON.parse(xhr.responseText);\n      }\n      this.$updatePropertiesFromResponseObject(responseObject);\n    }\n  }, {\n    key: \"$updatePropertiesFromResponseObject\",\n    value: function $updatePropertiesFromResponseObject(responseObject) {\n      var QMLProperty = QmlWeb.QMLProperty;\n      for (var key in responseObject) {\n        if (responseObject.hasOwnProperty(key) && this.$hasProperty(key)) {\n          this.$properties[key].set(responseObject[key], QMLProperty.ReasonUser);\n        }\n      }\n    }\n  }, {\n    key: \"$hasProperty\",\n    value: function $hasProperty(name) {\n      return typeof this.$properties[name] !== \"undefined\";\n    }\n  }]);\n\n  return QmlWeb_RestModel;\n}(QtQuick_Item);\n\nQmlWeb_RestModel.properties = {\n  url: \"string\",\n  isLoading: \"bool\",\n  mimeType: { type: \"string\", initialValue: \"application/json\" },\n  queryMimeType: {\n    type: \"string\",\n    initialValue: \"application/x-www-urlencoded\"\n  }\n};\nQmlWeb_RestModel.signals = {\n  fetched: [],\n  saved: []\n};\n\nQmlWeb.registerQmlType(QmlWeb_RestModel);\n\n// eslint-disable-next-line no-undef\n\nvar Qt_labs_settings_Settings = function (_QtQuick_Item3) {\n  _inherits(Qt_labs_settings_Settings, _QtQuick_Item3);\n\n  function Qt_labs_settings_Settings(meta) {\n    _classCallCheck(this, Qt_labs_settings_Settings);\n\n    var _this52 = _possibleConstructorReturn(this, (Qt_labs_settings_Settings.__proto__ || Object.getPrototypeOf(Qt_labs_settings_Settings)).call(this, meta));\n\n    if (typeof window.localStorage === \"undefined\") {\n      return _possibleConstructorReturn(_this52);\n    }\n\n    _this52.Component.completed.connect(_this52, _this52.Component$onCompleted);\n    return _this52;\n  }\n\n  _createClass(Qt_labs_settings_Settings, [{\n    key: \"Component$onCompleted\",\n    value: function Component$onCompleted() {\n      this.$loadProperties();\n      this.$initializeProperties();\n    }\n  }, {\n    key: \"$getKey\",\n    value: function $getKey(attrName) {\n      return this.category + \"/\" + attrName;\n    }\n  }, {\n    key: \"$loadProperties\",\n    value: function $loadProperties() {\n      var _this53 = this;\n\n      this.$attributes.forEach(function (attrName) {\n        if (!_this53.$properties[attrName]) return;\n\n        var key = _this53.$getKey(attrName);\n        _this53[attrName] = localStorage.getItem(key);\n      });\n    }\n  }, {\n    key: \"$initializeProperties\",\n    value: function $initializeProperties() {\n      var _this54 = this;\n\n      this.$attributes.forEach(function (attrName) {\n        if (!_this54.$properties[attrName]) return;\n\n        var emitter = _this54;\n        var signalName = attrName + \"Changed\";\n\n        if (_this54.$properties[attrName].type === \"alias\") {\n          emitter = _this54.$context[_this54.$properties[attrName].val.objectName];\n          signalName = _this54.$properties[attrName].val.propertyName + \"Changed\";\n        }\n\n        emitter[signalName].connect(_this54, function () {\n          localStorage.setItem(_this54.$getKey(attrName), _this54[attrName]);\n        });\n      });\n    }\n  }]);\n\n  return Qt_labs_settings_Settings;\n}(QtQuick_Item);\n\nQt_labs_settings_Settings.properties = {\n  category: \"string\"\n};\n\nQmlWeb.registerQmlType(Qt_labs_settings_Settings);\n\n// eslint-disable-next-line no-undef\n\nvar QtGraphicalEffects_DropShadow = function (_QtQuick_Item4) {\n  _inherits(QtGraphicalEffects_DropShadow, _QtQuick_Item4);\n\n  function QtGraphicalEffects_DropShadow(meta) {\n    _classCallCheck(this, QtGraphicalEffects_DropShadow);\n\n    var _this55 = _possibleConstructorReturn(this, (QtGraphicalEffects_DropShadow.__proto__ || Object.getPrototypeOf(QtGraphicalEffects_DropShadow)).call(this, meta));\n\n    _this55.colorChanged.connect(_this55, _this55.$updateBoxShadow);\n    _this55.samplesChanged.connect(_this55, _this55.$updateBoxShadow);\n    _this55.radiusChanged.connect(_this55, _this55.$updateBoxShadow);\n    _this55.spreadChanged.connect(_this55, _this55.$updateBoxShadow);\n    _this55.sourceChanged.connect(_this55, _this55.$updateBoxShadow);\n    _this55.verticalOffsetChanged.connect(_this55, _this55.$updateBoxShadow);\n    _this55.horizontalOffsetChanged.connect(_this55, _this55.$updateBoxShadow);\n    return _this55;\n  }\n\n  _createClass(QtGraphicalEffects_DropShadow, [{\n    key: \"$updateBoxShadow\",\n    value: function $updateBoxShadow() {\n      var color = this.color,\n          horizontalOffset = this.horizontalOffset,\n          verticalOffset = this.verticalOffset,\n          radius = this.radius,\n          spread = this.spread;\n\n      if (this.source) {\n        var style = this.source.impl.style;\n        style.boxShadow = horizontalOffset + \"px \" + verticalOffset + \"px \" + radius + \"px \" + spread + \"px \" + color;\n      }\n    }\n  }]);\n\n  return QtGraphicalEffects_DropShadow;\n}(QtQuick_Item);\n\nQtGraphicalEffects_DropShadow.properties = {\n  cached: \"bool\",\n  color: { type: \"color\", initialValue: \"black\" },\n  horizontalOffset: \"real\",\n  radius: { type: \"int\", initialValue: 4 },\n  samples: { type: \"int\", initialValue: 9 },\n  source: { type: \"var\", initialValue: null },\n  spread: { type: \"real\", initialValue: 0 },\n  transparentBorder: \"bool\",\n  verticalOffset: \"real\"\n};\n\nQmlWeb.registerQmlType(QtGraphicalEffects_DropShadow);\n\n// eslint-disable-next-line no-undef\n\nvar QtGraphicalEffects_FastBlur = function (_QtQuick_Item5) {\n  _inherits(QtGraphicalEffects_FastBlur, _QtQuick_Item5);\n\n  function QtGraphicalEffects_FastBlur(meta) {\n    _classCallCheck(this, QtGraphicalEffects_FastBlur);\n\n    var _this56 = _possibleConstructorReturn(this, (QtGraphicalEffects_FastBlur.__proto__ || Object.getPrototypeOf(QtGraphicalEffects_FastBlur)).call(this, meta));\n\n    _this56.$previousSource = null;\n    _this56.$filterObject = undefined;\n\n    _this56.radiusChanged.connect(_this56, _this56.$onRadiusChanged);\n    _this56.sourceChanged.connect(_this56, _this56.$onSourceChanged);\n    return _this56;\n  }\n\n  _createClass(QtGraphicalEffects_FastBlur, [{\n    key: \"$onRadiusChanged\",\n    value: function $onRadiusChanged() {\n      this.$updateEffect(this.source);\n    }\n  }, {\n    key: \"$onSourceChanged\",\n    value: function $onSourceChanged() {\n      this.$updateEffect(this.source);\n    }\n  }, {\n    key: \"$updateFilterObject\",\n    value: function $updateFilterObject() {\n      this.$filterObject = {\n        transformType: \"filter\",\n        operation: \"blur\",\n        parameters: this.radius + \"px\"\n      };\n    }\n  }, {\n    key: \"$updateEffect\",\n    value: function $updateEffect(source) {\n      console.log(\"updating effect\");\n      if (this.$previousSource) {\n        var index = this.$previousSource.transform.indexOf(this.$filterObject);\n        this.$previousSource.transform.splice(index, 1);\n        this.$previousSource.$updateTransform();\n      }\n      if (source && source.transform) {\n        this.$updateFilterObject();\n        console.log(\"updating effect:\", this.$filterObject, source);\n        source.transform.push(this.$filterObject);\n        source.$updateTransform();\n        this.$previousSource = source;\n      } else {\n        this.$previousSource = null;\n      }\n    }\n  }]);\n\n  return QtGraphicalEffects_FastBlur;\n}(QtQuick_Item);\n\nQtGraphicalEffects_FastBlur.properties = {\n  radius: \"real\",\n  source: { type: \"var\", initialValue: null }\n};\n\nQmlWeb.registerQmlType(QtGraphicalEffects_FastBlur);\n\n// eslint-disable-next-line no-undef\n\nvar QtGraphicalEffects_RectangularGlow = function (_QtQuick_Item6) {\n  _inherits(QtGraphicalEffects_RectangularGlow, _QtQuick_Item6);\n\n  function QtGraphicalEffects_RectangularGlow(meta) {\n    _classCallCheck(this, QtGraphicalEffects_RectangularGlow);\n\n    var _this57 = _possibleConstructorReturn(this, (QtGraphicalEffects_RectangularGlow.__proto__ || Object.getPrototypeOf(QtGraphicalEffects_RectangularGlow)).call(this, meta));\n\n    _this57.impl = document.createElement(\"div\");\n    var style = _this57.impl.style;\n    style.pointerEvents = \"none\";\n    style.position = \"absolute\";\n    style.left = style.right = style.top = style.bottom = \"0px\";\n    style.border = \"none\";\n    style.backgroundColor = _this57.color.$css;\n    _this57.dom.appendChild(_this57.impl);\n\n    _this57.colorChanged.connect(_this57, _this57.$onColorChanged);\n    _this57.glowRadiusChanged.connect(_this57, _this57.$updateBoxShadow);\n    _this57.cornerRadiusChanged.connect(_this57, _this57.$updateBoxShadow);\n    _this57.widthChanged.connect(_this57, _this57.$updateBoxShadow);\n    _this57.heightChanged.connect(_this57, _this57.$updateBoxShadow);\n    _this57.spreadChanged.connect(_this57, _this57.$onSpreadChanged);\n    return _this57;\n  }\n\n  _createClass(QtGraphicalEffects_RectangularGlow, [{\n    key: \"$onColorChanged\",\n    value: function $onColorChanged(newVal) {\n      this.impl.style.backgroundColor = newVal.$css;\n      this.$updateBoxShadow();\n    }\n  }, {\n    key: \"$onSpreadChanged\",\n    value: function $onSpreadChanged(newVal) {\n      if (newVal > 1) {\n        this.spread = 1;\n      } else if (newVal < 0) {\n        this.spread = 0;\n      }\n      this.$updateBoxShadow();\n    }\n  }, {\n    key: \"$updateBoxShadow\",\n    value: function $updateBoxShadow() {\n      var color = this.color,\n          glowRadius = this.glowRadius,\n          cornerRadius = this.cornerRadius,\n          spread = this.spread,\n          width = this.width,\n          height = this.height;\n\n      var style = this.impl.style;\n\n      // Calculate boxShadow\n      var totle = glowRadius + cornerRadius * (1 - spread);\n      var glow = (1 - spread) * totle;\n      var blur_radius = glow * 0.64;\n      var spread_radius = totle - blur_radius;\n      var glow2 = glowRadius / 5;\n      var blur_radius_2 = glow2 * 0.8;\n      var spread_radius_2 = glow2 - blur_radius_2;\n\n      style.boxShadow = color + \" 0px 0px \" + blur_radius + \"px \" + spread_radius + \"px,\" + (color + \" 0px 0px \" + blur_radius_2 + \"px \" + spread_radius_2 + \"px\");\n\n      // Calculate glow css\n      var spread_cornerR = cornerRadius * (1 - spread);\n      var rest_cornerR = cornerRadius - spread_cornerR;\n      var xScale = (width - spread_cornerR / 4) / width;\n      var yScale = (height - spread_cornerR / 4) / height;\n\n      style.width = width - spread_cornerR + \"px\";\n      style.height = height - spread_cornerR + \"px\";\n      style.top = spread_cornerR / 2 + \"px\";\n      style.left = spread_cornerR / 2 + \"px\";\n      style.filter = \"blur(\" + spread_cornerR / 2 + \"px)\";\n      style.borderRadius = rest_cornerR / 2 + \"px\";\n      style.transform = \"scale(\" + xScale + \",\" + yScale + \")\";\n    }\n  }]);\n\n  return QtGraphicalEffects_RectangularGlow;\n}(QtQuick_Item);\n\nQtGraphicalEffects_RectangularGlow.properties = {\n  cached: \"bool\",\n  color: { type: \"color\", initialValue: \"white\" },\n  cornerRadius: \"real\",\n  glowRadius: \"real\",\n  spread: \"real\"\n};\n\nQmlWeb.registerQmlType(QtGraphicalEffects_RectangularGlow);\n\n// eslint-disable-next-line no-undef\n\nvar QtMobility_GeoLocation = function (_QtQuick_Item7) {\n  _inherits(QtMobility_GeoLocation, _QtQuick_Item7);\n\n  function QtMobility_GeoLocation(meta) {\n    _classCallCheck(this, QtMobility_GeoLocation);\n\n    var _this58 = _possibleConstructorReturn(this, (QtMobility_GeoLocation.__proto__ || Object.getPrototypeOf(QtMobility_GeoLocation)).call(this, meta));\n\n    if (!navigator.geolocation) {\n      return _possibleConstructorReturn(_this58);\n    }\n\n    navigator.geolocation.getCurrentPosition(function (pos) {\n      return _this58.$updatePosition(pos);\n    });\n    navigator.geolocation.watchPosition(function (pos) {\n      return _this58.$updatePosition(pos);\n    });\n    return _this58;\n  }\n\n  _createClass(QtMobility_GeoLocation, [{\n    key: \"$updatePosition\",\n    value: function $updatePosition(position) {\n      this.accuracy = position.coords.accuracy;\n      this.altitude = position.coords.altitude;\n      this.altitudeAccuracy = position.coords.altitudeAccuracy;\n      this.heading = position.coords.heading;\n      this.latitude = position.coords.latitude;\n      this.longitude = position.coords.longitude;\n      this.speed = position.coords.speed;\n      this.timestamp = position.timestamp;\n    }\n  }]);\n\n  return QtMobility_GeoLocation;\n}(QtQuick_Item);\n\nQtMobility_GeoLocation.properties = {\n  accuracy: \"double\",\n  altitude: \"double\",\n  altitudeAccuracy: \"double\",\n  heading: \"double\",\n  latitude: \"double\",\n  longitude: \"double\",\n  speed: \"double\",\n  timestamp: \"date\",\n  label: \"string\"\n};\n\nQmlWeb.registerQmlType(QtMobility_GeoLocation);\n\n// eslint-disable-next-line no-undef\n\nvar QtMultimedia_Video = function (_QtQuick_Item8) {\n  _inherits(QtMultimedia_Video, _QtQuick_Item8);\n\n  function QtMultimedia_Video(meta) {\n    _classCallCheck(this, QtMultimedia_Video);\n\n    var _this59 = _possibleConstructorReturn(this, (QtMultimedia_Video.__proto__ || Object.getPrototypeOf(QtMultimedia_Video)).call(this, meta));\n\n    _this59.$runningEventListener = 0;\n\n    _this59.impl = document.createElement(\"video\");\n    _this59.impl.style.width = _this59.impl.style.height = \"100%\";\n    _this59.impl.style.margin = \"0\";\n    _this59.dom.appendChild(_this59.impl);\n\n    _this59.volume = _this59.impl.volume;\n    _this59.duration = _this59.impl.duration;\n\n    _this59.impl.addEventListener(\"play\", function () {\n      _this59.playing();\n      _this59.playbackState = _this59.MediaPlayer.PlayingState;\n    });\n\n    _this59.impl.addEventListener(\"pause\", function () {\n      _this59.paused();\n      _this59.playbackState = _this59.MediaPlayer.PausedState;\n    });\n\n    _this59.impl.addEventListener(\"timeupdate\", function () {\n      _this59.$runningEventListener++;\n      _this59.position = _this59.impl.currentTime * 1000;\n      _this59.$runningEventListener--;\n    });\n\n    _this59.impl.addEventListener(\"ended\", function () {\n      _this59.stopped();\n      _this59.playbackState = _this59.MediaPlayer.StoppedState;\n    });\n\n    _this59.impl.addEventListener(\"progress\", function () {\n      if (_this59.impl.buffered.length > 0) {\n        _this59.progress = _this59.impl.buffered.end(0) / _this59.impl.duration;\n        _this59.status = _this59.progress < 1 ? _this59.MediaPlayer.Buffering : _this59.MediaPlayer.Buffered;\n      }\n    });\n\n    _this59.impl.addEventListener(\"stalled\", function () {\n      _this59.status = _this59.MediaPlayer.Stalled;\n    });\n\n    _this59.impl.addEventListener(\"canplaythrough\", function () {\n      _this59.status = _this59.MediaPlayer.Buffered;\n    });\n\n    _this59.impl.addEventListener(\"loadstart\", function () {\n      _this59.status = _this59.MediaPlayer.Loading;\n    });\n\n    _this59.impl.addEventListener(\"durationchanged\", function () {\n      _this59.duration = _this59.impl.duration;\n    });\n\n    _this59.impl.addEventListener(\"volumechanged\", function () {\n      _this59.$runningEventListener++;\n      _this59.volume = _this59.impl.volume;\n      _this59.$runningEventListener--;\n    });\n\n    _this59.impl.addEventListener(\"suspend\", function () {\n      _this59.error |= _this59.MediaPlayer.NetworkError;\n    });\n\n    _this59.impl.addEventListener(\"error\", function () {\n      _this59.error |= _this59.MediaPlayer.ResourceError;\n    });\n\n    _this59.impl.addEventListener(\"ratechange\", function () {\n      _this59.$runningEventListener++;\n      _this59.playbackRate = _this59.impl.playbackRate;\n      _this59.$runningEventListener--;\n    });\n\n    _this59.autoPlayChanged.connect(_this59, _this59.$onAutoPlayChanged);\n    _this59.sourceChanged.connect(_this59, _this59.$onSourceChanged);\n    _this59.positionChanged.connect(_this59, _this59.$onPositionChanged);\n    _this59.volumeChanged.connect(_this59, _this59.$onVolumeChanged);\n    _this59.playbackRateChanged.connect(_this59, _this59.$onPlaybackRateChanged);\n    _this59.mutedChanged.connect(_this59, _this59.$onMutedChanged);\n    _this59.fillModeChanged.connect(_this59, _this59.$onFillModeChanged);\n    return _this59;\n  }\n\n  _createClass(QtMultimedia_Video, [{\n    key: \"$onAutoPlayChanged\",\n    value: function $onAutoPlayChanged(newVal) {\n      this.impl.autoplay = newVal;\n    }\n  }, {\n    key: \"$onSourceChanged\",\n    value: function $onSourceChanged(source) {\n      var parts = source.split(\".\");\n      var extension = parts[parts.length - 1].toLowerCase();\n      var mime = this.mimetypeFromExtension(extension);\n      this.impl.src = source;\n      if (!this.impl.canPlayType(mime)) {\n        this.error |= this.MediaPlayer.FormatError;\n      }\n    }\n  }, {\n    key: \"$onPositionChanged\",\n    value: function $onPositionChanged(currentTime) {\n      if (this.$runningEventListener > 0) return;\n      this.impl.currentTime = currentTime / 1000;\n    }\n  }, {\n    key: \"$onVolumeChanged\",\n    value: function $onVolumeChanged(volume) {\n      if (this.$runningEventListener > 0) return;\n      this.impl.volume = volume;\n    }\n  }, {\n    key: \"$onPlaybackRateChanged\",\n    value: function $onPlaybackRateChanged(playbackRate) {\n      if (this.$runningEventListener > 0) return;\n      this.impl.playbackRate = playbackRate;\n    }\n  }, {\n    key: \"$onMutedChanged\",\n    value: function $onMutedChanged(newValue) {\n      if (newValue) {\n        this.$volulmeBackup = this.impl.volume;\n        this.volume = 0;\n      } else {\n        this.volume = this.$volumeBackup;\n      }\n    }\n  }, {\n    key: \"$onFillModeChanged\",\n    value: function $onFillModeChanged(newValue) {\n      switch (newValue) {\n        case this.VideoOutput.Stretch:\n          this.impl.style.objectFit = \"fill\";\n          break;\n        case this.VideoOutput.PreserveAspectFit:\n          this.impl.style.objectFit = \"\";\n          break;\n        case this.VideoOutput.PreserveAspectCrop:\n          this.impl.style.objectFit = \"cover\";\n          break;\n      }\n    }\n  }, {\n    key: \"pause\",\n    value: function pause() {\n      this.impl.pause();\n    }\n  }, {\n    key: \"play\",\n    value: function play() {\n      this.impl.play();\n    }\n  }, {\n    key: \"seek\",\n    value: function seek(offset) {\n      this.impl.currentTime = offset * 1000;\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {}\n  }, {\n    key: \"mimetypeFromExtension\",\n    value: function mimetypeFromExtension(extension) {\n      var mimetypes = {\n        ogg: \"video/ogg\",\n        ogv: \"video/ogg\",\n        ogm: \"video/ogg\",\n        mp4: \"video/mp4\",\n        webm: \"video/webm\"\n      };\n      return mimetypes[extension] || \"\";\n    }\n  }]);\n\n  return QtMultimedia_Video;\n}(QtQuick_Item);\n\nQtMultimedia_Video.versions = /^5\\./;\nQtMultimedia_Video.enums = {\n  MediaPlayer: {\n    Available: 0, Busy: 2, Unavailable: 1, ResourceMissing: 3,\n\n    NoError: 0, ResourceError: 1, FormatError: 2, NetworkError: 4,\n    AccessDenied: 8, ServiceMissing: 16,\n\n    StoppedState: 0, PlayingState: 1, PausedState: 2,\n\n    NoMedia: 0, Loading: 1, Loaded: 2, Buffering: 4, Stalled: 8,\n    EndOfMedia: 16, InvalidMedia: 32, UnknownStatus: 64\n  },\n  VideoOutput: { PreserveAspectFit: 0, PreserveAspectCrop: 1, Stretch: 2 }\n};\nQtMultimedia_Video.properties = {\n  audioRole: \"enum\", // TODO\n  autoLoad: { type: \"bool\", initialValue: true },\n  autoPlay: \"bool\",\n  availability: \"enum\", // MediaPlayer.Available\n  bufferProgress: \"real\",\n  duration: \"int\",\n  error: \"enum\", // MediaPlayer.NoError\n  errorString: \"string\",\n  fillMode: \"enum\", // VideoOutput.PreserveAspectFit\n  hasAudio: \"bool\",\n  hasVideo: \"bool\",\n  muted: \"bool\",\n  orientation: \"int\",\n  playbackRate: { type: \"real\", initialValue: 1 },\n  playbackState: \"enum\", // MediaPlayer.StoppedState\n  position: \"int\",\n  seekable: \"bool\",\n  source: \"url\",\n  status: \"enum\", // MediaPlayer.NoMedia\n  volume: \"real\"\n};\nQtMultimedia_Video.signals = {\n  paused: [],\n  playing: [],\n  stopped: []\n};\n\nQmlWeb.registerQmlType(QtMultimedia_Video);\n\n// eslint-disable-next-line no-undef\n\nvar QtMultimedia_VideoOutput = function (_QtQuick_Item9) {\n  _inherits(QtMultimedia_VideoOutput, _QtQuick_Item9);\n\n  function QtMultimedia_VideoOutput() {\n    _classCallCheck(this, QtMultimedia_VideoOutput);\n\n    return _possibleConstructorReturn(this, (QtMultimedia_VideoOutput.__proto__ || Object.getPrototypeOf(QtMultimedia_VideoOutput)).apply(this, arguments));\n  }\n\n  return QtMultimedia_VideoOutput;\n}(QtQuick_Item);\n\nQtMultimedia_VideoOutput.versions = /^5\\./;\nQtMultimedia_VideoOutput.enums = {\n  VideoOutput: { PreserveAspectFit: 0, PreserveAspectCrop: 1, Stretch: 2 }\n};\nQtMultimedia_VideoOutput.properties = {\n  autoOrientation: \"bool\",\n  contentRect: \"rect\",\n  fillMode: \"enum\", // VideoOutput.PreserveAspectFit\n  filters: \"list\",\n  orientation: \"int\",\n  source: \"variant\",\n  sourceRect: \"rect\"\n};\n\nQmlWeb.registerQmlType(QtMultimedia_VideoOutput);\n\n// eslint-disable-next-line no-undef\n\nvar QtQuick_Controls_2_Control = function (_QtQuick_Item10) {\n  _inherits(QtQuick_Controls_2_Control, _QtQuick_Item10);\n\n  function QtQuick_Controls_2_Control() {\n    _classCallCheck(this, QtQuick_Controls_2_Control);\n\n    return _possibleConstructorReturn(this, (QtQuick_Controls_2_Control.__proto__ || Object.getPrototypeOf(QtQuick_Controls_2_Control)).apply(this, arguments));\n  }\n\n  return QtQuick_Controls_2_Control;\n}(QtQuick_Item);\n\nQtQuick_Controls_2_Control.versions = /^2\\./;\nQtQuick_Controls_2_Control.properties = {\n  availableHeight: \"real\",\n  availableWidth: \"real\",\n  background: \"Item\",\n  bottomPadding: \"real\",\n  contentItem: \"Item\",\n  focusPolicy: \"enum\",\n  focusReason: \"enum\",\n  font: \"font\",\n  hoverEnabled: \"bool\",\n  hovered: \"bool\",\n  leftPadding: \"real\",\n  locale: \"Locale\",\n  mirrored: \"bool\",\n  padding: \"real\",\n  palette: \"palette\",\n  rightPadding: \"real\",\n  spacing: \"real\",\n  topPadding: \"real\",\n  visualFocus: \"bool\",\n  wheelEnabled: \"bool\"\n};\n\nQmlWeb.registerQmlType(QtQuick_Controls_2_Control);\n\n// eslint-disable-next-line no-undef\n\nvar QtQuick_Controls_2_AbstractButton = function (_QtQuick_Controls_2_C) {\n  _inherits(QtQuick_Controls_2_AbstractButton, _QtQuick_Controls_2_C);\n\n  function QtQuick_Controls_2_AbstractButton(meta) {\n    _classCallCheck(this, QtQuick_Controls_2_AbstractButton);\n\n    var _this62 = _possibleConstructorReturn(this, (QtQuick_Controls_2_AbstractButton.__proto__ || Object.getPrototypeOf(QtQuick_Controls_2_AbstractButton)).call(this, meta));\n\n    _this62.icon = new QmlWeb.QObject(_this62);\n    QmlWeb.createProperties(_this62.icon, {\n      name: \"string\",\n      source: \"url\",\n      width: \"int\",\n      height: \"int\",\n      color: \"color\"\n    });\n\n    // TODO\n    return _this62;\n  }\n\n  return QtQuick_Controls_2_AbstractButton;\n}(QtQuick_Controls_2_Control);\n\nQtQuick_Controls_2_AbstractButton.versions = /^2\\./;\nQtQuick_Controls_2_AbstractButton.properties = {\n  action: \"Action\",\n  autoExclusive: \"bool\",\n  checkable: \"bool\",\n  checked: \"bool\",\n  display: \"enum\",\n  // icon is defined manually\n  down: \"bool\",\n  indicator: \"Item\",\n  pressed: \"bool\",\n  text: \"string\"\n};\n\nQmlWeb.registerQmlType(QtQuick_Controls_2_AbstractButton);\n\n// eslint-disable-next-line no-undef\n\nvar QtQuick_Controls_2_Container = function (_QtQuick_Controls_2_C2) {\n  _inherits(QtQuick_Controls_2_Container, _QtQuick_Controls_2_C2);\n\n  function QtQuick_Controls_2_Container(meta) {\n    _classCallCheck(this, QtQuick_Controls_2_Container);\n\n    var _this63 = _possibleConstructorReturn(this, (QtQuick_Controls_2_Container.__proto__ || Object.getPrototypeOf(QtQuick_Controls_2_Container)).call(this, meta));\n\n    _this63.widthChanged.connect(_this63, _this63.layoutChildren);\n    _this63.heightChanged.connect(_this63, _this63.layoutChildren);\n    _this63.childrenChanged.connect(_this63, _this63.layoutChildren);\n    _this63.childrenChanged.connect(_this63, _this63.$onChildrenChanged);\n    _this63.layoutChildren();\n    return _this63;\n  }\n\n  _createClass(QtQuick_Controls_2_Container, [{\n    key: \"$onChildrenChanged\",\n    value: function $onChildrenChanged() {\n      var flags = QmlWeb.Signal.UniqueConnection;\n      for (var i = 0; i < this.children.length; i++) {\n        var child = this.children[i];\n        child.widthChanged.connect(this, this.layoutChildren, flags);\n        child.heightChanged.connect(this, this.layoutChildren, flags);\n        child.visibleChanged.connect(this, this.layoutChildren, flags);\n      }\n    }\n  }, {\n    key: \"layoutChildren\",\n    value: function layoutChildren() {\n      // noop, defined in individual positioners\n    }\n  }]);\n\n  return QtQuick_Controls_2_Container;\n}(QtQuick_Controls_2_Control);\n\nQtQuick_Controls_2_Container.versions = /^2\\./;\nQtQuick_Controls_2_Container.properties = {\n  contentChildren: \"list\",\n  contentData: \"list\",\n  contentModel: \"model\",\n  count: \"int\",\n  currentIndex: \"int\",\n  currentItem: \"Item\"\n};\n\nQmlWeb.registerQmlType(QtQuick_Controls_2_Container);\n\n// eslint-disable-next-line no-undef\n\nvar QtQuick_Controls_2_Page = function (_QtQuick_Controls_2_C3) {\n  _inherits(QtQuick_Controls_2_Page, _QtQuick_Controls_2_C3);\n\n  function QtQuick_Controls_2_Page() {\n    _classCallCheck(this, QtQuick_Controls_2_Page);\n\n    return _possibleConstructorReturn(this, (QtQuick_Controls_2_Page.__proto__ || Object.getPrototypeOf(QtQuick_Controls_2_Page)).apply(this, arguments));\n  }\n\n  return QtQuick_Controls_2_Page;\n}(QtQuick_Controls_2_Control);\n\nQtQuick_Controls_2_Page.versions = /^2\\./;\nQtQuick_Controls_2_Page.properties = {\n  contentChildren: \"list\",\n  contentData: \"list\",\n  contentHeight: \"real\",\n  contentWidth: \"real\",\n  footer: \"Item\",\n  header: \"Item\",\n  title: \"string\"\n};\n\nQmlWeb.registerQmlType(QtQuick_Controls_2_Page);\n\n// eslint-disable-next-line no-undef\n\nvar QtQuick_Controls_2_SwipeView = function (_QtQuick_Controls_2_C4) {\n  _inherits(QtQuick_Controls_2_SwipeView, _QtQuick_Controls_2_C4);\n\n  function QtQuick_Controls_2_SwipeView() {\n    _classCallCheck(this, QtQuick_Controls_2_SwipeView);\n\n    return _possibleConstructorReturn(this, (QtQuick_Controls_2_SwipeView.__proto__ || Object.getPrototypeOf(QtQuick_Controls_2_SwipeView)).apply(this, arguments));\n  }\n\n  _createClass(QtQuick_Controls_2_SwipeView, [{\n    key: \"layoutChildren\",\n\n\n    // TODO\n\n    value: function layoutChildren() {\n      var pos = 0;\n      for (var i = 0; i < this.children.length; i++) {\n        var child = this.children[i];\n        if (!child.visible) continue;\n        child.height = this.height;\n        child.width = this.width;\n        child.x = pos;\n        pos += child.width;\n      }\n    }\n  }]);\n\n  return QtQuick_Controls_2_SwipeView;\n}(QtQuick_Controls_2_Container);\n\nQtQuick_Controls_2_SwipeView.versions = /^2\\./;\nQtQuick_Controls_2_SwipeView.properties = {\n  horizontal: \"bool\",\n  interactive: \"bool\",\n  orientation: \"enum\",\n  vertical: \"bool\"\n};\n\nQmlWeb.registerQmlType(QtQuick_Controls_2_SwipeView);\n\n// eslint-disable-next-line no-undef\n\nvar QtQuick_Controls_2_TabBar = function (_QtQuick_Controls_2_C5) {\n  _inherits(QtQuick_Controls_2_TabBar, _QtQuick_Controls_2_C5);\n\n  function QtQuick_Controls_2_TabBar() {\n    _classCallCheck(this, QtQuick_Controls_2_TabBar);\n\n    return _possibleConstructorReturn(this, (QtQuick_Controls_2_TabBar.__proto__ || Object.getPrototypeOf(QtQuick_Controls_2_TabBar)).apply(this, arguments));\n  }\n\n  return QtQuick_Controls_2_TabBar;\n}(QtQuick_Controls_2_Container);\n\nQtQuick_Controls_2_TabBar.versions = /^2\\./;\nQtQuick_Controls_2_TabBar.properties = {\n  contentHeight: \"real\",\n  contentWidth: \"real\",\n  position: \"enum\"\n};\n\nQmlWeb.registerQmlType(QtQuick_Controls_2_TabBar);\n\n// eslint-disable-next-line no-undef\n\nvar QtQuick_Controls_2_TabButton = function (_QtQuick_Controls_2_A) {\n  _inherits(QtQuick_Controls_2_TabButton, _QtQuick_Controls_2_A);\n\n  function QtQuick_Controls_2_TabButton() {\n    _classCallCheck(this, QtQuick_Controls_2_TabButton);\n\n    return _possibleConstructorReturn(this, (QtQuick_Controls_2_TabButton.__proto__ || Object.getPrototypeOf(QtQuick_Controls_2_TabButton)).apply(this, arguments));\n  }\n\n  return QtQuick_Controls_2_TabButton;\n}(QtQuick_Controls_2_AbstractButton);\n\nQtQuick_Controls_2_TabButton.versions = /^2\\./;\n\nQmlWeb.registerQmlType(QtQuick_Controls_2_TabButton);\n\n// eslint-disable-next-line no-undef\n\nvar QtQuick_Controls_Button = function (_QtQuick_Item11) {\n  _inherits(QtQuick_Controls_Button, _QtQuick_Item11);\n\n  function QtQuick_Controls_Button(meta) {\n    _classCallCheck(this, QtQuick_Controls_Button);\n\n    var _this68 = _possibleConstructorReturn(this, (QtQuick_Controls_Button.__proto__ || Object.getPrototypeOf(QtQuick_Controls_Button)).call(this, meta));\n\n    _this68.Component.completed.connect(_this68, _this68.Component$onCompleted);\n    _this68.textChanged.connect(_this68, _this68.$onTextChanged);\n    _this68.enabledChanged.connect(_this68, _this68.$onEnabledChanged);\n\n    var button = _this68.impl = document.createElement(\"button\");\n    button.style.pointerEvents = \"auto\";\n    _this68.dom.appendChild(button);\n\n    button.onclick = function () {\n      _this68.clicked();\n    };\n    return _this68;\n  }\n\n  _createClass(QtQuick_Controls_Button, [{\n    key: \"Component$onCompleted\",\n    value: function Component$onCompleted() {\n      this.implicitWidth = this.impl.offsetWidth;\n      this.implicitHeight = this.impl.offsetHeight;\n    }\n  }, {\n    key: \"$onTextChanged\",\n    value: function $onTextChanged(newVal) {\n      this.impl.textContent = newVal;\n      //TODO: Replace those statically sized borders\n      this.implicitWidth = this.impl.offsetWidth;\n      this.implicitHeight = this.impl.offsetHeight;\n    }\n  }, {\n    key: \"$onEnabledChanged\",\n    value: function $onEnabledChanged(newVal) {\n      this.impl.disabled = !newVal;\n    }\n  }]);\n\n  return QtQuick_Controls_Button;\n}(QtQuick_Item);\n\nQtQuick_Controls_Button.properties = {\n  text: \"string\",\n  enabled: { type: \"bool\", initialValue: true }\n};\nQtQuick_Controls_Button.signals = {\n  clicked: []\n};\n\nQmlWeb.registerQmlType(QtQuick_Controls_Button);\n\n// eslint-disable-next-line no-undef\n\nvar QtQuick_Controls_CheckBox = function (_QtQuick_Item12) {\n  _inherits(QtQuick_Controls_CheckBox, _QtQuick_Item12);\n\n  function QtQuick_Controls_CheckBox(meta) {\n    _classCallCheck(this, QtQuick_Controls_CheckBox);\n\n    var _this69 = _possibleConstructorReturn(this, (QtQuick_Controls_CheckBox.__proto__ || Object.getPrototypeOf(QtQuick_Controls_CheckBox)).call(this, meta));\n\n    _this69.impl = document.createElement(\"label\");\n    _this69.impl.style.pointerEvents = \"auto\";\n\n    var checkbox = document.createElement(\"input\");\n    checkbox.type = \"checkbox\";\n    checkbox.style.verticalAlign = \"text-bottom\";\n    checkbox.addEventListener(\"change\", function () {\n      _this69.checked = checkbox.checked;\n    });\n    _this69.impl.appendChild(checkbox);\n\n    var span = document.createElement(\"span\");\n    _this69.impl.appendChild(span);\n\n    _this69.dom.appendChild(_this69.impl);\n\n    _this69.Component.completed.connect(_this69, _this69.Component$onCompleted);\n    _this69.textChanged.connect(_this69, _this69.$onTextChanged);\n    _this69.colorChanged.connect(_this69, _this69.$onColorChanged);\n    _this69.checkedChanged.connect(_this69, _this69.$onCheckedChanged);\n    return _this69;\n  }\n\n  _createClass(QtQuick_Controls_CheckBox, [{\n    key: \"$onTextChanged\",\n    value: function $onTextChanged(newVal) {\n      this.impl.children[1].innerHTML = newVal;\n      this.implicitHeight = this.impl.offsetHeight;\n      this.implicitWidth = this.impl.offsetWidth > 0 ? this.impl.offsetWidth + 4 : 0;\n    }\n  }, {\n    key: \"$onColorChanged\",\n    value: function $onColorChanged(newVal) {\n      this.impl.children[1].style.color = newVal.$css;\n    }\n  }, {\n    key: \"$onCheckedChanged\",\n    value: function $onCheckedChanged() {\n      this.impl.children[0].checked = this.checked;\n    }\n  }, {\n    key: \"Component$onCompleted\",\n    value: function Component$onCompleted() {\n      this.implicitHeight = this.impl.offsetHeight;\n      this.implicitWidth = this.impl.offsetWidth > 0 ? this.impl.offsetWidth + 4 : 0;\n    }\n  }]);\n\n  return QtQuick_Controls_CheckBox;\n}(QtQuick_Item);\n\nQtQuick_Controls_CheckBox.properties = {\n  text: \"string\",\n  font: \"font\",\n  checked: \"bool\",\n  color: \"color\"\n};\n\nQmlWeb.registerQmlType(QtQuick_Controls_CheckBox);\n\n// eslint-disable-next-line no-undef\n\nvar QtQuick_Controls_ComboBox = function (_QtQuick_Item13) {\n  _inherits(QtQuick_Controls_ComboBox, _QtQuick_Item13);\n\n  function QtQuick_Controls_ComboBox(meta) {\n    _classCallCheck(this, QtQuick_Controls_ComboBox);\n\n    var _this70 = _possibleConstructorReturn(this, (QtQuick_Controls_ComboBox.__proto__ || Object.getPrototypeOf(QtQuick_Controls_ComboBox)).call(this, meta));\n\n    _this70.dom.style.pointerEvents = \"auto\";\n    _this70.name = \"QMLComboBox\";\n\n    // TODO change innerHTML to DOM\n    _this70.dom.innerHTML = \"<select></select>\";\n    _this70.impl = _this70.dom.firstChild;\n\n    _this70.Component.completed.connect(_this70, _this70.Component$onCompleted);\n    _this70.modelChanged.connect(_this70, _this70.$onModelChanged);\n    _this70.currentIndexChanged.connect(_this70, _this70.$onCurrentIndexChanged);\n    _this70.heightChanged.connect(_this70, _this70.$onHeightChanged);\n    _this70.widthChanged.connect(_this70, _this70.$onWidthChanged);\n\n    _this70.dom.onclick = function () {\n      var index = _this70.dom.firstChild.selectedIndex;\n      _this70.currentIndex = index;\n      _this70.currentText = _this70.model[index];\n      _this70.accepted();\n      _this70.activated(index);\n    };\n    return _this70;\n  }\n\n  _createClass(QtQuick_Controls_ComboBox, [{\n    key: \"find\",\n    value: function find(text) {\n      return this.model.indexOf(text);\n    }\n  }, {\n    key: \"selectAll\",\n    value: function selectAll() {\n      // TODO\n    }\n  }, {\n    key: \"textAt\",\n    value: function textAt(index) {\n      return this.model[index];\n    }\n  }, {\n    key: \"$updateImpl\",\n    value: function $updateImpl() {\n      this.count = this.model.length;\n\n      var k = this.count;var m = this.model;\n\n      this.impl.options.length = k;\n      for (var i = 0; i < k; i++) {\n        this.impl.options[i] = new Option(m[i]);\n      }\n\n      // should call this, because width()/heights() invoke updateV(H)Geometry,\n      // which in turn sets valid $useImplicitHeight flag\n      var h = this.height;var w = this.width;\n\n      this.implicitWidth = this.impl.offsetWidth;\n      this.implicitHeight = this.impl.offsetHeight;\n\n      this.$onHeightChanged(h);\n      this.$onWidthChanged(w);\n\n      this.impl.selectedIndex = this.currentIndex;\n      this.$updateCurrentText();\n    }\n  }, {\n    key: \"Component$onCompleted\",\n    value: function Component$onCompleted() {\n      this.$updateImpl();\n    }\n  }, {\n    key: \"$onModelChanged\",\n    value: function $onModelChanged() {\n      this.$updateImpl();\n    }\n  }, {\n    key: \"$onCurrentIndexChanged\",\n    value: function $onCurrentIndexChanged() {\n      var i = this.currentIndex;\n      if (this.impl.selectedIndex !== i) {\n        this.impl.selectedIndex = i;\n        this.$updateCurrentText();\n        this.activated(i);\n      }\n    }\n  }, {\n    key: \"$updateCurrentText\",\n    value: function $updateCurrentText() {\n      if (typeof this.currentIndex === \"undefined\" || !this.model) {\n        this.currentText = undefined;\n      } else if (this.currentIndex >= 0 && this.currentIndex < this.model.length) {\n        this.currentText = this.model[this.currentIndex];\n      }\n    }\n  }, {\n    key: \"$onHeightChanged\",\n    value: function $onHeightChanged() {\n      if (this.height > 0 && this.impl && this.height !== this.impl.offsetHeight) {\n        this.impl.style.height = this.height + \"px\";\n      }\n    }\n  }, {\n    key: \"$onWidthChanged\",\n    value: function $onWidthChanged() {\n      if (this.width > 0 && this.impl && this.width !== this.impl.offsetWidth) {\n        this.impl.style.width = this.width + \"px\";\n      }\n    }\n  }]);\n\n  return QtQuick_Controls_ComboBox;\n}(QtQuick_Item);\n\nQtQuick_Controls_ComboBox.properties = {\n  count: \"int\",\n  currentIndex: \"int\",\n  currentText: \"string\",\n  menu: { type: \"array\", initialValue: [] },\n  model: { type: \"array\", initialValue: [] },\n  pressed: \"bool\"\n};\nQtQuick_Controls_ComboBox.signals = {\n  accepted: [],\n  activated: [{ type: \"int\", name: \"index\" }]\n};\n\nQmlWeb.registerQmlType(QtQuick_Controls_ComboBox);\n\n// eslint-disable-next-line no-undef\n\nvar QtQuick_Controls_ScrollView = function (_QtQuick_Item14) {\n  _inherits(QtQuick_Controls_ScrollView, _QtQuick_Item14);\n\n  function QtQuick_Controls_ScrollView(meta) {\n    _classCallCheck(this, QtQuick_Controls_ScrollView);\n\n    var _this71 = _possibleConstructorReturn(this, (QtQuick_Controls_ScrollView.__proto__ || Object.getPrototypeOf(QtQuick_Controls_ScrollView)).call(this, meta));\n\n    _this71.css.pointerEvents = \"auto\";\n    _this71.setupFocusOnDom(_this71.dom);\n\n    _this71.contentItemChanged.connect(_this71, _this71.$onContentItemChanged);\n    _this71.flickableItemChanged.connect(_this71, _this71.$onFlickableItemChanged);\n    _this71.viewportChanged.connect(_this71, _this71.$onViewportChanged);\n    _this71.frameVisibleChanged.connect(_this71, _this71.$onFrameVisibleChanged);\n    _this71.highlightOnFocusChanged.connect(_this71, _this71.$onHighlightOnFocusChanged);\n    _this71.horizontalScrollBarPolicyChanged.connect(_this71, _this71.$onHorizontalScrollBarPolicyChanged);\n    _this71.verticalScrollBarPolicyChanged.connect(_this71, _this71.$onVerticalScrollBarPolicyChanged);\n    _this71.styleChanged.connect(_this71, _this71.$onStyleChanged);\n    _this71.childrenChanged.connect(_this71, _this71.$onChildrenChanged);\n    _this71.focusChanged.connect(_this71, _this71.$onFocusChanged);\n\n    _this71.width = _this71.implicitWidth = 240; // default QML ScrollView width\n    _this71.height = _this71.implicitHeight = 150; // default QML ScrollView height\n    _this71.width = _this71.implicitWidth;\n    _this71.height = _this71.implicitHeight;\n\n    var Qt = QmlWeb.Qt;\n    _this71.contentItem = undefined;\n    _this71.flickableItem = undefined;\n    _this71.viewport = undefined;\n    _this71.frameVisible = false;\n    _this71.highlightOnFocus = false;\n\n    _this71.verticalScrollBarPolicy = Qt.ScrollBarAsNeeded;\n    _this71.horizontalScrollBarPolicy = Qt.ScrollBarAsNeeded;\n    _this71.style = undefined;\n\n    _this71.$onVerticalScrollBarPolicyChanged(_this71.verticalScrollBarPolicy);\n    _this71.$onHorizontalScrollBarPolicyChanged(_this71.horizontalScrollBarPolicy);\n    return _this71;\n  }\n\n  _createClass(QtQuick_Controls_ScrollView, [{\n    key: \"$onContentItemChanged\",\n    value: function $onContentItemChanged(newItem) {\n      if (newItem) {\n        newItem.parent = this;\n      }\n    }\n  }, {\n    key: \"$onFlickableItemChanged\",\n    value: function $onFlickableItemChanged() {}\n  }, {\n    key: \"$onHighlightOnFocusChanged\",\n    value: function $onHighlightOnFocusChanged() {}\n  }, {\n    key: \"$onViewportChanged\",\n    value: function $onViewportChanged() {}\n  }, {\n    key: \"$onFocusChanged\",\n    value: function $onFocusChanged(focus) {\n      this.css.outline = this.highlight && focus ? \"outline: lightblue solid 2px;\" : \"\";\n    }\n  }, {\n    key: \"$onFrameVisibleChanged\",\n    value: function $onFrameVisibleChanged(visible) {\n      this.css.border = visible ? \"1px solid gray\" : \"hidden\";\n    }\n  }, {\n    key: \"$onHorizontalScrollBarPolicyChanged\",\n    value: function $onHorizontalScrollBarPolicyChanged(newPolicy) {\n      this.css.overflowX = this.$scrollBarPolicyToCssOverflow(newPolicy);\n    }\n  }, {\n    key: \"$onVerticalScrollBarPolicyChanged\",\n    value: function $onVerticalScrollBarPolicyChanged(newPolicy) {\n      this.css.overflowY = this.$scrollBarPolicyToCssOverflow(newPolicy);\n    }\n  }, {\n    key: \"$onStyleChanged\",\n    value: function $onStyleChanged() {}\n  }, {\n    key: \"$onChildrenChanged\",\n    value: function $onChildrenChanged() {\n      if (typeof this.contentItem === \"undefined\" && this.children.length === 1) {\n        this.contentItem = this.children[0];\n      }\n    }\n  }, {\n    key: \"$scrollBarPolicyToCssOverflow\",\n    value: function $scrollBarPolicyToCssOverflow(policy) {\n      var Qt = QmlWeb.Qt;\n      switch (policy) {\n        case Qt.ScrollBarAsNeeded:\n          return \"auto\";\n        case Qt.ScrollBarAlwaysOff:\n          return \"hidden\";\n        case Qt.ScrollBarAlwaysOn:\n          return \"scroll\";\n      }\n      return \"auto\";\n    }\n  }]);\n\n  return QtQuick_Controls_ScrollView;\n}(QtQuick_Item);\n\nQtQuick_Controls_ScrollView.properties = {\n  contentItem: \"Item\",\n  flickableItem: \"Item\", // TODO  0) implement it  1) make it read-only\n  viewport: \"Item\", // TODO\n  frameVisible: \"bool\",\n  highlightOnFocus: \"bool\", // TODO test\n  verticalScrollBarPolicy: \"enum\",\n  horizontalScrollBarPolicy: \"enum\",\n  style: \"Component\" // TODO\n};\nQtQuick_Controls_ScrollView.defaultProperty = \"contentItem\";\n\nQmlWeb.registerQmlType(QtQuick_Controls_ScrollView);\n\n/**\r\n *\r\n * TextField is used to accept a line of text input.\r\n * Input constraints can be placed on a TextField item\r\n * (for example, through a validator or inputMask).\r\n * Setting echoMode to an appropriate value enables TextField\r\n * to be used for a password input field.\r\n *\r\n * Valid entries for echoMode and alignment are defined in TextInput.\r\n *\r\n */\n\n// eslint-disable-next-line no-undef\n\nvar QtQuick_Controls_TextField = function (_QtQuick_Item15) {\n  _inherits(QtQuick_Controls_TextField, _QtQuick_Item15);\n\n  function QtQuick_Controls_TextField(meta) {\n    _classCallCheck(this, QtQuick_Controls_TextField);\n\n    var _this72 = _possibleConstructorReturn(this, (QtQuick_Controls_TextField.__proto__ || Object.getPrototypeOf(QtQuick_Controls_TextField)).call(this, meta));\n\n    var input = _this72.impl = document.createElement(\"input\");\n    input.type = \"text\";\n    input.disabled = true;\n    input.style.pointerEvents = \"auto\";\n    input.style.margin = \"0\";\n    input.style.width = \"100%\";\n    _this72.dom.appendChild(input);\n    _this72.setupFocusOnDom(input);\n    input.disabled = false;\n\n    _this72.Component.completed.connect(_this72, _this72.Component$onCompleted);\n    _this72.textChanged.connect(_this72, _this72.$onTextChanged);\n    _this72.echoModeChanged.connect(_this72, _this72.$onEchoModeChanged);\n    _this72.maximumLengthChanged.connect(_this72, _this72.$onMaximumLengthChanged);\n    _this72.readOnlyChanged.connect(_this72, _this72.$onReadOnlyChanged);\n    _this72.Keys.pressed.connect(_this72, _this72.Keys$onPressed);\n\n    _this72.impl.addEventListener(\"input\", function () {\n      return _this72.$updateValue();\n    });\n    return _this72;\n  }\n\n  _createClass(QtQuick_Controls_TextField, [{\n    key: \"Component$onCompleted\",\n    value: function Component$onCompleted() {\n      this.implicitWidth = this.impl.offsetWidth;\n      this.implicitHeight = this.impl.offsetHeight;\n    }\n  }, {\n    key: \"$onTextChanged\",\n    value: function $onTextChanged(newVal) {\n      // See TextInput for comments\n      if (this.impl.value !== newVal) {\n        this.impl.value = newVal;\n      }\n    }\n  }, {\n    key: \"$onEchoModeChanged\",\n    value: function $onEchoModeChanged(newVal) {\n      var TextInput = this.TextInput;\n      var input = this.impl;\n      switch (newVal) {\n        case TextInput.Normal:\n          input.type = \"text\";\n          break;\n        case TextInput.Password:\n          input.type = \"password\";\n          break;\n        case TextInput.NoEcho:\n          // Not supported, use password, that's nearest\n          input.type = \"password\";\n          break;\n        case TextInput.PasswordEchoOnEdit:\n          // Not supported, use password, that's nearest\n          input.type = \"password\";\n          break;\n      }\n    }\n  }, {\n    key: \"$onMaximumLengthChanged\",\n    value: function $onMaximumLengthChanged(newVal) {\n      this.impl.maxLength = newVal < 0 ? null : newVal;\n    }\n  }, {\n    key: \"$onReadOnlyChanged\",\n    value: function $onReadOnlyChanged(newVal) {\n      this.impl.disabled = newVal;\n    }\n  }, {\n    key: \"Keys$onPressed\",\n    value: function Keys$onPressed(e) {\n      var Qt = QmlWeb.Qt;\n      var submit = e.key === Qt.Key_Return || e.key === Qt.Key_Enter;\n      if (submit && this.$testValidator()) {\n        this.accepted();\n        e.accepted = true;\n      }\n    }\n  }, {\n    key: \"$testValidator\",\n    value: function $testValidator() {\n      if (this.validator) {\n        return this.validator.validate(this.text);\n      }\n      return true;\n    }\n  }, {\n    key: \"$updateValue\",\n    value: function $updateValue() {\n      if (this.text !== this.impl.value) {\n        this.$canEditReadOnlyProperties = true;\n        this.text = this.impl.value;\n        this.$canEditReadOnlyProperties = false;\n      }\n    }\n  }]);\n\n  return QtQuick_Controls_TextField;\n}(QtQuick_Item);\n\nQtQuick_Controls_TextField.enums = {\n  TextInput: { Normal: 0, Password: 1, NoEcho: 2, PasswordEchoOnEdit: 3 }\n};\nQtQuick_Controls_TextField.properties = {\n  text: \"string\",\n  font: \"font\",\n  maximumLength: { type: \"int\", initialValue: -1 },\n  readOnly: \"bool\",\n  validator: \"var\",\n  echoMode: \"enum\" // TextInput.Normal\n};\nQtQuick_Controls_TextField.signals = {\n  accepted: []\n};\n\nQmlWeb.registerQmlType(QtQuick_Controls_TextField);\n\n// eslint-disable-next-line no-undef\n\nvar QtQuick_Layouts_ColumnLayout = function (_QtQuick_Item16) {\n  _inherits(QtQuick_Layouts_ColumnLayout, _QtQuick_Item16);\n\n  function QtQuick_Layouts_ColumnLayout() {\n    _classCallCheck(this, QtQuick_Layouts_ColumnLayout);\n\n    return _possibleConstructorReturn(this, (QtQuick_Layouts_ColumnLayout.__proto__ || Object.getPrototypeOf(QtQuick_Layouts_ColumnLayout)).apply(this, arguments));\n  }\n\n  return QtQuick_Layouts_ColumnLayout;\n}(QtQuick_Item);\n\nQtQuick_Layouts_ColumnLayout.versions = /^1\\./;\nQtQuick_Layouts_ColumnLayout.properties = {\n  layoutDirection: \"enum\",\n  spacing: \"real\"\n};\n\nQmlWeb.registerQmlType(QtQuick_Layouts_ColumnLayout);\n\n// eslint-disable-next-line no-undef\n\nvar QtQuick_Layouts_GridLayout = function (_QtQuick_Item17) {\n  _inherits(QtQuick_Layouts_GridLayout, _QtQuick_Item17);\n\n  function QtQuick_Layouts_GridLayout() {\n    _classCallCheck(this, QtQuick_Layouts_GridLayout);\n\n    return _possibleConstructorReturn(this, (QtQuick_Layouts_GridLayout.__proto__ || Object.getPrototypeOf(QtQuick_Layouts_GridLayout)).apply(this, arguments));\n  }\n\n  return QtQuick_Layouts_GridLayout;\n}(QtQuick_Item);\n\nQtQuick_Layouts_GridLayout.versions = /^1\\./;\nQtQuick_Layouts_GridLayout.properties = {\n  columnSpacing: \"real\",\n  columns: \"int\",\n  flow: \"enum\",\n  layoutDirection: \"enum\",\n  rowSpacing: \"real\",\n  rows: \"int\"\n};\n\nQmlWeb.registerQmlType(QtQuick_Layouts_GridLayout);\n\n// eslint-disable-next-line no-undef\n\nvar QtQuick_Layouts_RowLayout = function (_QtQuick_Item18) {\n  _inherits(QtQuick_Layouts_RowLayout, _QtQuick_Item18);\n\n  function QtQuick_Layouts_RowLayout() {\n    _classCallCheck(this, QtQuick_Layouts_RowLayout);\n\n    return _possibleConstructorReturn(this, (QtQuick_Layouts_RowLayout.__proto__ || Object.getPrototypeOf(QtQuick_Layouts_RowLayout)).apply(this, arguments));\n  }\n\n  return QtQuick_Layouts_RowLayout;\n}(QtQuick_Item);\n\nQtQuick_Layouts_RowLayout.versions = /^1\\./;\nQtQuick_Layouts_RowLayout.properties = {\n  layoutDirection: \"enum\",\n  spacing: \"real\"\n};\n\nQmlWeb.registerQmlType(QtQuick_Layouts_RowLayout);\n\n// eslint-disable-next-line no-undef\n\nvar QtQuick_Layouts_StackLayout = function (_QtQuick_Item19) {\n  _inherits(QtQuick_Layouts_StackLayout, _QtQuick_Item19);\n\n  function QtQuick_Layouts_StackLayout() {\n    _classCallCheck(this, QtQuick_Layouts_StackLayout);\n\n    return _possibleConstructorReturn(this, (QtQuick_Layouts_StackLayout.__proto__ || Object.getPrototypeOf(QtQuick_Layouts_StackLayout)).apply(this, arguments));\n  }\n\n  return QtQuick_Layouts_StackLayout;\n}(QtQuick_Item);\n\nQtQuick_Layouts_StackLayout.versions = /^1\\./;\nQtQuick_Layouts_StackLayout.properties = {\n  count: \"int\",\n  currentIndex: \"int\"\n};\n\nQmlWeb.registerQmlType(QtQuick_Layouts_StackLayout);\n\n// eslint-disable-next-line no-undef\n\nvar QtQuick_Particles_Emitter = function (_QtQuick_Item20) {\n  _inherits(QtQuick_Particles_Emitter, _QtQuick_Item20);\n\n  function QtQuick_Particles_Emitter() {\n    _classCallCheck(this, QtQuick_Particles_Emitter);\n\n    return _possibleConstructorReturn(this, (QtQuick_Particles_Emitter.__proto__ || Object.getPrototypeOf(QtQuick_Particles_Emitter)).apply(this, arguments));\n  }\n\n  _createClass(QtQuick_Particles_Emitter, [{\n    key: \"burst\",\n\n\n    // TODO\n\n    value: function burst() /*count, x, y*/{\n      // TODO\n    }\n  }, {\n    key: \"pulse\",\n    value: function pulse(duration) {\n      var _this78 = this;\n\n      if (this.enabled) return;\n      this.enabled = true;\n      setTimeout(function () {\n        _this78.enabled = false;\n      }, duration);\n    }\n  }]);\n\n  return QtQuick_Particles_Emitter;\n}(QtQuick_Item);\n\nQtQuick_Particles_Emitter.versions = /^2\\./;\nQtQuick_Particles_Emitter.properties = {\n  acceleration: \"StochasticDirection\",\n  emitRate: { type: \"real\", initialValue: 10 },\n  enabled: { type: \"bool\", initialValue: true },\n  endSize: { type: \"real\", initialValue: -1 },\n  group: \"string\",\n  lifeSpan: { type: \"int\", initialValue: 1000 },\n  lifeSpanVariation: \"int\",\n  maximumEmitted: { type: \"int\", initialValue: -1 },\n  shape: \"Shape\",\n  size: { type: \"real\", initialValue: 16 },\n  sizeVariation: \"real\",\n  startTime: \"int\",\n  system: \"ParticleSystem\",\n  velocity: \"StochasticDirection\",\n  velocityFromMovement: \"real\"\n};\nQtQuick_Particles_Emitter.signals = {\n  emitParticles: [{ type: \"Array\", name: \"particles\" }]\n};\n\nQmlWeb.registerQmlType(QtQuick_Particles_Emitter);\n\n// eslint-disable-next-line no-undef\n\nvar QtQuick_Particles_ParticlePainter = function (_QtQuick_Item21) {\n  _inherits(QtQuick_Particles_ParticlePainter, _QtQuick_Item21);\n\n  function QtQuick_Particles_ParticlePainter() {\n    _classCallCheck(this, QtQuick_Particles_ParticlePainter);\n\n    return _possibleConstructorReturn(this, (QtQuick_Particles_ParticlePainter.__proto__ || Object.getPrototypeOf(QtQuick_Particles_ParticlePainter)).apply(this, arguments));\n  }\n\n  return QtQuick_Particles_ParticlePainter;\n}(QtQuick_Item);\n\nQtQuick_Particles_ParticlePainter.versions = /^2\\./;\nQtQuick_Particles_ParticlePainter.properties = {\n  groups: \"list\",\n  system: \"ParticleSystem\"\n};\n\nQmlWeb.registerQmlType(QtQuick_Particles_ParticlePainter);\n\n// eslint-disable-next-line no-undef, max-len\n\nvar QtQuick_Particles_CustomParticle = function (_QtQuick_Particles_Pa) {\n  _inherits(QtQuick_Particles_CustomParticle, _QtQuick_Particles_Pa);\n\n  function QtQuick_Particles_CustomParticle() {\n    _classCallCheck(this, QtQuick_Particles_CustomParticle);\n\n    return _possibleConstructorReturn(this, (QtQuick_Particles_CustomParticle.__proto__ || Object.getPrototypeOf(QtQuick_Particles_CustomParticle)).apply(this, arguments));\n  }\n\n  return QtQuick_Particles_CustomParticle;\n}(QtQuick_Particles_ParticlePainter);\n\nQtQuick_Particles_CustomParticle.versions = /^2\\./;\nQtQuick_Particles_CustomParticle.properties = {\n  fragmentShader: \"string\",\n  vertexShader: \"string\"\n};\n\nQmlWeb.registerQmlType(QtQuick_Particles_CustomParticle);\n\n// eslint-disable-next-line no-undef\n\nvar QtQuick_Particles_ParticleSystem = function (_QtQuick_Item22) {\n  _inherits(QtQuick_Particles_ParticleSystem, _QtQuick_Item22);\n\n  function QtQuick_Particles_ParticleSystem() {\n    _classCallCheck(this, QtQuick_Particles_ParticleSystem);\n\n    return _possibleConstructorReturn(this, (QtQuick_Particles_ParticleSystem.__proto__ || Object.getPrototypeOf(QtQuick_Particles_ParticleSystem)).apply(this, arguments));\n  }\n\n  _createClass(QtQuick_Particles_ParticleSystem, [{\n    key: \"pause\",\n\n\n    // TODO\n\n    value: function pause() {\n      this.paused = true;\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      // TODO\n    }\n  }, {\n    key: \"restart\",\n    value: function restart() {\n      this.running = false;\n      this.running = true;\n    }\n  }, {\n    key: \"resume\",\n    value: function resume() {\n      this.paused = false;\n    }\n  }, {\n    key: \"start\",\n    value: function start() {\n      this.running = true;\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      this.running = false;\n    }\n  }]);\n\n  return QtQuick_Particles_ParticleSystem;\n}(QtQuick_Item);\n\nQtQuick_Particles_ParticleSystem.versions = /^2\\./;\nQtQuick_Particles_ParticleSystem.properties = {\n  empty: \"bool\",\n  particleStates: \"list\",\n  paused: \"bool\",\n  running: { type: \"bool\", initialValue: true }\n};\n\nQmlWeb.registerQmlType(QtQuick_Particles_ParticleSystem);\n\n// eslint-disable-next-line no-undef\n\nvar QtQuick_Window_Window = function (_QtQuick_Item23) {\n  _inherits(QtQuick_Window_Window, _QtQuick_Item23);\n\n  function QtQuick_Window_Window(meta) {\n    _classCallCheck(this, QtQuick_Window_Window);\n\n    var _this82 = _possibleConstructorReturn(this, (QtQuick_Window_Window.__proto__ || Object.getPrototypeOf(QtQuick_Window_Window)).call(this, meta));\n\n    _this82.colorChanged.connect(_this82, _this82.$onColorChanged);\n    return _this82;\n  }\n\n  _createClass(QtQuick_Window_Window, [{\n    key: \"$onColorChanged\",\n    value: function $onColorChanged(newVal) {\n      this.dom.style.backgroundColor = newVal.$css;\n    }\n  }]);\n\n  return QtQuick_Window_Window;\n}(QtQuick_Item);\n\nQtQuick_Window_Window.versions = /^2\\./;\nQtQuick_Window_Window.properties = {\n  active: \"bool\",\n  activeFocusItem: \"Item\",\n  color: { type: \"color\", initialValue: \"#ffffff\" },\n  //contentItem: \"Item\", // TODO\n  contentOrientation: \"enum\",\n  flags: \"int\",\n  maximumHeight: \"int\",\n  maximumWidth: \"int\",\n  minimumHeight: \"int\",\n  minimumWidth: \"int\",\n  modality: \"enum\",\n  title: \"string\",\n  visibility: \"enum\"\n};\nQtQuick_Window_Window.signals = {\n  closing: [{ type: \"CloseEvent\", name: \"close\" }]\n};\n\nQmlWeb.registerQmlType(QtQuick_Window_Window);\n\n// eslint-disable-next-line no-undef\n\nvar QtQuick_Controls_2_ApplicationWindow = function (_QtQuick_Window_Windo) {\n  _inherits(QtQuick_Controls_2_ApplicationWindow, _QtQuick_Window_Windo);\n\n  function QtQuick_Controls_2_ApplicationWindow() {\n    _classCallCheck(this, QtQuick_Controls_2_ApplicationWindow);\n\n    return _possibleConstructorReturn(this, (QtQuick_Controls_2_ApplicationWindow.__proto__ || Object.getPrototypeOf(QtQuick_Controls_2_ApplicationWindow)).apply(this, arguments));\n  }\n\n  return QtQuick_Controls_2_ApplicationWindow;\n}(QtQuick_Window_Window);\n\nQtQuick_Controls_2_ApplicationWindow.versions = /^2\\./;\nQtQuick_Controls_2_ApplicationWindow.properties = {\n  font: \"font\",\n  activeFocusControl: \"Control\",\n  background: \"Item\",\n  contentData: \"list\",\n  //contentItem: \"ContentItem\", // TODO\n  footer: \"Item\",\n  header: \"Item\",\n  overlay: \"Item\"\n};\n\nQmlWeb.registerQmlType(QtQuick_Controls_2_ApplicationWindow);\n\n// eslint-disable-next-line no-undef\n\nvar QtQuick_Controls_ApplicationWindow = function (_QtQuick_Window_Windo2) {\n  _inherits(QtQuick_Controls_ApplicationWindow, _QtQuick_Window_Windo2);\n\n  function QtQuick_Controls_ApplicationWindow() {\n    _classCallCheck(this, QtQuick_Controls_ApplicationWindow);\n\n    return _possibleConstructorReturn(this, (QtQuick_Controls_ApplicationWindow.__proto__ || Object.getPrototypeOf(QtQuick_Controls_ApplicationWindow)).apply(this, arguments));\n  }\n\n  return QtQuick_Controls_ApplicationWindow;\n}(QtQuick_Window_Window);\n\nQtQuick_Controls_ApplicationWindow.versions = /^1\\./;\nQtQuick_Controls_ApplicationWindow.properties = {\n  //contentItem: \"ContentItem\", // TODO\n  menuBar: \"MenuBar\",\n  statusBar: \"Item\",\n  style: \"Component\",\n  toolBar: \"Item\"\n};\n\nQmlWeb.registerQmlType(QtQuick_Controls_ApplicationWindow);\n\n// eslint-disable-next-line no-undef\n\nvar QtQuick_BorderImage = function (_QtQuick_Item24) {\n  _inherits(QtQuick_BorderImage, _QtQuick_Item24);\n\n  function QtQuick_BorderImage(meta) {\n    _classCallCheck(this, QtQuick_BorderImage);\n\n    var _this85 = _possibleConstructorReturn(this, (QtQuick_BorderImage.__proto__ || Object.getPrototypeOf(QtQuick_BorderImage)).call(this, meta));\n\n    _this85.border = new QmlWeb.QObject(_this85);\n    QmlWeb.createProperties(_this85.border, {\n      left: \"int\",\n      right: \"int\",\n      top: \"int\",\n      bottom: \"int\"\n    });\n\n    var bg = _this85.impl = document.createElement(\"div\");\n    bg.style.pointerEvents = \"none\";\n    bg.style.height = \"100%\";\n    bg.style.boxSizing = \"border-box\";\n    _this85.dom.appendChild(bg);\n\n    _this85.$img = new Image();\n    _this85.$img.addEventListener(\"load\", function () {\n      _this85.progress = 1;\n      _this85.status = _this85.BorderImage.Ready;\n    });\n    _this85.$img.addEventListener(\"error\", function () {\n      _this85.status = _this85.BorderImage.Error;\n    });\n\n    _this85.sourceChanged.connect(_this85, _this85.$onSourceChanged);\n    _this85.border.leftChanged.connect(_this85, _this85.$updateBorder);\n    _this85.border.rightChanged.connect(_this85, _this85.$updateBorder);\n    _this85.border.topChanged.connect(_this85, _this85.$updateBorder);\n    _this85.border.bottomChanged.connect(_this85, _this85.$updateBorder);\n    _this85.horizontalTileModeChanged.connect(_this85, _this85.$updateBorder);\n    _this85.verticalTileModeChanged.connect(_this85, _this85.$updateBorder);\n    _this85.smoothChanged.connect(_this85, _this85.$onSmoothChanged);\n    return _this85;\n  }\n\n  _createClass(QtQuick_BorderImage, [{\n    key: \"$onSourceChanged\",\n    value: function $onSourceChanged(source) {\n      this.progress = 0;\n      this.status = this.BorderImage.Loading;\n      var style = this.impl.style;\n      var imageURL = QmlWeb.engine.$resolveImageURL(source);\n      style.OBorderImageSource = \"url(\\\"\" + imageURL + \"\\\")\";\n      style.borderImageSource = \"url(\\\"\" + imageURL + \"\\\")\";\n      this.$img.src = imageURL;\n      if (this.$img.complete) {\n        this.progress = 1;\n        this.status = this.BorderImage.Ready;\n      }\n    }\n  }, {\n    key: \"$updateBorder\",\n    value: function $updateBorder() {\n      var style = this.impl.style;\n      var _border = this.border,\n          right = _border.right,\n          left = _border.left,\n          top = _border.top,\n          bottom = _border.bottom;\n\n      var slice = top + \" \" + right + \" \" + bottom + \" \" + left + \" fill\";\n      var width = top + \"px \" + right + \"px \" + bottom + \"px \" + left + \"px\";\n      var repeat = this.horizontalTileMode + \" \" + this.verticalTileMode;\n      style.OBorderImageSlice = slice;\n      style.OBorderImageRepeat = repeat;\n      style.OBorderImageWidth = width;\n      style.borderImageSlice = slice;\n      style.borderImageRepeat = repeat;\n      style.borderImageWidth = width;\n    }\n  }, {\n    key: \"$onSmoothChanged\",\n    value: function $onSmoothChanged(val) {\n      var style = this.impl.style;\n      if (val) {\n        style.imageRendering = \"auto\";\n      } else {\n        style.imageRendering = \"-webkit-optimize-contrast\";\n        style.imageRendering = \"-moz-crisp-edges\";\n        style.imageRendering = \"crisp-edges\";\n        style.imageRendering = \"pixelated\";\n      }\n    }\n  }]);\n\n  return QtQuick_BorderImage;\n}(QtQuick_Item);\n\nQtQuick_BorderImage.enums = {\n  BorderImage: {\n    Stretch: \"stretch\", Repeat: \"repeat\", Round: \"round\",\n    Null: 1, Ready: 2, Loading: 3, Error: 4\n  }\n};\nQtQuick_BorderImage.properties = {\n  source: \"url\",\n  smooth: { type: \"bool\", initialValue: true },\n  // BorderImage.Stretch\n  horizontalTileMode: { type: \"enum\", initialValue: \"stretch\" },\n  // BorderImage.Stretch\n  verticalTileMode: { type: \"enum\", initialValue: \"stretch\" },\n  progress: \"real\",\n  status: { type: \"enum\", initialValue: 1 // BorderImage.Null\n  } };\n\nQmlWeb.registerQmlType(QtQuick_BorderImage);\n\n// TODO\n// Currently only a skeleton implementation\n\n// eslint-disable-next-line no-undef\n\nvar QtQuick_Canvas = function (_QtQuick_Item25) {\n  _inherits(QtQuick_Canvas, _QtQuick_Item25);\n\n  function QtQuick_Canvas(meta) {\n    _classCallCheck(this, QtQuick_Canvas);\n\n    var _this86 = _possibleConstructorReturn(this, (QtQuick_Canvas.__proto__ || Object.getPrototypeOf(QtQuick_Canvas)).call(this, meta));\n\n    var canvas = _this86.impl = document.createElement(\"canvas\");\n    _this86.dom.appendChild(canvas);\n\n    _this86.widthChanged.connect(_this86, _this86.$updateWidth);\n    _this86.heightChanged.connect(_this86, _this86.$updateHeight);\n    _this86.Component.completed.connect(_this86, _this86.$completed);\n    return _this86;\n  }\n\n  _createClass(QtQuick_Canvas, [{\n    key: \"$updateWidth\",\n    value: function $updateWidth(val) {\n      this.width = val;\n      this.impl.style.width = this.width + \"px\";\n    }\n  }, {\n    key: \"$updateHeight\",\n    value: function $updateHeight(val) {\n      this.height = val;\n      this.impl.style.height = this.height + \"px\";\n    }\n  }, {\n    key: \"$completed\",\n    value: function $completed() {\n      this.impl.width = this.width;\n      this.impl.height = this.height;\n\n      this.paint();\n    }\n  }, {\n    key: \"cancelRequestAnimationFrame\",\n    value: function cancelRequestAnimationFrame() /*handle*/{\n      return false;\n    }\n  }, {\n    key: \"getContext\",\n    value: function getContext() /*context_id, ...args*/{\n      return this.impl.getContext('2d');\n    }\n  }, {\n    key: \"isImageError\",\n    value: function isImageError() /*image*/{\n      return true;\n    }\n  }, {\n    key: \"isImageLoaded\",\n    value: function isImageLoaded() /*image*/{\n      return false;\n    }\n  }, {\n    key: \"isImageLoading\",\n    value: function isImageLoading() /*image*/{\n      return false;\n    }\n  }, {\n    key: \"loadImage\",\n    value: function loadImage(image) {\n      //loadImageAsync(image);\n      if (this.isImageLoaded(image)) {\n        this.imageLoaded();\n      }\n    }\n  }, {\n    key: \"markDirty\",\n    value: function markDirty(area) {\n      // if dirty\n      this.paint(area);\n    }\n  }, {\n    key: \"requestAnimationFrame\",\n    value: function requestAnimationFrame() /*callback*/{\n      return 0;\n    }\n  }, {\n    key: \"requestPaint\",\n    value: function requestPaint() {}\n  }, {\n    key: \"save\",\n    value: function save() /*file_name*/{\n      return false;\n    }\n  }, {\n    key: \"toDataURL\",\n    value: function toDataURL() /*mime_type*/{\n      return \"\";\n    }\n  }, {\n    key: \"unloadImage\",\n    value: function unloadImage() /*image*/{}\n  }]);\n\n  return QtQuick_Canvas;\n}(QtQuick_Item);\n\nQtQuick_Canvas.properties = {\n  available: { type: \"bool\", initialValue: true },\n  canvasSize: { type: \"var\", initialValue: [0, 0] },\n  canvasWindow: { type: \"var\", initialValue: [0, 0, 0, 0] },\n  context: { type: \"var\", initialValue: {} },\n  contextType: { type: \"string\", initialValue: \"contextType\" },\n  renderStrategy: \"enum\",\n  renderTarget: \"enum\",\n  tileSize: { type: \"var\", initialValue: [0, 0] }\n};\nQtQuick_Canvas.signals = {\n  imageLoaded: [],\n  paint: [{ type: \"var\", name: \"region\" }],\n  painted: []\n};\n\nQmlWeb.registerQmlType(QtQuick_Canvas);\n\n// eslint-disable-next-line no-undef\n\nvar QtQuick_DoubleValidator = function (_QtQuick_Item26) {\n  _inherits(QtQuick_DoubleValidator, _QtQuick_Item26);\n\n  function QtQuick_DoubleValidator(meta) {\n    _classCallCheck(this, QtQuick_DoubleValidator);\n\n    var _this87 = _possibleConstructorReturn(this, (QtQuick_DoubleValidator.__proto__ || Object.getPrototypeOf(QtQuick_DoubleValidator)).call(this, meta));\n\n    _this87.$standardRegExp = /^(-|\\+)?\\s*[0-9]+(\\.[0-9]+)?$/;\n    _this87.$scientificRegExp = /^(-|\\+)?\\s*[0-9]+(\\.[0-9]+)?(E(-|\\+)?[0-9]+)?$/;\n    return _this87;\n  }\n\n  _createClass(QtQuick_DoubleValidator, [{\n    key: \"getRegExpForNotation\",\n    value: function getRegExpForNotation(notation) {\n      switch (notation) {\n        case this.DoubleValidator.ScientificNotation:\n          return this.$scientificRegExp;\n        case this.DoubleValidator.StandardNotation:\n          return this.$standardRegExp;\n      }\n      return null;\n    }\n  }, {\n    key: \"$getDecimalsForNumber\",\n    value: function $getDecimalsForNumber(number) {\n      if (Math.round(number) === number) {\n        return 0;\n      }\n      var str = \"\" + number;\n      return (/\\d*$/.exec(str)[0].length\n      );\n    }\n  }, {\n    key: \"validate\",\n    value: function validate(string) {\n      var regExp = this.getRegExpForNotation(this.notation);\n      if (!regExp.test(string.trim())) {\n        return false;\n      }\n      var value = parseFloat(string);\n      return this.bottom <= value && this.top >= value && this.$getDecimalsForNumber(value) <= this.decimals;\n    }\n  }]);\n\n  return QtQuick_DoubleValidator;\n}(QtQuick_Item);\n\nQtQuick_DoubleValidator.enums = {\n  DoubleValidator: { StandardNotation: 1, ScientificNotation: 2 }\n};\nQtQuick_DoubleValidator.properties = {\n  bottom: { type: \"real\", initialValue: -Infinity },\n  top: { type: \"real\", initialValue: Infinity },\n  decimals: { type: \"int\", initialValue: 1000 },\n  // DoubleValidator.ScientificNotation\n  notation: { type: \"enum\", initialValue: 2 }\n};\n\nQmlWeb.registerQmlType(QtQuick_DoubleValidator);\n\n// eslint-disable-next-line no-undef\n\nvar QtQuick_Flickable = function (_QtQuick_Item27) {\n  _inherits(QtQuick_Flickable, _QtQuick_Item27);\n\n  function QtQuick_Flickable(meta) {\n    _classCallCheck(this, QtQuick_Flickable);\n\n    var _this88 = _possibleConstructorReturn(this, (QtQuick_Flickable.__proto__ || Object.getPrototypeOf(QtQuick_Flickable)).call(this, meta));\n\n    _this88.parent = meta.parent;\n    _this88.dom.style.pointerEvents = \"all\";\n    _this88.dom.style.overflow = \"auto\";\n\n    var bg = _this88.impl = document.createElement(\"div\");\n    bg.style.pointerEvents = \"none\";\n    bg.style.position = \"absolute\";\n    bg.style.left = bg.style.right = bg.style.top = bg.style.bottom = \"0px\";\n    bg.style.background = \"none\";\n    _this88.dom.appendChild(bg);\n\n    _this88.isDragging = false;\n    _this88.mouseIsDown = false;\n    _this88.curSX = 0;\n    _this88.curSY = 0;\n    _this88.dom.addEventListener(\"mousedown\", function (e) {\n      e.stopPropagation();\n      e.preventDefault();\n      _this88.mouseIsDown = true;\n      _this88.curSX = e.pageX;\n      _this88.curSY = e.pageY;\n\n      _this88.dom.classList.add(\"unselectable\");\n    });\n    _this88.dom.addEventListener(\"mouseup\", function (e) {\n      e.stopPropagation();\n      e.preventDefault();\n      setTimeout(function () {\n        _this88.$onAllMouseEvent();\n      }, 100);\n      _this88.isDragging = false;\n      _this88.mouseIsDown = false;\n      _this88.dom.classList.remove(\"unselectable\");\n    });\n    _this88.dom.addEventListener(\"mouseleave\", function (e) {\n      e.stopPropagation();\n      e.preventDefault();\n      setTimeout(function () {\n        _this88.$onAllMouseEvent();\n      }, 100);\n      _this88.isDragging = false;\n      _this88.mouseIsDown = false;\n      _this88.dom.classList.remove(\"unselectable\");\n    });\n    _this88.dom.addEventListener(\"mousemove\", function (e) {\n      e.stopPropagation();\n      e.preventDefault();\n      if (_this88.mouseIsDown && _this88.enabled) {\n        _this88.$offAllMouseEvent();\n        _this88.isDragging = true;\n\n        switch (_this88.flickableDirection) {\n          case Flickable.AutoFlickDirection:\n            if (_this88.contentHeight != _this88.height) _this88.dom.scrollBy(0, _this88.curSY - e.pageY);\n            if (_this88.contentWidth != _this88.width) _this88.dom.scrollBy(_this88.curSX - e.pageX, 0);\n            break;\n          case Flickable.AutoFlickIfNeeded:\n            if (_this88.contentHeight >= _this88.height) _this88.dom.scrollBy(0, _this88.curSY - e.pageY);\n            if (_this88.contentWidth >= _this88.width) _this88.dom.scrollBy(_this88.curSX - e.pageX, 0);\n            break;\n          case Flickable.HorizontalFlick:\n            _this88.dom.scrollBy(_this88.curSX - e.pageX, 0);\n            break;\n          case Flickable.VerticalFlick:\n            _this88.dom.scrollBy(0, _this88.curSY - e.pageY);\n            break;\n          case Flickable.HorizontalAndVerticalFlick:\n            _this88.dom.scrollBy(_this88.curSX - e.pageX, _this88.curSY - e.pageY);\n            break;\n        }\n        _this88.contentX = _this88.dom.scrollLeft;\n        _this88.contentY = _this88.dom.scrollTop;\n        _this88.curSX = e.pageX;\n        _this88.curSY = e.pageY;\n      }\n    });\n    _this88.dom.addEventListener(\"wheel\", function (e) {\n      e.stopPropagation();\n      e.preventDefault();\n      _this88.$calcContentXY(e.deltaX, e.deltaY);\n    });\n    _this88.dom.addEventListener(\"scroll\", function (e) {\n      e.stopPropagation();\n      e.preventDefault();\n    });\n\n    _this88.contentHeightChanged.connect(_this88, _this88.$contentHeightChanged);\n    _this88.contentWidthChanged.connect(_this88, _this88.$contentWidthChanged);\n    _this88.contentXChanged.connect(_this88, _this88.$contentXChanged);\n    _this88.contentYChanged.connect(_this88, _this88.$contentYChanged);\n    _this88.flickableDirectionChanged.connect(_this88, _this88.$flickableDirectionChanged);\n\n    _this88.Component.completed.connect(_this88, _this88.Component$onCompleted);\n    return _this88;\n  }\n\n  _createClass(QtQuick_Flickable, [{\n    key: \"Component$onCompleted\",\n    value: function Component$onCompleted() {\n      this.$flickableDirectionChanged();\n      this.$contentHeightChanged();\n      this.$contentWidthChanged();\n      this.dom.scrollTo(this.contentX, this.contentY);\n    }\n  }, {\n    key: \"$calcContentXY\",\n    value: function $calcContentXY(deltaX, deltaY) {\n      if (this.enabled) {\n        var p = this.$firstParentForWheel();\n        var limitH = Math.max(this.dom.clientHeight, this.dom.scrollHeight, this.dom.offsetHeight);\n        var limitW = Math.max(this.dom.clientWidth, this.dom.scrollWidth, this.dom.offsetWidth);\n\n        if (this.orientation === Qt.Horizontal) {\n          if (this.contentX + deltaX > limitW - this.width) {\n            this.contentX = limitW - this.width;\n            if (p) {\n              if (this.mouseIsDown) p.enabled = true;\n              p.$calcContentXY(deltaX, deltaY);\n            }\n          } else if (this.contentX + deltaX < 0) {\n            this.contentX = 0;\n            if (p) {\n              if (this.mouseIsDown) p.enabled = true;\n              p.$calcContentXY(deltaX, deltaY);\n            }\n          } else this.contentX += deltaX;\n        } else {\n          if (this.contentY + deltaY > limitH - this.height) {\n            this.contentY = limitH - this.height;\n            if (p) {\n              if (this.mouseIsDown) p.enabled = true;\n              p.$calcContentXY(deltaX, deltaY);\n            }\n          } else if (this.contentY + deltaY < 0) {\n            this.contentY = 0;\n            if (p) {\n              if (this.mouseIsDown) p.enabled = true;\n              p.$calcContentXY(deltaX, deltaY);\n            }\n          } else this.contentY += deltaY;\n        }\n      }\n    }\n  }, {\n    key: \"$flickableDirectionChanged\",\n    value: function $flickableDirectionChanged() {\n      this.dom.style.overflow = \"hidden\";\n      switch (this.flickableDirection) {\n        case Flickable.AutoFlickDirection:\n          if (this.contentHeight != this.height) this.dom.style.overflowY = \"auto\";\n          if (this.contentWidth != this.width) this.dom.style.overflowX = \"auto\";\n          break;\n        case Flickable.AutoFlickIfNeeded:\n          if (this.contentHeight >= this.height) this.dom.style.overflowY = \"auto\";\n          if (this.contentWidth >= this.width) this.dom.style.overflowX = \"auto\";\n          break;\n        case Flickable.HorizontalFlick:\n          this.dom.style.overflowX = \"auto\";\n          break;\n        case Flickable.VerticalFlick:\n          this.dom.style.overflowY = \"auto\";\n          break;\n        case Flickable.HorizontalAndVerticalFlick:\n          this.dom.style.overflow = \"auto\";\n          break;\n\n      }\n    }\n  }, {\n    key: \"$contentHeightChanged\",\n    value: function $contentHeightChanged() {\n      if (this.contentHeight === 0) {\n        this.impl.style.height = \"100%\";\n        this.impl.style.bottom = \"0\";\n      } else {\n        this.impl.style.height = this.contentHeight + \"px\";\n        this.impl.style.bottom = this.contentHeight + \"px\";\n      }\n    }\n  }, {\n    key: \"$contentWidthChanged\",\n    value: function $contentWidthChanged() {\n      if (this.contentWidth === 0) {\n        this.impl.style.width = \"100%\";\n        this.impl.style.right = \"0\";\n      } else {\n        this.impl.style.width = this.contentWidth + \"px\";\n        this.impl.style.right = this.contentWidth + \"px\";\n      }\n    }\n  }, {\n    key: \"$contentXChanged\",\n    value: function $contentXChanged() {\n      this.dom.scrollTo(this.contentX, this.contentY);\n    }\n  }, {\n    key: \"$contentYChanged\",\n    value: function $contentYChanged() {\n      this.dom.scrollTo(this.contentX, this.contentY);\n    }\n  }]);\n\n  return QtQuick_Flickable;\n}(QtQuick_Item);\n\nQtQuick_Flickable.enums = {\n  Flickable: {\n    AutoFlickDirection: 0,\n    AutoFlickIfNeeded: 1,\n    HorizontalFlick: 2,\n    VerticalFlick: 3,\n    HorizontalAndVerticalFlick: 4\n  }\n};\nQtQuick_Flickable.properties = {\n  contentHeight: \"real\",\n  contentWidth: \"real\",\n  contentX: \"real\",\n  contentY: \"real\",\n  flickableDirection: { type: \"enum\", initialValue: 0 }\n};\n\nQmlWeb.registerQmlType(QtQuick_Flickable);\n\n// eslint-disable-next-line no-undef\n\nvar QtQuick_FocusScope = function (_QtQuick_Item28) {\n  _inherits(QtQuick_FocusScope, _QtQuick_Item28);\n\n  function QtQuick_FocusScope() {\n    _classCallCheck(this, QtQuick_FocusScope);\n\n    return _possibleConstructorReturn(this, (QtQuick_FocusScope.__proto__ || Object.getPrototypeOf(QtQuick_FocusScope)).apply(this, arguments));\n  }\n\n  return QtQuick_FocusScope;\n}(QtQuick_Item);\n\nQmlWeb.registerQmlType(QtQuick_FocusScope);\n\n// eslint-disable-next-line no-undef\n\nvar QtQuick_Gradient = function (_QtQuick_Item29) {\n  _inherits(QtQuick_Gradient, _QtQuick_Item29);\n\n  function QtQuick_Gradient(meta) {\n    _classCallCheck(this, QtQuick_Gradient);\n\n    var _this90 = _possibleConstructorReturn(this, (QtQuick_Gradient.__proto__ || Object.getPrototypeOf(QtQuick_Gradient)).call(this, meta));\n\n    _this90.Gradient = {\n      Vertical: Qt.Vertical,\n      Horizontal: Qt.Horizontal\n    };\n\n    var bg = _this90.impl = document.createElement(\"div\");\n    bg.style.pointerEvents = \"none\";\n    bg.style.position = \"absolute\";\n    bg.style.background = \"none\";\n    bg.style.left = bg.style.right = bg.style.top = bg.style.bottom = \"0px\";\n\n    var firstChild = _this90.$parent.dom.firstChild;\n    if (firstChild && firstChild.nextSibling) {\n      _this90.$parent.dom.insertBefore(bg, firstChild.nextSibling);\n    } else {\n      _this90.$parent.dom.appendChild(bg);\n    }\n\n    _this90.stopsChanged.connect(_this90, _this90.$stopsChanged);\n    _this90.orientationChanged.connect(_this90, _this90.$orientationChanged);\n    return _this90;\n  }\n\n  _createClass(QtQuick_Gradient, [{\n    key: \"applyGradient\",\n    value: function applyGradient() {\n      var g_temp = [];\n      //old_pos = 0;\n      for (var i = 0; i < this.stops.length; i++) {\n        g_temp.push(this.stops[i].color + \" \" + this.stops[i].position * 100 + \"%\");\n      }\n\n      var g_str = 'none';\n      if (this.orientation === Qt.Vertical) {\n        g_str = \"linear-gradient(180deg, \" + g_temp.join(',') + \")\";\n      } else if (this.orientation === Qt.Horizontal) {\n        g_str = \"linear-gradient(90deg, \" + g_temp.join(',') + \")\";\n      }\n\n      this.impl.style.background = g_str;\n    }\n  }, {\n    key: \"$stopsChanged\",\n    value: function $stopsChanged() {\n      this.applyGradient();\n    }\n  }, {\n    key: \"$orientationChanged\",\n    value: function $orientationChanged() {\n      this.applyGradient();\n    }\n  }]);\n\n  return QtQuick_Gradient;\n}(QtQuick_Item);\n\nQtQuick_Gradient.properties = {\n  orientation: \"enum\",\n  stops: \"list\"\n};\nQtQuick_Gradient.defaultProperty = \"stops\";\n\nQmlWeb.registerQmlType(QtQuick_Gradient);\n\n// eslint-disable-next-line no-undef\n\nvar QtQuick_Image = function (_QtQuick_Item30) {\n  _inherits(QtQuick_Image, _QtQuick_Item30);\n\n  function QtQuick_Image(meta) {\n    _classCallCheck(this, QtQuick_Image);\n\n    var _this91 = _possibleConstructorReturn(this, (QtQuick_Image.__proto__ || Object.getPrototypeOf(QtQuick_Image)).call(this, meta));\n\n    _this91.sourceSize = new QmlWeb.QObject(_this91);\n    QmlWeb.createProperties(_this91.sourceSize, {\n      width: \"real\",\n      height: \"real\"\n    });\n\n    _this91.dom.style.inset = '0';\n    _this91.dom.style.textAlign = 'center';\n\n    _this91.impl = document.createElement(\"div\");\n    _this91.impl.style.pointerEvents = \"none\";\n    _this91.impl.style.height = \"100%\";\n    _this91.impl.style.width = \"100%\";\n    _this91.dom.appendChild(_this91.impl);\n\n    _this91.$img = new Image();\n    _this91.$img.addEventListener(\"load\", function () {\n      _this91.sourceSize.width = _this91.sourceSize.width > 0 ? _this91.sourceSize.width : _this91.$img.naturalWidth;\n      _this91.sourceSize.height = _this91.sourceSize.height > 0 ? _this91.sourceSize.height : _this91.$img.naturalHeight;\n      _this91.implicitWidth = _this91.sourceSize.width;\n      _this91.implicitHeight = _this91.sourceSize.height;\n      _this91.progress = 1;\n      _this91.status = _this91.Image.Ready;\n    });\n    _this91.$img.addEventListener(\"error\", function () {\n      _this91.status = _this91.Image.Error;\n    });\n\n    _this91.sourceChanged.connect(_this91, _this91.$onSourceChanged);\n    _this91.mirrorChanged.connect(_this91, _this91.$onMirrorChanged);\n    _this91.fillModeChanged.connect(_this91, _this91.$onFillModeChanged);\n    _this91.smoothChanged.connect(_this91, _this91.$onSmoothChanged);\n\n    _this91.sourceSize.widthChanged.connect(_this91, _this91.$sourceSizeWidthChanged);\n    _this91.sourceSize.heightChanged.connect(_this91, _this91.$sourceSizeHeightChanged);\n\n    _this91.Component.completed.connect(_this91, _this91.Component$onCompleted);\n    return _this91;\n  }\n\n  _createClass(QtQuick_Image, [{\n    key: \"Component$onCompleted\",\n    value: function Component$onCompleted() {}\n  }, {\n    key: \"$sourceSizeWidthChanged\",\n    value: function $sourceSizeWidthChanged() {\n      this.$updateFillMode();\n    }\n  }, {\n    key: \"$sourceSizeHeightChanged\",\n    value: function $sourceSizeHeightChanged() {\n      this.$updateFillMode();\n    }\n  }, {\n    key: \"$updateFillMode\",\n    value: function $updateFillMode() {\n      var style = this.impl.style;\n      switch (this.fillMode) {\n        default:\n        case this.Image.Stretch:\n          style.backgroundRepeat = \"no-repeat\";\n          style.backgroundSize = this.sourceSize.width + \"px \" + this.sourceSize.height + \"px\";\n          style.backgroundPosition = \"center\";\n          break;\n        case this.Image.Tile:\n          style.backgroundRepeat = \"repeat\";\n          style.backgroundSize = this.sourceSize.width + \"px \" + this.sourceSize.height + \"px\";\n          style.backgroundPosition = \"top left\";\n          break;\n        case this.Image.PreserveAspectFit:\n          style.backgroundRepeat = \"no-repeat\";\n          style.backgroundSize = \"contain\";\n          style.backgroundPosition = \"center\";\n          break;\n        case this.Image.PreserveAspectCrop:\n          style.backgroundRepeat = \"no-repeat\";\n          style.backgroundSize = \"cover\";\n          style.backgroundPosition = \"center\";\n          break;\n        case this.Image.TileVertically:\n          style.backgroundRepeat = \"repeat-y\";\n          style.backgroundSize = this.sourceSize.width + \"px \" + this.sourceSize.height + \"px\";\n          style.backgroundPosition = \"auto\";\n          break;\n        case this.Image.TileHorizontally:\n          style.backgroundRepeat = \"repeat-x\";\n          style.backgroundSize = this.sourceSize.width + \"px \" + this.sourceSize.height + \"px\";\n          style.backgroundPosition = \"auto\";\n          break;\n      }\n    }\n  }, {\n    key: \"$onSourceChanged\",\n    value: function $onSourceChanged(source) {\n      var _this92 = this;\n\n      this.progress = 0;\n      this.status = this.Image.Loading;\n      this.impl.style.backgroundImage = \"url(\\\"\" + source + \"\\\")\";\n      var imageURL = QmlWeb.engine.$resolveImageURL(source);\n      this.$img.src = imageURL;\n      if (this.$img.complete) {\n        setTimeout(function () {\n          _this92.progress = 1;\n          _this92.status = _this92.Image.Ready;\n        }, 0);\n      }\n      this.$updateFillMode();\n    }\n  }, {\n    key: \"$onMirrorChanged\",\n    value: function $onMirrorChanged(val) {\n      var transformRule = \"scale(-1,1)\";\n      if (!val) {\n        var index = this.transform.indexOf(transformRule);\n        if (index >= 0) {\n          this.transform.splice(index, 1);\n        }\n      } else {\n        this.transform.push(transformRule);\n      }\n      this.$updateTransform();\n    }\n  }, {\n    key: \"$onFillModeChanged\",\n    value: function $onFillModeChanged(val) {\n      this.$updateFillMode(val);\n    }\n  }, {\n    key: \"$onSmoothChanged\",\n    value: function $onSmoothChanged(val) {\n      var style = this.impl.style;\n      if (val) {\n        style.imageRendering = \"auto\";\n      } else {\n        style.imageRendering = \"-webkit-optimize-contrast\";\n        style.imageRendering = \"-moz-crisp-edges\";\n        style.imageRendering = \"crisp-edges\";\n        style.imageRendering = \"pixelated\";\n      }\n    }\n  }]);\n\n  return QtQuick_Image;\n}(QtQuick_Item);\n\nQtQuick_Image.enums = {\n  Image: {\n    Stretch: 1, PreserveAspectFit: 2, PreserveAspectCrop: 3,\n    Tile: 4, TileVertically: 5, TileHorizontally: 6,\n\n    Null: 1, Ready: 2, Loading: 3, Error: 4\n  }\n};\nQtQuick_Image.properties = {\n  asynchronous: { type: \"bool\", initialValue: true },\n  cache: { type: \"bool\", initialValue: true },\n  smooth: { type: \"bool\", initialValue: true },\n  fillMode: { type: \"enum\", initialValue: 1 }, // Image.Stretch\n  mirror: \"bool\",\n  progress: \"real\",\n  source: \"url\",\n  status: { type: \"enum\", initialValue: 1 // Image.Null\n  } };\n\nQmlWeb.registerQmlType(QtQuick_Image);\n\n// eslint-disable-next-line no-undef\n\nvar QtQuick_AnimatedImage = function (_QtQuick_Image) {\n  _inherits(QtQuick_AnimatedImage, _QtQuick_Image);\n\n  function QtQuick_AnimatedImage() {\n    _classCallCheck(this, QtQuick_AnimatedImage);\n\n    return _possibleConstructorReturn(this, (QtQuick_AnimatedImage.__proto__ || Object.getPrototypeOf(QtQuick_AnimatedImage)).apply(this, arguments));\n  }\n\n  return QtQuick_AnimatedImage;\n}(QtQuick_Image);\n\nQmlWeb.registerQmlType(QtQuick_AnimatedImage);\n\n// eslint-disable-next-line no-undef\n\nvar QtQuick_IntValidator = function (_QtQuick_Item31) {\n  _inherits(QtQuick_IntValidator, _QtQuick_Item31);\n\n  function QtQuick_IntValidator() {\n    _classCallCheck(this, QtQuick_IntValidator);\n\n    return _possibleConstructorReturn(this, (QtQuick_IntValidator.__proto__ || Object.getPrototypeOf(QtQuick_IntValidator)).apply(this, arguments));\n  }\n\n  _createClass(QtQuick_IntValidator, [{\n    key: \"validate\",\n    value: function validate(string) {\n      var regExp = /^(-|\\+)?\\s*[0-9]+$/;\n      var acceptable = regExp.test(string.trim());\n\n      if (acceptable) {\n        var value = parseInt(string, 10);\n        acceptable = this.bottom <= value && this.top >= value;\n      }\n      return acceptable;\n    }\n  }]);\n\n  return QtQuick_IntValidator;\n}(QtQuick_Item);\n\nQtQuick_IntValidator.properties = {\n  bottom: { type: \"int\", initialValue: -2147483647 },\n  top: { type: \"int\", initialValue: 2147483647 }\n};\n\nQmlWeb.registerQmlType(QtQuick_IntValidator);\n\n// eslint-disable-next-line no-undef\n\nvar QtQuick_ListElement = function (_QtQml_QtObject18) {\n  _inherits(QtQuick_ListElement, _QtQml_QtObject18);\n\n  function QtQuick_ListElement(meta) {\n    _classCallCheck(this, QtQuick_ListElement);\n\n    var _this95 = _possibleConstructorReturn(this, (QtQuick_ListElement.__proto__ || Object.getPrototypeOf(QtQuick_ListElement)).call(this, meta));\n\n    for (var i in meta.object) {\n      if (i[0] !== \"$\") {\n        QmlWeb.createProperty(\"variant\", _this95, i);\n      }\n    }\n    QmlWeb.applyProperties(meta.object, _this95, _this95, _this95.$context);\n    return _this95;\n  }\n\n  return QtQuick_ListElement;\n}(QtQml_QtObject);\n\nQmlWeb.registerQmlType(QtQuick_ListElement);\n\n// eslint-disable-next-line no-undef\n\nvar QtQml_Models_ListElement = function (_QtQuick_ListElement) {\n  _inherits(QtQml_Models_ListElement, _QtQuick_ListElement);\n\n  function QtQml_Models_ListElement() {\n    _classCallCheck(this, QtQml_Models_ListElement);\n\n    return _possibleConstructorReturn(this, (QtQml_Models_ListElement.__proto__ || Object.getPrototypeOf(QtQml_Models_ListElement)).apply(this, arguments));\n  }\n\n  return QtQml_Models_ListElement;\n}(QtQuick_ListElement);\n\nQtQml_Models_ListElement.versions = /^2\\./;\n\nQmlWeb.registerQmlType(QtQml_Models_ListElement);\n\n// eslint-disable-next-line no-undef\n\nvar QtQuick_ListModel = function (_QtQml_QtObject19) {\n  _inherits(QtQuick_ListModel, _QtQml_QtObject19);\n\n  function QtQuick_ListModel(meta) {\n    _classCallCheck(this, QtQuick_ListModel);\n\n    var _this97 = _possibleConstructorReturn(this, (QtQuick_ListModel.__proto__ || Object.getPrototypeOf(QtQuick_ListModel)).call(this, meta));\n\n    _this97.$firstItem = true;\n    _this97.$itemsChanged.connect(_this97, _this97.$on$itemsChanged);\n    _this97.$model = new QmlWeb.JSItemModel();\n    _this97.$model.data = function (index, role) {\n      return _this97.$items[index][role];\n    };\n    _this97.$model.rowCount = function () {\n      return _this97.$items.length;\n    };\n\n    return _this97;\n  }\n\n  _createClass(QtQuick_ListModel, [{\n    key: \"$on$itemsChanged\",\n    value: function $on$itemsChanged(newVal) {\n      this.count = this.$items.length;\n      if (this.$firstItem && newVal.length > 0) {\n        var QMLListElement = QmlWeb.getConstructor(\"QtQuick\", \"2.0\", \"ListElement\");\n        this.$firstItem = false;\n        var roleNames = [];\n        var dict = newVal[0];\n        if (dict instanceof QMLListElement) {\n          dict = dict.$properties;\n        }\n        for (var i in dict) {\n          if (i !== \"index\") {\n            roleNames.push(i);\n          }\n        }\n        this.$model.setRoleNames(roleNames);\n      }\n    }\n  }, {\n    key: \"append\",\n    value: function append(dict) {\n      var index = this.$items.length;\n      var c = 0;\n\n      if (dict instanceof Array) {\n        for (var key in dict) {\n          this.$items.push(dict[key]);\n          c++;\n        }\n      } else {\n        this.$items.push(dict);\n        c = 1;\n      }\n\n      this.$itemsChanged(this.$items);\n      this.$model.rowsInserted(index, index + c);\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.$items.length = 0;\n      this.count = 0;\n      this.$model.modelReset();\n    }\n  }, {\n    key: \"get\",\n    value: function get(index) {\n      return this.$items[index];\n    }\n  }, {\n    key: \"insert\",\n    value: function insert(index, dict) {\n      this.$items.splice(index, 0, dict);\n      this.$itemsChanged(this.$items);\n      this.$model.rowsInserted(index, index + 1);\n    }\n  }, {\n    key: \"move\",\n    value: function move(from, to, n) {\n      var vals = this.$items.splice(from, n);\n      for (var i = 0; i < vals.length; i++) {\n        this.$items.splice(to + i, 0, vals[i]);\n      }\n      this.$model.rowsMoved(from, from + n, to);\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(index) {\n      this.$items.splice(index, 1);\n      this.$model.rowsRemoved(index, index + 1);\n      this.count = this.$items.length;\n    }\n  }, {\n    key: \"set\",\n    value: function set(index, dict) {\n      this.$items[index] = dict;\n      this.$model.dataChanged(index, index);\n    }\n  }, {\n    key: \"setProperty\",\n    value: function setProperty(index, property, value) {\n      this.$items[index][property] = value;\n      this.$model.dataChanged(index, index);\n    }\n  }]);\n\n  return QtQuick_ListModel;\n}(QtQml_QtObject);\n\nQtQuick_ListModel.properties = {\n  count: \"int\",\n  $items: \"list\"\n};\nQtQuick_ListModel.defaultProperty = \"$items\";\n\nQmlWeb.registerQmlType(QtQuick_ListModel);\n\n// eslint-disable-next-line no-undef\n\nvar QtQml_Models_ListModel = function (_QtQuick_ListModel) {\n  _inherits(QtQml_Models_ListModel, _QtQuick_ListModel);\n\n  function QtQml_Models_ListModel() {\n    _classCallCheck(this, QtQml_Models_ListModel);\n\n    return _possibleConstructorReturn(this, (QtQml_Models_ListModel.__proto__ || Object.getPrototypeOf(QtQml_Models_ListModel)).apply(this, arguments));\n  }\n\n  return QtQml_Models_ListModel;\n}(QtQuick_ListModel);\n\nQtQml_Models_ListModel.versions = /^2\\./;\nQtQml_Models_ListModel.defaultProperty = \"$items\";\n\nQmlWeb.registerQmlType(QtQml_Models_ListModel);\n\n// eslint-disable-next-line no-undef\n\nvar QtQuick_Loader = function (_QtQuick_Item32) {\n  _inherits(QtQuick_Loader, _QtQuick_Item32);\n\n  function QtQuick_Loader(meta) {\n    _classCallCheck(this, QtQuick_Loader);\n\n    var _this99 = _possibleConstructorReturn(this, (QtQuick_Loader.__proto__ || Object.getPrototypeOf(QtQuick_Loader)).call(this, meta));\n\n    _this99.$sourceUrl = \"\";\n\n    _this99.activeChanged.connect(_this99, _this99.$onActiveChanged);\n    _this99.sourceChanged.connect(_this99, _this99.$onSourceChanged);\n    _this99.sourceComponentChanged.connect(_this99, _this99.$onSourceComponentChanged);\n    _this99.widthChanged.connect(_this99, _this99.$updateGeometry);\n    _this99.heightChanged.connect(_this99, _this99.$updateGeometry);\n    return _this99;\n  }\n\n  _createClass(QtQuick_Loader, [{\n    key: \"$onActiveChanged\",\n    value: function $onActiveChanged() {\n      if (!this.active) {\n        this.$unload();\n        return;\n      }\n      if (this.source) {\n        this.$onSourceChanged(this.source);\n      } else if (this.sourceComponent) {\n        this.$onSourceComponentChanged(this.sourceComponent);\n      }\n    }\n  }, {\n    key: \"$onSourceChanged\",\n    value: function $onSourceChanged(fileName) {\n      // TODO\n      // if (fileName == this.$sourceUrl && this.item !== undefined) return;\n      if (!this.active) return;\n      this.$unload();\n\n      if (!fileName) {\n        this.sourceComponent = null;\n        this.$sourceUrl = fileName;\n        return;\n      }\n\n      var tree = QmlWeb.engine.loadComponent(fileName);\n      var QMLComponent = QmlWeb.getConstructor(\"QtQml\", \"2.0\", \"Component\");\n      var meta = { object: tree, context: this.$context, parent: this };\n      var qmlComponent = new QMLComponent(meta);\n      qmlComponent.$basePath = QmlWeb.engine.extractBasePath(tree.$file);\n      qmlComponent.$imports = tree.$imports;\n      qmlComponent.$file = tree.$file;\n      QmlWeb.engine.loadImports(tree.$imports, qmlComponent.$basePath, qmlComponent.importContextId);\n      var loadedComponent = this.$createComponentObject(qmlComponent, this);\n      this.sourceComponent = loadedComponent;\n      this.$sourceUrl = fileName;\n    }\n  }, {\n    key: \"$onSourceComponentChanged\",\n    value: function $onSourceComponentChanged(newItem) {\n      if (!this.active) return;\n      this.$unload();\n\n      if (!newItem) {\n        this.item = null;\n        return;\n      }\n\n      var QMLComponent = QmlWeb.getConstructor(\"QtQml\", \"2.0\", \"Component\");\n      var qmlComponent = newItem;\n      if (newItem instanceof QMLComponent) {\n        qmlComponent = newItem.$createObject(this, {}, this);\n      }\n      qmlComponent.parent = this;\n      this.item = qmlComponent;\n      this.$updateGeometry();\n      if (this.item) {\n        this.loaded();\n      }\n    }\n  }, {\n    key: \"setSource\",\n    value: function setSource(url, options) {\n      this.$sourceUrl = url;\n      this.props = options;\n      this.source = url;\n    }\n  }, {\n    key: \"$unload\",\n    value: function $unload() {\n      if (!this.item) return;\n      this.item.$delete();\n      this.item.parent = undefined;\n      this.item = undefined;\n    }\n  }, {\n    key: \"$callOnCompleted\",\n    value: function $callOnCompleted(child) {\n      child.Component.completed();\n      var QMLBaseObject = QmlWeb.getConstructor(\"QtQml\", \"2.0\", \"QtObject\");\n      for (var i = 0; i < child.$tidyupList.length; i++) {\n        if (child.$tidyupList[i] instanceof QMLBaseObject) {\n          this.$callOnCompleted(child.$tidyupList[i]);\n        }\n      }\n    }\n  }, {\n    key: \"$createComponentObject\",\n    value: function $createComponentObject(qmlComponent, parent) {\n      var newComponent = qmlComponent.createObject(parent);\n      if (QmlWeb.engine.operationState !== QmlWeb.QMLOperationState.Init) {\n        // We don't call those on first creation, as they will be called\n        // by the regular creation-procedures at the right time.\n        QmlWeb.engine.$initializePropertyBindings();\n        this.$callOnCompleted(newComponent);\n      }\n      return newComponent;\n    }\n  }, {\n    key: \"$updateGeometry\",\n    value: function $updateGeometry() {\n      // Loader size doesn't exist\n      if (!this.width) {\n        this.width = this.item ? this.item.width : 0;\n      } else if (this.item) {\n        // Loader size exists\n        this.item.width = this.width;\n      }\n\n      if (!this.height) {\n        this.height = this.item ? this.item.height : 0;\n      } else if (this.item) {\n        // Loader size exists\n        this.item.height = this.height;\n      }\n    }\n  }]);\n\n  return QtQuick_Loader;\n}(QtQuick_Item);\n\nQtQuick_Loader.properties = {\n  active: { type: \"bool\", initialValue: true },\n  asynchronous: \"bool\",\n  item: \"var\",\n  progress: \"real\",\n  source: \"url\",\n  sourceComponent: \"Component\",\n  status: { type: \"enum\", initialValue: 1 }\n};\nQtQuick_Loader.signals = {\n  loaded: []\n};\n\nQmlWeb.registerQmlType(QtQuick_Loader);\n\n// eslint-disable-next-line no-undef\n\nvar QtQuick_MouseArea = function (_QtQuick_Item33) {\n  _inherits(QtQuick_MouseArea, _QtQuick_Item33);\n\n  function QtQuick_MouseArea(meta) {\n    _classCallCheck(this, QtQuick_MouseArea);\n\n    var _this100 = _possibleConstructorReturn(this, (QtQuick_MouseArea.__proto__ || Object.getPrototypeOf(QtQuick_MouseArea)).call(this, meta));\n\n    _this100.dom.style.pointerEvents = \"all\";\n    _this100.dom.style.overflow = \"scroll\";\n\n    areaList = [];\n    _this100.fillAreaList = function (e) {\n      var item = _this100.parent;\n      while (item.parent) {\n        item = item.parent;\n      }\n      _this100.areaList = [];\n      allEvent = function (_allEvent) {\n        function allEvent(_x21) {\n          return _allEvent.apply(this, arguments);\n        }\n\n        allEvent.toString = function () {\n          return _allEvent.toString();\n        };\n\n        return allEvent;\n      }(function (item) {\n        var _iteratorNormalCompletion2 = true;\n        var _didIteratorError2 = false;\n        var _iteratorError2 = undefined;\n\n        try {\n          for (var _iterator2 = item.children[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n            var child = _step2.value;\n\n            if (child instanceof QtQuick_MouseArea && child != _this100) {\n              var rect = child.dom.getBoundingClientRect();\n              if (e.x >= rect.left && e.x <= rect.right && e.y >= rect.top && e.y <= rect.bottom) {\n                _this100.areaList.push(child);\n              }\n            }\n            allEvent(child);\n          }\n        } catch (err) {\n          _didIteratorError2 = true;\n          _iteratorError2 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion2 && _iterator2.return) {\n              _iterator2.return();\n            }\n          } finally {\n            if (_didIteratorError2) {\n              throw _iteratorError2;\n            }\n          }\n        }\n      });\n      allEvent(item);\n    };\n    // IE does not handle mouse clicks to transparent divs, so we have\n    // to set a background color and make it invisible using opacity\n    // as that doesn't affect the mouse handling.\n    _this100.dom.style.backgroundColor = \"white\";\n    _this100.dom.style.opacity = 0;\n\n    _this100.cursorShapeChanged.connect(_this100, _this100.$onCursorShapeChanged);\n\n    _this100.dom.addEventListener(\"click\", function (e) {\n      _this100.fillAreaList(e);\n      _this100.$handleClick(e);\n    });\n    _this100.dom.addEventListener(\"contextmenu\", function (e) {\n      _this100.fillAreaList(e);\n      _this100.$handleClick(e);\n    });\n    var handleMouseMove = function handleMouseMove(e) {\n      if (!_this100.enabled || !_this100.hoverEnabled && !_this100.pressed) return;\n      _this100.$handlePositionChanged(e);\n    };\n    var handleMouseUp = function handleMouseUp(e) {\n      var mouse = _this100.$eventToMouse(e);\n      _this100.pressed = false;\n      _this100.containsPress = false;\n      _this100.pressedButtons = 0;\n      _this100.released(mouse);\n      document.removeEventListener(\"mouseup\", handleMouseUp);\n      _this100.$clientTransform = undefined;\n      document.removeEventListener(\"mousemove\", handleMouseMove);\n    };\n    _this100.dom.addEventListener(\"mousedown\", function (e) {\n      if (!_this100.enabled) return;\n      // Handle scale and translate transformations\n      var boundingRect = _this100.dom.getBoundingClientRect();\n      _this100.$clientTransform = {\n        x: boundingRect.left,\n        y: boundingRect.top,\n        xScale: _this100.width ? (boundingRect.right - boundingRect.left) / _this100.width : 1,\n        yScale: _this100.height ? (boundingRect.bottom - boundingRect.top) / _this100.height : 1\n      };\n      var mouse = _this100.$eventToMouse(e);\n      _this100.mouseX = mouse.x;\n      _this100.mouseY = mouse.y;\n      _this100.pressed = true;\n      _this100.containsPress = true;\n      _this100.pressedButtons = mouse.button;\n      _this100.$Signals.pressed(mouse);\n      document.addEventListener(\"mouseup\", handleMouseUp);\n      document.addEventListener(\"mousemove\", handleMouseMove);\n    });\n    _this100.dom.addEventListener(\"mouseover\", function () {\n      _this100.containsMouse = true;\n      _this100.containsPress = _this100.pressed;\n      _this100.entered();\n    });\n    _this100.dom.addEventListener(\"mouseout\", function () {\n      _this100.containsMouse = false;\n      _this100.containsPress = false;\n      _this100.exited();\n    });\n    // This is to emit positionChanged for `hoverEnabled` only. When `pressed`,\n    // `positionChanged` is handled by a temporary `mousemove` event listener\n    // on `document`.\n\n    _this100.dom.addEventListener(\"mousemove\", function (e) {\n      if (!_this100.enabled || !_this100.hoverEnabled || _this100.pressed) return;\n      _this100.$handlePositionChanged(e);\n    });\n\n    _this100.dom.addEventListener(\"wheel\", function (e) {\n      _this100.fillAreaList(e);\n      _this100.$handleWheel(e);\n    });\n\n    var bg = _this100.impl = document.createElement(\"div\");\n    bg.style.pointerEvents = \"none\";\n    bg.style.position = \"absolute\";\n    bg.style.left = bg.style.top = \"0px\";\n    bg.style.width = '101%';\n    bg.style.height = '101%';\n    bg.style.background = \"none\";\n    _this100.dom.appendChild(bg);\n    return _this100;\n  }\n\n  _createClass(QtQuick_MouseArea, [{\n    key: \"$onCursorShapeChanged\",\n    value: function $onCursorShapeChanged() {\n      this.dom.style.cursor = this.$cursorShapeToCSS();\n    }\n  }, {\n    key: \"$handlePositionChanged\",\n    value: function $handlePositionChanged(e) {\n      var mouse = this.$eventToMouse(e);\n      this.mouseX = mouse.x;\n      this.mouseY = mouse.y;\n      this.positionChanged(mouse);\n    }\n  }, {\n    key: \"$handleWheel\",\n    value: function $handleWheel(e) {\n      var wheel = this.$eventToMouse(e);\n      wheel.angleDelta = { x: e.deltaX, y: e.deltaY };\n      wheel.accepted = false;\n\n      this.wheel(wheel);\n\n      if (wheel.accepted || !this.propagateComposedEvents) {\n        //e.stopPropagation();\n        e.preventDefault();\n      } else {\n        var i = 0;\n        var stop = false;\n        while (!stop && i < this.areaList.length) {\n          stop = this.areaList[i];\n          tempWheel = this.areaList[i].$eventToMouse(e);\n          tempWheel.accepted = false;\n          this.areaList[i].wheel(tempWheel);\n          stop = tempWheel.accepted || this.areaList[i].propagateComposedEvents;\n          i++;\n        }\n      }\n    }\n  }, {\n    key: \"$handleClick\",\n    value: function $handleClick(e) {\n      var mouse = this.$eventToMouse(e);\n      mouse.accepted = false;\n\n      if (this.enabled && this.acceptedButtons & mouse.button) {\n        this.clicked(mouse);\n\n        if (mouse.accepted || !this.propagateComposedEvents) {\n          //e.stopPropagation();\n          e.preventDefault();\n        } else {\n          var i = 0;\n          var stop = false;\n          while (!stop && i < this.areaList.length) {\n            stop = this.areaList[i];\n            tempMouse = this.areaList[i].$eventToMouse(e);\n            tempMouse.accepted = false;\n            this.areaList[i].clicked(tempMouse);\n            stop = tempMouse.accepted || this.areaList[i].propagateComposedEvents;\n            i++;\n          }\n        }\n      }\n      // This decides whether to show the browser's context menu on right click or\n      // not\n      return !(this.acceptedButtons & QmlWeb.Qt.RightButton);\n    }\n  }, {\n    key: \"$eventToMouse\",\n    value: function $eventToMouse(e) {\n      var Qt = QmlWeb.Qt;\n      var mouse = {\n        accepted: true,\n        button: e.button === 0 ? Qt.LeftButton : e.button === 1 ? Qt.MiddleButton : e.button === 2 ? Qt.RightButton : 0,\n        modifiers: e.ctrlKey * Qt.CtrlModifier | e.altKey * Qt.AltModifier | e.shiftKey * Qt.ShiftModifier | e.metaKey * Qt.MetaModifier\n      };\n      if (this.$clientTransform) {\n        // Handle scale and translate transformations\n        mouse.x = (e.clientX - this.$clientTransform.x) / this.$clientTransform.xScale;\n        mouse.y = (e.clientY - this.$clientTransform.y) / this.$clientTransform.yScale;\n      } else {\n        mouse.x = e.offsetX || e.layerX;\n        mouse.y = e.offsetY || e.layerY;\n      }\n      return mouse;\n    }\n\n    // eslint-disable-next-line complexity\n\n  }, {\n    key: \"$cursorShapeToCSS\",\n    value: function $cursorShapeToCSS() {\n      var Qt = QmlWeb.Qt;\n      switch (this.cursorShape) {\n        case Qt.ArrowCursor:\n          return \"default\";\n        case Qt.UpArrowCursor:\n          return \"n-resize\";\n        case Qt.CrossCursor:\n          return \"crosshair\";\n        case Qt.WaitCursor:\n          return \"wait\";\n        case Qt.IBeamCursor:\n          return \"text\";\n        case Qt.SizeVerCursor:\n          return \"ew-resize\";\n        case Qt.SizeHorCursor:\n          return \"ns-resize\";\n        case Qt.SizeBDiagCursor:\n          return \"nesw-resize\";\n        case Qt.SizeFDiagCursor:\n          return \"nwse-resize\";\n        case Qt.SizeAllCursor:\n          return \"all-scroll\";\n        case Qt.BlankCursor:\n          return \"none\";\n        case Qt.SplitVCursor:\n          return \"row-resize\";\n        case Qt.SplitHCursor:\n          return \"col-resize\";\n        case Qt.PointingHandCursor:\n          return \"pointer\";\n        case Qt.ForbiddenCursor:\n          return \"not-allowed\";\n        case Qt.WhatsThisCursor:\n          return \"help\";\n        case Qt.BusyCursor:\n          return \"progress\";\n        case Qt.OpenHandCursor:\n          return \"grab\";\n        case Qt.ClosedHandCursor:\n          return \"grabbing\";\n        case Qt.DragCopyCursor:\n          return \"copy\";\n        case Qt.DragMoveCursor:\n          return \"move\";\n        case Qt.DragLinkCursor:\n          return \"alias\";\n        //case Qt.BitmapCursor: return \"auto\";\n        //case Qt.CustomCursor: return \"auto\";\n      }\n      return \"auto\";\n    }\n  }]);\n\n  return QtQuick_MouseArea;\n}(QtQuick_Item);\n\nQtQuick_MouseArea.properties = {\n  acceptedButtons: { type: \"variant\", initialValue: 1 }, // Qt.LeftButton\n  enabled: { type: \"bool\", initialValue: true },\n  hoverEnabled: \"bool\",\n  mouseX: \"real\",\n  mouseY: \"real\",\n  pressed: \"bool\",\n  containsMouse: \"bool\",\n  containsPress: \"bool\",\n  pressedButtons: { type: \"variant\", initialValue: 0 },\n  cursorShape: \"enum\", // Qt.ArrowCursor\n  propagateComposedEvents: { type: \"bool\", initialValue: false }\n};\nQtQuick_MouseArea.signals = {\n  canceled: [],\n  clicked: [{ type: \"variant\", name: \"mouse\" }],\n  doubleClicked: [{ type: \"variant\", name: \"mouse\" }],\n  entered: [],\n  exited: [],\n  positionChanged: [{ type: \"variant\", name: \"mouse\" }],\n  pressAndHold: [{ type: \"variant\", name: \"mouse\" }],\n  pressed: [{ type: \"variant\", name: \"mouse\" }],\n  released: [{ type: \"variant\", name: \"mouse\" }],\n  wheel: [{ type: \"variant\", name: \"wheel\" }]\n};\n\nQmlWeb.registerQmlType(QtQuick_MouseArea);\n\n// eslint-disable-next-line no-undef\n\nvar QtQuick_OpacityAnimator = function (_QtQuick_Animator) {\n  _inherits(QtQuick_OpacityAnimator, _QtQuick_Animator);\n\n  function QtQuick_OpacityAnimator() {\n    _classCallCheck(this, QtQuick_OpacityAnimator);\n\n    return _possibleConstructorReturn(this, (QtQuick_OpacityAnimator.__proto__ || Object.getPrototypeOf(QtQuick_OpacityAnimator)).apply(this, arguments));\n  }\n\n  return QtQuick_OpacityAnimator;\n}(QtQuick_Animator);\n\nQtQuick_OpacityAnimator.versions = /^2\\./;\n\nQmlWeb.registerQmlType(QtQuick_OpacityAnimator);\n\n// eslint-disable-next-line no-undef\n\nvar QtQuick_ParallelAnimation = function (_QtQuick_Animation2) {\n  _inherits(QtQuick_ParallelAnimation, _QtQuick_Animation2);\n\n  function QtQuick_ParallelAnimation(meta) {\n    _classCallCheck(this, QtQuick_ParallelAnimation);\n\n    var _this102 = _possibleConstructorReturn(this, (QtQuick_ParallelAnimation.__proto__ || Object.getPrototypeOf(QtQuick_ParallelAnimation)).call(this, meta));\n\n    _this102.$runningAnimations = 0;\n\n    _this102.animationsChanged.connect(_this102, _this102.$onAnimationsChanged);\n\n    QmlWeb.engine.$registerStart(function () {\n      if (!_this102.running) return;\n      self.running = false; // toggled back by start();\n      self.start();\n    });\n    QmlWeb.engine.$registerStop(function () {\n      return _this102.stop();\n    });\n    return _this102;\n  }\n\n  _createClass(QtQuick_ParallelAnimation, [{\n    key: \"$onAnimationsChanged\",\n    value: function $onAnimationsChanged() {\n      var flags = QmlWeb.Signal.UniqueConnection;\n      for (var i = 0; i < this.animations.length; i++) {\n        var animation = this.animations[i];\n        animation.runningChanged.connect(this, this.$animationFinished, flags);\n      }\n    }\n  }, {\n    key: \"$animationFinished\",\n    value: function $animationFinished(newVal) {\n      this.$runningAnimations += newVal ? 1 : -1;\n      if (this.$runningAnimations === 0) {\n        this.running = false;\n      }\n    }\n  }, {\n    key: \"start\",\n    value: function start() {\n      if (this.running) return;\n      this.running = true;\n      for (var i = 0; i < this.animations.length; i++) {\n        this.animations[i].start();\n      }\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      if (!this.running) return;\n      for (var i = 0; i < this.animations.length; i++) {\n        this.animations[i].stop();\n      }\n      this.running = false;\n    }\n  }, {\n    key: \"complete\",\n    value: function complete() {\n      this.stop();\n    }\n  }]);\n\n  return QtQuick_ParallelAnimation;\n}(QtQuick_Animation);\n\nQtQuick_ParallelAnimation.enums = {\n  Animation: { Infinite: Math.Infinite }\n};\nQtQuick_ParallelAnimation.properties = {\n  animations: \"list\"\n};\nQtQuick_ParallelAnimation.defaultProperty = \"animations\";\n\nQmlWeb.registerQmlType(QtQuick_ParallelAnimation);\n\n// eslint-disable-next-line no-undef\n\nvar QtQuick_PauseAnimation = function (_QtQuick_Animation3) {\n  _inherits(QtQuick_PauseAnimation, _QtQuick_Animation3);\n\n  function QtQuick_PauseAnimation(meta) {\n    _classCallCheck(this, QtQuick_PauseAnimation);\n\n    var _this103 = _possibleConstructorReturn(this, (QtQuick_PauseAnimation.__proto__ || Object.getPrototypeOf(QtQuick_PauseAnimation)).call(this, meta));\n\n    _this103.$at = 0;\n\n    QmlWeb.engine.$addTicker(function () {\n      return _this103.$ticker.apply(_this103, arguments);\n    });\n    _this103.runningChanged.connect(_this103, _this103.$onRunningChanged);\n    return _this103;\n  }\n\n  _createClass(QtQuick_PauseAnimation, [{\n    key: \"$ticker\",\n    value: function $ticker(now, elapsed) {\n      if (!this.running || this.paused) {\n        return;\n      }\n      this.$at += elapsed / this.duration;\n      if (this.$at >= 1) {\n        this.complete();\n      }\n    }\n  }, {\n    key: \"$onRunningChanged\",\n    value: function $onRunningChanged(newVal) {\n      if (newVal) {\n        this.$at = 0;\n        this.paused = false;\n      }\n    }\n  }]);\n\n  return QtQuick_PauseAnimation;\n}(QtQuick_Animation);\n\nQtQuick_PauseAnimation.properties = {\n  duration: { type: \"int\", initialValue: 250 }\n};\n\nQmlWeb.registerQmlType(QtQuick_PauseAnimation);\n\n// eslint-disable-next-line no-undef\n\nvar QtQuick_Positioner = function (_QtQuick_Item34) {\n  _inherits(QtQuick_Positioner, _QtQuick_Item34);\n\n  function QtQuick_Positioner(meta) {\n    _classCallCheck(this, QtQuick_Positioner);\n\n    var _this104 = _possibleConstructorReturn(this, (QtQuick_Positioner.__proto__ || Object.getPrototypeOf(QtQuick_Positioner)).call(this, meta));\n\n    _this104.childrenChanged.connect(_this104, _this104.$onChildrenChanged);\n    _this104.spacingChanged.connect(_this104, _this104.layoutChildren);\n    _this104.childrenChanged.connect(_this104, _this104.layoutChildren);\n    _this104.layoutChildren();\n    return _this104;\n  }\n\n  _createClass(QtQuick_Positioner, [{\n    key: \"$onChildrenChanged\",\n    value: function $onChildrenChanged() {\n      var flags = QmlWeb.Signal.UniqueConnection;\n      for (var i = 0; i < this.children.length; i++) {\n        var child = this.children[i];\n        child.widthChanged.connect(this, this.layoutChildren, flags);\n        child.heightChanged.connect(this, this.layoutChildren, flags);\n        child.visibleChanged.connect(this, this.layoutChildren, flags);\n      }\n    }\n  }, {\n    key: \"layoutChildren\",\n    value: function layoutChildren() {\n      // noop, defined in individual positioners\n    }\n  }]);\n\n  return QtQuick_Positioner;\n}(QtQuick_Item);\n\nQtQuick_Positioner.properties = {\n  spacing: \"int\",\n  padding: \"int\"\n};\n\nQmlWeb.registerQmlType(QtQuick_Positioner);\n\n// eslint-disable-next-line no-undef\n\nvar QtQuick_Column = function (_QtQuick_Positioner) {\n  _inherits(QtQuick_Column, _QtQuick_Positioner);\n\n  function QtQuick_Column() {\n    _classCallCheck(this, QtQuick_Column);\n\n    return _possibleConstructorReturn(this, (QtQuick_Column.__proto__ || Object.getPrototypeOf(QtQuick_Column)).apply(this, arguments));\n  }\n\n  _createClass(QtQuick_Column, [{\n    key: \"layoutChildren\",\n    value: function layoutChildren() {\n      var curPos = this.padding;\n      var maxWidth = 0;\n      for (var i = 0; i < this.children.length; i++) {\n        var child = this.children[i];\n        if (!child.visible || !child.width || !child.height) {\n          continue;\n        }\n        maxWidth = child.width > maxWidth ? child.width : maxWidth;\n        child.y = curPos + this.padding;\n        if (this.padding > 0) child.x = this.padding;\n        curPos += child.height + this.spacing;\n      }\n      this.implicitWidth = maxWidth + this.padding * 2;\n      this.implicitHeight = curPos - this.spacing + this.padding;\n      // We want no spacing at the bottom side\n    }\n  }]);\n\n  return QtQuick_Column;\n}(QtQuick_Positioner);\n\nQmlWeb.registerQmlType(QtQuick_Column);\n\n// eslint-disable-next-line no-undef\n\nvar QtQuick_Flow = function (_QtQuick_Positioner2) {\n  _inherits(QtQuick_Flow, _QtQuick_Positioner2);\n\n  function QtQuick_Flow(meta) {\n    _classCallCheck(this, QtQuick_Flow);\n\n    var _this106 = _possibleConstructorReturn(this, (QtQuick_Flow.__proto__ || Object.getPrototypeOf(QtQuick_Flow)).call(this, meta));\n\n    _this106.flowChanged.connect(_this106, _this106.layoutChildren);\n    _this106.layoutDirectionChanged.connect(_this106, _this106.layoutChildren);\n    _this106.widthChanged.connect(_this106, _this106.layoutChildren);\n    _this106.heightChanged.connect(_this106, _this106.layoutChildren);\n    _this106.layoutChildren();\n    return _this106;\n  }\n\n  _createClass(QtQuick_Flow, [{\n    key: \"layoutChildren\",\n    value: function layoutChildren() {\n      if (this.flow === undefined) {\n        // Flow has not been fully initialized yet\n        return;\n      }\n\n      var curHPos = 0;\n      var curVPos = 0;\n      var rowSize = 0;\n      for (var i = 0; i < this.children.length; i++) {\n        var child = this.children[i];\n        if (!child.visible || !child.width || !child.height) {\n          continue;\n        }\n\n        if (this.flow === this.Flow.LeftToRight) {\n          if (!this.$isUsingImplicitWidth && curHPos + child.width > this.width) {\n            curHPos = 0;\n            curVPos += rowSize + this.spacing;\n            rowSize = 0;\n          }\n          rowSize = child.height > rowSize ? child.height : rowSize;\n          child.x = this.layoutDirection === this.Flow.TopToBottom ? this.width - curHPos - child.width : curHPos;\n          child.y = curVPos;\n          curHPos += child.width + this.spacing;\n        } else {\n          // Flow.TopToBottom\n          if (!this.$isUsingImplicitHeight && curVPos + child.height > this.height) {\n            curVPos = 0;\n            curHPos += rowSize + this.spacing;\n            rowSize = 0;\n          }\n          rowSize = child.width > rowSize ? child.width : rowSize;\n          child.x = this.layoutDirection === this.Flow.TopToBottom ? this.width - curHPos - child.width : curHPos;\n          child.y = curVPos;\n          curVPos += child.height + this.spacing;\n        }\n      }\n\n      if (this.flow === this.Flow.LeftToRight) {\n        this.implicitWidth = curHPos - this.spacing;\n        this.implicitHeight = curVPos + rowSize;\n      } else {\n        // Flow.TopToBottom\n        this.implicitWidth = curHPos + rowSize;\n        this.implicitHeight = curVPos - this.spacing;\n      }\n    }\n  }]);\n\n  return QtQuick_Flow;\n}(QtQuick_Positioner);\n\nQtQuick_Flow.enums = {\n  Flow: { LeftToRight: 0, TopToBottom: 1 }\n};\nQtQuick_Flow.properties = {\n  flow: \"enum\", // Flow.LeftToRight\n  layoutDirection: \"enum\" // Flow.LeftToRight\n};\n\nQmlWeb.registerQmlType(QtQuick_Flow);\n\n// eslint-disable-next-line no-undef\n\nvar QtQuick_Grid = function (_QtQuick_Positioner3) {\n  _inherits(QtQuick_Grid, _QtQuick_Positioner3);\n\n  function QtQuick_Grid(meta) {\n    _classCallCheck(this, QtQuick_Grid);\n\n    var _this107 = _possibleConstructorReturn(this, (QtQuick_Grid.__proto__ || Object.getPrototypeOf(QtQuick_Grid)).call(this, meta));\n\n    _this107.columnsChanged.connect(_this107, _this107.layoutChildren);\n    _this107.rowsChanged.connect(_this107, _this107.layoutChildren);\n    _this107.flowChanged.connect(_this107, _this107.layoutChildren);\n    _this107.layoutDirectionChanged.connect(_this107, _this107.layoutChildren);\n    _this107.layoutChildren();\n    return _this107;\n  }\n\n  _createClass(QtQuick_Grid, [{\n    key: \"layoutChildren\",\n    value: function layoutChildren() {\n      // How many items are actually visible?\n      var visibleItems = this.$getVisibleItems();\n\n      // How many rows and columns do we need?\n\n      var _$calculateSize = this.$calculateSize(visibleItems.length),\n          _$calculateSize2 = _slicedToArray(_$calculateSize, 2),\n          c = _$calculateSize2[0],\n          r = _$calculateSize2[1];\n\n      // How big are the colums/rows?\n\n\n      var _$calculateGrid = this.$calculateGrid(visibleItems, c, r),\n          _$calculateGrid2 = _slicedToArray(_$calculateGrid, 2),\n          colWidth = _$calculateGrid2[0],\n          rowHeight = _$calculateGrid2[1];\n\n      // Do actual positioning\n      // When layoutDirection is RightToLeft we need oposite order of coumns\n\n\n      var step = this.layoutDirection === 1 ? -1 : 1;\n      var startingPoint = this.layoutDirection === 1 ? c - 1 : 0;\n      var endPoint = this.layoutDirection === 1 ? -1 : c;\n      var curHPos = 0;\n      var curVPos = 0;\n      if (this.flow === 0) {\n        for (var i = 0; i < r; i++) {\n          for (var j = startingPoint; j !== endPoint; j += step) {\n            var _item = visibleItems[i * c + j];\n            if (!_item) {\n              break;\n            }\n            _item.x = curHPos;\n            _item.y = curVPos;\n\n            curHPos += colWidth[j] + this.spacing;\n          }\n          curVPos += rowHeight[i] + this.spacing;\n          curHPos = 0;\n        }\n      } else {\n        for (var _i7 = startingPoint; _i7 !== endPoint; _i7 += step) {\n          for (var _j = 0; _j < r; _j++) {\n            var _item2 = visibleItems[_i7 * r + _j];\n            if (!_item2) {\n              break;\n            }\n            _item2.x = curHPos;\n            _item2.y = curVPos;\n\n            curVPos += rowHeight[_j] + this.spacing;\n          }\n          curHPos += colWidth[_i7] + this.spacing;\n          curVPos = 0;\n        }\n      }\n\n      // Set implicit size\n      var gridWidth = -this.spacing;\n      var gridHeight = -this.spacing;\n      for (var _i8 in colWidth) {\n        gridWidth += colWidth[_i8] + this.spacing;\n      }\n      for (var _i9 in rowHeight) {\n        gridHeight += rowHeight[_i9] + this.spacing;\n      }\n      this.implicitWidth = gridWidth;\n      this.implicitHeight = gridHeight;\n    }\n  }, {\n    key: \"$getVisibleItems\",\n    value: function $getVisibleItems() {\n      return this.children.filter(function (child) {\n        return child.visible && child.width && child.height;\n      });\n    }\n  }, {\n    key: \"$calculateSize\",\n    value: function $calculateSize(length) {\n      var cols = void 0;\n      var rows = void 0;\n      if (!this.columns && !this.rows) {\n        cols = 4;\n        rows = Math.ceil(length / cols);\n      } else if (!this.columns) {\n        rows = this.rows;\n        cols = Math.ceil(length / rows);\n      } else {\n        cols = this.columns;\n        rows = Math.ceil(length / cols);\n      }\n      return [cols, rows];\n    }\n  }, {\n    key: \"$calculateGrid\",\n    value: function $calculateGrid(visibleItems, cols, rows) {\n      var colWidth = [];\n      var rowHeight = [];\n\n      if (this.flow === 0) {\n        for (var i = 0; i < rows; i++) {\n          for (var j = 0; j < cols; j++) {\n            var _item3 = visibleItems[i * cols + j];\n            if (!_item3) {\n              break;\n            }\n            if (!colWidth[j] || _item3.width > colWidth[j]) {\n              colWidth[j] = _item3.width;\n            }\n            if (!rowHeight[i] || _item3.height > rowHeight[i]) {\n              rowHeight[i] = _item3.height;\n            }\n          }\n        }\n      } else {\n        for (var _i10 = 0; _i10 < cols; _i10++) {\n          for (var _j2 = 0; _j2 < rows; _j2++) {\n            var _item4 = visibleItems[_i10 * rows + _j2];\n            if (!_item4) {\n              break;\n            }\n            if (!rowHeight[_j2] || _item4.height > rowHeight[_j2]) {\n              rowHeight[_j2] = _item4.height;\n            }\n            if (!colWidth[_i10] || _item4.width > colWidth[_i10]) {\n              colWidth[_i10] = _item4.width;\n            }\n          }\n        }\n      }\n\n      return [colWidth, rowHeight];\n    }\n  }]);\n\n  return QtQuick_Grid;\n}(QtQuick_Positioner);\n\nQtQuick_Grid.enums = {\n  Grid: { LeftToRight: 0, TopToBottom: 1 }\n};\nQtQuick_Grid.properties = {\n  columns: \"int\",\n  rows: \"int\",\n  flow: \"enum\",\n  layoutDirection: \"enum\"\n};\n\nQmlWeb.registerQmlType(QtQuick_Grid);\n\n// eslint-disable-next-line no-undef\n\nvar QtQuick_PropertyAnimation = function (_QtQuick_Animation4) {\n  _inherits(QtQuick_PropertyAnimation, _QtQuick_Animation4);\n\n  function QtQuick_PropertyAnimation(meta) {\n    _classCallCheck(this, QtQuick_PropertyAnimation);\n\n    var _this108 = _possibleConstructorReturn(this, (QtQuick_PropertyAnimation.__proto__ || Object.getPrototypeOf(QtQuick_PropertyAnimation)).call(this, meta));\n\n    _this108.easing = new QmlWeb.QObject(_this108);\n    QmlWeb.createProperties(_this108.easing, {\n      type: { type: \"enum\", initialValue: _this108.Easing.Linear },\n      amplitude: { type: \"real\", initialValue: 1 },\n      overshoot: { type: \"real\", initialValue: 1.70158 },\n      period: { type: \"real\", initialValue: 0.3 },\n      bezierCurve: \"list\"\n    });\n\n    _this108.easing.$valueForProgress = function (t) {\n      return QmlWeb.$ease(this.type, this.period, this.amplitude, this.overshoot, t);\n    };\n\n    _this108.$props = [];\n    _this108.$targets = [];\n    _this108.$actions = [];\n\n    _this108.targetChanged.connect(_this108, _this108.$redoTargets);\n    _this108.targetsChanged.connect(_this108, _this108.$redoTargets);\n    _this108.propertyChanged.connect(_this108, _this108.$redoProperties);\n    _this108.propertiesChanged.connect(_this108, _this108.$redoProperties);\n\n    if (meta.object.$on !== undefined) {\n      _this108.property = meta.object.$on;\n      _this108.target = _this108.$parent;\n      _this108.running = true;\n    }\n    return _this108;\n  }\n\n  _createClass(QtQuick_PropertyAnimation, [{\n    key: \"$redoActions\",\n    value: function $redoActions() {\n      this.$actions = [];\n      for (var i = 0; i < this.$targets.length; i++) {\n        for (var j in this.$props) {\n          this.$actions.push({\n            target: this.$targets[i],\n            property: this.$props[j],\n            from: this.from,\n            to: this.to\n          });\n        }\n      }\n    }\n  }, {\n    key: \"$redoProperties\",\n    value: function $redoProperties() {\n      this.$props = this.properties.split(\",\");\n\n      // Remove whitespaces\n      for (var i = 0; i < this.$props.length; i++) {\n        var matches = this.$props[i].match(/\\w+/);\n        if (matches) {\n          this.$props[i] = matches[0];\n        } else {\n          this.$props.splice(i, 1);\n          i--;\n        }\n      }\n      // Merge properties and property\n      if (this.property && this.$props.indexOf(this.property) === -1) {\n        this.$props.push(this.property);\n      }\n    }\n  }, {\n    key: \"$redoTargets\",\n    value: function $redoTargets() {\n      this.$targets = this.targets.slice();\n      if (this.target && this.$targets.indexOf(this.target) === -1) {\n        this.$targets.push(this.target);\n      }\n    }\n  }]);\n\n  return QtQuick_PropertyAnimation;\n}(QtQuick_Animation);\n\nQtQuick_PropertyAnimation.properties = {\n  duration: { type: \"int\", initialValue: 250 },\n  from: \"real\",\n  to: \"real\",\n  properties: \"string\",\n  property: \"string\",\n  target: \"QtObject\",\n  targets: \"list\"\n};\n\nQmlWeb.registerQmlType(QtQuick_PropertyAnimation);\n\n// eslint-disable-next-line no-undef\n\nvar QtQuick_NumberAnimation = function (_QtQuick_PropertyAnim) {\n  _inherits(QtQuick_NumberAnimation, _QtQuick_PropertyAnim);\n\n  function QtQuick_NumberAnimation(meta) {\n    _classCallCheck(this, QtQuick_NumberAnimation);\n\n    var _this109 = _possibleConstructorReturn(this, (QtQuick_NumberAnimation.__proto__ || Object.getPrototypeOf(QtQuick_NumberAnimation)).call(this, meta));\n\n    _this109.$at = 0;\n    _this109.$loop = 0;\n\n    QmlWeb.engine.$addTicker(function () {\n      return _this109.$ticker.apply(_this109, arguments);\n    });\n    _this109.runningChanged.connect(_this109, _this109.$onRunningChanged);\n    return _this109;\n  }\n\n  _createClass(QtQuick_NumberAnimation, [{\n    key: \"$startLoop\",\n    value: function $startLoop() {\n      for (var i in this.$actions) {\n        var _action3 = this.$actions[i];\n        _action3.from = _action3.from !== undefined ? _action3.from : _action3.target[_action3.property];\n      }\n      this.$at = 0;\n    }\n  }, {\n    key: \"$ticker\",\n    value: function $ticker(now, elapsed) {\n      if (!this.running && this.$loop !== -1 || this.paused) {\n        // $loop === -1 is a marker to just finish this run\n        return;\n      }\n      if (this.$at === 0 && this.$loop === 0 && !this.$actions.length) {\n        this.$redoActions();\n      }\n      this.$at += elapsed / this.duration;\n      if (this.$at >= 1) {\n        this.complete();\n        return;\n      }\n      for (var i in this.$actions) {\n        var _action4 = this.$actions[i];\n        var value = _action4.from + (_action4.to - _action4.from) * this.easing.$valueForProgress(this.$at);\n        var property = _action4.target.$properties[_action4.property];\n        property.set(value, QmlWeb.QMLProperty.ReasonAnimation);\n      }\n    }\n  }, {\n    key: \"$onRunningChanged\",\n    value: function $onRunningChanged(newVal) {\n      if (newVal) {\n        this.$startLoop();\n        this.paused = false;\n      } else if (this.alwaysRunToEnd && this.$at < 1) {\n        this.$loop = -1; // -1 is used as a marker to stop\n      } else {\n        this.$loop = 0;\n        this.$actions = [];\n      }\n    }\n  }, {\n    key: \"complete\",\n    value: function complete() {\n      for (var i in this.$actions) {\n        var _action5 = this.$actions[i];\n        var property = _action5.target.$properties[_action5.property];\n        property.set(_action5.to, QmlWeb.QMLProperty.ReasonAnimation);\n      }\n      this.$loop++;\n      if (this.$loop === this.loops) {\n        this.running = false;\n      } else if (!this.running) {\n        this.$actions = [];\n      } else {\n        this.$startLoop(this);\n      }\n    }\n  }]);\n\n  return QtQuick_NumberAnimation;\n}(QtQuick_PropertyAnimation);\n\nQmlWeb.registerQmlType(QtQuick_NumberAnimation);\n\n// eslint-disable-next-line no-undef\n\nvar QtQuick_PropertyChanges = function (_QtQml_QtObject20) {\n  _inherits(QtQuick_PropertyChanges, _QtQml_QtObject20);\n\n  function QtQuick_PropertyChanges(meta) {\n    _classCallCheck(this, QtQuick_PropertyChanges);\n\n    var _this110 = _possibleConstructorReturn(this, (QtQuick_PropertyChanges.__proto__ || Object.getPrototypeOf(QtQuick_PropertyChanges)).call(this, meta));\n\n    _this110.$actions = [];\n    return _this110;\n  }\n\n  _createClass(QtQuick_PropertyChanges, [{\n    key: \"$setCustomData\",\n    value: function $setCustomData(property, value) {\n      this.$actions.push({ property: property, value: value });\n    }\n  }]);\n\n  return QtQuick_PropertyChanges;\n}(QtQml_QtObject);\n\nQtQuick_PropertyChanges.properties = {\n  target: \"QtObject\",\n  explicit: \"bool\",\n  restoreEntryValues: { type: \"bool\", initialValue: true }\n};\n\nQmlWeb.registerQmlType(QtQuick_PropertyChanges);\n\n// eslint-disable-next-line no-undef\n\nvar QtQuick_Rectangle = function (_QtQuick_Item35) {\n  _inherits(QtQuick_Rectangle, _QtQuick_Item35);\n\n  function QtQuick_Rectangle(meta) {\n    _classCallCheck(this, QtQuick_Rectangle);\n\n    //this.parent = meta.parent\n    var _this111 = _possibleConstructorReturn(this, (QtQuick_Rectangle.__proto__ || Object.getPrototypeOf(QtQuick_Rectangle)).call(this, meta));\n\n    _this111.border = new QmlWeb.QObject(_this111);\n    QmlWeb.createProperties(_this111.border, {\n      color: { type: \"color\", initialValue: \"black\" },\n      width: { type: \"int\", initialValue: 1 }\n    });\n    _this111.$borderActive = false;\n\n    var bg = _this111.impl = document.createElement(\"div\");\n    bg.style.pointerEvents = \"none\";\n    bg.style.position = \"relative\";\n    bg.style.width = \"100%\";\n    bg.style.height = \"100%\";\n    bg.style.left = bg.style.right = bg.style.top = bg.style.bottom = \"0px\";\n    bg.style.borderWidth = \"0px\";\n    bg.style.borderStyle = \"solid\";\n    bg.style.borderColor = _this111.border.color.$css;\n    bg.style.backgroundColor = _this111.color.$css;\n    _this111.dom.appendChild(bg);\n\n    _this111.colorChanged.connect(_this111, _this111.$onColorChanged);\n    _this111.radiusChanged.connect(_this111, _this111.$onRadiusChanged);\n    _this111.border.colorChanged.connect(_this111, _this111.border$onColorChanged);\n    _this111.border.widthChanged.connect(_this111, _this111.border$onWidthChanged);\n    _this111.widthChanged.connect(_this111, _this111.$updateBorder);\n    _this111.heightChanged.connect(_this111, _this111.$updateBorder);\n\n    _this111.gradientChanged.connect(_this111, _this111.gradientApply);\n    return _this111;\n  }\n\n  _createClass(QtQuick_Rectangle, [{\n    key: \"gradientApply\",\n    value: function gradientApply() {\n      this.gradient.$createObject(this);\n    }\n  }, {\n    key: \"$onColorChanged\",\n    value: function $onColorChanged(newVal) {\n      this.impl.style.backgroundColor = newVal.$css;\n    }\n  }, {\n    key: \"border$onColorChanged\",\n    value: function border$onColorChanged(newVal) {\n      this.$borderActive = true;\n      this.impl.style.borderColor = newVal.$css;\n      this.$updateBorder();\n    }\n  }, {\n    key: \"border$onWidthChanged\",\n    value: function border$onWidthChanged() {\n      this.$borderActive = true;\n      this.$updateBorder();\n    }\n  }, {\n    key: \"$onRadiusChanged\",\n    value: function $onRadiusChanged(newVal) {\n      this.impl.style.borderRadius = newVal + \"px\";\n    }\n  }, {\n    key: \"$updateBorder\",\n    value: function $updateBorder() {\n      var border = this.$borderActive ? Math.max(0, this.border.width) : 0;\n      var style = this.impl.style;\n      if (border * 2 > this.width || border * 2 > this.height) {\n        // Border is covering the whole background\n        style.borderWidth = \"0px\";\n        style.borderTopWidth = this.height + \"px\";\n      } else {\n        style.borderWidth = border + \"px\";\n      }\n    }\n  }]);\n\n  return QtQuick_Rectangle;\n}(QtQuick_Item);\n\nQtQuick_Rectangle.properties = {\n  gradient: \"Component\",\n  color: { type: \"color\", initialValue: \"white\" },\n  radius: \"real\"\n};\n\nQmlWeb.registerQmlType(QtQuick_Rectangle);\n\n// eslint-disable-next-line no-undef\n\nvar QtQuick_RegExpValidator = function (_QtQml_QtObject21) {\n  _inherits(QtQuick_RegExpValidator, _QtQml_QtObject21);\n\n  function QtQuick_RegExpValidator(meta) {\n    _classCallCheck(this, QtQuick_RegExpValidator);\n\n    var _this112 = _possibleConstructorReturn(this, (QtQuick_RegExpValidator.__proto__ || Object.getPrototypeOf(QtQuick_RegExpValidator)).call(this, meta));\n\n    _this112.parent = meta.parent;\n    _this112.regExpChanged.connect(_this112, _this112.$regExpChanged);\n    //this.$parent.stops.push({position: this.position, color: this.color})\n    return _this112;\n  }\n\n  _createClass(QtQuick_RegExpValidator, [{\n    key: \"$regExpChanged\",\n    value: function $regExpChanged() {\n      //this.parent.impl.pattern = this.regExp\n    }\n  }, {\n    key: \"validate\",\n    value: function validate(string) {\n      if (!this.regExp) return true;\n      return this.regExp.test(string);\n    }\n  }]);\n\n  return QtQuick_RegExpValidator;\n}(QtQml_QtObject);\n\nQtQuick_RegExpValidator.properties = {\n  regExp: \"var\"\n};\n\nQmlWeb.registerQmlType(QtQuick_RegExpValidator);\n\n// eslint-disable-next-line no-undef\n\nvar QtQuick_Repeater = function (_QtQuick_Item36) {\n  _inherits(QtQuick_Repeater, _QtQuick_Item36);\n\n  function QtQuick_Repeater(meta) {\n    _classCallCheck(this, QtQuick_Repeater);\n\n    var _this113 = _possibleConstructorReturn(this, (QtQuick_Repeater.__proto__ || Object.getPrototypeOf(QtQuick_Repeater)).call(this, meta));\n\n    _this113.parent = meta.parent;\n    // TODO: some (all ?) of the components including Repeater needs to know own\n    // parent at creation time. Please consider this major change.\n\n    _this113.$completed = false;\n    _this113.$items = []; // List of created items\n\n    _this113.modelChanged.connect(_this113, _this113.$onModelChanged);\n    _this113.delegateChanged.connect(_this113, _this113.$onDelegateChanged);\n    _this113.parentChanged.connect(_this113, _this113.$onParentChanged);\n    return _this113;\n  }\n\n  _createClass(QtQuick_Repeater, [{\n    key: \"_container\",\n    value: function _container() {\n      return this.parent;\n    }\n  }, {\n    key: \"itemAt\",\n    value: function itemAt(index) {\n      return this.$items[index];\n    }\n  }, {\n    key: \"$onModelChanged\",\n    value: function $onModelChanged() {\n      this.$applyModel();\n    }\n  }, {\n    key: \"$onDelegateChanged\",\n    value: function $onDelegateChanged() {\n      this.$applyModel();\n    }\n  }, {\n    key: \"$onParentChanged\",\n    value: function $onParentChanged() {\n      this.$applyModel();\n    }\n  }, {\n    key: \"$getModel\",\n    value: function $getModel() {\n      var QMLListModel = QmlWeb.getConstructor(\"QtQuick\", \"2.0\", \"ListModel\");\n      return this.model instanceof QMLListModel ? this.model.$model : this.model;\n    }\n  }, {\n    key: \"$applyModel\",\n    value: function $applyModel() {\n      if (!this.delegate || !this.parent) {\n        return;\n      }\n      var model = this.$getModel();\n      if (model instanceof QmlWeb.JSItemModel) {\n        var flags = QmlWeb.Signal.UniqueConnection;\n        model.dataChanged.connect(this, this.$_onModelDataChanged, flags);\n        model.rowsInserted.connect(this, this.$_onRowsInserted, flags);\n        model.rowsMoved.connect(this, this.$_onRowsMoved, flags);\n        model.rowsRemoved.connect(this, this.$_onRowsRemoved, flags);\n        model.modelReset.connect(this, this.$_onModelReset, flags);\n\n        this.$removeChildren(0, this.$items.length);\n        this.$insertChildren(0, model.rowCount());\n      } else if (typeof model === \"number\") {\n        if (this.$items.length > model) {\n          // have more than we need\n          this.$removeChildren(model, this.$items.length);\n        } else {\n          // need more\n          this.$insertChildren(this.$items.length, model);\n        }\n      } else if (model instanceof Array) {\n        this.$removeChildren(0, this.$items.length);\n        this.$insertChildren(0, model.length);\n      }\n      this.count = this.$items.length;\n    }\n  }, {\n    key: \"$callOnCompleted\",\n    value: function $callOnCompleted(child) {\n      child.Component.completed();\n      var QMLBaseObject = QmlWeb.getConstructor(\"QtQml\", \"2.0\", \"QtObject\");\n      for (var i = 0; i < child.$tidyupList.length; i++) {\n        if (child.$tidyupList[i] instanceof QMLBaseObject) {\n          this.$callOnCompleted(child.$tidyupList[i]);\n        }\n      }\n    }\n  }, {\n    key: \"$_onModelDataChanged\",\n    value: function $_onModelDataChanged(startIndex, endIndex, roles) {\n      var model = this.$getModel();\n      var roleNames = roles || model.roleNames;\n      for (var index = startIndex; index <= endIndex; index++) {\n        var _item5 = this.$items[index];\n        var modelData = _item5.$properties.model;\n        for (var i in roleNames) {\n          var roleName = roleNames[i];\n          var roleData = model.data(index, roleName);\n          _item5.$properties[roleName].set(roleData, QmlWeb.QMLProperty.ReasonInit, _item5, this.model.$context);\n          modelData[roleName] = roleData;\n        }\n        _item5.$properties.model.set(modelData, QmlWeb.QMLProperty.ReasonInit, _item5, this.model.$context);\n      }\n    }\n  }, {\n    key: \"$_onRowsInserted\",\n    value: function $_onRowsInserted(startIndex, endIndex) {\n      this.$insertChildren(startIndex, endIndex);\n      this.count = this.$items.length;\n    }\n  }, {\n    key: \"$_onRowsMoved\",\n    value: function $_onRowsMoved(sourceStartIndex, sourceEndIndex, destinationIndex) {\n      var vals = this.$items.splice(sourceStartIndex, sourceEndIndex - sourceStartIndex);\n      for (var i = 0; i < vals.length; i++) {\n        this.$items.splice(destinationIndex + i, 0, vals[i]);\n      }\n      var smallestChangedIndex = sourceStartIndex < destinationIndex ? sourceStartIndex : destinationIndex;\n      for (var _i11 = smallestChangedIndex; _i11 < this.$items.length; _i11++) {\n        this.$items[_i11].index = _i11;\n      }\n    }\n  }, {\n    key: \"$_onRowsRemoved\",\n    value: function $_onRowsRemoved(startIndex, endIndex) {\n      this.$removeChildren(startIndex, endIndex);\n      for (var i = startIndex; i < this.$items.length; i++) {\n        this.$items[i].index = i;\n      }\n      this.count = this.$items.length;\n    }\n  }, {\n    key: \"$_onModelReset\",\n    value: function $_onModelReset() {\n      this.$applyModel();\n    }\n  }, {\n    key: \"$insertChildren\",\n    value: function $insertChildren(startIndex, endIndex) {\n      if (endIndex <= 0) {\n        this.count = 0;\n        return;\n      }\n\n      var QMLOperationState = QmlWeb.QMLOperationState;\n      var createProperty = QmlWeb.createProperty;\n      var model = this.$getModel();\n      var index = void 0;\n      for (index = startIndex; index < endIndex; index++) {\n        var newItem = this.delegate.$createObject(this.parent);\n        createProperty(\"int\", newItem, \"index\", { initialValue: index });\n\n        if (typeof model === \"number\" || model instanceof Array) {\n          if (typeof newItem.$properties.modelData === \"undefined\") {\n            createProperty(\"variant\", newItem, \"modelData\");\n          }\n          var value = model instanceof Array ? model[index] : typeof model === \"number\" ? index : \"undefined\";\n          newItem.$properties.modelData.set(value, QmlWeb.QMLProperty.ReasonInit, newItem, model.$context);\n        } else {\n          // QML exposes a \"model\" property in the scope that contains all role\n          // data.\n          var modelData = {};\n          for (var i = 0; i < model.roleNames.length; i++) {\n            var roleName = model.roleNames[i];\n            if (typeof newItem.$properties[roleName] === \"undefined\") {\n              createProperty(\"variant\", newItem, roleName);\n            }\n            var roleData = model.data(index, roleName);\n            modelData[roleName] = roleData;\n            newItem.$properties[roleName].set(roleData, QmlWeb.QMLProperty.ReasonInit, newItem, this.model.$context);\n          }\n          if (typeof newItem.$properties.model === \"undefined\") {\n            createProperty(\"variant\", newItem, \"model\");\n          }\n          newItem.$properties.model.set(modelData, QmlWeb.QMLProperty.ReasonInit, newItem, this.model.$context);\n        }\n\n        this.$items.splice(index, 0, newItem);\n\n        // parent must be set after the roles have been added to newItem scope in\n        // case we are outside of QMLOperationState.Init and parentChanged has\n        // any side effects that result in those roleNames being referenced.\n        newItem.parent = this.parent;\n\n        // TODO debug this. Without check to Init, Completed sometimes called\n        // twice.. But is this check correct?\n        if (QmlWeb.engine.operationState !== QMLOperationState.Init && QmlWeb.engine.operationState !== QMLOperationState.Idle) {\n          // We don't call those on first creation, as they will be called\n          // by the regular creation-procedures at the right time.\n          this.$callOnCompleted(newItem);\n        }\n      }\n      if (QmlWeb.engine.operationState !== QMLOperationState.Init) {\n        // We don't call those on first creation, as they will be called\n        // by the regular creation-procedures at the right time.\n        QmlWeb.engine.$initializePropertyBindings();\n      }\n\n      if (index > 0) {\n        this._container().childrenChanged();\n      }\n\n      for (var _i12 = endIndex; _i12 < this.$items.length; _i12++) {\n        this.$items[_i12].index = _i12;\n      }\n    }\n  }, {\n    key: \"$removeChildren\",\n    value: function $removeChildren(startIndex, endIndex) {\n      var removed = this.$items.splice(startIndex, endIndex - startIndex);\n      for (var index in removed) {\n        removed[index].$delete();\n        this.$removeChildProperties(removed[index]);\n      }\n    }\n  }, {\n    key: \"$removeChildProperties\",\n    value: function $removeChildProperties(child) {\n      var signals = QmlWeb.engine.completedSignals;\n      signals.splice(signals.indexOf(child.Component.completed), 1);\n      for (var i = 0; i < child.children.length; i++) {\n        this.$removeChildProperties(child.children[i]);\n      }\n    }\n  }]);\n\n  return QtQuick_Repeater;\n}(QtQuick_Item);\n\nQtQuick_Repeater.properties = {\n  delegate: \"Component\",\n  model: { type: \"variant\", initialValue: 0 },\n  count: \"int\"\n};\nQtQuick_Repeater.signals = {\n  _childrenInserted: []\n};\nQtQuick_Repeater.defaultProperty = \"delegate\";\n\nQmlWeb.registerQmlType(QtQuick_Repeater);\n\n// eslint-disable-next-line no-undef\n\nvar QtQuick_GridView = function (_QtQuick_Repeater) {\n  _inherits(QtQuick_GridView, _QtQuick_Repeater);\n\n  function QtQuick_GridView(meta) {\n    _classCallCheck(this, QtQuick_GridView);\n\n    var _this114 = _possibleConstructorReturn(this, (QtQuick_GridView.__proto__ || Object.getPrototypeOf(QtQuick_GridView)).call(this, meta));\n\n    _this114.modelChanged.connect(_this114, _this114.$styleChanged);\n    _this114.delegateChanged.connect(_this114, _this114.$styleChanged);\n    _this114._childrenInserted.connect(_this114, _this114.$applyStyleOnItem);\n    _this114.enabledChanged.connect(_this114, _this114.$enabledChanged);\n    _this114.currentIndexChanged.connect(_this114, _this114.$currentIndexChanged);\n    _this114.highlightFollowsCurrentItemChanged.connect(_this114, _this114.$highlightFollowsCurrentItemChanged);\n\n    _this114.dom.style.pointerEvents = \"all\";\n    _this114.dom.style.overflow = \"hidden\";\n    _this114.dom.style.whiteSpace = \"nowrap\";\n    _this114.dom.style.display = \"flex\";\n    _this114.dom.style.flexWrap = \"wrap\";\n\n    var bg = _this114.impl = document.createElement(\"div\");\n    bg.style.pointerEvents = \"none\";\n    bg.style.position = \"absolute\";\n    bg.style.left = bg.style.right = bg.style.top = bg.style.bottom = \"0px\";\n    bg.style.background = \"none\";\n    _this114.dom.appendChild(bg);\n\n    _this114.isDragging = false;\n    _this114.mouseIsDown = false;\n    _this114.curSX = 0;\n    _this114.curSY = 0;\n    _this114.dom.addEventListener(\"mousedown\", function (e) {\n      e.stopPropagation();\n      e.preventDefault();\n      _this114.mouseIsDown = true;\n      _this114.curSX = e.pageX;\n      _this114.curSY = e.pageY;\n\n      _this114.dom.classList.add(\"unselectable\");\n    });\n    _this114.dom.addEventListener(\"mouseup\", function (e) {\n      e.stopPropagation();\n      e.preventDefault();\n      setTimeout(function () {\n        _this114.$onAllMouseEvent();\n      }, 100);\n      _this114.isDragging = false;\n      _this114.mouseIsDown = false;\n      _this114.dom.classList.remove(\"unselectable\");\n      _this114.$contentXYChanged();\n    });\n    _this114.dom.addEventListener(\"mouseleave\", function (e) {\n      e.stopPropagation();\n      e.preventDefault();\n      setTimeout(function () {\n        _this114.$onAllMouseEvent();\n      }, 100);\n      _this114.isDragging = false;\n      _this114.mouseIsDown = false;\n      _this114.dom.classList.remove(\"unselectable\");\n      _this114.$contentXYChanged();\n    });\n    _this114.dom.addEventListener(\"mousemove\", function (e) {\n      e.stopPropagation();\n      e.preventDefault();\n      if (_this114.mouseIsDown && _this114.enabled) {\n        _this114.$offAllMouseEvent();\n        _this114.isDragging = true;\n        _this114.dom.scrollBy(_this114.flow === GridView.FlowTopToBottom ? _this114.curSX - e.pageX : 0, _this114.flow === GridView.FlowLeftToRight ? _this114.curSY - e.pageY : 0);\n\n        _this114.$calcContentXY(_this114.curSX - e.pageX, _this114.curSY - e.pageY);\n        _this114.curSX = e.pageX;\n        _this114.curSY = e.pageY;\n      }\n    });\n\n    _this114.dom.addEventListener(\"wheel\", function (e) {\n      e.stopPropagation();\n      e.preventDefault();\n      _this114.$calcContentXY(e.deltaX, e.deltaY);\n    });\n    _this114.dom.addEventListener(\"scroll\", function (e) {\n      e.stopPropagation();\n      e.preventDefault();\n    });\n    _this114.modelNotReady = false;\n\n    _this114.Component.completed.connect(_this114, _this114.Component$onCompleted);\n\n    _this114.contentHeightChanged.connect(_this114, _this114.$contentHeightChanged);\n    _this114.contentWidthChanged.connect(_this114, _this114.$contentWidthChanged);\n    _this114.contentXChanged.connect(_this114, _this114.$contentXChanged);\n    _this114.contentYChanged.connect(_this114, _this114.$contentYChanged);\n    _this114.cellWidthChanged.connect(_this114, _this114.$cellWidthChanged);\n    _this114.cellHeightChanged.connect(_this114, _this114.$cellHeightChanged);\n    _this114.flowChanged.connect(_this114, _this114.$flowChanged);\n\n    return _this114;\n  }\n\n  _createClass(QtQuick_GridView, [{\n    key: \"_container\",\n    value: function _container() {\n      return this;\n    }\n  }, {\n    key: \"Component$onCompleted\",\n    value: function Component$onCompleted() {\n      this.completed();\n    }\n  }, {\n    key: \"$flowChanged\",\n    value: function $flowChanged() {\n      if (this.flow === GridView.FlowLeftToRight) {\n        this.dom.style.flexDirection = \"row\";\n      } else {\n        this.dom.style.flexDirection = \"column\";\n      }\n    }\n  }, {\n    key: \"$cellWidthChanged\",\n    value: function $cellWidthChanged() {\n      this.$styleChanged();\n    }\n  }, {\n    key: \"$cellHeightChanged\",\n    value: function $cellHeightChanged() {\n      this.$styleChanged();\n    }\n  }, {\n    key: \"$calcContentXY\",\n    value: function $calcContentXY(deltaX, deltaY) {\n      if (this.enabled) {\n        var el = null;\n\n        for (var i = 0; i < this.$items.length; i++) {\n          var x1 = this.$items[i].dom.offsetLeft - parseFloat(this.$items[i].dom.style.marginLeft.replace('px', '').replace('%', ''));\n          var y1 = this.$items[i].dom.offsetTop - parseFloat(this.$items[i].dom.style.marginTop.replace('px', '').replace('%', ''));\n          var x2 = this.$items[i].dom.offsetLeft + this.$items[i].width;\n          var y2 = this.$items[i].dom.offsetTop + this.$items[i].height;\n          if (!el && this.dom.scrollLeft >= x1 && this.dom.scrollLeft < x2 && this.dom.scrollTop >= y1 && this.dom.scrollTop < y2) {\n            el = this.$items[i];\n\n            if (this.snapMode === GridView.SnapOneRow) {\n              if ((this.flow === GridView.FlowTopToBottom && deltaX < 0 || this.flow === GridView.FlowLeftToRight && deltaY < 0) && i - 1 >= 0) {\n                el = this.$items[i - 1];\n              }\n              if ((this.flow === GridView.FlowTopToBottom && deltaX > 0 || this.flow === GridView.FlowLeftToRight && deltaY > 0) && i + 1 < this.$items.length) {\n                el = this.$items[i + 1];\n              }\n            }\n          }\n        }\n\n        var p = this.$firstParentForWheel();\n        if (this.snapMode === GridView.NoSnap || el === null) {\n          var limitH = Math.max(this.dom.clientHeight, this.dom.scrollHeight, this.dom.offsetHeight);\n          var limitW = Math.max(this.dom.clientWidth, this.dom.scrollWidth, this.dom.offsetWidth);\n\n          if (this.flow === GridView.FlowTopToBottom) {\n            if (this.contentX + deltaX == this.contentX) {\n              if (p) {\n                if (this.mouseIsDown) p.enabled = true;\n                p.$calcContentXY(deltaX, deltaY);\n              }\n            } else if (this.contentX + deltaX > limitW - this.width) {\n              this.contentX = limitW - this.width;\n              if (p) {\n                if (this.mouseIsDown) p.enabled = true;\n                p.$calcContentXY(deltaX, deltaY);\n              }\n            } else if (this.contentX + deltaX < 0) {\n              this.contentX = 0;\n              if (p) {\n                if (this.mouseIsDown) p.enabled = true;\n                p.$calcContentXY(deltaX, deltaY);\n              }\n            } else this.contentX += deltaX;\n          } else {\n            if (this.contentY + deltaY == this.contentY) {\n              if (p) {\n                if (this.mouseIsDown) p.enabled = true;\n                p.$calcContentXY(deltaX, deltaY);\n              }\n            } else if (this.contentY + deltaY > limitH - this.height) {\n              this.contentY = limitH - this.height;\n              if (p) {\n                if (this.mouseIsDown) p.enabled = true;\n                p.$calcContentXY(deltaX, deltaY);\n              }\n            } else if (this.contentY + deltaY < 0) {\n              this.contentY = 0;\n              if (p) {\n                if (this.mouseIsDown) p.enabled = true;\n                p.$calcContentXY(deltaX, deltaY);\n              }\n            } else this.contentY += deltaY;\n          }\n        } else {\n          if (this.flow === GridView.FlowTopToBottom) {\n            if (this.contentX != el.dom.offsetLeft) {\n              this.contentX = el.dom.offsetLeft;\n            } else {\n              if (p) {\n                if (this.mouseIsDown) p.enabled = true;\n                p.$calcContentXY(deltaX, deltaY);\n              }\n            }\n          } else {\n            if (this.contentY != el.dom.offsetTop) {\n              this.contentY = el.dom.offsetTop;\n            } else {\n              if (p) {\n                if (this.mouseIsDown) p.enabled = true;\n                p.$calcContentXY(deltaX, deltaY);\n              }\n            }\n          }\n        }\n      }\n    }\n  }, {\n    key: \"$contentHeightChanged\",\n    value: function $contentHeightChanged() {\n      if (this.contentHeight === 0) {\n        this.impl.style.height = \"100%\";\n        this.impl.style.bottom = \"0\";\n      } else {\n        this.impl.style.height = this.contentHeight + \"px\";\n        this.impl.style.bottom = this.contentHeight + \"px\";\n      }\n    }\n  }, {\n    key: \"$contentWidthChanged\",\n    value: function $contentWidthChanged() {\n      if (this.contentWidth === 0) {\n        this.impl.style.width = \"100%\";\n        this.impl.style.right = \"0\";\n      } else {\n        this.impl.style.width = this.contentWidth + \"px\";\n        this.impl.style.right = this.contentWidth + \"px\";\n      }\n    }\n  }, {\n    key: \"$contentXYChanged\",\n    value: function $contentXYChanged() {\n      switch (this.snapMode) {\n        case GridView.NoSnap:\n          if (!this.mouseIsDown) this.dom.scrollTo(this.contentX, this.contentY);\n          break;\n        case GridView.SnapToRow:\n          if (!this.mouseIsDown) this.dom.scrollTo({ left: this.contentX, top: this.contentY, behavior: \"smooth\" });\n          break;\n        case GridView.SnapOneRow:\n          if (!this.mouseIsDown) this.dom.scrollTo({ left: this.contentX, top: this.contentY, behavior: \"smooth\" });\n          break;\n      }\n    }\n  }, {\n    key: \"$contentXChanged\",\n    value: function $contentXChanged() {\n      this.$contentXYChanged();\n    }\n  }, {\n    key: \"$contentYChanged\",\n    value: function $contentYChanged() {\n      this.$contentXYChanged();\n    }\n  }, {\n    key: \"positionViewAtBeginning\",\n    value: function positionViewAtBeginning() {\n      this.positionViewAtIndex(0, this.GridView.Beginning);\n    }\n  }, {\n    key: \"positionViewAtEnd\",\n    value: function positionViewAtEnd() {\n      this.positionViewAtIndex(this.count - 1, this.GridView.End);\n    }\n  }, {\n    key: \"positionViewAtIndex\",\n    value: function positionViewAtIndex(index, mode) {\n      var item = this.itemAt(index);\n      var offsetTop = item.dom.offsetTop ? item.dom.offsetTop : this.contentY;\n      var offsetleft = item.dom.offsetleft ? item.dom.offsetleft : this.contentX;\n      var clientWidth = item.dom.clientWidth;\n      var clientHeight = item.dom.clientHeight;\n\n      var parentWidth = this.dom.clientWidth;\n      var parentHeight = this.dom.clientHeight;\n\n      switch (mode) {\n        case this.GridView.Beginning:\n          if (this.flow === GridView.FlowLeftToRight) {\n            this.contentX = offsetleft;\n          } else {\n            this.contentY = offsetTop;\n          }\n          break;\n        case this.GridView.End:\n          if (this.flow === GridView.FlowLeftToRight) {\n            this.contentX = offsetleft - parentWidth + clientWidth;\n          } else {\n            this.contentY = offsetTop - parentHeight + clientHeight;\n          }\n          break;\n        case this.GridView.Center:\n          if (this.flow === GridView.FlowLeftToRight) {\n            this.contentX = offsetleft - parentWidth / 2 + clientWidth;\n          } else {\n            this.contentY = offsetTop - parentHeight / 2 + clientHeight;\n          }\n          break;\n      }\n      this.contentX = this.dom.scrollLeft;\n      this.contentY = this.dom.scrollTop;\n    }\n  }, {\n    key: \"$enabledChanged\",\n    value: function $enabledChanged() {\n      this.$styleChanged();\n    }\n  }, {\n    key: \"$highlightFollowsCurrentItemChanged\",\n    value: function $highlightFollowsCurrentItemChanged() {\n      this.$currentIndexChanged();\n    }\n  }, {\n    key: \"$currentIndexChanged\",\n    value: function $currentIndexChanged() {\n      var _this115 = this;\n\n      if (this.currentIndex > -1) {\n        if (this.count > 0) {\n          this.currentItem = this.itemAt(this.currentIndex);\n          if (this.highlightFollowsCurrentItem && this.currentItem) {\n\n            var waitInterval = setInterval(function () {\n              var state = document.readyState;\n              if (state === 'interactive' || state === 'complete') {\n                _this115.currentItem.dom.scrollIntoView({ block: \"start\", behavior: \"smooth\" });\n                clearInterval(waitInterval);\n              }\n            }, 100);\n          }\n        } else {\n          this.modelNotReady = true;\n        }\n      } else {\n        this.currentItem = null;\n      }\n    }\n  }, {\n    key: \"$applyModel\",\n    value: function $applyModel() {\n      if (!this.delegate) {\n        return;\n      }\n      var model = this.$getModel();\n      if (model instanceof QmlWeb.JSItemModel) {\n        var flags = QmlWeb.Signal.UniqueConnection;\n        model.dataChanged.connect(this, this.$_onModelDataChanged, flags);\n        model.rowsInserted.connect(this, this.$_onRowsInserted, flags);\n        model.rowsMoved.connect(this, this.$_onRowsMoved, flags);\n        model.rowsRemoved.connect(this, this.$_onRowsRemoved, flags);\n        model.modelReset.connect(this, this.$_onModelReset, flags);\n\n        this.$removeChildren(0, this.$items.length);\n        this.$insertChildren(0, model.rowCount());\n      } else if (typeof model === \"number\") {\n        if (this.$items.length > model) {\n          // have more than we need\n          this.$removeChildren(model, this.$items.length);\n        } else {\n          // need more\n          this.$insertChildren(this.$items.length, model);\n        }\n      } else if (model instanceof Array) {\n        this.$removeChildren(0, this.$items.length);\n        this.$insertChildren(0, model.length);\n      }\n      this.count = this.$items.length;\n\n      if (this.modelNotReady) {\n        this.currentIndexChanged();\n        this.modelNotReady = false;\n      }\n    }\n  }, {\n    key: \"$insertChildren\",\n    value: function $insertChildren(startIndex, endIndex) {\n      if (endIndex <= 0) {\n        this.count = 0;\n        return;\n      }\n\n      var QMLOperationState = QmlWeb.QMLOperationState;\n      var createProperty = QmlWeb.createProperty;\n      var model = this.$getModel();\n      var index = void 0;\n      for (index = startIndex; index < endIndex; index++) {\n        var newItem = this.delegate.$createObject(this.parent);\n        createProperty(\"int\", newItem, \"index\", { initialValue: index });\n\n        if (typeof model === \"number\" || model instanceof Array) {\n          if (typeof newItem.$properties.modelData === \"undefined\") {\n            createProperty(\"variant\", newItem, \"modelData\");\n          }\n          var value = model instanceof Array ? model[index] : typeof model === \"number\" ? index : \"undefined\";\n          newItem.$properties.modelData.set(value, QmlWeb.QMLProperty.ReasonInit, newItem, model.$context);\n        } else {\n          // QML exposes a \"model\" property in the scope that contains all role\n          // data.\n          var modelData = {};\n          for (var i = 0; i < model.roleNames.length; i++) {\n            var roleName = model.roleNames[i];\n            if (typeof newItem.$properties[roleName] === \"undefined\") {\n              createProperty(\"variant\", newItem, roleName);\n            }\n            var roleData = model.data(index, roleName);\n            modelData[roleName] = roleData;\n            newItem.$properties[roleName].set(roleData, QmlWeb.QMLProperty.ReasonInit, newItem, this.model.$context);\n          }\n          if (typeof newItem.$properties.model === \"undefined\") {\n            createProperty(\"variant\", newItem, \"model\");\n          }\n          newItem.$properties.model.set(modelData, QmlWeb.QMLProperty.ReasonInit, newItem, this.model.$context);\n        }\n\n        this.$items.splice(index, 0, newItem);\n\n        // parent must be set after the roles have been added to newItem scope in\n        // case we are outside of QMLOperationState.Init and parentChanged has\n        // any side effects that result in those roleNames being referenced.\n        newItem.parent = this;\n\n        // TODO debug this. Without check to Init, Completed sometimes called\n        // twice.. But is this check correct?\n        if (QmlWeb.engine.operationState !== QMLOperationState.Init && QmlWeb.engine.operationState !== QMLOperationState.Idle) {\n          // We don't call those on first creation, as they will be called\n          // by the regular creation-procedures at the right time.\n          this.$callOnCompleted(newItem);\n        }\n      }\n      if (QmlWeb.engine.operationState !== QMLOperationState.Init) {\n        // We don't call those on first creation, as they will be called\n        // by the regular creation-procedures at the right time.\n        QmlWeb.engine.$initializePropertyBindings();\n      }\n\n      if (index > 0) {\n        this._container().childrenChanged();\n      }\n\n      for (var _i13 = endIndex; _i13 < this.$items.length; _i13++) {\n        this.$items[_i13].index = _i13;\n      }\n    }\n  }, {\n    key: \"$applyStyleOnItem\",\n    value: function $applyStyleOnItem($item) {\n      $item.dom.style[\"margin\"] = '0';\n      $item.dom.style[\"position\"] = 'relative';\n      $item.dom.style[\"width\"] = this.cellWidth + \"px\";\n      $item.dom.style[\"height\"] = this.cellHeight + \"px\";\n    }\n  }, {\n    key: \"$styleChanged\",\n    value: function $styleChanged() {\n      this.dom.style.overflow = \"hidden\";\n\n      if (this.enabled) {\n        if (this.flow === GridView.FlowLeftToRight) {\n          this.dom.style.overflowX = \"auto\";\n        } else {\n          this.dom.style.overflowY = \"auto\";\n        }\n      }\n\n      for (var i = 0; i < this.$items.length; ++i) {\n        this.$applyStyleOnItem(this.$items[i]);\n      }\n    }\n  }]);\n\n  return QtQuick_GridView;\n}(QtQuick_Repeater);\n\nQtQuick_GridView.enums = {\n  GridView: {\n    NoSnap: 0,\n    SnapToRow: 1,\n    SnapOneRow: 2,\n    Beginning: 0,\n    Center: 1,\n    End: 2,\n    Visible: 3,\n    Contain: 4,\n    SnapPosition: 5,\n    FlowLeftToRight: 0,\n    FlowTopToBottom: 1\n  }\n};\nQtQuick_GridView.properties = {\n  currentIndex: { type: \"int\", initialValue: -1 },\n  currentItem: { type: \"var\", initialValue: null },\n  highlightFollowsCurrentItem: { type: \"bool\", initialValue: true },\n  snapMode: { type: \"enum\", initialValue: 0 },\n  flow: { type: \"enum\", initialValue: 0 },\n  contentHeight: \"real\",\n  contentWidth: \"real\",\n  contentX: \"real\",\n  contentY: \"real\",\n\n  cellWidth: \"real\",\n  cellHeight: \"real\"\n};\nQtQuick_GridView.signals = {\n  completed: []\n};\n\nQmlWeb.registerQmlType(QtQuick_GridView);\n\n// eslint-disable-next-line no-undef\n\nvar QtQuick_ListView = function (_QtQuick_Repeater2) {\n  _inherits(QtQuick_ListView, _QtQuick_Repeater2);\n\n  function QtQuick_ListView(meta) {\n    _classCallCheck(this, QtQuick_ListView);\n\n    var _this116 = _possibleConstructorReturn(this, (QtQuick_ListView.__proto__ || Object.getPrototypeOf(QtQuick_ListView)).call(this, meta));\n\n    _this116.modelChanged.connect(_this116, _this116.$styleChanged);\n    _this116.delegateChanged.connect(_this116, _this116.$styleChanged);\n    _this116.orientationChanged.connect(_this116, _this116.$styleChanged);\n    _this116.spacingChanged.connect(_this116, _this116.$styleChanged);\n    _this116._childrenInserted.connect(_this116, _this116.$applyStyleOnItem);\n    _this116.enabledChanged.connect(_this116, _this116.$enabledChanged);\n    _this116.currentIndexChanged.connect(_this116, _this116.$currentIndexChanged);\n    _this116.highlightFollowsCurrentItemChanged.connect(_this116, _this116.$highlightFollowsCurrentItemChanged);\n\n    _this116.dom.style.pointerEvents = \"all\";\n    _this116.dom.style.overflow = \"hidden\";\n    _this116.dom.style.whiteSpace = \"nowrap\";\n\n    var bg = _this116.impl = document.createElement(\"div\");\n    bg.style.pointerEvents = \"none\";\n    bg.style.position = \"absolute\";\n    bg.style.left = bg.style.right = bg.style.top = bg.style.bottom = \"0px\";\n    bg.style.background = \"none\";\n    _this116.dom.appendChild(bg);\n\n    _this116.isDragging = false;\n    _this116.mouseIsDown = false;\n    _this116.curSX = 0;\n    _this116.curSY = 0;\n    _this116.dom.addEventListener(\"mousedown\", function (e) {\n      e.stopPropagation();\n      e.preventDefault();\n      _this116.mouseIsDown = true;\n      _this116.curSX = e.pageX;\n      _this116.curSY = e.pageY;\n\n      _this116.dom.classList.add(\"unselectable\");\n    });\n    _this116.dom.addEventListener(\"mouseup\", function (e) {\n      e.stopPropagation();\n      e.preventDefault();\n      setTimeout(function () {\n        _this116.$onAllMouseEvent();\n      }, 100);\n      _this116.isDragging = false;\n      _this116.mouseIsDown = false;\n      _this116.dom.classList.remove(\"unselectable\");\n      _this116.$contentXYChanged();\n    });\n    _this116.dom.addEventListener(\"mouseleave\", function (e) {\n      e.stopPropagation();\n      e.preventDefault();\n      setTimeout(function () {\n        _this116.$onAllMouseEvent();\n      }, 100);\n      _this116.isDragging = false;\n      _this116.mouseIsDown = false;\n      _this116.dom.classList.remove(\"unselectable\");\n      _this116.$contentXYChanged();\n    });\n    _this116.dom.addEventListener(\"mousemove\", function (e) {\n      e.stopPropagation();\n      e.preventDefault();\n      if (_this116.mouseIsDown && _this116.enabled) {\n        _this116.$offAllMouseEvent();\n        _this116.isDragging = true;\n        _this116.dom.scrollBy(_this116.orientation === Qt.Horizontal ? _this116.curSX - e.pageX : 0, _this116.orientation === Qt.Vertical ? _this116.curSY - e.pageY : 0);\n\n        _this116.$calcContentXY(_this116.curSX - e.pageX, _this116.curSY - e.pageY);\n        _this116.curSX = e.pageX;\n        _this116.curSY = e.pageY;\n      }\n    });\n\n    _this116.dom.addEventListener(\"wheel\", function (e) {\n      e.stopPropagation();\n      e.preventDefault();\n      _this116.$calcContentXY(e.deltaX, e.deltaY);\n    });\n    _this116.dom.addEventListener(\"scroll\", function (e) {\n      e.stopPropagation();\n      e.preventDefault();\n    });\n    _this116.modelNotReady = false;\n\n    _this116.Component.completed.connect(_this116, _this116.Component$onCompleted);\n\n    _this116.contentHeightChanged.connect(_this116, _this116.$contentHeightChanged);\n    _this116.contentWidthChanged.connect(_this116, _this116.$contentWidthChanged);\n    _this116.contentXChanged.connect(_this116, _this116.$contentXChanged);\n    _this116.contentYChanged.connect(_this116, _this116.$contentYChanged);\n\n    return _this116;\n  }\n\n  _createClass(QtQuick_ListView, [{\n    key: \"_container\",\n    value: function _container() {\n      return this;\n    }\n  }, {\n    key: \"Component$onCompleted\",\n    value: function Component$onCompleted() {\n      this.completed();\n    }\n  }, {\n    key: \"$calcContentXY\",\n    value: function $calcContentXY(deltaX, deltaY) {\n      if (this.enabled) {\n\n        var el = null;\n\n        //let deltaX = e.deltaX ? e.deltaX : this.curSX - e.pageX;\n        //let deltaY = e.deltaY ? e.deltaY : this.curSY - e.pageY;\n\n        for (var i = 0; i < this.$items.length; i++) {\n          var x1 = this.$items[i].dom.offsetLeft - parseFloat(this.$items[i].dom.style.marginLeft.replace('px', '').replace('%', ''));\n          var y1 = this.$items[i].dom.offsetTop - parseFloat(this.$items[i].dom.style.marginTop.replace('px', '').replace('%', ''));\n          var x2 = this.$items[i].dom.offsetLeft + this.$items[i].width;\n          var y2 = this.$items[i].dom.offsetTop + this.$items[i].height;\n          if (!el && this.dom.scrollLeft >= x1 && this.dom.scrollLeft < x2 && this.dom.scrollTop >= y1 && this.dom.scrollTop < y2) {\n            el = this.$items[i];\n\n            if (this.snapMode === ListView.SnapOneItem) {\n              if ((this.orientation === Qt.Horizontal && deltaX < 0 || this.orientation === Qt.Vertical && deltaY < 0) && i - 1 >= 0) {\n                el = this.$items[i - 1];\n              }\n              if ((this.orientation === Qt.Horizontal && deltaX > 0 || this.orientation === Qt.Vertical && deltaY > 0) && i + 1 < this.$items.length) {\n                el = this.$items[i + 1];\n              }\n            }\n          }\n        }\n\n        var p = this.$firstParentForWheel();\n        if (this.snapMode === ListView.NoSnap || el === null) {\n          var limitH = Math.max(this.dom.clientHeight, this.dom.scrollHeight, this.dom.offsetHeight);\n          var limitW = Math.max(this.dom.clientWidth, this.dom.scrollWidth, this.dom.offsetWidth);\n\n          if (this.orientation === Qt.Horizontal) {\n            if (this.contentX + deltaX == this.contentX) {\n              if (p) {\n                if (this.mouseIsDown) p.enabled = true;\n                p.$calcContentXY(deltaX, deltaY);\n              }\n            } else if (this.contentX + deltaX > limitW - this.width) {\n              this.contentX = limitW - this.width;\n              if (p) {\n                if (this.mouseIsDown) p.enabled = true;\n                p.$calcContentXY(deltaX, deltaY);\n              }\n            } else if (this.contentX + deltaX < 0) {\n              this.contentX = 0;\n              if (p) {\n                if (this.mouseIsDown) p.enabled = true;\n                p.$calcContentXY(deltaX, deltaY);\n              }\n            } else this.contentX += deltaX;\n          } else {\n            if (this.contentY + deltaY == this.contentY) {\n              if (p) {\n                if (this.mouseIsDown) p.enabled = true;\n                p.$calcContentXY(deltaX, deltaY);\n              }\n            } else if (this.contentY + deltaY > limitH - this.height) {\n              this.contentY = limitH - this.height;\n              if (p) {\n                if (this.mouseIsDown) p.enabled = true;\n                p.$calcContentXY(deltaX, deltaY);\n              }\n            } else if (this.contentY + deltaY < 0) {\n              this.contentY = 0;\n              if (p) {\n                if (this.mouseIsDown) p.enabled = true;\n                p.$calcContentXY(deltaX, deltaY);\n              }\n            } else this.contentY += deltaY;\n          }\n        } else {\n          if (this.orientation === Qt.Horizontal) {\n            if (this.contentX != el.dom.offsetLeft) {\n              this.contentX = el.dom.offsetLeft;\n            } else {\n              if (p) {\n                if (this.mouseIsDown) p.enabled = true;\n                p.$calcContentXY(deltaX, deltaY);\n              }\n            }\n          } else {\n            if (this.contentY != el.dom.offsetTop) {\n              this.contentY = el.dom.offsetTop;\n            } else {\n              if (p) {\n                if (this.mouseIsDown) p.enabled = true;\n                p.$calcContentXY(deltaX, deltaY);\n              }\n            }\n          }\n        }\n      }\n    }\n  }, {\n    key: \"$contentHeightChanged\",\n    value: function $contentHeightChanged() {\n      if (this.contentHeight === 0) {\n        this.impl.style.height = \"100%\";\n        this.impl.style.bottom = \"0\";\n      } else {\n        this.impl.style.height = this.contentHeight + \"px\";\n        this.impl.style.bottom = this.contentHeight + \"px\";\n      }\n    }\n  }, {\n    key: \"$contentWidthChanged\",\n    value: function $contentWidthChanged() {\n      if (this.contentWidth === 0) {\n        this.impl.style.width = \"100%\";\n        this.impl.style.right = \"0\";\n      } else {\n        this.impl.style.width = this.contentWidth + \"px\";\n        this.impl.style.right = this.contentWidth + \"px\";\n      }\n    }\n  }, {\n    key: \"$contentXYChanged\",\n    value: function $contentXYChanged() {\n      switch (this.snapMode) {\n        case ListView.NoSnap:\n          if (!this.mouseIsDown) this.dom.scrollTo(this.contentX, this.contentY);\n          break;\n        case ListView.SnapToItem:\n          if (!this.mouseIsDown) this.dom.scrollTo({ left: this.contentX, top: this.contentY, behavior: \"smooth\" });\n          break;\n        case ListView.SnapOneItem:\n          if (!this.mouseIsDown) this.dom.scrollTo({ left: this.contentX, top: this.contentY, behavior: \"smooth\" });\n          break;\n      }\n    }\n  }, {\n    key: \"$contentXChanged\",\n    value: function $contentXChanged() {\n      this.$contentXYChanged();\n    }\n  }, {\n    key: \"$contentYChanged\",\n    value: function $contentYChanged() {\n      this.$contentXYChanged();\n    }\n  }, {\n    key: \"positionViewAtBeginning\",\n    value: function positionViewAtBeginning() {\n      this.positionViewAtIndex(0, this.ListView.Beginning);\n    }\n  }, {\n    key: \"positionViewAtEnd\",\n    value: function positionViewAtEnd() {\n      this.positionViewAtIndex(this.count - 1, this.ListView.End);\n    }\n  }, {\n    key: \"positionViewAtIndex\",\n    value: function positionViewAtIndex(index, mode) {\n      var item = this.itemAt(index);\n      var offsetTop = item.dom.offsetTop ? item.dom.offsetTop : this.contentY;\n      var offsetleft = item.dom.offsetleft ? item.dom.offsetleft : this.contentX;\n      var clientWidth = item.dom.clientWidth;\n      var clientHeight = item.dom.clientHeight;\n\n      var parentWidth = this.dom.clientWidth;\n      var parentHeight = this.dom.clientHeight;\n\n      switch (mode) {\n        case this.ListView.Beginning:\n          if (this.orientation === Qt.Horizontal) {\n            this.contentX = offsetleft;\n          } else {\n            this.contentY = offsetTop;\n          }\n          break;\n        case this.ListView.End:\n          if (this.orientation === Qt.Horizontal) {\n            this.contentX = offsetleft - parentWidth + clientWidth;\n          } else {\n            this.contentY = offsetTop - parentHeight + clientHeight;\n          }\n          break;\n        case this.ListView.Center:\n          if (this.orientation === Qt.Horizontal) {\n            this.contentX = offsetleft - parentWidth / 2 + clientWidth;\n          } else {\n            this.contentY = offsetTop - parentHeight / 2 + clientHeight;\n          }\n          break;\n      }\n      this.contentX = this.dom.scrollLeft;\n      this.contentY = this.dom.scrollTop;\n    }\n  }, {\n    key: \"$enabledChanged\",\n    value: function $enabledChanged() {\n      this.$styleChanged();\n    }\n  }, {\n    key: \"$highlightFollowsCurrentItemChanged\",\n    value: function $highlightFollowsCurrentItemChanged() {\n      this.$currentIndexChanged();\n    }\n  }, {\n    key: \"$currentIndexChanged\",\n    value: function $currentIndexChanged() {\n      var _this117 = this;\n\n      if (this.currentIndex > -1) {\n        if (this.count > 0) {\n          this.currentItem = this.itemAt(this.currentIndex);\n          if (this.highlightFollowsCurrentItem && this.currentItem) {\n\n            var waitInterval = setInterval(function () {\n              var state = document.readyState;\n              if (state === 'interactive' || state === 'complete') {\n                _this117.currentItem.dom.scrollIntoView({ block: \"start\", behavior: \"smooth\" });\n                clearInterval(waitInterval);\n              }\n            }, 100);\n          }\n        } else {\n          this.modelNotReady = true;\n        }\n      } else {\n        this.currentItem = null;\n      }\n    }\n  }, {\n    key: \"$applyModel\",\n    value: function $applyModel() {\n      if (!this.delegate) {\n        return;\n      }\n      var model = this.$getModel();\n      if (model instanceof QmlWeb.JSItemModel) {\n        var flags = QmlWeb.Signal.UniqueConnection;\n        model.dataChanged.connect(this, this.$_onModelDataChanged, flags);\n        model.rowsInserted.connect(this, this.$_onRowsInserted, flags);\n        model.rowsMoved.connect(this, this.$_onRowsMoved, flags);\n        model.rowsRemoved.connect(this, this.$_onRowsRemoved, flags);\n        model.modelReset.connect(this, this.$_onModelReset, flags);\n\n        this.$removeChildren(0, this.$items.length);\n        this.$insertChildren(0, model.rowCount());\n      } else if (typeof model === \"number\") {\n        if (this.$items.length > model) {\n          // have more than we need\n          this.$removeChildren(model, this.$items.length);\n        } else {\n          // need more\n          this.$insertChildren(this.$items.length, model);\n        }\n      } else if (model instanceof Array) {\n        this.$removeChildren(0, this.$items.length);\n        this.$insertChildren(0, model.length);\n      }\n      this.count = this.$items.length;\n\n      if (this.modelNotReady) {\n        this.currentIndexChanged();\n        this.modelNotReady = false;\n      }\n    }\n  }, {\n    key: \"$insertChildren\",\n    value: function $insertChildren(startIndex, endIndex) {\n      if (endIndex <= 0) {\n        this.count = 0;\n        return;\n      }\n\n      var QMLOperationState = QmlWeb.QMLOperationState;\n      var createProperty = QmlWeb.createProperty;\n      var model = this.$getModel();\n      var index = void 0;\n      for (index = startIndex; index < endIndex; index++) {\n        var newItem = this.delegate.$createObject(this.parent);\n        createProperty(\"int\", newItem, \"index\", { initialValue: index });\n\n        if (typeof model === \"number\" || model instanceof Array) {\n          if (typeof newItem.$properties.modelData === \"undefined\") {\n            createProperty(\"variant\", newItem, \"modelData\");\n          }\n          var value = model instanceof Array ? model[index] : typeof model === \"number\" ? index : \"undefined\";\n          newItem.$properties.modelData.set(value, QmlWeb.QMLProperty.ReasonInit, newItem, model.$context);\n        } else {\n          // QML exposes a \"model\" property in the scope that contains all role\n          // data.\n          var modelData = {};\n          for (var i = 0; i < model.roleNames.length; i++) {\n            var roleName = model.roleNames[i];\n            if (typeof newItem.$properties[roleName] === \"undefined\") {\n              createProperty(\"variant\", newItem, roleName);\n            }\n            var roleData = model.data(index, roleName);\n            modelData[roleName] = roleData;\n            newItem.$properties[roleName].set(roleData, QmlWeb.QMLProperty.ReasonInit, newItem, this.model.$context);\n          }\n          if (typeof newItem.$properties.model === \"undefined\") {\n            createProperty(\"variant\", newItem, \"model\");\n          }\n          newItem.$properties.model.set(modelData, QmlWeb.QMLProperty.ReasonInit, newItem, this.model.$context);\n        }\n\n        this.$items.splice(index, 0, newItem);\n\n        // parent must be set after the roles have been added to newItem scope in\n        // case we are outside of QMLOperationState.Init and parentChanged has\n        // any side effects that result in those roleNames being referenced.\n        newItem.parent = this;\n\n        // TODO debug this. Without check to Init, Completed sometimes called\n        // twice.. But is this check correct?\n        if (QmlWeb.engine.operationState !== QMLOperationState.Init && QmlWeb.engine.operationState !== QMLOperationState.Idle) {\n          // We don't call those on first creation, as they will be called\n          // by the regular creation-procedures at the right time.\n          this.$callOnCompleted(newItem);\n        }\n      }\n      if (QmlWeb.engine.operationState !== QMLOperationState.Init) {\n        // We don't call those on first creation, as they will be called\n        // by the regular creation-procedures at the right time.\n        QmlWeb.engine.$initializePropertyBindings();\n      }\n\n      if (index > 0) {\n        this._container().childrenChanged();\n      }\n\n      for (var _i14 = endIndex; _i14 < this.$items.length; _i14++) {\n        this.$items[_i14].index = _i14;\n      }\n    }\n  }, {\n    key: \"$applyStyleOnItem\",\n    value: function $applyStyleOnItem($item) {\n      var Qt = QmlWeb.Qt;\n      $item.dom.style[\"margin\"] = '0';\n      $item.dom.style[\"position\"] = 'relative';\n      //$item.dom.style.position = \"initial\";\n      if (this.orientation === Qt.Horizontal) {\n        $item.dom.style.display = \"inline-block\";\n        if ($item !== this.$items[0]) {\n          $item.dom.style[\"margin-left\"] = this.spacing + \"px\";\n        }\n      } else {\n        //$item.dom.style.display = \"block\";\n        if ($item !== this.$items[0]) {\n          $item.dom.style[\"margin-top\"] = this.spacing + \"px\";\n        }\n      }\n    }\n  }, {\n    key: \"$styleChanged\",\n    value: function $styleChanged() {\n      this.dom.style.overflow = \"hidden\";\n\n      if (this.enabled) {\n        if (this.orientation === Qt.Horizontal) {\n          this.dom.style.overflowX = \"auto\";\n        } else {\n          this.dom.style.overflowY = \"auto\";\n        }\n      }\n      for (var i = 0; i < this.$items.length; ++i) {\n        this.$applyStyleOnItem(this.$items[i]);\n      }\n    }\n  }]);\n\n  return QtQuick_ListView;\n}(QtQuick_Repeater);\n\nQtQuick_ListView.enums = {\n  ListView: {\n    Vertical: Qt.Vertical,\n    Horizontal: Qt.Horizontal,\n    NoSnap: 0,\n    SnapToItem: 1,\n    SnapOneItem: 2,\n    Beginning: 0,\n    Center: 1,\n    End: 2,\n    Visible: 3,\n    Contain: 4,\n    SnapPosition: 5\n  }\n};\nQtQuick_ListView.properties = {\n  orientation: \"enum\",\n  spacing: \"real\",\n  currentIndex: { type: \"int\", initialValue: -1 },\n  currentItem: { type: \"var\", initialValue: null },\n  highlightFollowsCurrentItem: { type: \"bool\", initialValue: true },\n  snapMode: { type: \"enum\", initialValue: 0 },\n\n  contentHeight: \"real\",\n  contentWidth: \"real\",\n  contentX: \"real\",\n  contentY: \"real\"\n};\nQtQuick_ListView.signals = {\n  completed: []\n};\n\nQmlWeb.registerQmlType(QtQuick_ListView);\n\n// eslint-disable-next-line no-undef\n\nvar QtQuick_Rotation = function (_QtQml_QtObject22) {\n  _inherits(QtQuick_Rotation, _QtQml_QtObject22);\n\n  function QtQuick_Rotation(meta) {\n    _classCallCheck(this, QtQuick_Rotation);\n\n    var _this118 = _possibleConstructorReturn(this, (QtQuick_Rotation.__proto__ || Object.getPrototypeOf(QtQuick_Rotation)).call(this, meta));\n\n    _this118.axis = new QmlWeb.QObject(_this118);\n    QmlWeb.createProperties(_this118.axis, {\n      x: \"real\",\n      y: \"real\",\n      z: { type: \"real\", initialValue: 1 }\n    });\n\n    _this118.origin = new QmlWeb.QObject(_this118);\n    QmlWeb.createProperties(_this118.origin, {\n      x: \"real\",\n      y: \"real\"\n    });\n\n    _this118.angleChanged.connect(_this118.$parent, _this118.$parent.$updateTransform);\n    _this118.axis.xChanged.connect(_this118.$parent, _this118.$parent.$updateTransform);\n    _this118.axis.yChanged.connect(_this118.$parent, _this118.$parent.$updateTransform);\n    _this118.axis.zChanged.connect(_this118.$parent, _this118.$parent.$updateTransform);\n    _this118.origin.xChanged.connect(_this118, _this118.$updateOrigin);\n    _this118.origin.yChanged.connect(_this118, _this118.$updateOrigin);\n    _this118.$parent.$updateTransform();\n    return _this118;\n  }\n\n  _createClass(QtQuick_Rotation, [{\n    key: \"$updateOrigin\",\n    value: function $updateOrigin() {\n      var style = this.$parent.dom.style;\n      style.transformOrigin = this.origin.x + \"px \" + this.origin.y + \"px\";\n      style.webkitTransformOrigin = this.origin.x + \"px \" + this.origin.y + \"px\";\n    }\n  }]);\n\n  return QtQuick_Rotation;\n}(QtQml_QtObject);\n\nQtQuick_Rotation.properties = {\n  angle: \"real\"\n};\n\nQmlWeb.registerQmlType(QtQuick_Rotation);\n\n// eslint-disable-next-line no-undef\n\nvar QtQuick_RotationAnimator = function (_QtQuick_Animator2) {\n  _inherits(QtQuick_RotationAnimator, _QtQuick_Animator2);\n\n  function QtQuick_RotationAnimator() {\n    _classCallCheck(this, QtQuick_RotationAnimator);\n\n    return _possibleConstructorReturn(this, (QtQuick_RotationAnimator.__proto__ || Object.getPrototypeOf(QtQuick_RotationAnimator)).apply(this, arguments));\n  }\n\n  return QtQuick_RotationAnimator;\n}(QtQuick_Animator);\n\nQtQuick_RotationAnimator.versions = /^2\\./;\n\nQmlWeb.registerQmlType(QtQuick_RotationAnimator);\n\n// eslint-disable-next-line no-undef\n\nvar QtQuick_Row = function (_QtQuick_Positioner4) {\n  _inherits(QtQuick_Row, _QtQuick_Positioner4);\n\n  function QtQuick_Row(meta) {\n    _classCallCheck(this, QtQuick_Row);\n\n    var _this120 = _possibleConstructorReturn(this, (QtQuick_Row.__proto__ || Object.getPrototypeOf(QtQuick_Row)).call(this, meta));\n\n    _this120.layoutDirectionChanged.connect(_this120, _this120.layoutChildren);\n    _this120.layoutChildren();\n    return _this120;\n  }\n\n  _createClass(QtQuick_Row, [{\n    key: \"layoutChildren\",\n    value: function layoutChildren() {\n      var curPos = this.padding;\n      var maxHeight = 0;\n      // When layoutDirection is RightToLeft we need oposite order\n      var i = this.layoutDirection === 1 ? this.children.length - 1 : 0;\n      var endPoint = this.layoutDirection === 1 ? -1 : this.children.length;\n      var step = this.layoutDirection === 1 ? -1 : 1;\n      for (; i !== endPoint; i += step) {\n        var child = this.children[i];\n        if (!(child.visible && child.width && child.height)) {\n          continue;\n        }\n        maxHeight = child.height > maxHeight ? child.height : maxHeight;\n\n        child.x = curPos;\n        if (this.padding > 0) child.y = this.padding;\n\n        curPos += child.width + this.spacing;\n      }\n      this.implicitHeight = maxHeight + this.padding * 2;\n      // We want no spacing at the right side\n      this.implicitWidth = curPos - this.spacing + this.padding;\n    }\n  }]);\n\n  return QtQuick_Row;\n}(QtQuick_Positioner);\n\nQtQuick_Row.properties = {\n  layoutDirection: \"enum\"\n};\n\nQmlWeb.registerQmlType(QtQuick_Row);\n\n// eslint-disable-next-line no-undef\n\nvar QtQuick_Scale = function (_QtQml_QtObject23) {\n  _inherits(QtQuick_Scale, _QtQml_QtObject23);\n\n  function QtQuick_Scale(meta) {\n    _classCallCheck(this, QtQuick_Scale);\n\n    var _this121 = _possibleConstructorReturn(this, (QtQuick_Scale.__proto__ || Object.getPrototypeOf(QtQuick_Scale)).call(this, meta));\n\n    _this121.origin = new QmlWeb.QObject(_this121);\n    QmlWeb.createProperties(_this121.origin, {\n      x: \"real\",\n      y: \"real\"\n    });\n\n    _this121.xScaleChanged.connect(_this121.$parent, _this121.$parent.$updateTransform);\n    _this121.yScaleChanged.connect(_this121.$parent, _this121.$parent.$updateTransform);\n    _this121.origin.xChanged.connect(_this121, _this121.$updateOrigin);\n    _this121.origin.yChanged.connect(_this121, _this121.$updateOrigin);\n\n    /* QML default origin is top-left, while CSS default origin is centre, so\r\n     * $updateOrigin must be called to set the initial transformOrigin. */\n    _this121.$updateOrigin();\n    return _this121;\n  }\n\n  _createClass(QtQuick_Scale, [{\n    key: \"$updateOrigin\",\n    value: function $updateOrigin() {\n      var style = this.$parent.dom.style;\n      style.transformOrigin = this.origin.x + \"px \" + this.origin.y + \"px\";\n      style.webkitTransformOrigin = this.origin.x + \"px \" + this.origin.y + \"px\";\n    }\n  }]);\n\n  return QtQuick_Scale;\n}(QtQml_QtObject);\n\nQtQuick_Scale.properties = {\n  xScale: { type: \"real\", initialValue: 1 },\n  yScale: { type: \"real\", initialValue: 1 }\n};\n\nQmlWeb.registerQmlType(QtQuick_Scale);\n\n// eslint-disable-next-line no-undef\n\nvar QtQuick_ScaleAnimator = function (_QtQuick_Animator3) {\n  _inherits(QtQuick_ScaleAnimator, _QtQuick_Animator3);\n\n  function QtQuick_ScaleAnimator() {\n    _classCallCheck(this, QtQuick_ScaleAnimator);\n\n    return _possibleConstructorReturn(this, (QtQuick_ScaleAnimator.__proto__ || Object.getPrototypeOf(QtQuick_ScaleAnimator)).apply(this, arguments));\n  }\n\n  return QtQuick_ScaleAnimator;\n}(QtQuick_Animator);\n\nQtQuick_ScaleAnimator.versions = /^2\\./;\n\nQmlWeb.registerQmlType(QtQuick_ScaleAnimator);\n\n// eslint-disable-next-line no-undef\n\nvar QtQuick_SequentialAnimation = function (_QtQuick_Animation5) {\n  _inherits(QtQuick_SequentialAnimation, _QtQuick_Animation5);\n\n  function QtQuick_SequentialAnimation(meta) {\n    _classCallCheck(this, QtQuick_SequentialAnimation);\n\n    var _this123 = _possibleConstructorReturn(this, (QtQuick_SequentialAnimation.__proto__ || Object.getPrototypeOf(QtQuick_SequentialAnimation)).call(this, meta));\n\n    _this123.animationsChanged.connect(_this123, _this123.$onAnimatonsChanged);\n\n    QmlWeb.engine.$registerStart(function () {\n      if (!_this123.running) return;\n      _this123.running = false; // toggled back by start();\n      _this123.start();\n    });\n    QmlWeb.engine.$registerStop(function () {\n      return self.stop();\n    });\n    return _this123;\n  }\n\n  _createClass(QtQuick_SequentialAnimation, [{\n    key: \"$onAnimatonsChanged\",\n    value: function $onAnimatonsChanged() {\n      var flags = QmlWeb.Signal.UniqueConnection;\n      for (var i = 0; i < this.animations.length; i++) {\n        var animation = this.animations[i];\n        animation.runningChanged.connect(this, this.$nextAnimation, flags);\n      }\n    }\n  }, {\n    key: \"$nextAnimation\",\n    value: function $nextAnimation(proceed) {\n      if (this.running && !proceed) {\n        this.$curIndex++;\n        if (this.$curIndex < this.animations.length) {\n          var anim = this.animations[this.$curIndex];\n          console.log(\"nextAnimation\", this, this.$curIndex, anim);\n          anim.start();\n        } else {\n          this.$passedLoops++;\n          if (this.$passedLoops >= this.loops) {\n            this.complete();\n          } else {\n            this.$curIndex = -1;\n            this.$nextAnimation();\n          }\n        }\n      }\n    }\n  }, {\n    key: \"start\",\n    value: function start() {\n      if (this.running) return;\n      this.running = true;\n      this.$curIndex = -1;\n      this.$passedLoops = 0;\n      this.$nextAnimation();\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      if (!this.running) return;\n      this.running = false;\n      if (this.$curIndex < this.animations.length) {\n        this.animations[this.$curIndex].stop();\n      }\n    }\n  }, {\n    key: \"complete\",\n    value: function complete() {\n      if (!this.running) return;\n      if (this.$curIndex < this.animations.length) {\n        // Stop current animation\n        this.animations[this.$curIndex].stop();\n      }\n      this.running = false;\n    }\n  }]);\n\n  return QtQuick_SequentialAnimation;\n}(QtQuick_Animation);\n\nQtQuick_SequentialAnimation.properties = {\n  animations: \"list\"\n};\nQtQuick_SequentialAnimation.defaultProperty = \"animations\";\n\nQmlWeb.registerQmlType(QtQuick_SequentialAnimation);\n\n// eslint-disable-next-line no-undef\n\nvar QtQuick_ShaderEffect = function (_QtQuick_Item37) {\n  _inherits(QtQuick_ShaderEffect, _QtQuick_Item37);\n\n  function QtQuick_ShaderEffect() {\n    _classCallCheck(this, QtQuick_ShaderEffect);\n\n    return _possibleConstructorReturn(this, (QtQuick_ShaderEffect.__proto__ || Object.getPrototypeOf(QtQuick_ShaderEffect)).apply(this, arguments));\n  }\n\n  return QtQuick_ShaderEffect;\n}(QtQuick_Item);\n\nQtQuick_ShaderEffect.enums = {\n  ShaderEffect: {\n    NoCulling: 0, BackFaceCulling: 1, FrontFaceCulling: 2,\n    Compiled: 0, Uncompiled: 1, Error: 2\n  }\n};\nQtQuick_ShaderEffect.properties = {\n  blending: { type: \"bool\", initialValue: true },\n  cullMode: \"enum\", // ShaderEffect.NoCulling\n  fragmentShader: \"string\",\n  log: \"string\",\n  mesh: \"var\",\n  status: { type: \"enum\", initialValue: 1 }, // ShaderEffect.Uncompiled\n  supportsAtlasTextures: \"bool\",\n  vertexShader: \"string\"\n};\n\nQmlWeb.registerQmlType(QtQuick_ShaderEffect);\n\n// eslint-disable-next-line no-undef\n\nvar QtQuick_ShaderEffectSource = function (_QtQuick_Item38) {\n  _inherits(QtQuick_ShaderEffectSource, _QtQuick_Item38);\n\n  function QtQuick_ShaderEffectSource() {\n    _classCallCheck(this, QtQuick_ShaderEffectSource);\n\n    return _possibleConstructorReturn(this, (QtQuick_ShaderEffectSource.__proto__ || Object.getPrototypeOf(QtQuick_ShaderEffectSource)).apply(this, arguments));\n  }\n\n  _createClass(QtQuick_ShaderEffectSource, [{\n    key: \"scheduleUpdate\",\n\n\n    // TODO\n\n    value: function scheduleUpdate() {\n      // TODO\n    }\n  }]);\n\n  return QtQuick_ShaderEffectSource;\n}(QtQuick_Item);\n\nQtQuick_ShaderEffectSource.enums = {\n  ShaderEffectSource: {\n    Alpha: 0x6406, RGB: 0x6407, RGBA: 0x6408,\n    NoMirroring: 0, MirrorHorizontally: 1, MirrorVertically: 2,\n    ClampToEdge: 0, RepeatHorizontally: 1, RepeatVertically: 2, Repeat: 3\n  }\n};\nQtQuick_ShaderEffectSource.properties = {\n  format: { type: \"enum\", initialValue: 0x6408 }, // ShaderEffectSource.RGBA\n  hideSource: \"bool\",\n  live: { type: \"bool\", initialValue: true },\n  mipmap: \"bool\",\n  recursive: \"bool\",\n  sourceItem: \"Item\",\n  sourceRect: \"rect\",\n  textureMirroring: { type: \"enum\", initialValue: 2 }, // MirrorVertically\n  textureSize: \"size\",\n  wrapMode: \"enum\" // ShaderEffectSource.ClampToEdge\n};\n\nQmlWeb.registerQmlType(QtQuick_ShaderEffectSource);\n\n// eslint-disable-next-line no-undef\n\nvar QtQuick_State = function (_QtQml_QtObject24) {\n  _inherits(QtQuick_State, _QtQml_QtObject24);\n\n  function QtQuick_State(meta) {\n    _classCallCheck(this, QtQuick_State);\n\n    var _this126 = _possibleConstructorReturn(this, (QtQuick_State.__proto__ || Object.getPrototypeOf(QtQuick_State)).call(this, meta));\n\n    _this126.$item = _this126.$parent;\n\n    _this126.whenChanged.connect(_this126, _this126.$onWhenChanged);\n    return _this126;\n  }\n\n  _createClass(QtQuick_State, [{\n    key: \"$getAllChanges\",\n    value: function $getAllChanges() {\n      var _this127 = this;\n\n      if (this.extend) {\n        /* ECMAScript 2015. TODO: polyfill Array?\r\n        const base = this.$item.states.find(state => state.name === this.extend);\r\n        */\n        var states = this.$item.states;\n        var base = states.filter(function (state) {\n          return state.name === _this127.extend;\n        })[0];\n        if (base) {\n          return base.$getAllChanges().concat(this.changes);\n        }\n        console.error(\"Can't find the state to extend!\");\n      }\n      return this.changes;\n    }\n  }, {\n    key: \"$onWhenChanged\",\n    value: function $onWhenChanged(newVal) {\n      if (newVal) {\n        this.$item.state = this.name;\n      } else if (this.$item.state === this.name) {\n        this.$item.state = \"\";\n      }\n    }\n  }]);\n\n  return QtQuick_State;\n}(QtQml_QtObject);\n\nQtQuick_State.properties = {\n  name: \"string\",\n  changes: \"list\",\n  extend: \"string\",\n  when: \"bool\"\n};\nQtQuick_State.defaultProperty = \"changes\";\n\nQmlWeb.registerQmlType(QtQuick_State);\n\nvar platformsDetectors = [\n//{ name: \"W8\", regexp: /Windows NT 6\\.2/ },\n//{ name: \"W7\", regexp: /Windows NT 6\\.1/ },\n//{ name: \"Windows\", regexp: /Windows NT/ },\n{ name: \"OSX\", regexp: /Macintosh/ }];\n\nvar systemPalettes = {};\n\n// eslint-disable-next-line no-undef\n\nvar QtQuick_SystemPalette = function (_QtQml_QtObject25) {\n  _inherits(QtQuick_SystemPalette, _QtQml_QtObject25);\n\n  function QtQuick_SystemPalette(meta) {\n    _classCallCheck(this, QtQuick_SystemPalette);\n\n    var _this128 = _possibleConstructorReturn(this, (QtQuick_SystemPalette.__proto__ || Object.getPrototypeOf(QtQuick_SystemPalette)).call(this, meta));\n\n    _this128.colorGroupChanged.connect(_this128, _this128.$onColorGroupChanged);\n\n    _this128.$platform = \"OSX\";\n    // Detect OS\n    for (var i = 0; i < platformsDetectors.length; ++i) {\n      if (platformsDetectors[i].regexp.test(navigator.userAgent)) {\n        _this128.$platform = platformsDetectors[i].name;\n        break;\n      }\n    }\n\n    _this128.$onColorGroupChanged(_this128.colorGroup);\n    return _this128;\n  }\n\n  _createClass(QtQuick_SystemPalette, [{\n    key: \"$onColorGroupChanged\",\n    value: function $onColorGroupChanged(newVal) {\n      var _this129 = this;\n\n      var name = [\"active\", \"disabled\", \"inactive\"][newVal];\n      var pallete = systemPalettes[this.$platform][name];\n      this.$canEditReadOnlyProperties = true;\n      Object.keys(pallete).forEach(function (key) {\n        _this129[key] = pallete[key];\n      });\n      delete this.$canEditReadOnlyProperties;\n    }\n  }]);\n\n  return QtQuick_SystemPalette;\n}(QtQml_QtObject);\n\nQtQuick_SystemPalette.enums = {\n  SystemPalette: {\n    Active: 0, Inactive: 2, Disabled: 1\n  }\n};\nQtQuick_SystemPalette.properties = {\n  alternateBase: { type: \"color\", readOnly: true },\n  base: { type: \"color\", readOnly: true },\n  button: { type: \"color\", readOnly: true },\n  buttonText: { type: \"color\", readOnly: true },\n  dark: { type: \"color\", readOnly: true },\n  highlight: { type: \"color\", readOnly: true },\n  highlightedText: { type: \"color\", readOnly: true },\n  light: { type: \"color\", readOnly: true },\n  mid: { type: \"color\", readOnly: true },\n  midlight: { type: \"color\", readOnly: true },\n  shadow: { type: \"color\", readOnly: true },\n  text: { type: \"color\", readOnly: true },\n  window: { type: \"color\", readOnly: true },\n  windowText: { type: \"color\", readOnly: true },\n\n  colorGroup: \"enum\"\n};\n\n\nsystemPalettes.OSX = {\n  active: {\n    alternateBase: \"#f6f6f6\",\n    base: \"#ffffff\",\n    button: \"#ededed\",\n    buttonText: \"#000000\",\n    dark: \"#bfbfbf\",\n    highlight: \"#fbed73\",\n    highlightText: \"#000000\",\n    light: \"#ffffff\",\n    mid: \"#a9a9a9\",\n    midlight: \"#f6f6f6\",\n    shadow: \"#8b8b8b\",\n    text: \"#000000\",\n    window: \"#ededed\",\n    windowText: \"#000000\"\n  },\n  inactive: {\n    alternateBase: \"#f6f6f6\",\n    base: \"#ffffff\",\n    button: \"#ededed\",\n    buttonText: \"#000000\",\n    dark: \"#bfbfbf\",\n    highlight: \"#d0d0d0\",\n    highlightText: \"#000000\",\n    light: \"#ffffff\",\n    mid: \"#a9a9a9\",\n    midlight: \"#f6f6f6\",\n    shadow: \"#8b8b8b\",\n    text: \"#000000\",\n    window: \"#ededed\",\n    windowText: \"#000000\"\n  },\n  disabled: {\n    alternateBase: \"#f6f6f6\",\n    base: \"#ededed\",\n    button: \"#ededed\",\n    buttonText: \"#949494\",\n    dark: \"#bfbfbf\",\n    highlight: \"#d0d0d0\",\n    highlightText: \"#7f7f7f\",\n    light: \"#ffffff\",\n    mid: \"#a9a9a9\",\n    midlight: \"#f6f6f6\",\n    shadow: \"#8b8b8b\",\n    text: \"#7f7f7f\",\n    window: \"#ededed\",\n    windowText: \"#7f7f7f\"\n  }\n};\n\nQmlWeb.systemPalettes = systemPalettes;\nQmlWeb.platformsDetectors = platformsDetectors;\nQmlWeb.registerQmlType(QtQuick_SystemPalette);\n\n// eslint-disable-next-line no-undef\n\nvar QtQuick_Text = function (_QtQuick_Item39) {\n  _inherits(QtQuick_Text, _QtQuick_Item39);\n\n  function QtQuick_Text(meta) {\n    _classCallCheck(this, QtQuick_Text);\n\n    var _this130 = _possibleConstructorReturn(this, (QtQuick_Text.__proto__ || Object.getPrototypeOf(QtQuick_Text)).call(this, meta));\n\n    var fc = _this130.impl = document.createElement(\"span\");\n    fc.style.pointerEvents = \"none\";\n    fc.style.width = \"100%\";\n    fc.style.height = \"100%\";\n    fc.style.whiteSpace = \"pre\";\n    fc.style.display = \"table-cell\";\n    fc.style.verticalAlign = \"top\";\n    _this130.dom.style.display = \"table\";\n    _this130.dom.style.textAlign = \"left\";\n    _this130.dom.appendChild(fc);\n\n    _this130.colorChanged.connect(_this130, _this130.$onColorChanged);\n    _this130.textChanged.connect(_this130, _this130.$onTextChanged);\n    _this130.textFormatChanged.connect(_this130, _this130.$onTextFormatChanged);\n    _this130.lineHeightChanged.connect(_this130, _this130.$onLineHeightChanged);\n    _this130.wrapModeChanged.connect(_this130, _this130.$onWrapModeChanged);\n    _this130.horizontalAlignmentChanged.connect(_this130, _this130.$onHorizontalAlignmentChanged);\n    _this130.verticalAlignmentChanged.connect(_this130, _this130.$onVerticalAlignmentChanged);\n    _this130.styleChanged.connect(_this130, _this130.$onStyleChanged);\n    _this130.styleColorChanged.connect(_this130, _this130.$onStyleColorChanged);\n\n    _this130.widthChanged.connect(_this130, _this130.$onWidthChanged);\n    _this130.fontChanged.connect(_this130, _this130.$onFontChanged);\n\n    //this.contentHeightChanged.connect(this, this.$contentHeightChanged);\n    //this.contentWidthChanged.connect(this, this.$contentWidthChanged);\n\n    _this130.Component.completed.connect(_this130, _this130.Component$onCompleted);\n    return _this130;\n  }\n\n  _createClass(QtQuick_Text, [{\n    key: \"$redrawText\",\n    value: function $redrawText() {\n      var text = this.text;\n      var format = this.textFormat;\n      if (format === this.Text.AutoText) {\n        // NOTE: this is not the exact same heuristics that Qt uses\n        if (/<[a-zA-Z]+(\\s[^>]*)?\\/?>/.test(text)) {\n          format = this.Text.StyledText;\n        } else {\n          format = this.Text.PlainText;\n        }\n      }\n      if (format === this.Text.PlainText) {\n        this.impl.innerHTML = \"\";\n        this.impl.appendChild(document.createTextNode(text));\n      } else {\n        // TODO: sanitize StyledText/RichText\n        this.impl.innerHTML = text;\n      }\n\n      this.contentHeight = this.impl.offsetHeight;\n      this.contentWidth = this.impl.offsetWidth;\n      this.$updateImplicit();\n    }\n  }, {\n    key: \"$onColorChanged\",\n    value: function $onColorChanged(newVal) {\n      this.impl.style.color = newVal.$css;\n    }\n  }, {\n    key: \"$onTextChanged\",\n    value: function $onTextChanged() {\n      this.$redrawText();\n    }\n  }, {\n    key: \"$onTextFormatChanged\",\n    value: function $onTextFormatChanged() {\n      this.$redrawText();\n    }\n  }, {\n    key: \"$onWidthChanged\",\n    value: function $onWidthChanged() {\n      this.$updateImplicit();\n    }\n  }, {\n    key: \"$onLineHeightChanged\",\n    value: function $onLineHeightChanged(newVal) {\n      this.impl.style.lineHeight = newVal + \"px\";\n      this.$updateImplicit();\n    }\n  }, {\n    key: \"$onStyleChanged\",\n    value: function $onStyleChanged(newVal) {\n      this.$updateShadow(newVal, this.styleColor.$css);\n    }\n  }, {\n    key: \"$onStyleColorChanged\",\n    value: function $onStyleColorChanged(newVal) {\n      this.$updateShadow(this.style, newVal.$css);\n    }\n  }, {\n    key: \"$onWrapModeChanged\",\n    value: function $onWrapModeChanged(newVal) {\n      var style = this.impl.style;\n      switch (newVal) {\n        case this.Text.NoWrap:\n          style.whiteSpace = \"pre\";\n          break;\n        case this.Text.WordWrap:\n          style.whiteSpace = \"pre-wrap\";\n          style.wordWrap = \"normal\";\n          break;\n        case this.Text.WrapAnywhere:\n          style.whiteSpace = \"pre-wrap\";\n          style.wordBreak = \"break-all\";\n          break;\n        case this.Text.Wrap:\n        case this.Text.WrapAtWordBoundaryOrAnywhere:\n          style.whiteSpace = \"pre-wrap\";\n          style.wordWrap = \"break-word\";\n      }\n      this.$updateJustifyWhiteSpace();\n    }\n  }, {\n    key: \"$onHorizontalAlignmentChanged\",\n    value: function $onHorizontalAlignmentChanged(newVal) {\n      var textAlign = null;\n      switch (newVal) {\n        case this.Text.AlignLeft:\n          textAlign = \"left\";\n          break;\n        case this.Text.AlignRight:\n          textAlign = \"right\";\n          break;\n        case this.Text.AlignHCenter:\n          textAlign = \"center\";\n          break;\n        case this.Text.AlignJustify:\n          textAlign = \"justify\";\n          break;\n      }\n      this.dom.style.textAlign = textAlign;\n      this.$updateJustifyWhiteSpace();\n    }\n  }, {\n    key: \"$onVerticalAlignmentChanged\",\n    value: function $onVerticalAlignmentChanged(newVal) {\n      var verticalAlign = null;\n      switch (newVal) {\n        case this.Text.AlignTop:\n          verticalAlign = \"top\";\n          break;\n        case this.Text.AlignVCenter:\n          verticalAlign = \"middle\";\n          break;\n        case this.Text.AlignBottom:\n          verticalAlign = \"bottom\";\n          break;\n      }\n      this.impl.style.verticalAlign = verticalAlign;\n      this.$updateJustifyWhiteSpace();\n    }\n  }, {\n    key: \"$onFontChanged\",\n    value: function $onFontChanged() {\n      this.$updateImplicit();\n    }\n  }, {\n    key: \"Component$onCompleted\",\n    value: function Component$onCompleted() {\n      this.$updateImplicit();\n    }\n  }, {\n    key: \"$updateImplicit\",\n    value: function $updateImplicit() {\n      if (!this.text || !this.dom) {\n        this.implicitHeight = this.implicitWidth = 0;\n        return;\n      }\n\n      if (!this.$isUsingImplicitWidth) {\n        this.implicitWidth = this.impl.offsetWidth;\n        this.implicitHeight = this.impl.offsetHeight;\n        return;\n      }\n\n      var fc = this.impl;\n      var engine = QmlWeb.engine;\n      // Need to move the child out of it's parent so that it can properly\n      // recalculate it's \"natural\" offsetWidth/offsetHeight\n      if (engine.dom === document.body && engine.dom !== engine.domTarget) {\n        // Can't use document.body here, as it could have Shadow DOM inside\n        // The root is document.body, though, so it's probably not hidden\n        engine.domTarget.appendChild(fc);\n      } else {\n        document.body.appendChild(fc);\n      }\n      var height = fc.offsetHeight;\n      var width = fc.offsetWidth;\n\n      this.dom.appendChild(fc);\n\n      this.implicitHeight = height;\n      this.implicitWidth = width;\n    }\n  }, {\n    key: \"$updateShadow\",\n    value: function $updateShadow(textStyle, styleColor) {\n      var style = this.impl.style;\n      switch (textStyle) {\n        case 0:\n          style.textShadow = \"none\";\n          break;\n        case 1:\n          style.textShadow = [\"1px 0 0 \" + styleColor, \"-1px 0 0 \" + styleColor, \"0 1px 0 \" + styleColor, \"0 -1px 0 \" + styleColor].join(\",\");\n          break;\n        case 2:\n          style.textShadow = \"1px 1px 0 \" + styleColor;\n          break;\n        case 3:\n          style.textShadow = \"-1px -1px 0 \" + styleColor;\n          break;\n      }\n    }\n  }, {\n    key: \"$updateJustifyWhiteSpace\",\n    value: function $updateJustifyWhiteSpace() {\n      var style = this.impl.style;\n      // AlignJustify doesn't work with pre/pre-wrap, so we decide the lesser of\n      // the two evils to be ignoring \"\\n\"s inside the text.\n      if (this.horizontalAlignment === this.Text.AlignJustify) {\n        style.whiteSpace = \"normal\";\n      }\n      this.$updateImplicit();\n    }\n  }]);\n\n  return QtQuick_Text;\n}(QtQuick_Item);\n\nQtQuick_Text.enums = {\n  Text: {\n    NoWrap: 0, WordWrap: 1, WrapAnywhere: 2, Wrap: 3,\n    WrapAtWordBoundaryOrAnywhere: 4,\n    AlignLeft: 1, AlignRight: 2, AlignHCenter: 4, AlignJustify: 8,\n    AlignTop: 32, AlignBottom: 64, AlignVCenter: 128,\n    AutoText: 2, PlainText: 0, StyledText: 4, RichText: 1,\n    Normal: 0, Outline: 1, Raised: 2, Sunken: 3\n  }\n};\nQtQuick_Text.properties = {\n  color: { type: \"color\", initialValue: \"black\" },\n  text: \"string\",\n  textFormat: { type: \"enum\", initialValue: 2 }, // Text.AutoText\n  font: \"font\",\n  lineHeight: \"real\",\n  wrapMode: { type: \"enum\", initialValue: 0 }, // Text.NoWrap\n  horizontalAlignment: { type: \"enum\", initialValue: 1 }, // Text.AlignLeft\n  verticalAlignment: { type: \"enum\", initialValue: 32 }, // Text.AlignTop\n  style: \"enum\",\n  styleColor: \"color\",\n  contentHeight: \"real\",\n  contentWidth: \"real\"\n};\n\nQmlWeb.registerQmlType(QtQuick_Text);\n\n// eslint-disable-next-line no-undef\n\nvar QtQuick_Controls_2_Label = function (_QtQuick_Text) {\n  _inherits(QtQuick_Controls_2_Label, _QtQuick_Text);\n\n  function QtQuick_Controls_2_Label() {\n    _classCallCheck(this, QtQuick_Controls_2_Label);\n\n    return _possibleConstructorReturn(this, (QtQuick_Controls_2_Label.__proto__ || Object.getPrototypeOf(QtQuick_Controls_2_Label)).apply(this, arguments));\n  }\n\n  return QtQuick_Controls_2_Label;\n}(QtQuick_Text);\n\nQtQuick_Controls_2_Label.versions = /^2\\./;\nQtQuick_Controls_2_Label.properties = {\n  background: \"Item\",\n  palette: \"palette\"\n};\n\nQmlWeb.registerQmlType(QtQuick_Controls_2_Label);\n\n// eslint-disable-next-line no-undef\n\nvar QtQuick_TextEdit = function (_QtQuick_Item40) {\n  _inherits(QtQuick_TextEdit, _QtQuick_Item40);\n\n  function QtQuick_TextEdit(meta) {\n    _classCallCheck(this, QtQuick_TextEdit);\n\n    // Undo / Redo stacks;\n    var _this132 = _possibleConstructorReturn(this, (QtQuick_TextEdit.__proto__ || Object.getPrototypeOf(QtQuick_TextEdit)).call(this, meta));\n\n    _this132.undoStack = [];\n    _this132.undoStackPosition = -1;\n    _this132.redoStack = [];\n    _this132.redoStackPosition = -1;\n\n    var textarea = _this132.impl = document.createElement(\"textarea\");\n    textarea.style.pointerEvents = \"auto\";\n    textarea.style.width = \"100%\";\n    textarea.style.height = \"100%\";\n    textarea.style.boxSizing = \"border-box\";\n    textarea.style.borderWidth = \"0\";\n    textarea.style.background = \"none\";\n    textarea.style.outline = \"none\";\n    textarea.style.resize = \"none\";\n    textarea.style.padding = \"0\"; // TODO: padding/*Padding props from Qt 5.6\n    // In some browsers text-areas have a margin by default, which distorts\n    // the positioning, so we need to manually set it to 0.\n    textarea.style.margin = \"0\";\n    textarea.disabled = false;\n    _this132.dom.appendChild(textarea);\n\n    _this132.Component.completed.connect(_this132, _this132.Component$onCompleted);\n    _this132.textChanged.connect(_this132, _this132.$onTextChanged);\n    _this132.colorChanged.connect(_this132, _this132.$onColorChanged);\n\n    _this132.impl.addEventListener(\"input\", function () {\n      return _this132.$updateValue();\n    });\n    return _this132;\n  }\n\n  _createClass(QtQuick_TextEdit, [{\n    key: \"append\",\n    value: function append(text) {\n      this.text += text;\n    }\n  }, {\n    key: \"copy\",\n    value: function copy() {\n      // TODO\n    }\n  }, {\n    key: \"cut\",\n    value: function cut() {\n      this.text = this.text(0, this.selectionStart) + this.text(this.selectionEnd, this.text.length);\n      // TODO\n    }\n  }, {\n    key: \"deselect\",\n    value: function deselect() {\n      //this.selectionStart = -1;\n      //this.selectionEnd = -1;\n      //this.selectedText = null;\n      // TODO\n    }\n  }, {\n    key: \"getFormattedText\",\n    value: function getFormattedText(start, end) {\n      var text = this.text.slice(start, end);\n      // TODO\n      // process text\n      return text;\n    }\n  }, {\n    key: \"getText\",\n    value: function getText(start, end) {\n      return this.text.slice(start, end);\n    }\n  }, {\n    key: \"insert\",\n    value: function insert() /*position, text*/{\n      // TODO\n    }\n  }, {\n    key: \"isRightToLeft\",\n    value: function isRightToLeft() /*start, end*/{\n      // TODO\n    }\n  }, {\n    key: \"linkAt\",\n    value: function linkAt() /*x, y*/{\n      // TODO\n    }\n  }, {\n    key: \"moveCursorSelection\",\n    value: function moveCursorSelection() /*x, y*/{\n      // TODO\n    }\n  }, {\n    key: \"paste\",\n    value: function paste() {\n      // TODO\n    }\n  }, {\n    key: \"positionAt\",\n    value: function positionAt() /*x, y*/{\n      // TODO\n    }\n  }, {\n    key: \"positionToRectangle\",\n    value: function positionToRectangle() /*position*/{\n      // TODO\n    }\n  }, {\n    key: \"redo\",\n    value: function redo() {\n      // TODO\n    }\n  }, {\n    key: \"remove\",\n    value: function remove() /*start, end*/{\n      // TODO\n    }\n  }, {\n    key: \"select\",\n    value: function select() /*start, end*/{\n      // TODO\n    }\n  }, {\n    key: \"selectAll\",\n    value: function selectAll() {\n      // TODO\n    }\n  }, {\n    key: \"selectWord\",\n    value: function selectWord() {\n      // TODO\n    }\n  }, {\n    key: \"undo\",\n    value: function undo() {\n      // TODO\n    }\n  }, {\n    key: \"Component$onCompleted\",\n    value: function Component$onCompleted() {\n      this.selectByKeyboard = !this.readOnly;\n\n      this.impl.readOnly = this.readOnly;\n\n      this.$updateValue();\n      this.implicitWidth = this.offsetWidth;\n      this.implicitHeight = this.offsetHeight;\n    }\n  }, {\n    key: \"$onTextChanged\",\n    value: function $onTextChanged(newVal) {\n      this.impl.value = newVal;\n    }\n  }, {\n    key: \"$onColorChanged\",\n    value: function $onColorChanged(newVal) {\n      this.impl.style.color = newVal.$css;\n    }\n  }, {\n    key: \"$updateValue\",\n    value: function $updateValue() {\n      if (this.text !== this.impl.value) {\n        this.text = this.impl.value;\n      }\n      this.length = this.text.length;\n      this.lineCount = this.$getLineCount();\n      this.$updateCss();\n\n      this.contentHeight = this.impl.scrollHeight;\n    }\n    // Transfer dom style to firstChild,\n    // then clear corresponding dom style\n\n  }, {\n    key: \"$updateCss\",\n    value: function $updateCss() {\n      var supported = [\"border\", \"borderRadius\", \"borderWidth\", \"borderColor\", \"backgroundColor\"];\n      var style = this.impl.style;\n      for (var n = 0; n < supported.length; n++) {\n        var o = supported[n];\n        var v = this.css[o];\n        if (v) {\n          style[o] = v;\n          this.css[o] = null;\n        }\n      }\n    }\n  }, {\n    key: \"$getLineCount\",\n    value: function $getLineCount() {\n      return this.text.split(/\\n/).length;\n    }\n  }]);\n\n  return QtQuick_TextEdit;\n}(QtQuick_Item);\n\nQtQuick_TextEdit.properties = {\n  activeFocusOnPress: { type: \"bool\", initialValue: true },\n  baseUrl: \"url\",\n  canPaste: \"bool\",\n  canRedo: \"bool\",\n  canUndo: \"bool\",\n  color: { type: \"color\", initialValue: \"white\" },\n  contentHeight: \"real\",\n  contentWidth: \"real\",\n  cursorDelegate: \"Component\",\n  cursorPosition: \"int\",\n  cursorRectangle: \"rect\",\n  cursorVisible: { type: \"bool\", initialValue: true },\n  effectiveHorizontalAlignment: \"enum\",\n  font: \"font\",\n  horizontalAlignment: \"enum\",\n  hoveredLink: \"string\",\n  inputMethodComposing: \"bool\",\n  inputMethodHints: \"enum\",\n  length: \"int\",\n  lineCount: \"int\",\n  mouseSelectionMode: \"enum\",\n  persistentSelection: \"bool\",\n  readOnly: { type: \"bool\", initialValue: false },\n  renderType: \"enum\",\n  selectByKeyboard: { type: \"bool\", initialValue: true },\n  selectByMouse: \"bool\",\n  selectedText: \"string\",\n  selectedTextColor: { type: \"color\", initialValue: \"yellow\" },\n  selectionColor: { type: \"color\", initialValue: \"pink\" },\n  selectionEnd: \"int\",\n  selectionStart: \"int\",\n  text: \"string\",\n  textDocument: \"TextDocument\",\n  textFormat: \"enum\",\n  textMargin: \"real\",\n  verticalAlignment: \"enum\",\n  wrapMode: \"enum\"\n};\nQtQuick_TextEdit.signals = {\n  linkActivated: [{ type: \"string\", name: \"link\" }],\n  linkHovered: [{ type: \"string\", name: \"link\" }]\n};\n\nQmlWeb.registerQmlType(QtQuick_TextEdit);\n\n// eslint-disable-next-line no-undef\n\nvar QtQuick_Controls_TextArea = function (_QtQuick_TextEdit) {\n  _inherits(QtQuick_Controls_TextArea, _QtQuick_TextEdit);\n\n  function QtQuick_Controls_TextArea(meta) {\n    _classCallCheck(this, QtQuick_Controls_TextArea);\n\n    var _this133 = _possibleConstructorReturn(this, (QtQuick_Controls_TextArea.__proto__ || Object.getPrototypeOf(QtQuick_Controls_TextArea)).call(this, meta));\n\n    var textarea = _this133.impl;\n    textarea.style.padding = \"5px\";\n    textarea.style.borderWidth = \"1px\";\n    textarea.style.backgroundColor = \"#fff\";\n    return _this133;\n  }\n\n  return QtQuick_Controls_TextArea;\n}(QtQuick_TextEdit);\n\nQmlWeb.registerQmlType(QtQuick_Controls_TextArea);\n\n// eslint-disable-next-line no-undef\n\nvar QtQuick_TextInput = function (_QtQuick_Item41) {\n  _inherits(QtQuick_TextInput, _QtQuick_Item41);\n\n  function QtQuick_TextInput(meta) {\n    _classCallCheck(this, QtQuick_TextInput);\n\n    var _this134 = _possibleConstructorReturn(this, (QtQuick_TextInput.__proto__ || Object.getPrototypeOf(QtQuick_TextInput)).call(this, meta));\n\n    var input = _this134.impl = document.createElement(\"textarea\");\n    input.type = \"text\";\n    input.disabled = true;\n    input.style.pointerEvents = \"auto\";\n    // In some browsers text-inputs have a margin by default, which distorts\n    // the positioning, so we need to manually set it to 0.\n    input.style.margin = \"0\";\n    input.style.padding = \"0\";\n    input.style.width = \"100%\";\n    input.style.height = \"100%\";\n    input.style.border = \"none\";\n    input.style.outline = \"none\";\n    input.style.background = \"none\";\n    input.style.resize = \"none\";\n    input.style.wordBreak = 'normal';\n    input.style.whiteSpace = 'nowrap';\n    input.style.overflow = 'hidden';\n    /*\r\n    input.style.display = \"table-cell\";\r\n    input.contentEditable = true;\r\n    input.style.whiteSpace = \"nowrap\";\r\n    input.style.whiteSpace = \"nowrap\";\r\n    input.style.overflowX = \"hidden\";\r\n    */\n    _this134.dom.appendChild(input);\n    _this134.setupFocusOnDom(input);\n    input.disabled = false;\n\n    _this134.Component.completed.connect(_this134, _this134.Component$onCompleted);\n    _this134.textChanged.connect(_this134, _this134.$onTextChanged);\n    _this134.echoModeChanged.connect(_this134, _this134.$onEchoModeChanged);\n    _this134.maximumLengthChanged.connect(_this134, _this134.$onMaximumLengthChanged);\n    _this134.readOnlyChanged.connect(_this134, _this134.$onReadOnlyChanged);\n    _this134.horizontalAlignmentChanged.connect(_this134, _this134.$alignChanged);\n    _this134.verticalAlignmentChanged.connect(_this134, _this134.$alignChanged);\n\n    _this134.heightChanged.connect(_this134, _this134.$heightChanged);\n    _this134.widthChanged.connect(_this134, _this134.$widthChanged);\n    _this134.colorChanged.connect(_this134, _this134.$colorChanged);\n    _this134.validatorChanged.connect(_this134, _this134.$validatorChanged);\n    _this134.wrapModeChanged.connect(_this134, _this134.$wrapModeChanged);\n    //this.Keys.pressed.connect(this, this.Keys$onPressed);\n\n    _this134.impl.addEventListener(\"input\", function () {\n      return _this134.$updateValue();\n    });\n\n    _this134.impl.addEventListener(\"keydown\", function (e) {\n      _this134.Keys$onPressed(e);\n    });\n\n    _this134._buffer == null;\n    return _this134;\n  }\n\n  _createClass(QtQuick_TextInput, [{\n    key: \"Component$onCompleted\",\n    value: function Component$onCompleted() {\n      this.implicitWidth = this.impl.offsetWidth;\n      this.implicitHeight = this.impl.offsetHeight;\n    }\n  }, {\n    key: \"$wrapModeChanged\",\n    value: function $wrapModeChanged() {\n\n      switch (this.wrapMode) {\n        case TextInput.NoWrap:\n          this.impl.style.wordBreak = 'normal';\n          this.impl.style.whiteSpace = 'nowrap';\n          break;\n        case TextInput.WordWrap:\n          this.impl.style.wordBreak = 'break-word';\n          this.impl.style.whiteSpace = 'break-spaces';\n          break;\n        case TextInput.WrapAnywhere:\n          this.impl.style.wordBreak = 'break-all';\n          this.impl.style.whiteSpace = 'break-spaces';\n          break;\n        case TextInput.Wrap:\n          this.impl.style.wordBreak = 'break-all';\n          this.impl.style.whiteSpace = 'break-spaces';\n          break;\n      }\n    }\n  }, {\n    key: \"$colorChanged\",\n    value: function $colorChanged(newVal) {\n      this.impl.style.color = newVal.$css;\n    }\n  }, {\n    key: \"$validatorChanged\",\n    value: function $validatorChanged() {\n      //this.impl.pattern\n    }\n  }, {\n    key: \"$heightChanged\",\n    value: function $heightChanged() {\n      this.impl.style.height = this.height + \"px\";\n      this.$alignChanged();\n    }\n  }, {\n    key: \"$widthChanged\",\n    value: function $widthChanged() {\n      this.impl.style.width = this.width + \"px\";\n      this.$alignChanged();\n    }\n  }, {\n    key: \"$alignChanged\",\n    value: function $alignChanged() {\n\n      switch (this.horizontalAlignment) {\n        case TextInput.AlignLeft:\n          this.impl.style.textAlign = 'start';\n          break;\n        case TextInput.AlignRight:\n          this.impl.style.textAlign = 'end';\n          break;\n        case TextInput.AlignHCenter:\n          this.impl.style.textAlign = 'center';\n          break;\n      }\n\n      this.impl.style.padding = \"0\";\n      this.impl.style.height = this.height + \"px\";\n      switch (this.verticalAlignment) {\n        case TextInput.AlignTop:\n          //this.impl.style.paddingBottom = `${this.height - this.font.pixelSize}px`;\n          //this.impl.style.height = `auto`;\n          break;\n        case TextInput.AlignBottom:\n          this.impl.style.paddingTop = this.height - this.font.pixelSize + \"px\";\n          break;\n        case TextInput.AlignVCenter:\n          this.impl.style.paddingTop = this.height / 2 - this.countLines() * this.font.pixelSize / 2 + \"px\";\n          break;\n      }\n    }\n  }, {\n    key: \"$onTextChanged\",\n    value: function $onTextChanged(newVal) {\n      // We have to check if value actually changes.\n      // If we do not have this check, then after user updates text input\n      // following occurs: user updates gui text -> updateValue gets called ->\n      // textChanged gets called -> gui value updates again -> caret position\n      // moves to the right!\n      if (this.impl.value !== newVal) {\n        this.impl.value = newVal;\n      }\n      this.$alignChanged();\n    }\n  }, {\n    key: \"$onEchoModeChanged\",\n    value: function $onEchoModeChanged(newVal) {\n      var TextInput = this.TextInput;\n      var input = this.impl;\n      switch (newVal) {\n        case TextInput.Normal:\n          input.type = \"text\";\n          break;\n        case TextInput.Password:\n          input.type = \"password\";\n          break;\n        case TextInput.NoEcho:\n          // Not supported, use password, that's nearest\n          input.type = \"password\";\n          break;\n        case TextInput.PasswordEchoOnEdit:\n          // Not supported, use password, that's nearest\n          input.type = \"password\";\n          break;\n      }\n    }\n  }, {\n    key: \"$onMaximumLengthChanged\",\n    value: function $onMaximumLengthChanged(newVal) {\n      this.impl.maxLength = newVal < 0 ? null : newVal;\n    }\n  }, {\n    key: \"$onReadOnlyChanged\",\n    value: function $onReadOnlyChanged(newVal) {\n      this.impl.disabled = newVal;\n    }\n  }, {\n    key: \"Keys$onPressed\",\n    value: function Keys$onPressed(e) {\n\n      var Qt = QmlWeb.Qt;\n      var submit = e.keyCode === Qt.Key_Return || e.keyCode === Qt.Key_Enter;\n      if (submit && this.$testValidator()) {\n        e.preventDefault();\n        this.accepted();\n\n        e.accepted = true;\n      }\n    }\n  }, {\n    key: \"$testValidator\",\n    value: function $testValidator() {\n      if (this.validator) {\n        return this.validator.validate(this.text);\n      }\n      return true;\n    }\n  }, {\n    key: \"countLines\",\n    value: function countLines() {\n      var textarea = this.impl;\n      if (this._buffer == null) {\n        this._buffer = document.createElement('textarea');\n        this._buffer.style.border = 'none';\n        this._buffer.style.height = '0';\n        this._buffer.style.overflow = 'hidden';\n        this._buffer.style.padding = '0';\n        this._buffer.style.position = 'absolute';\n        this._buffer.style.left = '0';\n        this._buffer.style.top = '0';\n        this._buffer.style.zIndex = '-1';\n        this.dom.appendChild(this._buffer);\n      }\n\n      var cs = window.getComputedStyle(textarea);\n      var pl = parseInt(cs.paddingLeft);\n      var pr = parseInt(cs.paddingRight);\n      var lh = parseInt(cs.lineHeight);\n\n      // [cs.lineHeight] may return 'normal', which means line height = font size.\n      if (isNaN(lh)) lh = parseInt(cs.fontSize);\n\n      // Copy content width.\n      this._buffer.style.width = textarea.clientWidth - pl - pr + 'px';\n\n      // Copy text properties.\n      this._buffer.style.font = cs.font;\n      this._buffer.style.letterSpacing = cs.letterSpacing;\n      this._buffer.style.whiteSpace = cs.whiteSpace;\n      this._buffer.style.wordBreak = cs.wordBreak;\n      this._buffer.style.wordSpacing = cs.wordSpacing;\n      this._buffer.style.wordWrap = cs.wordWrap;\n\n      // Copy value.\n      this._buffer.value = textarea.value;\n\n      var result = Math.floor(this._buffer.scrollHeight / lh);\n      if (result == 0) result = 1;\n      return result;\n    }\n  }, {\n    key: \"$updateValue\",\n    value: function $updateValue() {\n      if (this.text !== this.impl.value) {\n        this.$canEditReadOnlyProperties = true;\n        if (this.validator) {\n          if (this.impl.value == '' || this.validator.validate(this.impl.value)) {\n            this.text = this.impl.value;\n          } else {\n            this.impl.value = this.text;\n          }\n        } else {\n          this.text = this.impl.value;\n        }\n        this.$canEditReadOnlyProperties = false;\n      }\n    }\n  }]);\n\n  return QtQuick_TextInput;\n}(QtQuick_Item);\n\nQtQuick_TextInput.enums = {\n  TextInput: {\n    Normal: 0,\n    Password: 1,\n    NoEcho: 2,\n    PasswordEchoOnEdit: 3,\n    AlignLeft: Qt.AlignLeft,\n    AlignRight: Qt.AlignRight,\n    AlignHCenter: Qt.AlignHCenter,\n    AlignTop: Qt.AlignTop,\n    AlignBottom: Qt.AlignBottom,\n    AlignVCenter: Qt.AlignVCenter,\n    NoWrap: 0,\n    WordWrap: 1,\n    WrapAnywhere: 2,\n    Wrap: 3\n  }\n};\nQtQuick_TextInput.properties = {\n  color: { type: \"color\", initialValue: \"white\" },\n  text: \"string\",\n  font: \"font\",\n  maximumLength: { type: \"int\", initialValue: -1 },\n  readOnly: { type: \"bool\", initialValue: false },\n  validator: \"var\",\n  echoMode: \"enum\", // TextInput.Normal\n  wrapMode: { type: \"enum\", initialValue: 0 }, // TextInput.Normal\n  horizontalAlignment: \"enum\",\n  verticalAlignment: { type: \"enum\", initialValue: Qt.AlignTop }\n};\nQtQuick_TextInput.signals = {\n  accepted: []\n};\n\nQmlWeb.registerQmlType(QtQuick_TextInput);\n\n// eslint-disable-next-line no-undef\n\nvar QtQuick_Transition = function (_QtQml_QtObject26) {\n  _inherits(QtQuick_Transition, _QtQml_QtObject26);\n\n  function QtQuick_Transition(meta) {\n    _classCallCheck(this, QtQuick_Transition);\n\n    var _this135 = _possibleConstructorReturn(this, (QtQuick_Transition.__proto__ || Object.getPrototypeOf(QtQuick_Transition)).call(this, meta));\n\n    _this135.$item = _this135.$parent;\n    return _this135;\n  }\n\n  _createClass(QtQuick_Transition, [{\n    key: \"$start\",\n    value: function $start(actions) {\n      for (var i = 0; i < this.animations.length; i++) {\n        var animation = this.animations[i];\n        animation.$actions = [];\n        var $targets = animation.$targets,\n            $props = animation.$props,\n            $actions = animation.$actions;\n\n        for (var j in actions) {\n          var _action6 = actions[j];\n          if (($targets.length === 0 || $targets.indexOf(_action6.target) !== -1) && ($props.length === 0 || $props.indexOf(_action6.property) !== -1)) {\n            $actions.push(_action6);\n          }\n        }\n        animation.start();\n      }\n    }\n  }, {\n    key: \"$stop\",\n    value: function $stop() {\n      for (var i = 0; i < this.animations.length; i++) {\n        this.animations[i].stop();\n      }\n    }\n  }]);\n\n  return QtQuick_Transition;\n}(QtQml_QtObject);\n\nQtQuick_Transition.properties = {\n  animations: \"list\",\n  from: { type: \"string\", initialValue: \"*\" },\n  to: { type: \"string\", initialValue: \"*\" },\n  reversible: \"bool\"\n};\nQtQuick_Transition.defaultProperty = \"animations\";\n\nQmlWeb.registerQmlType(QtQuick_Transition);\n\n// eslint-disable-next-line no-undef\n\nvar QtQuick_Translate = function (_QtQml_QtObject27) {\n  _inherits(QtQuick_Translate, _QtQml_QtObject27);\n\n  function QtQuick_Translate(meta) {\n    _classCallCheck(this, QtQuick_Translate);\n\n    var _this136 = _possibleConstructorReturn(this, (QtQuick_Translate.__proto__ || Object.getPrototypeOf(QtQuick_Translate)).call(this, meta));\n\n    _this136.xChanged.connect(_this136.$parent, _this136.$parent.$updateTransform);\n    _this136.yChanged.connect(_this136.$parent, _this136.$parent.$updateTransform);\n    return _this136;\n  }\n\n  return QtQuick_Translate;\n}(QtQml_QtObject);\n\nQtQuick_Translate.properties = {\n  x: \"real\",\n  y: \"real\"\n};\n\nQmlWeb.registerQmlType(QtQuick_Translate);\n\n// eslint-disable-next-line no-undef\n\nvar QtQuick_UniformAnimator = function (_QtQuick_Animator4) {\n  _inherits(QtQuick_UniformAnimator, _QtQuick_Animator4);\n\n  function QtQuick_UniformAnimator() {\n    _classCallCheck(this, QtQuick_UniformAnimator);\n\n    return _possibleConstructorReturn(this, (QtQuick_UniformAnimator.__proto__ || Object.getPrototypeOf(QtQuick_UniformAnimator)).apply(this, arguments));\n  }\n\n  return QtQuick_UniformAnimator;\n}(QtQuick_Animator);\n\nQtQuick_UniformAnimator.versions = /^2\\./;\nQtQuick_UniformAnimator.properties = {\n  uniform: \"string\"\n};\n\nQmlWeb.registerQmlType(QtQuick_UniformAnimator);\n\n// eslint-disable-next-line no-undef\n\nvar QtQuick_XAnimator = function (_QtQuick_Animator5) {\n  _inherits(QtQuick_XAnimator, _QtQuick_Animator5);\n\n  function QtQuick_XAnimator() {\n    _classCallCheck(this, QtQuick_XAnimator);\n\n    return _possibleConstructorReturn(this, (QtQuick_XAnimator.__proto__ || Object.getPrototypeOf(QtQuick_XAnimator)).apply(this, arguments));\n  }\n\n  return QtQuick_XAnimator;\n}(QtQuick_Animator);\n\nQtQuick_XAnimator.versions = /^2\\./;\n\nQmlWeb.registerQmlType(QtQuick_XAnimator);\n\n// eslint-disable-next-line no-undef\n\nvar QtQuick_YAnimator = function (_QtQuick_Animator6) {\n  _inherits(QtQuick_YAnimator, _QtQuick_Animator6);\n\n  function QtQuick_YAnimator() {\n    _classCallCheck(this, QtQuick_YAnimator);\n\n    return _possibleConstructorReturn(this, (QtQuick_YAnimator.__proto__ || Object.getPrototypeOf(QtQuick_YAnimator)).apply(this, arguments));\n  }\n\n  return QtQuick_YAnimator;\n}(QtQuick_Animator);\n\nQtQuick_YAnimator.versions = /^2\\./;\n\nQmlWeb.registerQmlType(QtQuick_YAnimator);\n\n// eslint-disable-next-line no-undef\n\nvar QtTest_SignalSpy = function (_QtQuick_Item42) {\n  _inherits(QtTest_SignalSpy, _QtQuick_Item42);\n\n  function QtTest_SignalSpy() {\n    _classCallCheck(this, QtTest_SignalSpy);\n\n    return _possibleConstructorReturn(this, (QtTest_SignalSpy.__proto__ || Object.getPrototypeOf(QtTest_SignalSpy)).apply(this, arguments));\n  }\n\n  _createClass(QtTest_SignalSpy, [{\n    key: \"clear\",\n\n\n    // TODO\n\n    value: function clear() {\n      this.count = 0;\n      this.signalArguments.length = 0;\n      //this.valid = false;\n    }\n\n    /*\r\n    wait(timeout = 5000) {\r\n    }\r\n    */\n\n  }]);\n\n  return QtTest_SignalSpy;\n}(QtQuick_Item);\n\nQtTest_SignalSpy.versions = /^1\\./;\nQtTest_SignalSpy.properties = {\n  count: \"int\",\n  signalArguments: \"list\",\n  signalName: \"string\",\n  target: \"var\",\n  valid: \"bool\"\n};\n\nQmlWeb.registerQmlType(QtTest_SignalSpy);\n\n// eslint-disable-next-line no-undef\n\nvar QtTest_TestCase = function (_QtQuick_Item43) {\n  _inherits(QtTest_TestCase, _QtQuick_Item43);\n\n  function QtTest_TestCase(meta) {\n    _classCallCheck(this, QtTest_TestCase);\n\n    var _this141 = _possibleConstructorReturn(this, (QtTest_TestCase.__proto__ || Object.getPrototypeOf(QtTest_TestCase)).call(this, meta));\n\n    _this141.Component.completed.connect(_this141, _this141.Component$onCompleted);\n\n    var engine = QmlWeb.engine;\n    if (!engine.tests) {\n      QmlWeb.engine.tests = {\n        name: engine.name || \"Run_\" + Math.random().toString(36).slice(2, 10),\n        started: false,\n        finished: false,\n        duration: 0,\n        total: 0,\n        completed: 0,\n        errors: [],\n        stats: {\n          pass: 0,\n          fail: 0,\n          skip: 0\n        }\n      };\n    }\n    QmlWeb.engine.tests.total++;\n\n    _this141.console = {\n      assert: function assert() {\n        var _console;\n\n        return (_console = console).assert.apply(_console, arguments);\n      },\n      error: function error() {\n        var _console2;\n\n        for (var _len26 = arguments.length, a = Array(_len26), _key27 = 0; _key27 < _len26; _key27++) {\n          a[_key27] = arguments[_key27];\n        }\n\n        return (_console2 = console).error.apply(_console2, [\"QSYSTEM: \" + _this141.$testId + \" qml:\"].concat(a));\n      },\n      info: function info() {\n        var _console3;\n\n        for (var _len27 = arguments.length, a = Array(_len27), _key28 = 0; _key28 < _len27; _key28++) {\n          a[_key28] = arguments[_key28];\n        }\n\n        return (_console3 = console).info.apply(_console3, [\"QINFO  : \" + _this141.$testId + \" qml:\"].concat(a));\n      },\n      log: function log() {\n        var _console4;\n\n        for (var _len28 = arguments.length, a = Array(_len28), _key29 = 0; _key29 < _len28; _key29++) {\n          a[_key29] = arguments[_key29];\n        }\n\n        return (_console4 = console).log.apply(_console4, [\"QDEBUG : \" + _this141.$testId + \" qml:\"].concat(a));\n      },\n      time: function time() {\n        var _console5;\n\n        return (_console5 = console).time.apply(_console5, arguments);\n      },\n      timeEnd: function timeEnd() {\n        var _console6;\n\n        return (_console6 = console).timeEnd.apply(_console6, arguments);\n      },\n      trace: function trace() {\n        var _console7;\n\n        return (_console7 = console).trace.apply(_console7, arguments);\n      },\n      warn: function warn() {\n        var _console8;\n\n        for (var _len29 = arguments.length, a = Array(_len29), _key30 = 0; _key30 < _len29; _key30++) {\n          a[_key30] = arguments[_key30];\n        }\n\n        return (_console8 = console).warn.apply(_console8, [\"QWARN  : \" + _this141.$testId + \" qml:\"].concat(a));\n      }\n    };\n    return _this141;\n  }\n\n  _createClass(QtTest_TestCase, [{\n    key: \"Component$onCompleted\",\n    value: function Component$onCompleted() {\n      var _this142 = this;\n\n      var info = QmlWeb.engine.tests;\n      if (!info.started) {\n        console.log(\"********* Start testing of \" + info.name + \" *********\");\n        console.log(\"Config: Using QmlWeb, \" + window.navigator.userAgent);\n        info.started = true;\n      }\n\n      var keys = Object.keys(this);\n      var tests = keys.filter(function (key) {\n        return key.lastIndexOf(\"test_\", 0) === 0;\n      }).filter(function (key) {\n        return key.indexOf(\"_data\", key.length - 5) === -1;\n      }).sort();\n\n      tests.unshift(\"initTestCase\");\n      tests.push(\"cleanupTestCase\");\n      tests.forEach(function (test) {\n        _this142.$testId = info.name + \"::\" + _this142.name + \"::\" + test + \"()\";\n        var special = test === \"initTestCase\" || test === \"cleanupTestCase\";\n\n        var dstart = performance.now();\n        var data = void 0;\n        if (_this142[test + \"_data\"] && !special) {\n          data = _this142[test + \"_data\"]();\n          if (!data || !data.length) {\n            _this142.warn(\"no data supplied for \" + test + \"() by \" + test + \"_data()\");\n            data = [];\n          }\n        } else if (_this142.init_data && !special) {\n          data = _this142.init_data();\n          if (!data || !data.length) {\n            data = undefined;\n          }\n        }\n        if (!data) {\n          data = [null];\n        }\n        var dend = performance.now();\n        info.duration += dend - dstart;\n\n        data.forEach(function (row) {\n          var arg = row ? row.tag : \"\";\n          _this142.$testId = info.name + \"::\" + _this142.name + \"::\" + test + \"(\" + arg + \")\";\n          var start = performance.now();\n          var error = void 0;\n          try {\n            if (!special) {\n              _this142.init();\n            }\n            _this142[test](row);\n          } catch (e) {\n            error = e;\n          } finally {\n            if (!special) {\n              _this142.cleanup();\n            }\n          }\n          var end = performance.now();\n          info.duration += end - start;\n          if (error && error.skip) {\n            info.stats.skip++;\n            console.log(\"SKIP   : \" + _this142.$testId + \" \" + error.message);\n          } else if (error) {\n            info.stats.fail++;\n            info.errors.push(_this142.$testId + \" \" + error.message);\n            console.log(\"FAIL!  : \" + _this142.$testId + \" \" + error.message);\n            if (\"actual\" in error) {\n              console.log(\"   Actual   (): \" + error.actual);\n            }\n            if (\"expected\" in error) {\n              console.log(\"   Expected (): \" + error.expected);\n            }\n          } else {\n            info.stats.pass++;\n            console.log(\"PASS   : \" + _this142.$testId);\n          }\n        });\n\n        _this142.$testId = info.name + \"::UnknownTestFunc()\";\n      });\n\n      // TODO: benchmarks\n\n      info.completed++;\n      if (info.completed === info.total) {\n        info.finished = true;\n        var _info$stats = info.stats,\n            pass = _info$stats.pass,\n            fail = _info$stats.fail,\n            skip = _info$stats.skip;\n\n        var duration = Math.round(info.duration * 100) / 100;\n        console.log(\"Totals: \" + pass + \" passed, \" + fail + \" failed, \" + skip + \" skipped, \" + duration + \"ms\");\n        console.log(\"********* Finished testing of \" + info.name + \" *********\");\n      }\n    }\n\n    // No-ops\n\n  }, {\n    key: \"init\",\n    value: function init() {}\n  }, {\n    key: \"initTestCase\",\n    value: function initTestCase() {}\n  }, {\n    key: \"cleanup\",\n    value: function cleanup() {}\n  }, {\n    key: \"cleanupTestCase\",\n    value: function cleanupTestCase() {}\n\n    // API\n\n  }, {\n    key: \"compare\",\n    value: function compare(actual, expected) {\n      var message = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"\";\n\n      if (actual !== expected) {\n        var err = new Error(message);\n        err.actual = actual;\n        err.expected = expected;\n        throw err;\n      }\n    }\n  }, {\n    key: \"verify\",\n    value: function verify(condition) {\n      var message = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n\n      if (!condition) {\n        throw new Error(\"'\" + message + \"' returned FALSE. ()\");\n      }\n    }\n  }, {\n    key: \"fail\",\n    value: function fail() {\n      var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n\n      throw new Error(message);\n    }\n  }, {\n    key: \"warn\",\n    value: function warn(message) {\n      console.warn(\"WARNING: \" + this.$testId + \" \" + message);\n    }\n  }, {\n    key: \"skip\",\n    value: function skip() {\n      var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n\n      var err = new Error(message);\n      err.skip = true;\n      throw err;\n    }\n    /*\r\n    expectFail(tag, message) {\r\n      // TODO\r\n    }\r\n    expectFailContinue(tag, message) {\r\n      // TODO\r\n    }\r\n    findChild(parent, objectName) {\r\n      // TODO\r\n      // return QtObject\r\n    }\r\n    fuzzyCompare(actual, expected, delta, message) {\r\n      // TODO\r\n    }\r\n    grabImage(item) {\r\n      if (!window.top || !window.top.callPhantom) {\r\n        this.skip(\"Can't use TestCase::grabImage() without PhantomJS.\");\r\n      }\r\n      // TODO\r\n      return {\r\n        red: (x, y) => {},\r\n        green: (x, y) => {},\r\n        blue: (x, y) => {},\r\n        alpha: (x, y) => {},\r\n        pixel: (x, y) => {},\r\n        equals: image => false\r\n      };\r\n    }\r\n    ignoreWarning(message) {\r\n      // TODO\r\n    }\r\n    sleep(ms) {\r\n      // TODO\r\n    }\r\n    tryCompare(obj, property, expected, timeout, message) {\r\n      // TODO\r\n    }\r\n    wait(ms) {\r\n      // TODO\r\n    }\r\n    waitForRendering(item, timeout = 5000) {\r\n      // TODO\r\n    }\r\n    */\n\n    // TODO\n    /*\r\n    // Events\r\n    keyClick(key, modifiers, delay = -1) {\r\n      // TODO\r\n    }\r\n    keyPress(key, modifiers, delay = -1) {\r\n      // TODO\r\n    }\r\n    keyRelease(key, modifiers, delay = -1) {\r\n      // TODO\r\n    }\r\n    mouseClick(item, x, y, button, modifiers, delay = -1) {\r\n      // TODO\r\n    }\r\n    mouseDoubleClick(item, x, y, button, modifiers, delay = -1) {\r\n      // TODO\r\n    }\r\n    mouseDoubleClickSequence(item, x, y, button, modifiers, delay = -1) {\r\n      // TODO\r\n    }\r\n    mouseDrag(item, x, y, dx, dy, button, modifiers, delay = -1) {\r\n      // TODO\r\n    }\r\n    mouseMove(item, x, y, delay = -1) {\r\n      // TODO\r\n    }\r\n    mousePress(item, x, y, button, modifiers, delay = -1) {\r\n      // TODO\r\n    }\r\n    mouseRelease(item, x, y, button, modifiers, delay = -1) {\r\n      // TODO\r\n    }\r\n    mouseWheel(item, x, y, xDelta, yDelta, button, modifiers, delay = -1) {\r\n      // button = Qt.LeftButton, modifiers = Qt.NoModifier\r\n      // TODO\r\n    }\r\n    */\n\n  }]);\n\n  return QtTest_TestCase;\n}(QtQuick_Item);\n\nQtTest_TestCase.versions = /^1\\./;\nQtTest_TestCase.properties = {\n  completed: \"bool\",\n  name: \"string\",\n  optional: \"bool\",\n  running: \"bool\",\n  when: \"bool\",\n  windowShown: \"bool\"\n};\n\nQmlWeb.registerQmlType(QtTest_TestCase);\n\n// WARNING: Can have wrong behavior if url is changed while the socket is in\n// Connecting state.\n// TODO: Recheck everything.\n\n// eslint-disable-next-line no-undef\n\nvar QtWebSockets_WebSocket = function (_QtQml_QtObject28) {\n  _inherits(QtWebSockets_WebSocket, _QtQml_QtObject28);\n\n  function QtWebSockets_WebSocket(meta) {\n    _classCallCheck(this, QtWebSockets_WebSocket);\n\n    var _this143 = _possibleConstructorReturn(this, (QtWebSockets_WebSocket.__proto__ || Object.getPrototypeOf(QtWebSockets_WebSocket)).call(this, meta));\n\n    _this143.$socket = undefined;\n    _this143.$reconnect = false;\n\n    _this143.statusChanged.connect(_this143, _this143.$onStatusChanged);\n    _this143.activeChanged.connect(_this143, _this143.$reconnectSocket);\n    _this143.urlChanged.connect(_this143, _this143.$reconnectSocket);\n    return _this143;\n  }\n\n  _createClass(QtWebSockets_WebSocket, [{\n    key: \"$onStatusChanged\",\n    value: function $onStatusChanged(status) {\n      if (status !== this.WebSocket.Error) {\n        this.errorString = \"\";\n      }\n    }\n  }, {\n    key: \"$connectSocket\",\n    value: function $connectSocket() {\n      var _this144 = this;\n\n      this.$reconnect = false;\n\n      if (!this.url || !this.active) {\n        return;\n      }\n\n      this.status = this.WebSocket.Connecting;\n      this.$socket = new WebSocket(this.url);\n      this.$socket.onopen = function () {\n        _this144.status = _this144.WebSocket.Open;\n      };\n      this.$socket.onclose = function () {\n        _this144.status = _this144.WebSocket.Closed;\n        if (_this144.$reconnect) {\n          _this144.$connectSocket();\n        }\n      };\n      this.$socket.onerror = function (error) {\n        _this144.errorString = error.message;\n        _this144.status = _this144.WebSocket.Error;\n      };\n      this.$socket.onmessage = function (message) {\n        _this144.textMessageReceived(message.data);\n      };\n    }\n  }, {\n    key: \"$reconnectSocket\",\n    value: function $reconnectSocket() {\n      this.$reconnect = true;\n      if (this.status === this.WebSocket.Open) {\n        this.status = this.WebSocket.Closing;\n        this.$socket.close();\n      } else if (this.status !== this.WebSocket.Closing) {\n        this.$connectSocket();\n      }\n    }\n  }, {\n    key: \"sendTextMessage\",\n    value: function sendTextMessage(message) {\n      if (this.status === this.WebSocket.Open) {\n        this.$socket.send(message);\n      }\n    }\n  }, {\n    key: \"sendBinaryMessage\",\n    value: function sendBinaryMessage(message) {\n      if (this.status === this.WebSocket.Open) {\n        this.$socket.send(message);\n      }\n    }\n  }]);\n\n  return QtWebSockets_WebSocket;\n}(QtQml_QtObject);\n\nQtWebSockets_WebSocket.enums = {\n  WebSocket: { Connecting: 0, Open: 1, Closing: 2, Closed: 3, Error: 4 }\n};\nQtWebSockets_WebSocket.properties = {\n  active: \"bool\",\n  status: { type: \"enum\", initialValue: 3 }, // WebSocket.Closed\n  errorString: \"string\",\n  url: \"url\"\n};\nQtWebSockets_WebSocket.signals = {\n  textMessageReceived: [{ type: \"string\", name: \"message\" }]\n};\n\nQmlWeb.registerQmlType(QtWebSockets_WebSocket);\n\n// eslint-disable-next-line no-undef\n\nvar QtWebView_WebView = function (_QtQuick_Item44) {\n  _inherits(QtWebView_WebView, _QtQuick_Item44);\n\n  function QtWebView_WebView(meta) {\n    _classCallCheck(this, QtWebView_WebView);\n\n    var _this145 = _possibleConstructorReturn(this, (QtWebView_WebView.__proto__ || Object.getPrototypeOf(QtWebView_WebView)).call(this, meta));\n\n    _this145.urlChanged.connect(_this145, _this145.$onUrlChanged);\n\n    var iframe = _this145.impl = document.createElement(\"iframe\");\n    iframe.style.display = \"block\";\n    iframe.style.position = \"absolute\";\n    iframe.style.width = \"100%\";\n    iframe.style.height = \"100%\";\n    iframe.style.borderWidth = \"0\";\n    iframe.style.pointerEvents = \"auto\";\n    _this145.dom.appendChild(iframe);\n\n    iframe.onload = function () {\n      try {\n        _this145.title = iframe.contentDocument.title;\n      } catch (e) {\n        console.log(\"CSP prevents us from reading title for \" + _this145.url);\n        _this145.title = \"\";\n      }\n      _this145.loadProgress = 100;\n      _this145.loading = false;\n    };\n    iframe.onerror = function () {\n      _this145.title = \"\";\n      _this145.loadProgress = 0;\n      _this145.loading = false;\n    };\n    return _this145;\n  }\n\n  _createClass(QtWebView_WebView, [{\n    key: \"$onUrlChanged\",\n    value: function $onUrlChanged(newVal) {\n      this.loadProgress = 0;\n      this.loading = true;\n      this.impl.src = newVal;\n    }\n  }]);\n\n  return QtWebView_WebView;\n}(QtQuick_Item);\n\nQtWebView_WebView.versions = /^1\\./;\nQtWebView_WebView.properties = {\n  canGoBack: \"bool\", // TODO\n  canGoForward: \"bool\", // TODO\n  loadProgress: \"int\",\n  loading: \"bool\",\n  title: \"string\",\n  url: \"url\"\n};\nQtWebView_WebView.signals = {\n  /* // TODO\r\n  loadingChanged: [\r\n    { type: \"WebViewLoadRequest\", name: \"loadRequest\" }\r\n  ]\r\n  */\n};\n\nQmlWeb.registerQmlType(QtWebView_WebView);\n\n// eslint-disable-next-line no-undef\n\nvar QtWebEngine_WebEngineView = function (_QtWebView_WebView) {\n  _inherits(QtWebEngine_WebEngineView, _QtWebView_WebView);\n\n  function QtWebEngine_WebEngineView() {\n    _classCallCheck(this, QtWebEngine_WebEngineView);\n\n    return _possibleConstructorReturn(this, (QtWebEngine_WebEngineView.__proto__ || Object.getPrototypeOf(QtWebEngine_WebEngineView)).apply(this, arguments));\n  }\n\n  return QtWebEngine_WebEngineView;\n}(QtWebView_WebView);\n\nQtWebEngine_WebEngineView.versions = /^5\\./;\nQtWebEngine_WebEngineView.properties = {\n  // TODO\n};\nQtWebEngine_WebEngineView.signals = {\n  // TODO\n};\n\nQmlWeb.registerQmlType(QtWebEngine_WebEngineView);\n\n// eslint-disable-next-line no-undef\n\nvar QtWebKit_WebView = function (_QtWebView_WebView2) {\n  _inherits(QtWebKit_WebView, _QtWebView_WebView2);\n\n  function QtWebKit_WebView() {\n    _classCallCheck(this, QtWebKit_WebView);\n\n    return _possibleConstructorReturn(this, (QtWebKit_WebView.__proto__ || Object.getPrototypeOf(QtWebKit_WebView)).apply(this, arguments));\n  }\n\n  return QtWebKit_WebView;\n}(QtWebView_WebView);\n\nQtWebKit_WebView.versions = /^3\\./;\nQtWebKit_WebView.enums = {\n  WebView: {\n    // ErrorDomain\n    NoErrorDomain: 0, InternalErrorDomain: 1, NetworkErrorDomain: 2,\n    HttpErrorDomain: 3, DownloadErrorDomain: 4,\n\n    // LoadStatus\n    LoadStartedStatus: 0, LoadSucceededStatus: 2, LoadFailedStatus: 3,\n\n    // NavigationRequestAction\n    AcceptRequest: 0, IgnoreRequest: 255,\n\n    // NavigationType\n    LinkClickedNavigation: 0, FormSubmittedNavigation: 1,\n    BackForwardNavigation: 2, ReloadNavigation: 3,\n    FormResubmittedNavigation: 4, OtherNavigation: 5\n  }\n};\nQtWebKit_WebView.properties = {\n  icon: \"url\"\n};\nQtWebKit_WebView.signals = {\n  navigationRequested: [{ type: \"var\", name: \"request\" }],\n  linkHovered: [{ type: \"url\", name: \"hoveredUrl\" }, { type: \"string\", name: \"hoveredTitle\" }]\n};\n\nQmlWeb.registerQmlType(QtWebKit_WebView);\n}(typeof global != \"undefined\" ? global : window));\n\n\n","const QmlWeb = {};\r\n\r\nglobal.QmlWeb = QmlWeb;\r\n","let objectIds = 0;\r\n\r\nclass QObject {\r\n  constructor(parent) {\r\n    this.$parent = parent;\r\n    if (parent && parent.$tidyupList) {\r\n      parent.$tidyupList.push(this);\r\n    }\r\n\r\n    // List of things to tidy up when deleting this object.\r\n    this.$tidyupList = [];\r\n    this.$properties = {};\r\n    this.$signals = [];\r\n\r\n    this.objectId = objectIds++;\r\n  }\r\n\r\n  $delete() {\r\n    if (this.$Component) {\r\n      this.$Component.destruction();\r\n    }\r\n\r\n    while (this.$tidyupList.length > 0) {\r\n      const item = this.$tidyupList[0];\r\n      if (item.$delete) {\r\n        // It's a QObject\r\n        item.$delete();\r\n      } else {\r\n        // It must be a signal\r\n        item.disconnect(this);\r\n      }\r\n    }\r\n\r\n    for (const i in this.$properties) {\r\n      const prop = this.$properties[i];\r\n      while (prop.$tidyupList.length > 0) {\r\n        prop.$tidyupList[0].disconnect(prop);\r\n      }\r\n    }\r\n\r\n    if (this.$parent && this.$parent.$tidyupList) {\r\n      const index = this.$parent.$tidyupList.indexOf(this);\r\n      this.$parent.$tidyupList.splice(index, 1);\r\n    }\r\n\r\n    // must do this:\r\n    // 1) parent will be notified and erase object from it's children.\r\n    // 2) DOM node will be removed.\r\n    this.parent = undefined;\r\n\r\n    // Disconnect any slots connected to any of our signals. Do this after\r\n    // clearing the parent, as that relies on parentChanged being handled.\r\n    for (const i in this.$signals) {\r\n      this.$signals[i].disconnect();\r\n    }\r\n  }\r\n\r\n  // must have a `destroy` method\r\n  // http://doc.qt.io/qt-5/qtqml-javascript-dynamicobjectcreation.html\r\n  destroy() {\r\n    this.$delete();\r\n  }\r\n\r\n  $toString(...args) {\r\n    return `${this.constructor.name}(${args.join(\", \")})`;\r\n  }\r\n}\r\n\r\nQmlWeb.QObject = QObject;\r\n","class JSItemModel {\r\n  constructor() {\r\n    this.roleNames = [];\r\n\r\n    const Signal = QmlWeb.Signal;\r\n    this.dataChanged = Signal.signal([\r\n      { type: \"int\", name: \"startIndex\" },\r\n      { type: \"int\", name: \"endIndex\" }\r\n    ]);\r\n    this.rowsInserted = Signal.signal([\r\n      { type: \"int\", name: \"startIndex\" },\r\n      { type: \"int\", name: \"endIndex\" }\r\n    ]);\r\n    this.rowsMoved = Signal.signal([\r\n      { type: \"int\", name: \"sourceStartIndex\" },\r\n      { type: \"int\", name: \"sourceEndIndex\" },\r\n      { type: \"int\", name: \"destinationIndex\" }\r\n    ]);\r\n    this.rowsRemoved = Signal.signal([\r\n      { type: \"int\", name: \"startIndex\" },\r\n      { type: \"int\", name: \"endIndex\" }\r\n    ]);\r\n    this.modelReset = Signal.signal();\r\n  }\r\n\r\n  setRoleNames(names) {\r\n    this.roleNames = names;\r\n  }\r\n}\r\n\r\nQmlWeb.JSItemModel = JSItemModel;\r\n","class QColor {\r\n  constructor(...args) {\r\n    this.$changed = new QmlWeb.Signal();\r\n    this.$r = this.$g = this.$b = 0;\r\n    this.$a = 1;\r\n    const val = args[0];\r\n    if (args.length >= 3) {\r\n      this.$r = args[0];\r\n      this.$g = args[1];\r\n      this.$b = args[2];\r\n      if (args.length >= 4) {\r\n        this.$a = args[3];\r\n      }\r\n    } else if (val instanceof QColor) {\r\n      // Copy constructor\r\n      this.$a = val.a;\r\n      this.$r = val.r;\r\n      this.$g = val.g;\r\n      this.$b = val.b;\r\n    } else if (typeof val === \"string\") {\r\n      const lval = val.toLowerCase();\r\n      if (QColor.colormap[lval]) {\r\n        const rgb = QColor.colormap[lval];\r\n        this.$r = rgb[0] / 255;\r\n        this.$g = rgb[1] / 255;\r\n        this.$b = rgb[2] / 255;\r\n      } else if (lval === \"transparent\") {\r\n        this.$a = 0;\r\n      } else if (lval[0] === \"#\") {\r\n        const hex = lval.substr(1);\r\n        if (hex.length === 3) {\r\n          this.$r = parseInt(hex[0], 16) / 15;\r\n          this.$g = parseInt(hex[1], 16) / 15;\r\n          this.$b = parseInt(hex[2], 16) / 15;\r\n        } else {\r\n          const rgb = hex.match(/.{2}/g).map(x => parseInt(x, 16));\r\n          if (rgb.length === 4) {\r\n            this.$a = rgb.shift() / 255;\r\n          }\r\n          this.$r = rgb[0] / 255;\r\n          this.$g = rgb[1] / 255;\r\n          this.$b = rgb[2] / 255;\r\n        }\r\n      } else {\r\n        throw new Error(`Can not convert ${val} to color`);\r\n      }\r\n    } else if (typeof val !== \"undefined\") {\r\n      throw new Error(`Can not assign ${typeof val} to QColor`);\r\n    }\r\n  }\r\n  toString() {\r\n    if (this.$string) return this.$string;\r\n    const argb = [this.$a, this.$r, this.$g, this.$b].map(x =>\r\n      (Math.round(x * 255) + 0x100).toString(16).substr(-2)\r\n    );\r\n    if (argb[0] === \"ff\") {\r\n      argb.shift(); // We don't need alpha if it's ff\r\n    }\r\n    this.$string = `#${argb.join(\"\")}`;\r\n    return `#${argb.join(\"\")}`;\r\n  }\r\n  get $css() {\r\n    if (this.$cssValue) return this.$cssValue;\r\n    if (this.$a === 1) {\r\n      this.$cssValue = this.toString();\r\n    } else if (this.$a === 0) {\r\n      this.$cssValue = \"transparent\";\r\n    } else {\r\n      const intr = Math.round(this.$r * 255);\r\n      const intg = Math.round(this.$g * 255);\r\n      const intb = Math.round(this.$b * 255);\r\n      this.$cssValue = `rgba(${intr},${intg},${intb},${this.$a})`;\r\n    }\r\n    return this.$cssValue;\r\n  }\r\n  get r() {\r\n    return this.$r;\r\n  }\r\n  get g() {\r\n    return this.$g;\r\n  }\r\n  get b() {\r\n    return this.$b;\r\n  }\r\n  get a() {\r\n    return this.$a;\r\n  }\r\n  set r(r) {\r\n    this.$r = r;\r\n    this.$string = this.$cssValue = null;\r\n    this.$changed.execute();\r\n  }\r\n  set g(g) {\r\n    this.$g = g;\r\n    this.$string = this.$cssValue = null;\r\n    this.$changed.execute();\r\n  }\r\n  set b(b) {\r\n    this.$b = b;\r\n    this.$string = this.$cssValue = null;\r\n    this.$changed.execute();\r\n  }\r\n  set a(a) {\r\n    this.$a = a;\r\n    this.$string = this.$cssValue = null;\r\n    this.$changed.execute();\r\n  }\r\n  get hsvHue() {\r\n    const v = this.hsvValue;\r\n    const m = Math.min(this.$r, this.$g, this.$b);\r\n    if (v === m) return -1;\r\n    if (v === this.$r) return ((this.$g - this.$b) / (v - m) + 1) % 1 / 6;\r\n    if (v === this.$g) return ((this.$b - this.$r) / (v - m) + 2) / 6;\r\n    if (v === this.$b) return ((this.$r - this.$g) / (v - m) + 4) / 6;\r\n    throw new Error();\r\n  }\r\n  get hsvSaturation() {\r\n    const v = this.hsvValue;\r\n    if (v === 0) return 0;\r\n    return 1 - Math.min(this.$r, this.$g, this.$b) / v;\r\n  }\r\n  get hsvValue() {\r\n    return Math.max(this.$r, this.$g, this.$b);\r\n  }\r\n  get hslHue() {\r\n    return this.hsvHue;\r\n  }\r\n  get hslSaturation() {\r\n    const max = Math.max(this.$r, this.$g, this.$b);\r\n    const min = Math.min(this.$r, this.$g, this.$b);\r\n    if (max === min) return 0;\r\n    return (max - min) / (1 - Math.abs(1 - max - min));\r\n  }\r\n  get hslLightness() {\r\n    const max = Math.max(this.$r, this.$g, this.$b);\r\n    const min = Math.min(this.$r, this.$g, this.$b);\r\n    return (max + min) / 2;\r\n  }\r\n  set hsvHue(h) {\r\n    const rgb = QColor.$hsv(h, this.hsvSaturation, this.hsvValue);\r\n    this.$r = rgb[0];\r\n    this.$g = rgb[1];\r\n    this.$b = rgb[2];\r\n    this.$string = this.$cssValue = null;\r\n    this.$changed.execute();\r\n  }\r\n  set hsvSaturation(s) {\r\n    const rgb = QColor.$hsv(this.hsvHue, s, this.hsvValue);\r\n    this.$r = rgb[0];\r\n    this.$g = rgb[1];\r\n    this.$b = rgb[2];\r\n    this.$string = this.$cssValue = null;\r\n    this.$changed.execute();\r\n  }\r\n  set hsvValue(v) {\r\n    const rgb = QColor.$hsv(this.hsvHue, this.hsvSaturation, v);\r\n    this.$r = rgb[0];\r\n    this.$g = rgb[1];\r\n    this.$b = rgb[2];\r\n    this.$string = this.$cssValue = null;\r\n    this.$changed.execute();\r\n  }\r\n  set hslHue(h) {\r\n    const rgb = QColor.$hsl(h, this.hslSaturation, this.hslLightness);\r\n    this.$r = rgb[0];\r\n    this.$g = rgb[1];\r\n    this.$b = rgb[2];\r\n    this.$string = this.$cssValue = null;\r\n    this.$changed.execute();\r\n  }\r\n  set hslSaturation(s) {\r\n    const rgb = QColor.$hsl(this.hslHue, s, this.hslLightness);\r\n    this.$r = rgb[0];\r\n    this.$g = rgb[1];\r\n    this.$b = rgb[2];\r\n    this.$string = this.$cssValue = null;\r\n    this.$changed.execute();\r\n  }\r\n  set hslLightness(l) {\r\n    const rgb = QColor.$hsl(this.hslHue, this.hslSaturation, l);\r\n    this.$r = rgb[0];\r\n    this.$g = rgb[1];\r\n    this.$b = rgb[2];\r\n    this.$string = this.$cssValue = null;\r\n    this.$changed.execute();\r\n  }\r\n\r\n  static rgba = (r, g, b, a = 1) => new QColor(r, g, b, a);\r\n  static hsva = (h, s, v, a = 1) => new QColor(...QColor.$hsv(h, s, v), a);\r\n  static hsla = (h, s, l, a = 1) => new QColor(...QColor.$hsl(h, s, l), a);\r\n\r\n  static $hsv(h, s, v) {\r\n    const c = v * s;\r\n    const m = v - c;\r\n    return QColor.$hcma(h, c, m);\r\n  }\r\n  static $hsl(h, s, l) {\r\n    const c = (1 - Math.abs(2 * l - 1)) * s;\r\n    const m = l - c / 2;\r\n    return QColor.$hcma(h, c, m);\r\n  }\r\n  static $hcma(h, c, m) {\r\n    const hh = h > 0 ? h * 6 % 6 : 0;\r\n    const x = c * (1 - Math.abs(hh % 2 - 1));\r\n    let rgb;\r\n    switch (Math.floor(hh)) {\r\n      case 0:\r\n        rgb = [c, x, 0];\r\n        break;\r\n      case 1:\r\n        rgb = [x, c, 0];\r\n        break;\r\n      case 2:\r\n        rgb = [0, c, x];\r\n        break;\r\n      case 3:\r\n        rgb = [0, x, c];\r\n        break;\r\n      case 4:\r\n        rgb = [x, 0, c];\r\n        break;\r\n      case 5:\r\n        rgb = [c, 0, x];\r\n        break;\r\n    }\r\n    return rgb.map(y => Math.min(1, y + m));\r\n  }\r\n\r\n  static darker(baseColor, factor = 2) {\r\n    const color = baseColor instanceof QColor ?\r\n      baseColor :\r\n      new QColor(baseColor);\r\n    const v = color.hsvValue / factor;\r\n    // Undocumented in Qt, but this matches the observed Qt behaviour\r\n    const s = color.hsvSaturation - Math.max(0, v - 1);\r\n    return QColor.hsva(color.hsvHue, Math.max(0, s), Math.min(1, v), color.a);\r\n  }\r\n  static lighter(baseColor, factor = 1.5) {\r\n    const color = baseColor instanceof QColor ?\r\n      baseColor :\r\n      new QColor(baseColor);\r\n    const v = color.hsvValue * factor;\r\n    // Undocumented in Qt, but this matches the observed Qt behaviour\r\n    const s = color.hsvSaturation - Math.max(0, v - 1);\r\n    return QColor.hsva(color.hsvHue, Math.max(0, s), Math.min(1, v), color.a);\r\n  }\r\n  static equal(lhs, rhs) {\r\n    const a = lhs instanceof QColor ? lhs : new QColor(lhs);\r\n    const b = rhs instanceof QColor ? rhs : new QColor(rhs);\r\n    return a.toString() === b.toString();\r\n  }\r\n\r\n  static colormap = { // https://www.w3.org/TR/SVG/types.html#ColorKeywords\r\n    aliceblue: [240, 248, 255],\r\n    antiquewhite: [250, 235, 215],\r\n    aqua: [0, 255, 255],\r\n    aquamarine: [127, 255, 212],\r\n    azure: [240, 255, 255],\r\n    beige: [245, 245, 220],\r\n    bisque: [255, 228, 196],\r\n    black: [0, 0, 0],\r\n    blanchedalmond: [255, 235, 205],\r\n    blue: [0, 0, 255],\r\n    blueviolet: [138, 43, 226],\r\n    brown: [165, 42, 42],\r\n    burlywood: [222, 184, 135],\r\n    cadetblue: [95, 158, 160],\r\n    chartreuse: [127, 255, 0],\r\n    chocolate: [210, 105, 30],\r\n    coral: [255, 127, 80],\r\n    cornflowerblue: [100, 149, 237],\r\n    cornsilk: [255, 248, 220],\r\n    crimson: [220, 20, 60],\r\n    cyan: [0, 255, 255],\r\n    darkblue: [0, 0, 139],\r\n    darkcyan: [0, 139, 139],\r\n    darkgoldenrod: [184, 134, 11],\r\n    darkgray: [169, 169, 169],\r\n    darkgreen: [0, 100, 0],\r\n    darkgrey: [169, 169, 169],\r\n    darkkhaki: [189, 183, 107],\r\n    darkmagenta: [139, 0, 139],\r\n    darkolivegreen: [85, 107, 47],\r\n    darkorange: [255, 140, 0],\r\n    darkorchid: [153, 50, 204],\r\n    darkred: [139, 0, 0],\r\n    darksalmon: [233, 150, 122],\r\n    darkseagreen: [143, 188, 143],\r\n    darkslateblue: [72, 61, 139],\r\n    darkslategray: [47, 79, 79],\r\n    darkslategrey: [47, 79, 79],\r\n    darkturquoise: [0, 206, 209],\r\n    darkviolet: [148, 0, 211],\r\n    deeppink: [255, 20, 147],\r\n    deepskyblue: [0, 191, 255],\r\n    dimgray: [105, 105, 105],\r\n    dimgrey: [105, 105, 105],\r\n    dodgerblue: [30, 144, 255],\r\n    firebrick: [178, 34, 34],\r\n    floralwhite: [255, 250, 240],\r\n    forestgreen: [34, 139, 34],\r\n    fuchsia: [255, 0, 255],\r\n    gainsboro: [220, 220, 220],\r\n    ghostwhite: [248, 248, 255],\r\n    gold: [255, 215, 0],\r\n    goldenrod: [218, 165, 32],\r\n    gray: [128, 128, 128],\r\n    grey: [128, 128, 128],\r\n    green: [0, 128, 0],\r\n    greenyellow: [173, 255, 47],\r\n    honeydew: [240, 255, 240],\r\n    hotpink: [255, 105, 180],\r\n    indianred: [205, 92, 92],\r\n    indigo: [75, 0, 130],\r\n    ivory: [255, 255, 240],\r\n    khaki: [240, 230, 140],\r\n    lavender: [230, 230, 250],\r\n    lavenderblush: [255, 240, 245],\r\n    lawngreen: [124, 252, 0],\r\n    lemonchiffon: [255, 250, 205],\r\n    lightblue: [173, 216, 230],\r\n    lightcoral: [240, 128, 128],\r\n    lightcyan: [224, 255, 255],\r\n    lightgoldenrodyellow: [250, 250, 210],\r\n    lightgray: [211, 211, 211],\r\n    lightgreen: [144, 238, 144],\r\n    lightgrey: [211, 211, 211],\r\n    lightpink: [255, 182, 193],\r\n    lightsalmon: [255, 160, 122],\r\n    lightseagreen: [32, 178, 170],\r\n    lightskyblue: [135, 206, 250],\r\n    lightslategray: [119, 136, 153],\r\n    lightslategrey: [119, 136, 153],\r\n    lightsteelblue: [176, 196, 222],\r\n    lightyellow: [255, 255, 224],\r\n    lime: [0, 255, 0],\r\n    limegreen: [50, 205, 50],\r\n    linen: [250, 240, 230],\r\n    magenta: [255, 0, 255],\r\n    maroon: [128, 0, 0],\r\n    mediumaquamarine: [102, 205, 170],\r\n    mediumblue: [0, 0, 205],\r\n    mediumorchid: [186, 85, 211],\r\n    mediumpurple: [147, 112, 219],\r\n    mediumseagreen: [60, 179, 113],\r\n    mediumslateblue: [123, 104, 238],\r\n    mediumspringgreen: [0, 250, 154],\r\n    mediumturquoise: [72, 209, 204],\r\n    mediumvioletred: [199, 21, 133],\r\n    midnightblue: [25, 25, 112],\r\n    mintcream: [245, 255, 250],\r\n    mistyrose: [255, 228, 225],\r\n    moccasin: [255, 228, 181],\r\n    navajowhite: [255, 222, 173],\r\n    navy: [0, 0, 128],\r\n    oldlace: [253, 245, 230],\r\n    olive: [128, 128, 0],\r\n    olivedrab: [107, 142, 35],\r\n    orange: [255, 165, 0],\r\n    orangered: [255, 69, 0],\r\n    orchid: [218, 112, 214],\r\n    palegoldenrod: [238, 232, 170],\r\n    palegreen: [152, 251, 152],\r\n    paleturquoise: [175, 238, 238],\r\n    palevioletred: [219, 112, 147],\r\n    papayawhip: [255, 239, 213],\r\n    peachpuff: [255, 218, 185],\r\n    peru: [205, 133, 63],\r\n    pink: [255, 192, 203],\r\n    plum: [221, 160, 221],\r\n    powderblue: [176, 224, 230],\r\n    purple: [128, 0, 128],\r\n    red: [255, 0, 0],\r\n    rosybrown: [188, 143, 143],\r\n    royalblue: [65, 105, 225],\r\n    saddlebrown: [139, 69, 19],\r\n    salmon: [250, 128, 114],\r\n    sandybrown: [244, 164, 96],\r\n    seagreen: [46, 139, 87],\r\n    seashell: [255, 245, 238],\r\n    sienna: [160, 82, 45],\r\n    silver: [192, 192, 192],\r\n    skyblue: [135, 206, 235],\r\n    slateblue: [106, 90, 205],\r\n    slategray: [112, 128, 144],\r\n    slategrey: [112, 128, 144],\r\n    snow: [255, 250, 250],\r\n    springgreen: [0, 255, 127],\r\n    steelblue: [70, 130, 180],\r\n    tan: [210, 180, 140],\r\n    teal: [0, 128, 128],\r\n    thistle: [216, 191, 216],\r\n    tomato: [255, 99, 71],\r\n    turquoise: [64, 224, 208],\r\n    violet: [238, 130, 238],\r\n    wheat: [245, 222, 179],\r\n    white: [255, 255, 255],\r\n    whitesmoke: [245, 245, 245],\r\n    yellow: [255, 255, 0],\r\n    yellowgreen: [154, 205, 50]\r\n  };\r\n\r\n  static nonNullableType = true;\r\n  static requireConstructor = true;\r\n}\r\nQmlWeb.QColor = QColor;\r\n","class QFont extends QmlWeb.QObject {\r\n  constructor(parent) {\r\n    super(parent);\r\n    this.Font = QFont.Font;\r\n\r\n    const Font = this.Font;\r\n\r\n    QmlWeb.createProperties(this, {\r\n      bold: \"bool\",\r\n      capitalization: { type: \"enum\", initialValue: Font.MixedCase },\r\n      family: { type: \"string\", initialValue: \"sans-serif\" },\r\n      italic: \"bool\",\r\n      letterSpacing: \"real\",\r\n      pixelSize: { type: \"int\", initialValue: 13 },\r\n      pointSize: { type: \"real\", initialValue: 10 },\r\n      strikeout: \"bool\",\r\n      underline: \"bool\",\r\n      weight: { type: \"enum\", initialValue: Font.Normal },\r\n      wordSpacing: \"real\"\r\n    });\r\n\r\n    this.$sizeLock = false;\r\n\r\n    this.boldChanged.connect(this, this.$onBoldChanged);\r\n    this.capitalizationChanged.connect(this, this.$onCapitalizationChanged);\r\n    this.familyChanged.connect(this, this.$onFamilyChanged);\r\n    this.italicChanged.connect(this, this.$onItalicChanged);\r\n    this.letterSpacingChanged.connect(this, this.$onLetterSpacingChanged);\r\n    this.pixelSizeChanged.connect(this, this.$onPixelSizeChanged);\r\n    this.pointSizeChanged.connect(this, this.$onPointSizeChanged);\r\n    this.strikeoutChanged.connect(this, this.$onStrikeoutChanged);\r\n    this.underlineChanged.connect(this, this.$onUnderlineChanged);\r\n    this.weightChanged.connect(this, this.$onWidthChanged);\r\n    this.wordSpacingChanged.connect(this, this.$onWordSpacingChanged);\r\n  }\r\n  $onBoldChanged(newVal) {\r\n    const Font = this.Font;\r\n    this.weight = newVal ? Font.Bold : Font.Normal;\r\n  }\r\n  $onCapitalizationChanged(newVal) {\r\n    const style = this.$parent.dom.firstChild.style;\r\n    style.fontVariant = newVal === this.Font.SmallCaps ? \"small-caps\" : \"none\";\r\n    style.textTransform = this.$capitalizationToTextTransform(newVal);\r\n  }\r\n  $onFamilyChanged(newVal) {\r\n    const style = this.$parent.dom.firstChild.style;\r\n    style.fontFamily = newVal;\r\n  }\r\n  $onItalicChanged(newVal) {\r\n    const style = this.$parent.dom.firstChild.style;\r\n    style.fontStyle = newVal ? \"italic\" : \"normal\";\r\n  }\r\n  $onLetterSpacingChanged(newVal) {\r\n    const style = this.$parent.dom.firstChild.style;\r\n    style.letterSpacing = newVal !== undefined ? `${newVal}px` : \"\";\r\n  }\r\n  $onPixelSizeChanged(newVal) {\r\n    if (!this.$sizeLock) {\r\n      this.pointSize = newVal * 0.75;\r\n    }\r\n    const val = `${newVal}px`;\r\n    this.$parent.dom.style.fontSize = val;\r\n    this.$parent.dom.firstChild.style.fontSize = val;\r\n  }\r\n  $onPointSizeChanged(newVal) {\r\n    this.$sizeLock = true;\r\n    this.pixelSize = Math.round(newVal / 0.75);\r\n    this.$sizeLock = false;\r\n  }\r\n  $onStrikeoutChanged(newVal) {\r\n    const style = this.$parent.dom.firstChild.style;\r\n    style.textDecoration = newVal\r\n      ? \"line-through\"\r\n      : this.$parent.font.underline\r\n        ? \"underline\"\r\n        : \"none\";\r\n  }\r\n  $onUnderlineChanged(newVal) {\r\n    const style = this.$parent.dom.firstChild.style;\r\n    style.textDecoration = this.$parent.font.strikeout\r\n      ? \"line-through\"\r\n      : newVal\r\n        ? \"underline\"\r\n        : \"none\";\r\n  }\r\n  $onWidthChanged(newVal) {\r\n    const style = this.$parent.dom.firstChild.style;\r\n    style.fontWeight = this.$weightToCss(newVal);\r\n  }\r\n  $onWordSpacingChanged(newVal) {\r\n    const style = this.$parent.dom.firstChild.style;\r\n    style.wordSpacing = newVal !== undefined ? `${newVal}px` : \"\";\r\n  }\r\n\r\n  $weightToCss(weight) {\r\n    const Font = this.Font;\r\n    switch (weight) {\r\n      case Font.Thin: return \"100\";\r\n      case Font.ExtraLight: return \"200\";\r\n      case Font.Light: return \"300\";\r\n      case Font.Normal: return \"400\";\r\n      case Font.Medium: return \"500\";\r\n      case Font.DemiBold: return \"600\";\r\n      case Font.Bold: return \"700\";\r\n      case Font.ExtraBold: return \"800\";\r\n      case Font.Black: return \"900\";\r\n    }\r\n    return \"normal\";\r\n  }\r\n  $capitalizationToTextTransform(capitalization) {\r\n    const Font = this.Font;\r\n    switch (capitalization) {\r\n      case Font.AllUppercase: return \"uppercase\";\r\n      case Font.AllLowercase: return \"lowercase\";\r\n      case Font.Capitalize: return \"capitalize\";\r\n    }\r\n    return \"none\";\r\n  }\r\n\r\n  static Font = {\r\n    // Capitalization\r\n    MixedCase: 0,\r\n    AllUppercase: 1,\r\n    AllLowercase: 2,\r\n    SmallCaps: 3,\r\n    Capitalize: 4,\r\n    // Weight\r\n    Thin: 0,\r\n    ExtraLight: 12,\r\n    Light: 25,\r\n    Normal: 50,\r\n    Medium: 57,\r\n    DemiBold: 63,\r\n    Bold: 75,\r\n    ExtraBold: 81,\r\n    Black: 87\r\n  };\r\n  static requireParent = true;\r\n}\r\n\r\nQmlWeb.QFont = QFont;\r\nglobal.Font = QFont.Font; // HACK\r\n","class QMatrix4x4 extends QmlWeb.QObject {\r\n  constructor(...args) {\r\n    super();\r\n    let data = args;\r\n    if (args.length === 0) {\r\n      data = [];\r\n      for (let row = 1; row <= 4; row++) {\r\n        for (let col = 1; col <= 4; col++) {\r\n          data.push(col === row ? 1 : 0);\r\n        }\r\n      }\r\n    } else if (args.length === 1 && args[0] instanceof QMatrix4x4) {\r\n      data = [];\r\n      for (let row = 1; row <= 4; row++) {\r\n        for (let col = 1; col <= 4; col++) {\r\n          const name = `m${row}${col}`;\r\n          data.push(args[0][name]);\r\n        }\r\n      }\r\n    } else if (args.length !== 16) {\r\n      throw new Error(\"Invalid arguments\");\r\n    }\r\n    for (let row = 1; row <= 4; row++) {\r\n      for (let col = 1; col <= 4; col++) {\r\n        const name = `m${row}${col}`;\r\n        const value = data[4 * (row - 1) + col - 1];\r\n        QmlWeb.createProperty(\"real\", this, name, { initialValue: value });\r\n      }\r\n    }\r\n  }\r\n  toString() {\r\n    return super.$toString(\r\n      this.m11, this.m12, this.m13, this.m14,\r\n      this.m21, this.m22, this.m23, this.m24,\r\n      this.m31, this.m32, this.m33, this.m34,\r\n      this.m41, this.m42, this.m43, this.m44\r\n    );\r\n  }\r\n  times(a) {\r\n    if (a instanceof QmlWeb.QMatrix4x4) {\r\n      const t = this;\r\n      return new QmlWeb.QMatrix4x4(\r\n        t.m11 * a.m11 + t.m12 * a.m21 + t.m13 * a.m31 + t.m14 * a.m41,\r\n        t.m11 * a.m12 + t.m12 * a.m22 + t.m13 * a.m32 + t.m14 * a.m42,\r\n        t.m11 * a.m13 + t.m12 * a.m23 + t.m13 * a.m33 + t.m14 * a.m43,\r\n        t.m11 * a.m14 + t.m12 * a.m24 + t.m13 * a.m34 + t.m14 * a.m44,\r\n\r\n        t.m21 * a.m11 + t.m22 * a.m21 + t.m23 * a.m31 + t.m24 * a.m41,\r\n        t.m21 * a.m12 + t.m22 * a.m22 + t.m23 * a.m32 + t.m24 * a.m42,\r\n        t.m21 * a.m13 + t.m22 * a.m23 + t.m23 * a.m33 + t.m24 * a.m43,\r\n        t.m21 * a.m14 + t.m22 * a.m24 + t.m23 * a.m34 + t.m24 * a.m44,\r\n\r\n        t.m31 * a.m11 + t.m32 * a.m21 + t.m33 * a.m31 + t.m34 * a.m41,\r\n        t.m31 * a.m12 + t.m32 * a.m22 + t.m33 * a.m32 + t.m34 * a.m42,\r\n        t.m31 * a.m13 + t.m32 * a.m23 + t.m33 * a.m33 + t.m34 * a.m43,\r\n        t.m31 * a.m14 + t.m32 * a.m24 + t.m33 * a.m34 + t.m34 * a.m44,\r\n\r\n        t.m41 * a.m11 + t.m42 * a.m21 + t.m43 * a.m31 + t.m44 * a.m41,\r\n        t.m41 * a.m12 + t.m42 * a.m22 + t.m43 * a.m32 + t.m44 * a.m42,\r\n        t.m41 * a.m13 + t.m42 * a.m23 + t.m43 * a.m33 + t.m44 * a.m43,\r\n        t.m41 * a.m14 + t.m42 * a.m24 + t.m43 * a.m34 + t.m44 * a.m44\r\n      );\r\n    }\r\n    if (a instanceof QmlWeb.QVector4D) {\r\n      const t = this;\r\n      return new QmlWeb.QVector4D(\r\n        t.m11 * a.x + t.m12 * a.y + t.m13 * a.z + t.m14 * a.w,\r\n        t.m21 * a.x + t.m22 * a.y + t.m23 * a.z + t.m24 * a.w,\r\n        t.m31 * a.x + t.m32 * a.y + t.m33 * a.z + t.m34 * a.w,\r\n        t.m41 * a.x + t.m42 * a.y + t.m43 * a.z + t.m44 * a.w\r\n      );\r\n    }\r\n    if (a instanceof QmlWeb.QVector3D) {\r\n      const v = this.times(new QmlWeb.QVector4D(a.x, a.y, a.z, 1));\r\n      return new QmlWeb.QVector3D(v.x / v.w, v.y / v.w, v.z / v.w);\r\n    }\r\n    return new QMatrix4x4(\r\n      this.m11 * a, this.m12 * a, this.m13 * a, this.m14 * a,\r\n      this.m21 * a, this.m22 * a, this.m23 * a, this.m24 * a,\r\n      this.m31 * a, this.m32 * a, this.m33 * a, this.m34 * a,\r\n      this.m41 * a, this.m42 * a, this.m43 * a, this.m44 * a\r\n    );\r\n  }\r\n  plus(other) {\r\n    const a = other instanceof QMatrix4x4 ? other : new QMatrix4x4();\r\n    return new QMatrix4x4(\r\n      this.m11 + a.m11, this.m12 + a.m12, this.m13 + a.m13, this.m14 + a.m14,\r\n      this.m21 + a.m21, this.m22 + a.m22, this.m23 + a.m23, this.m24 + a.m24,\r\n      this.m31 + a.m31, this.m32 + a.m32, this.m33 + a.m33, this.m34 + a.m34,\r\n      this.m41 + a.m41, this.m42 + a.m42, this.m43 + a.m43, this.m44 + a.m44\r\n    );\r\n  }\r\n  minus(other) {\r\n    const a = other instanceof QMatrix4x4 ? other : new QMatrix4x4();\r\n    return new QMatrix4x4(\r\n      this.m11 - a.m11, this.m12 - a.m12, this.m13 - a.m13, this.m14 - a.m14,\r\n      this.m21 - a.m21, this.m22 - a.m22, this.m23 - a.m23, this.m24 - a.m24,\r\n      this.m31 - a.m31, this.m32 - a.m32, this.m33 - a.m33, this.m34 - a.m34,\r\n      this.m41 - a.m41, this.m42 - a.m42, this.m43 - a.m43, this.m44 - a.m44\r\n    );\r\n  }\r\n  row(i) {\r\n    const row = i + 1;\r\n    const arr = [1, 2, 3, 4].map(col => this[`m${row}${col}`]);\r\n    return new QmlWeb.QVector4D(...arr);\r\n  }\r\n  column(i) {\r\n    const col = i + 1;\r\n    const arr = [1, 2, 3, 4].map(row => this[`m${row}${col}`]);\r\n    return new QmlWeb.QVector4D(...arr);\r\n  }\r\n  determinant() {\r\n    // Laplace expansion\r\n    const t = this;\r\n    const s0 = t.m11 * t.m22 - t.m12 * t.m21;\r\n    const c5 = t.m33 * t.m44 - t.m34 * t.m43;\r\n    const s1 = t.m11 * t.m23 - t.m13 * t.m21;\r\n    const c4 = t.m32 * t.m44 - t.m34 * t.m42;\r\n    const s2 = t.m11 * t.m24 - t.m14 * t.m21;\r\n    const c3 = t.m32 * t.m43 - t.m33 * t.m42;\r\n    const s3 = t.m12 * t.m23 - t.m13 * t.m22;\r\n    const c2 = t.m31 * t.m44 - t.m34 * t.m41;\r\n    const s4 = t.m12 * t.m24 - t.m14 * t.m22;\r\n    const c1 = t.m31 * t.m43 - t.m33 * t.m41;\r\n    const s5 = t.m13 * t.m24 - t.m14 * t.m23;\r\n    const c0 = t.m31 * t.m42 - t.m32 * t.m41;\r\n    return s0 * c5 - s1 * c4 + s2 * c3 + s3 * c2 - s4 * c1 + s5 * c0;\r\n  }\r\n  inverted() {\r\n    // Laplace expansion\r\n    const t = this;\r\n    const s0 = t.m11 * t.m22 - t.m12 * t.m21;\r\n    const c5 = t.m33 * t.m44 - t.m34 * t.m43;\r\n    const s1 = t.m11 * t.m23 - t.m13 * t.m21;\r\n    const c4 = t.m32 * t.m44 - t.m34 * t.m42;\r\n    const s2 = t.m11 * t.m24 - t.m14 * t.m21;\r\n    const c3 = t.m32 * t.m43 - t.m33 * t.m42;\r\n    const s3 = t.m12 * t.m23 - t.m13 * t.m22;\r\n    const c2 = t.m31 * t.m44 - t.m34 * t.m41;\r\n    const s4 = t.m12 * t.m24 - t.m14 * t.m22;\r\n    const c1 = t.m31 * t.m43 - t.m33 * t.m41;\r\n    const s5 = t.m13 * t.m24 - t.m14 * t.m23;\r\n    const c0 = t.m31 * t.m42 - t.m32 * t.m41;\r\n    const det = s0 * c5 - s1 * c4 + s2 * c3 + s3 * c2 - s4 * c1 + s5 * c0;\r\n    const adj = [\r\n      +t.m22 * c5 - t.m23 * c4 + t.m24 * c3,\r\n      -t.m12 * c5 + t.m13 * c4 - t.m14 * c3,\r\n      +t.m42 * s5 - t.m43 * s4 + t.m44 * s3,\r\n      -t.m32 * s5 + t.m33 * s4 - t.m34 * s3,\r\n\r\n      -t.m21 * c5 + t.m23 * c2 - t.m24 * c1,\r\n      +t.m11 * c5 - t.m13 * c2 + t.m14 * c1,\r\n      -t.m41 * s5 + t.m43 * s2 - t.m44 * s1,\r\n      +t.m31 * s5 - t.m33 * s2 + t.m34 * s1,\r\n\r\n      +t.m21 * c4 - t.m22 * c2 + t.m24 * c0,\r\n      -t.m11 * c4 + t.m12 * c2 - t.m14 * c0,\r\n      +t.m41 * s4 - t.m42 * s2 + t.m44 * s0,\r\n      -t.m31 * s4 + t.m32 * s2 - t.m34 * s0,\r\n\r\n      -t.m21 * c3 + t.m22 * c1 - t.m23 * c0,\r\n      +t.m11 * c3 - t.m12 * c1 + t.m13 * c0,\r\n      -t.m41 * s3 + t.m42 * s1 - t.m43 * s0,\r\n      +t.m31 * s3 - t.m32 * s1 + t.m33 * s0\r\n    ];\r\n    return new QMatrix4x4(...adj.map(x => x / det));\r\n  }\r\n  transposed() {\r\n    return new QMatrix4x4(\r\n      this.m11, this.m21, this.m31, this.m41,\r\n      this.m12, this.m22, this.m32, this.m42,\r\n      this.m13, this.m23, this.m33, this.m43,\r\n      this.m14, this.m24, this.m34, this.m44\r\n    );\r\n  }\r\n  fuzzyEquals(a, epsilon = 0.00001) {\r\n    for (let row = 1; row <= 4; row++) {\r\n      for (let col = 1; col <= 4; col++) {\r\n        const name = `m${row}${col}`;\r\n        if (Math.abs(this[name] - a[name]) > epsilon) {\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  static nonNullableType = true;\r\n  static requireConstructor = true;\r\n}\r\n\r\nQmlWeb.QMatrix4x4 = QMatrix4x4;\r\n","class QPointF extends QmlWeb.QObject {\r\n  constructor(...args) {\r\n    super();\r\n    let data = args;\r\n    if (args.length === 0) {\r\n      data = [0, 0];\r\n    } else if (args.length === 1 && typeof args[0] === \"string\") {\r\n      data = args[0].split(\",\").map(x => parseFloat(x.trim()));\r\n      if (data.length !== 2) throw new Error(\"point expected\");\r\n    } else if (args.length === 1 && args[0] instanceof QPointF) {\r\n      data = [args[0].x, args[0].y];\r\n    } else if (args.length !== 2) {\r\n      throw new Error(\"Invalid arguments\");\r\n    }\r\n    QmlWeb.createProperties(this, {\r\n      x: { type: \"real\", initialValue: data[0] },\r\n      y: { type: \"real\", initialValue: data[1] }\r\n    });\r\n  }\r\n  toString() {\r\n    return super.$toString(this.x, this.y);\r\n  }\r\n\r\n  static nonNullableType = true;\r\n  static requireConstructor = true;\r\n}\r\n\r\nQmlWeb.QPointF = QPointF;\r\n","class QQuaternion extends QmlWeb.QObject {\r\n  constructor(...args) {\r\n    super();\r\n    let data = args;\r\n    if (args.length === 1 && typeof args[0] === \"string\") {\r\n      data = args[0].split(\",\").map(x => parseFloat(x.trim()));\r\n      if (data.length !== 4) data = [];\r\n    } else if (args.length === 1 && args[0] instanceof QQuaternion) {\r\n      data = [args[0].scalar, args[0].x, args[0].y, args[0].z];\r\n    }\r\n    if (data.length === 0) {\r\n      data = [1, 0, 0, 0];\r\n    } else if (data.length !== 4) {\r\n      throw new Error(\"Invalid arguments\");\r\n    }\r\n    QmlWeb.createProperties(this, {\r\n      scalar: { type: \"real\", initialValue: data[0] },\r\n      x: { type: \"real\", initialValue: data[1] },\r\n      y: { type: \"real\", initialValue: data[2] },\r\n      z: { type: \"real\", initialValue: data[3] }\r\n    });\r\n  }\r\n  toString() {\r\n    return super.$toString(this.scalar, this.x, this.y, this.z);\r\n  }\r\n\r\n  static nonNullableType = true;\r\n  static requireConstructor = true;\r\n}\r\n\r\nQmlWeb.QQuaternion = QQuaternion;\r\n","class QRectF extends QmlWeb.QObject {\r\n  constructor(...args) {\r\n    super();\r\n    let data = args;\r\n    if (args.length === 0) {\r\n      data = [0, 0, 0, 0];\r\n    } else if (args.length === 1 && typeof args[0] === \"string\") {\r\n      const mask = /^\\s*[-\\d.]+\\s*,\\s*[-\\d.]+\\s*,\\s*[-\\d.]+\\s*x\\s*[-\\d.]+\\s*$/;\r\n      if (!args[0].match(mask)) throw new Error(\"rect expected\");\r\n      data = args[0].replace(\"x\", \",\").split(\",\")\r\n                    .map(x => parseFloat(x.trim()));\r\n    } else if (args.length === 1 && args[0] instanceof QRectF) {\r\n      data = [args[0].x, args[0].y, args[0].z, args[0].width];\r\n    } else if (args.length !== 4) {\r\n      throw new Error(\"Invalid arguments\");\r\n    }\r\n    QmlWeb.createProperties(this, {\r\n      x: { type: \"real\", initialValue: data[0] },\r\n      y: { type: \"real\", initialValue: data[1] },\r\n      width: { type: \"real\", initialValue: data[2] },\r\n      height: { type: \"real\", initialValue: data[3] }\r\n    });\r\n  }\r\n  toString() {\r\n    return super.$toString(this.x, this.y, this.width, this.height);\r\n  }\r\n\r\n  static nonNullableType = true;\r\n  static requireConstructor = true;\r\n}\r\n\r\nQmlWeb.QRectF = QRectF;\r\n","class QSizeF extends QmlWeb.QObject {\r\n  constructor(...args) {\r\n    super();\r\n    let data = args;\r\n    if (args.length === 0) {\r\n      data = [-1, -1];\r\n    } else if (args.length === 1 && typeof args[0] === \"string\") {\r\n      data = args[0].split(\"x\").map(x => parseFloat(x.trim()));\r\n      if (data.length !== 2) throw new Error(\"size expected\");\r\n    } else if (args.length === 1 && args[0] instanceof QSizeF) {\r\n      data = [args[0].width, args[0].height];\r\n    } else if (args.length !== 2) {\r\n      throw new Error(\"Invalid arguments\");\r\n    }\r\n    QmlWeb.createProperties(this, {\r\n      width: { type: \"real\", initialValue: data[0] },\r\n      height: { type: \"real\", initialValue: data[1] }\r\n    });\r\n  }\r\n  toString() {\r\n    return super.$toString(this.width, this.height);\r\n  }\r\n\r\n  static nonNullableType = true;\r\n  static requireConstructor = true;\r\n}\r\n\r\nQmlWeb.QSizeF = QSizeF;\r\n","class QVector2D extends QmlWeb.QObject {\r\n  constructor(...args) {\r\n    super();\r\n    let data = args;\r\n    if (args.length === 1 && typeof args[0] === \"string\") {\r\n      data = args[0].split(\",\").map(x => parseFloat(x.trim()));\r\n      if (data.length !== 2) data = [];\r\n    } else if (args.length === 1 && args[0] instanceof QVector2D) {\r\n      data = [args[0].x, args[0].y];\r\n    }\r\n    if (data.length === 0) {\r\n      data = [0, 0];\r\n    } else if (data.length !== 2) {\r\n      throw new Error(\"Invalid arguments\");\r\n    }\r\n    QmlWeb.createProperties(this, {\r\n      x: { type: \"real\", initialValue: data[0] },\r\n      y: { type: \"real\", initialValue: data[1] }\r\n    });\r\n  }\r\n  toString() {\r\n    return super.$toString(this.x, this.y);\r\n  }\r\n  dotProduct(a) {\r\n    if (a instanceof QVector2D) {\r\n      return a.x * this.x + a.y * this.y;\r\n    }\r\n    return 0;\r\n  }\r\n  times(a) {\r\n    if (a instanceof QVector2D) {\r\n      return new QVector2D(this.x * a.x, this.y * a.y);\r\n    }\r\n    return new QVector2D(this.x * a, this.y * a);\r\n  }\r\n  plus(a) {\r\n    if (a instanceof QVector2D) {\r\n      return new QVector2D(this.x + a.x, this.y + a.y);\r\n    }\r\n    return new QVector2D(this.x, this.y);\r\n  }\r\n  minus(a) {\r\n    if (a instanceof QVector2D) {\r\n      return new QVector2D(this.x - a.x, this.y - a.y);\r\n    }\r\n    return new QVector2D(this.x, this.y);\r\n  }\r\n  normalized() {\r\n    const length = this.length();\r\n    return this.times(1 / (length === 0 ? 1 : length));\r\n  }\r\n  length() {\r\n    return Math.sqrt(this.dotProduct(this));\r\n  }\r\n  toVector3d() {\r\n    return new QmlWeb.QVector3D(this.x, this.y, 0);\r\n  }\r\n  toVector4d() {\r\n    return new QmlWeb.QVector4D(this.x, this.y, 0, 0);\r\n  }\r\n  fuzzyEquals(a, epsilon = 0.00001) {\r\n    return [this.x - a.x, this.y - a.y].every(\r\n      delta => Math.abs(delta) <= epsilon\r\n    );\r\n  }\r\n\r\n  static nonNullableType = true;\r\n  static requireConstructor = true;\r\n}\r\n\r\nQmlWeb.QVector2D = QVector2D;\r\n","class QVector3D extends QmlWeb.QObject {\r\n  constructor(...args) {\r\n    super();\r\n    let data = args;\r\n    if (args.length === 1 && typeof args[0] === \"string\") {\r\n      data = args[0].split(\",\").map(x => parseFloat(x.trim()));\r\n      if (data.length !== 3) data = [];\r\n    } else if (args.length === 1 && args[0] instanceof QVector3D) {\r\n      data = [args[0].x, args[0].y, args[0].z];\r\n    }\r\n    if (data.length === 0) {\r\n      data = [0, 0, 0];\r\n    } else if (data.length !== 3) {\r\n      throw new Error(\"Invalid arguments\");\r\n    }\r\n    QmlWeb.createProperties(this, {\r\n      x: { type: \"real\", initialValue: data[0] },\r\n      y: { type: \"real\", initialValue: data[1] },\r\n      z: { type: \"real\", initialValue: data[2] }\r\n    });\r\n  }\r\n  toString() {\r\n    return super.$toString(this.x, this.y, this.z);\r\n  }\r\n  crossProduct(a) {\r\n    if (a instanceof QVector3D) {\r\n      return new QVector3D(\r\n        this.y * a.z - this.z * a.y,\r\n        this.z * a.x - this.x * a.z,\r\n        this.x * a.y - this.y * a.x\r\n      );\r\n    }\r\n    return new QVector3D();\r\n  }\r\n  dotProduct(a) {\r\n    if (a instanceof QVector3D) {\r\n      return a.x * this.x + a.y * this.y + a.z * this.z;\r\n    }\r\n    return 0;\r\n  }\r\n  times(a) {\r\n    if (a instanceof QmlWeb.QMatrix4x4) {\r\n      const v = new QmlWeb.QVector4D(this.x, this.y, this.z, 1).times(a);\r\n      return new QVector3D(v.x / v.w, v.y / v.w, v.z / v.w);\r\n    }\r\n    if (a instanceof QVector3D) {\r\n      return new QVector3D(this.x * a.x, this.y * a.y, this.z * a.z);\r\n    }\r\n    return new QVector3D(this.x * a, this.y * a, this.z * a);\r\n  }\r\n  plus(a) {\r\n    if (a instanceof QVector3D) {\r\n      return new QVector3D(this.x + a.x, this.y + a.y, this.z + a.z);\r\n    }\r\n    return new QVector3D(this.x, this.y, this.z);\r\n  }\r\n  minus(a) {\r\n    if (a instanceof QVector3D) {\r\n      return new QVector3D(this.x - a.x, this.y - a.y, this.z - a.z);\r\n    }\r\n    return new QVector3D(this.x, this.y, this.z);\r\n  }\r\n  normalized() {\r\n    const length = this.length();\r\n    return this.times(1 / (length === 0 ? 1 : length));\r\n  }\r\n  length() {\r\n    return Math.sqrt(this.dotProduct(this));\r\n  }\r\n  toVector2d() {\r\n    return new QmlWeb.QVector2D(this.x, this.y);\r\n  }\r\n  toVector4d() {\r\n    return new QmlWeb.QVector4D(this.x, this.y, this.z, 0);\r\n  }\r\n  fuzzyEquals(a, epsilon = 0.00001) {\r\n    return [this.x - a.x, this.y - a.y, this.z - a.z].every(\r\n      delta => Math.abs(delta) <= epsilon\r\n    );\r\n  }\r\n\r\n  static nonNullableType = true;\r\n  static requireConstructor = true;\r\n}\r\n\r\nQmlWeb.QVector3D = QVector3D;\r\n","class QVector4D extends QmlWeb.QObject {\r\n  constructor(...args) {\r\n    super();\r\n    let data = args;\r\n    if (args.length === 1 && typeof args[0] === \"string\") {\r\n      data = args[0].split(\",\").map(x => parseFloat(x.trim()));\r\n      if (data.length !== 4) data = [];\r\n    } else if (args.length === 1 && args[0] instanceof QVector4D) {\r\n      data = [args[0].x, args[0].y, args[0].z, args[0].w];\r\n    }\r\n    if (data.length === 0) {\r\n      data = [0, 0, 0, 0];\r\n    } else if (data.length !== 4) {\r\n      throw new Error(\"Invalid arguments\");\r\n    }\r\n    QmlWeb.createProperties(this, {\r\n      x: { type: \"real\", initialValue: data[0] },\r\n      y: { type: \"real\", initialValue: data[1] },\r\n      z: { type: \"real\", initialValue: data[2] },\r\n      w: { type: \"real\", initialValue: data[3] }\r\n    });\r\n  }\r\n  toString() {\r\n    return super.$toString(this.x, this.y, this.z, this.w);\r\n  }\r\n  dotProduct(a) {\r\n    if (a instanceof QVector4D) {\r\n      return a.x * this.x + a.y * this.y + a.z * this.z + a.w * this.w;\r\n    }\r\n    return 0;\r\n  }\r\n  times(a) {\r\n    if (a instanceof QmlWeb.QMatrix4x4) {\r\n      const t = this;\r\n      return new QVector4D(\r\n        t.x * a.m11 + t.y * a.m21 + t.z * a.m31 + t.w * a.m41,\r\n        t.x * a.m12 + t.y * a.m22 + t.z * a.m32 + t.w * a.m42,\r\n        t.x * a.m13 + t.y * a.m23 + t.z * a.m33 + t.w * a.m43,\r\n        t.x * a.m14 + t.y * a.m24 + t.z * a.m34 + t.w * a.m44\r\n      );\r\n    }\r\n    if (a instanceof QVector4D) {\r\n      const t = this;\r\n      return new QVector4D(t.x * a.x, t.y * a.y, t.z * a.z, t.w * a.w);\r\n    }\r\n    return new QVector4D(this.x * a, this.y * a, this.z * a, this.w * a);\r\n  }\r\n  plus(a) {\r\n    if (a instanceof QVector4D) {\r\n      const t = this;\r\n      return new QVector4D(t.x + a.x, t.y + a.y, t.z + a.z, t.w + a.w);\r\n    }\r\n    return new QVector4D(this.x, this.y, this.z, this.w);\r\n  }\r\n  minus(a) {\r\n    if (a instanceof QVector4D) {\r\n      const t = this;\r\n      return new QVector4D(t.x - a.x, t.y - a.y, t.z - a.z, t.w - a.w);\r\n    }\r\n    return new QVector4D(this.x, this.y, this.z, this.w);\r\n  }\r\n  normalized() {\r\n    const length = this.length();\r\n    return this.times(1 / (length === 0 ? 1 : length));\r\n  }\r\n  length() {\r\n    return Math.sqrt(this.dotProduct(this));\r\n  }\r\n  toVector2d() {\r\n    return new QmlWeb.QVector2D(this.x, this.y);\r\n  }\r\n  toVector3d() {\r\n    return new QmlWeb.QVector3D(this.x, this.y, this.z);\r\n  }\r\n  fuzzyEquals(a, epsilon = 0.00001) {\r\n    return [this.x - a.x, this.y - a.y, this.z - a.z, this.w - a.w].every(\r\n      delta => Math.abs(delta) <= epsilon\r\n    );\r\n  }\r\n\r\n  static nonNullableType = true;\r\n  static requireConstructor = true;\r\n}\r\n\r\nQmlWeb.QVector4D = QVector4D;\r\n","class Signal {\r\n  connectedSlots = [];\r\n  signal = null;\r\n\r\n  constructor(params = [], options = {}) {\r\n    this.obj = options.obj;\r\n    this.options = options;\r\n\r\n    this.signal = (...args) => this.execute(...args);\r\n    this.signal.parameters = params;\r\n    this.signal.connect = this.connect.bind(this);\r\n    this.signal.disconnect = this.disconnect.bind(this);\r\n    this.signal.isConnected = this.isConnected.bind(this);\r\n\r\n    // TODO Fix Keys that don't have an obj for the signal\r\n    if (this.obj && this.obj.$signals !== undefined) {\r\n      this.obj.$signals.push(this.signal);\r\n    }\r\n  }\r\n  execute(...args) {\r\n    QmlWeb.QMLProperty.pushEvalStack();\r\n    for (const i in this.connectedSlots) {\r\n      const desc = this.connectedSlots[i];\r\n      if (desc.type & Signal.QueuedConnection) {\r\n        Signal.$addQueued(desc, args);\r\n      } else {\r\n        Signal.$execute(desc, args);\r\n      }\r\n    }\r\n    QmlWeb.QMLProperty.popEvalStack();\r\n  }\r\n  connect(...args) {\r\n    let type = Signal.AutoConnection;\r\n    if (typeof args[args.length - 1] === \"number\") {\r\n      type = args.pop();\r\n    }\r\n    if (type & Signal.UniqueConnection) {\r\n      if (this.isConnected(...args)) {\r\n        return;\r\n      }\r\n    }\r\n    if (args.length === 1) {\r\n      this.connectedSlots.push({ thisObj: global, slot: args[0], type });\r\n    } else if (typeof args[1] === \"string\" || args[1] instanceof String) {\r\n      if (args[0].$tidyupList && args[0] !== this.obj) {\r\n        args[0].$tidyupList.push(this.signal);\r\n      }\r\n      const slot = args[0][args[1]];\r\n      this.connectedSlots.push({ thisObj: args[0], slot, type });\r\n    } else {\r\n      if (args[0].$tidyupList &&\r\n        (!this.obj || args[0] !== this.obj && args[0] !== this.obj.$parent)\r\n      ) {\r\n        args[0].$tidyupList.push(this.signal);\r\n      }\r\n      this.connectedSlots.push({ thisObj: args[0], slot: args[1], type });\r\n    }\r\n\r\n    // Notify object of connect\r\n    if (this.options.obj && this.options.obj.$connectNotify) {\r\n      this.options.obj.$connectNotify(this.options);\r\n    }\r\n  }\r\n  disconnect(...args) {\r\n    // type meaning:\r\n    //  1 = function, 2 = string\r\n    //  3 = object with string method,  4 = object with function\r\n    // No args means disconnect everything connected to this signal\r\n    const callType = args.length === 1\r\n      ? args[0] instanceof Function ? 1 : 2\r\n      : typeof args[1] === \"string\" || args[1] instanceof String ? 3 : 4;\r\n    for (let i = 0; i < this.connectedSlots.length; i++) {\r\n      const { slot, thisObj } = this.connectedSlots[i];\r\n      if (\r\n        args.length === 0 ||\r\n        callType === 1 && slot === args[0] ||\r\n        callType === 2 && thisObj === args[0] ||\r\n        callType === 3 && thisObj === args[0] && slot === args[0][args[1]] ||\r\n        thisObj === args[0] && slot === args[1]\r\n      ) {\r\n        if (thisObj) {\r\n          const index = thisObj.$tidyupList.indexOf(this.signal);\r\n          if (index >= 0) {\r\n            thisObj.$tidyupList.splice(index, 1);\r\n          }\r\n        }\r\n        this.connectedSlots.splice(i, 1);\r\n        // We have removed an item from the list so the indexes shifted one\r\n        // backwards\r\n        i--;\r\n      }\r\n    }\r\n\r\n    // Notify object of disconnect\r\n    if (this.options.obj && this.options.obj.$disconnectNotify) {\r\n      this.options.obj.$disconnectNotify(this.options);\r\n    }\r\n  }\r\n  isConnected(...args) {\r\n    const callType = args.length === 1 ? 1\r\n      : typeof args[1] === \"string\" || args[1] instanceof String ? 2 : 3;\r\n    for (const i in this.connectedSlots) {\r\n      const { slot, thisObj } = this.connectedSlots[i];\r\n      if (callType === 1 && slot === args[0] ||\r\n          callType === 2 && thisObj === args[0] && slot === args[0][args[1]] ||\r\n          thisObj === args[0] && slot === args[1]\r\n      ) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n  static signal(...args) {\r\n    return (new Signal(...args)).signal;\r\n  }\r\n\r\n  static $execute(desc, args) {\r\n    try {\r\n      desc.slot.apply(desc.thisObj, args);\r\n    } catch (err) {\r\n      console.error(\"Signal slot error:\", err.message, err,\r\n        desc.slot\r\n        ? Function.prototype.toString.call(desc.slot)\r\n        : \"desc.slot is undefined!\"\r\n      );\r\n    }\r\n  }\r\n\r\n  static $addQueued(desc, args) {\r\n    if (Signal.$queued.length === 0) {\r\n      if (global.setImmediate) {\r\n        global.setImmediate(Signal.$executeQueued);\r\n      } else {\r\n        global.setTimeout(Signal.$executeQueued, 0);\r\n      }\r\n    }\r\n    Signal.$queued.push([desc, args]);\r\n  }\r\n  static $executeQueued() {\r\n    // New queued signals should be executed on next tick of the event loop\r\n    const queued = Signal.$queued;\r\n    Signal.$queued = [];\r\n\r\n    QmlWeb.QMLProperty.pushEvalStack();\r\n    for (const i in queued) {\r\n      Signal.$execute(...queued[i]);\r\n    }\r\n    QmlWeb.QMLProperty.popEvalStack();\r\n  }\r\n\r\n  static $queued = [];\r\n\r\n  static AutoConnection = 0;\r\n  static DirectConnection = 1;\r\n  static QueuedConnection = 2;\r\n  static UniqueConnection = 128;\r\n}\r\n\r\nQmlWeb.Signal = Signal;\r\n","const Qt = {\r\n  openUrlExternally: url => {\r\n    const page = window.open(url, \"_blank\");\r\n    page.focus();\r\n  },\r\n  // Load file, parse and construct as Component (.qml)\r\n  createComponent: name => {\r\n    const engine = QmlWeb.engine;\r\n\r\n    let file = engine.$resolvePath(name);\r\n\r\n    // If \"name\" was a full URL, \"file\" will be equivalent to name and this\r\n    // will try and load the Component from the full URL, otherwise, this\r\n    // doubles as checking for the file in the current directory.\r\n    let tree = engine.loadComponent(file);\r\n\r\n    // If the Component is not found, and it is not a URL, look for \"name\" in\r\n    // this context's importSearchPaths\r\n    if (!tree) {\r\n      const nameIsUrl = engine.$parseURI(name) !== undefined;\r\n      if (!nameIsUrl) {\r\n        const moreDirs = engine.importSearchPaths(\r\n          QmlWeb.executionContext.importContextId);\r\n        for (let i = 0; i < moreDirs.length; i++) {\r\n          file = `${moreDirs[i]}${name}`;\r\n          tree = engine.loadComponent(file);\r\n          if (tree) break;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (!tree) {\r\n      return undefined;\r\n    }\r\n\r\n    const QMLComponent = QmlWeb.getConstructor(\"QtQml\", \"2.0\", \"Component\");\r\n    const component = new QMLComponent({\r\n      object: tree,\r\n      context: QmlWeb.executionContext\r\n    });\r\n    component.$basePath = engine.extractBasePath(file);\r\n    component.$imports = tree.$imports;\r\n    component.$file = file; // just for debugging\r\n\r\n    engine.loadImports(tree.$imports, component.$basePath,\r\n      component.importContextId);\r\n\r\n    return component;\r\n  },\r\n\r\n  createQmlObject: (src, parent, file) => {\r\n    const tree = QmlWeb.parseQML(src, file);\r\n\r\n    // Create and initialize objects\r\n\r\n    const QMLComponent = QmlWeb.getConstructor(\"QtQml\", \"2.0\", \"Component\");\r\n    const component = new QMLComponent({\r\n      object: tree,\r\n      parent,\r\n      context: QmlWeb.executionContext\r\n    });\r\n\r\n    const engine = QmlWeb.engine;\r\n    engine.loadImports(tree.$imports, undefined, component.importContextId);\r\n\r\n    const resolvedFile = file || Qt.resolvedUrl(\"createQmlObject_function\");\r\n    component.$basePath = engine.extractBasePath(resolvedFile);\r\n    component.$imports = tree.$imports; // for later use\r\n    // not just for debugging, but for basepath too, see above\r\n    component.$file = resolvedFile;\r\n\r\n    const obj = component.createObject(parent);\r\n\r\n    const QMLOperationState = QmlWeb.QMLOperationState;\r\n    if (engine.operationState !== QMLOperationState.Init &&\r\n        engine.operationState !== QMLOperationState.Idle) {\r\n      // We don't call those on first creation, as they will be called\r\n      // by the regular creation-procedures at the right time.\r\n      engine.$initializePropertyBindings();\r\n\r\n      engine.callCompletedSignals();\r\n    }\r\n\r\n    return obj;\r\n  },\r\n\r\n  // Returns url resolved relative to the URL of the caller.\r\n  // http://doc.qt.io/qt-5/qml-qtqml-qt.html#resolvedUrl-method\r\n  resolvedUrl: url => QmlWeb.qmlUrl(url),\r\n\r\n  // Basic QML types constructors\r\n  point: (...args) => new QmlWeb.QPointF(...args),\r\n  rect: (...args) => new QmlWeb.QRectF(...args),\r\n  size: (...args) => new QmlWeb.QSizeF(...args),\r\n  vector2d: (...args) => new QmlWeb.QVector2D(...args),\r\n  vector3d: (...args) => new QmlWeb.QVector3D(...args),\r\n  vector4d: (...args) => new QmlWeb.QVector4D(...args),\r\n  quaternion: (...args) => new QmlWeb.QQuaternion(...args),\r\n  matrix4x4: (...args) => new QmlWeb.QMatrix4x4(...args),\r\n\r\n  // Colors\r\n  rgba: (...args) => QmlWeb.QColor.rgba(...args),\r\n  hsla: (...args) => QmlWeb.QColor.hsla(...args),\r\n  hsva: (...args) => QmlWeb.QColor.hsva(...args),\r\n  colorEqual: (...args) => QmlWeb.QColor.equal(...args),\r\n  darker: (...args) => QmlWeb.QColor.darker(...args),\r\n  lighter: (...args) => QmlWeb.QColor.lighter(...args),\r\n\r\n  include(path) {\r\n    const engine = QmlWeb.engine;\r\n\r\n    const uri = engine.$resolvePath(path);\r\n\r\n    /* Handle recursive includes */\r\n    if (QmlWeb.executionContext.$qmlJsIncludes === undefined) {\r\n      QmlWeb.executionContext.$qmlJsIncludes = [];\r\n    }\r\n\r\n    if (QmlWeb.executionContext.$qmlJsIncludes.indexOf(uri) >= 0) {\r\n      return;\r\n    }\r\n\r\n    QmlWeb.executionContext.$qmlJsIncludes.push(uri);\r\n\r\n    const js = engine.loadJS(uri);\r\n\r\n    if (!js) {\r\n      console.error(\"Unable to load JavaScript module:\", uri, path);\r\n      return;\r\n    }\r\n\r\n    QmlWeb.importJavascriptInContext(js, QmlWeb.executionContext);\r\n  },\r\n\r\n  platform: {\r\n    os: \"qmlweb\"\r\n  },\r\n\r\n  // Buttons masks\r\n  LeftButton: 1,\r\n  RightButton: 2,\r\n  MiddleButton: 4,\r\n  // Modifiers masks\r\n  NoModifier: 0,\r\n  ShiftModifier: 1,\r\n  ControlModifier: 2,\r\n  AltModifier: 4,\r\n  MetaModifier: 8,\r\n  KeypadModifier: 16, // Note: Not available in web\r\n  // Layout directions\r\n  LeftToRight: 0,\r\n  RightToLeft: 1,\r\n  // Orientations\r\n  Vertical: 0,\r\n  Horizontal: 1,\r\n  // Keys\r\n  Key_Escape: 27,\r\n  Key_Tab: 9,\r\n  Key_Backtab: 245,\r\n  Key_Backspace: 8,\r\n  Key_Return: 13,\r\n  Key_Enter: 13,\r\n  Key_Insert: 45,\r\n  Key_Delete: 46,\r\n  Key_Pause: 19,\r\n  Key_Print: 42,\r\n  Key_SysReq: 0,\r\n  Key_Clear: 12,\r\n  Key_Home: 36,\r\n  Key_End: 35,\r\n  Key_Left: 37,\r\n  Key_Up: 38,\r\n  Key_Right: 39,\r\n  Key_Down: 40,\r\n  Key_PageUp: 33,\r\n  Key_PageDown: 34,\r\n  Key_Shift: 16,\r\n  Key_Control: 17,\r\n  Key_Meta: 91,\r\n  Key_Alt: 18,\r\n  Key_AltGr: 0,\r\n  Key_CapsLock: 20,\r\n  Key_NumLock: 144,\r\n  Key_ScrollLock: 145,\r\n  Key_F1: 112, Key_F2: 113, Key_F3: 114, Key_F4: 115, Key_F5: 116, Key_F6: 117,\r\n  Key_F7: 118, Key_F8: 119, Key_F9: 120, Key_F10: 121, Key_F11: 122,\r\n  Key_F12: 123, Key_F13: 124, Key_F14: 125, Key_F15: 126, Key_F16: 127,\r\n  Key_F17: 128, Key_F18: 129, Key_F19: 130, Key_F20: 131, Key_F21: 132,\r\n  Key_F22: 133, Key_F23: 134, Key_F24: 135,\r\n  Key_F25: 0, Key_F26: 0, Key_F27: 0, Key_F28: 0, Key_F29: 0, Key_F30: 0,\r\n  Key_F31: 0, Key_F32: 0, Key_F33: 0, Key_F34: 0, Key_F35: 0,\r\n  Key_Super_L: 0,\r\n  Key_Super_R: 0,\r\n  Key_Menu: 0,\r\n  Key_Hyper_L: 0,\r\n  Key_Hyper_R: 0,\r\n  Key_Help: 6,\r\n  Key_Direction_L: 0,\r\n  Key_Direction_R: 0,\r\n  Key_Space: 32,\r\n  Key_Any: 32,\r\n  Key_Exclam: 161,\r\n  Key_QuoteDbl: 162,\r\n  Key_NumberSign: 163,\r\n  Key_Dollar: 164,\r\n  Key_Percent: 165,\r\n  Key_Ampersant: 166,\r\n  Key_Apostrophe: 222,\r\n  Key_ParenLeft: 168,\r\n  Key_ParenRight: 169,\r\n  Key_Asterisk: 170,\r\n  Key_Plus: 171,\r\n  Key_Comma: 188,\r\n  Key_Minus: 173,\r\n  Key_Period: 190,\r\n  Key_Slash: 191,\r\n  Key_0: 48, Key_1: 49, Key_2: 50, Key_3: 51, Key_4: 52,\r\n  Key_5: 53, Key_6: 54, Key_7: 55, Key_8: 56, Key_9: 57,\r\n  Key_Colon: 58,\r\n  Key_Semicolon: 59,\r\n  Key_Less: 60,\r\n  Key_Equal: 61,\r\n  Key_Greater: 62,\r\n  Key_Question: 63,\r\n  Key_At: 64,\r\n  Key_A: 65, Key_B: 66, Key_C: 67, Key_D: 68, Key_E: 69, Key_F: 70, Key_G: 71,\r\n  Key_H: 72, Key_I: 73, Key_J: 74, Key_K: 75, Key_L: 76, Key_M: 77, Key_N: 78,\r\n  Key_O: 79, Key_P: 80, Key_Q: 81, Key_R: 82, Key_S: 83, Key_T: 84, Key_U: 85,\r\n  Key_V: 86, Key_W: 87, Key_X: 88, Key_Y: 89, Key_Z: 90,\r\n  Key_BracketLeft: 219,\r\n  Key_Backslash: 220,\r\n  Key_BracketRight: 221,\r\n  Key_AsciiCircum: 160,\r\n  Key_Underscore: 167,\r\n  Key_QuoteLeft: 0,\r\n  Key_BraceLeft: 174,\r\n  Key_Bar: 172,\r\n  Key_BraceRight: 175,\r\n  Key_AsciiTilde: 176,\r\n  Key_Back: 0,\r\n  Key_Forward: 0,\r\n  Key_Stop: 0,\r\n  Key_VolumeDown: 182,\r\n  Key_VolumeUp: 183,\r\n  Key_VolumeMute: 181,\r\n  Key_multiply: 106,\r\n  Key_add: 107,\r\n  Key_substract: 109,\r\n  Key_divide: 111,\r\n  Key_News: 0,\r\n  Key_OfficeHome: 0,\r\n  Key_Option: 0,\r\n  Key_Paste: 0,\r\n  Key_Phone: 0,\r\n  Key_Calendar: 0,\r\n  Key_Reply: 0,\r\n  Key_Reload: 0,\r\n  Key_RotateWindows: 0,\r\n  Key_RotationPB: 0,\r\n  Key_RotationKB: 0,\r\n  Key_Save: 0,\r\n  Key_Send: 0,\r\n  Key_Spell: 0,\r\n  Key_SplitScreen: 0,\r\n  Key_Support: 0,\r\n  Key_TaskPane: 0,\r\n  Key_Terminal: 0,\r\n  Key_Tools: 0,\r\n  Key_Travel: 0,\r\n  Key_Video: 0,\r\n  Key_Word: 0,\r\n  Key_Xfer: 0,\r\n  Key_ZoomIn: 0,\r\n  Key_ZoomOut: 0,\r\n  Key_Away: 0,\r\n  Key_Messenger: 0,\r\n  Key_WebCam: 0,\r\n  Key_MailForward: 0,\r\n  Key_Pictures: 0,\r\n  Key_Music: 0,\r\n  Key_Battery: 0,\r\n  Key_Bluetooth: 0,\r\n  Key_WLAN: 0,\r\n  Key_UWB: 0,\r\n  Key_AudioForward: 0,\r\n  Key_AudioRepeat: 0,\r\n  Key_AudioRandomPlay: 0,\r\n  Key_Subtitle: 0,\r\n  Key_AudioCycleTrack: 0,\r\n  Key_Time: 0,\r\n  Key_Hibernate: 0,\r\n  Key_View: 0,\r\n  Key_TopMenu: 0,\r\n  Key_PowerDown: 0,\r\n  Key_Suspend: 0,\r\n  Key_ContrastAdjust: 0,\r\n  Key_MediaLast: 0,\r\n  Key_unknown: -1,\r\n  Key_Call: 0,\r\n  Key_Camera: 0,\r\n  Key_CameraFocus: 0,\r\n  Key_Context1: 0,\r\n  Key_Context2: 0,\r\n  Key_Context3: 0,\r\n  Key_Context4: 0,\r\n  Key_Flip: 0,\r\n  Key_Hangup: 0,\r\n  Key_No: 0,\r\n  Key_Select: 93,\r\n  Key_Yes: 0,\r\n  Key_ToggleCallHangup: 0,\r\n  Key_VoiceDial: 0,\r\n  Key_LastNumberRedial: 0,\r\n  Key_Execute: 43,\r\n  Key_Printer: 42,\r\n  Key_Play: 250,\r\n  Key_Sleep: 95,\r\n  Key_Zoom: 251,\r\n  Key_Cancel: 3,\r\n  // Align\r\n  AlignLeft: 0x0001,\r\n  AlignRight: 0x0002,\r\n  AlignHCenter: 0x0004,\r\n  AlignJustify: 0x0008,\r\n  AlignTop: 0x0020,\r\n  AlignBottom: 0x0040,\r\n  AlignVCenter: 0x0080,\r\n  AlignCenter: 0x0084,\r\n  AlignBaseline: 0x0100,\r\n  AlignAbsolute: 0x0010,\r\n  AlignLeading: 0x0001,\r\n  AlignTrailing: 0x0002,\r\n  AlignHorizontal_Mask: 0x001f,\r\n  AlignVertical_Mask: 0x01e0,\r\n  // Screen\r\n  PrimaryOrientation: 0,\r\n  PortraitOrientation: 1,\r\n  LandscapeOrientation: 2,\r\n  InvertedPortraitOrientation: 4,\r\n  InvertedLandscapeOrientation: 8,\r\n  // CursorShape\r\n  ArrowCursor: 0,\r\n  UpArrowCursor: 1,\r\n  CrossCursor: 2,\r\n  WaitCursor: 3,\r\n  IBeamCursor: 4,\r\n  SizeVerCursor: 5,\r\n  SizeHorCursor: 6,\r\n  SizeBDiagCursor: 7,\r\n  SizeFDiagCursor: 8,\r\n  SizeAllCursor: 9,\r\n  BlankCursor: 10,\r\n  SplitVCursor: 11,\r\n  SplitHCursor: 12,\r\n  PointingHandCursor: 13,\r\n  ForbiddenCursor: 14,\r\n  WhatsThisCursor: 15,\r\n  BusyCursor: 16,\r\n  OpenHandCursor: 17,\r\n  ClosedHandCursor: 18,\r\n  DragCopyCursor: 19,\r\n  DragMoveCursor: 20,\r\n  DragLinkCursor: 21,\r\n  LastCursor: 21, //DragLinkCursor,\r\n  BitmapCursor: 24,\r\n  CustomCursor: 25,\r\n  // ScrollBar Policy\r\n  ScrollBarAsNeeded: 0,\r\n  ScrollBarAlwaysOff: 1,\r\n  ScrollBarAlwaysOn: 2,\r\n};\r\n\r\nQmlWeb.Qt = Qt;\r\n","class QMLBinding {\r\n/**\r\n * Create QML binding.\r\n * @param {Variant} val Sourcecode or function representing the binding\r\n * @param {Array} tree Parser tree of the binding\r\n * @return {Object} Object representing the binding\r\n */\r\n  constructor(val, tree) {\r\n    // this.isFunction states whether the binding is a simple js statement or a\r\n    // function containing a return statement. We decide this on whether it is a\r\n    // code block or not. If it is, we require a return statement. If it is a\r\n    // code block it could though also be a object definition, so we need to\r\n    // check that as well (it is, if the content is labels).\r\n    this.isFunction = tree && tree[0] === \"block\" &&\r\n                      tree[1][0] && tree[1][0][0] !== \"label\";\r\n    this.src = val;\r\n    this.compiled = false;\r\n  }\r\n\r\n  toJSON() {\r\n    return {\r\n      src: this.src,\r\n      deps: JSON.stringify(this.deps),\r\n      tree: JSON.stringify(this.tree)\r\n    };\r\n  }\r\n\r\n  eval(object, context, basePath) {\r\n    QmlWeb.executionContext = context;\r\n    if (basePath) {\r\n      QmlWeb.engine.$basePath = basePath;\r\n    }\r\n    // .call is needed for `this` support\r\n    return this.impl.call(object, object, context);\r\n  }\r\n\r\n  /**\r\n  * Compile binding. Afterwards you may call binding.eval to evaluate.\r\n  */\r\n  compile() {\r\n    this.src = this.src.trim();\r\n    this.impl = QMLBinding.bindSrc(this.src, this.isFunction);\r\n    this.compiled = true;\r\n  }\r\n\r\n  static bindSrc(src, isFunction) {\r\n    return new Function(\"__executionObject\", \"__executionContext\", `\r\n      with(QmlWeb) with(__executionContext) with(__executionObject) {\r\n        ${isFunction ? \"\" : \"return\"} ${src}\r\n      }\r\n    `);\r\n  }\r\n}\r\n\r\nQmlWeb.QMLBinding = QMLBinding;\r\n","function QMLBoolean(val) {\r\n  return !!val;\r\n}\r\nQMLBoolean.plainType = true;\r\nQmlWeb.qmlBoolean = QMLBoolean;\r\n","// There can only be one running QMLEngine.\r\n// This variable points to the currently running engine.\r\nQmlWeb.engine = null;\r\n\r\nQmlWeb.useShadowDom = true;\r\n\r\nconst geometryProperties = [\r\n  \"width\", \"height\", \"fill\", \"x\", \"y\", \"left\", \"right\", \"top\", \"bottom\"\r\n];\r\n\r\n// QML engine. EXPORTED.\r\nclass QMLEngine {\r\n  constructor(element) {\r\n    //----------Public Members----------\r\n    this.onceFunc = false;\r\n    this.fps = 60;\r\n    // Math.floor, causes bugs to timing?\r\n    this.$interval = Math.floor(1000 / this.fps);\r\n    this.dom = element || document.body;\r\n\r\n    // Target for the DOM children\r\n    this.domTarget = this.dom;\r\n    if (QmlWeb.useShadowDom && this.dom.attachShadow) {\r\n      this.domTarget = this.dom.attachShadow({ mode: \"open\" });\r\n    }\r\n\r\n    // Cached component trees (post-QmlWeb.convertToEngine)\r\n    this.components = {};\r\n\r\n    // Cached parsed JS files (post-QmlWeb.jsparse)\r\n    this.js = {};\r\n\r\n    // List of Component.completed signals\r\n    this.completedSignals = [];\r\n\r\n    // Current operation state of the engine (Idle, init, etc.)\r\n    this.operationState = 1;\r\n\r\n    // List of properties whose values are bindings. For internal use only.\r\n    this.bindedProperties = [];\r\n\r\n    // List of operations to perform later after init. For internal use only.\r\n    this.pendingOperations = [];\r\n\r\n    // Root object of the engine\r\n    this.rootObject = null;\r\n\r\n    // Base path of qml engine (used for resource loading)\r\n    this.$basePath = \"\";\r\n\r\n    // Module import paths overrides\r\n    this.userAddedModulePaths = {};\r\n\r\n    // Stores data for setImportPathList(), importPathList(), and addImportPath\r\n    this.userAddedImportPaths = [];\r\n\r\n    //----------Private Members---------\r\n\r\n    // Ticker resource id and ticker callbacks\r\n    this._tickers = [];\r\n    this._lastTick = Date.now();\r\n\r\n    // Callbacks for stopping or starting the engine\r\n    this._whenStop = [];\r\n    this._whenStart = [];\r\n\r\n    // Keyboard management\r\n    this.$initKeyboard();\r\n\r\n    //----------Construct----------\r\n\r\n    // No QML stuff should stand out the root element\r\n    this.dom.style.overflow = \"hidden\";\r\n\r\n    // Needed to make absolute positioning work\r\n    if (!this.dom.style.position) {\r\n      const style = window.getComputedStyle(this.dom);\r\n      if (style.getPropertyValue(\"position\") === \"static\") {\r\n        this.dom.style.position = \"relative\";\r\n        this.dom.style.top = \"0\";\r\n        this.dom.style.left = \"0\";\r\n      }\r\n    }\r\n\r\n    window.addEventListener(\"resize\", () => this.updateGeometry());\r\n  }\r\n\r\n  //---------- Public Methods ----------\r\n\r\n  updateGeometry() {\r\n    // we have to call `this.implicitHeight =` and `this.implicitWidth =`\r\n    // each time the root element changes it's geometry\r\n    // to reposition child elements of qml scene\r\n    let width;\r\n    let height;\r\n\r\n    if (this.dom === document.body) {\r\n      width = window.innerWidth;\r\n      height = window.innerHeight;\r\n      this.dom.style.margin = '0';\r\n      this.dom.style.padding = '0';\r\n\r\n    } else {\r\n      const style = window.getComputedStyle(this.dom);\r\n      width = parseFloat(style.getPropertyValue(\"width\"));\r\n      height = parseFloat(style.getPropertyValue(\"height\"));\r\n      \r\n    }\r\n\r\n    if (width) {\r\n      this.rootObject.width = width; //временно\r\n    }\r\n    if (height) {\r\n      this.rootObject.height = height; //временно\r\n    }\r\n  }\r\n\r\n  // Start the engine\r\n  start() {\r\n    if(!this.onceFunc){\r\n      this.rootObject.dom.insertAdjacentHTML(\"beforeend\", `\r\n      <style>\r\n        .ListView, .GridView, .MouseArea, .Flickable {\r\n              overflow: auto;\r\n              -ms-overflow-style: none;\r\n              scrollbar-width: none;\r\n        }\r\n\r\n        .ListView::-webkit-scrollbar, .GridView::-webkit-scrollbar, .MouseArea::-webkit-scrollbar, .Flickable::-webkit-scrollbar {\r\n              width: 0;\r\n              height: 0;\r\n        }\r\n        .unselectable {\r\n          -webkit-touch-callout: none;\r\n          -webkit-user-select: none;\r\n          -khtml-user-select: none;\r\n          -moz-user-select: none;\r\n          -ms-user-select: none;\r\n          user-select: none;           \r\n        }\r\n      </style>`);\r\n      this.onceFunc = true;\r\n    }\r\n\r\n    QmlWeb.engine = this;\r\n    const QMLOperationState = QmlWeb.QMLOperationState;\r\n    if (this.operationState !== QMLOperationState.Running) {\r\n      this.operationState = QMLOperationState.Running;\r\n      this._tickerId = setInterval(this._tick.bind(this), this.$interval);\r\n      this._whenStart.forEach(callback => callback());\r\n    }\r\n  }\r\n\r\n  // Stop the engine\r\n  stop() {\r\n    const QMLOperationState = QmlWeb.QMLOperationState;\r\n    if (this.operationState === QMLOperationState.Running) {\r\n      clearInterval(this._tickerId);\r\n      this.operationState = QMLOperationState.Idle;\r\n      this._whenStop.forEach(callback => callback());\r\n    }\r\n  }\r\n\r\n  // eslint-disable-next-line max-len\r\n  /** from http://docs.closure-library.googlecode.com/git/local_closure_goog_uri_uri.js.source.html\r\n   *\r\n   * Removes dot segments in given path component, as described in\r\n   * RFC 3986, section 5.2.4.\r\n   *\r\n   * @param {string} path A non-empty path component.\r\n   * @return {string} Path component with removed dot segments.\r\n   */\r\n  removeDotSegments(path) {\r\n    // path.startsWith(\"/\") is not supported in some browsers\r\n    let leadingSlash = path && path[0] === \"/\";\r\n    const segments = path.split(\"/\");\r\n    const out = [];\r\n\r\n    for (let pos = 0; pos < segments.length;) {\r\n      const segment = segments[pos++];\r\n\r\n      if (segment === \".\") {\r\n        if (leadingSlash && pos === segments.length) {\r\n          out.push(\"\");\r\n        }\r\n      } else if (segment === \"..\") {\r\n        if (out.length > 1 || out.length === 1 && out[0] !== \"\") {\r\n          out.pop();\r\n        }\r\n        if (leadingSlash && pos === segments.length) {\r\n          out.push(\"\");\r\n        }\r\n      } else {\r\n        out.push(segment);\r\n        leadingSlash = true;\r\n      }\r\n    }\r\n\r\n    return out.join(\"/\");\r\n  }\r\n\r\n  extractBasePath(file) {\r\n    // work both in url (\"/\") and windows (\"\\\", from file://d:\\test\\) notation\r\n    const basePath = file.split(/[/\\\\]/);\r\n    basePath[basePath.length - 1] = \"\";\r\n    return basePath.join(\"/\");\r\n  }\r\n\r\n  extractFileName(file) {\r\n    return file.split(/[/\\\\]/).pop();\r\n  }\r\n\r\n  // Load file, parse and construct (.qml or .qml.js)\r\n  loadFile(file, parentComponent = null) {\r\n    // Create an anchor element to get the absolute path from the DOM\r\n    if (!this.$basePathA) {\r\n      this.$basePathA = document.createElement(\"a\");\r\n    }\r\n    this.$basePathA.href = this.extractBasePath(file);\r\n    this.$basePath = this.$basePathA.href;\r\n    const fileName = this.extractFileName(file);\r\n    const tree = this.loadComponent(this.$resolvePath(fileName));\r\n    return this.loadQMLTree(tree, parentComponent, file);\r\n  }\r\n\r\n  // parse and construct qml\r\n  // file is not required; only for debug purposes\r\n  // This function is only used by the QmlWeb tests\r\n  loadQML(src, parentComponent = null, file = undefined) {\r\n    return this.loadQMLTree(QmlWeb.parseQML(src, file), parentComponent, file);\r\n  }\r\n\r\n  loadQMLTree(tree, parentComponent = null, file = undefined) {\r\n    QmlWeb.engine = this;\r\n\r\n    // Create and initialize objects\r\n    const QMLComponent = QmlWeb.getConstructor(\"QtQml\", \"2.0\", \"Component\");\r\n    const component = new QMLComponent({\r\n      object: tree,\r\n      parent: parentComponent\r\n    });\r\n\r\n    this.loadImports(tree.$imports, undefined, component.importContextId);\r\n    component.$basePath = this.$basePath;\r\n    component.$imports = tree.$imports; // for later use\r\n    component.$file = file; // just for debugging\r\n\r\n    this.rootObject = component.$createObject(parentComponent);\r\n    if (this.rootObject.dom) {\r\n      this.domTarget.appendChild(this.rootObject.dom);\r\n    }\r\n    this.$initializePropertyBindings();\r\n\r\n    this.start();\r\n\r\n    this.updateGeometry();\r\n\r\n    this.callCompletedSignals();\r\n\r\n    return component;\r\n  }\r\n\r\n  rootContext() {\r\n    return this.rootObject.$context;\r\n  }\r\n\r\n  // next 3 methods used in Qt.createComponent for qml files lookup\r\n  // http://doc.qt.io/qt-5/qqmlengine.html#addImportPath\r\n\r\n  addImportPath(dirpath) {\r\n    this.userAddedImportPaths.push(dirpath);\r\n  }\r\n\r\n  /* Add this dirpath to be checked for components. This is the result of\r\n   * something like:\r\n   *\r\n   * import \"SomeDir/AnotherDirectory\"\r\n   *\r\n   * The importContextId ensures it is only accessible from the file in which\r\n   * it was imported. */\r\n  addComponentImportPath(importContextId, dirpath, qualifier) {\r\n    if (!this.componentImportPaths) {\r\n      this.componentImportPaths = {};\r\n    }\r\n    if (!this.componentImportPaths[importContextId]) {\r\n      this.componentImportPaths[importContextId] = {};\r\n    }\r\n\r\n    const paths = this.componentImportPaths[importContextId];\r\n\r\n    if (qualifier) {\r\n      if (!paths.qualified) {\r\n        paths.qualified = {};\r\n      }\r\n      paths.qualified[qualifier] = dirpath;\r\n    } else {\r\n      if (!paths.unqualified) {\r\n        paths.unqualified = [];\r\n      }\r\n      paths.unqualified.push(dirpath);\r\n    }\r\n  }\r\n\r\n  importSearchPaths(importContextId) {\r\n    if (!this.componentImportPaths) {\r\n      return [];\r\n    }\r\n    const paths = this.componentImportPaths[importContextId];\r\n    if (!paths) {\r\n      return [];\r\n    }\r\n    return paths.unqualified || [];\r\n  }\r\n\r\n  qualifiedImportPath(importContextId, qualifier) {\r\n    if (!this.componentImportPaths) {\r\n      return \"\";\r\n    }\r\n    const paths = this.componentImportPaths[importContextId];\r\n    if (!paths || !paths.qualified) {\r\n      return \"\";\r\n    }\r\n    return paths.qualified[qualifier] || \"\";\r\n  }\r\n\r\n  setImportPathList(arrayOfDirs) {\r\n    this.userAddedImportPaths = arrayOfDirs;\r\n  }\r\n\r\n  importPathList() {\r\n    return this.userAddedImportPaths;\r\n  }\r\n\r\n  // `addModulePath` defines conrete path for module lookup\r\n  // e.g. addModulePath(\"QtQuick.Controls\", \"http://example.com/controls\")\r\n  // will force system to `import QtQuick.Controls` module from\r\n  // `http://example.com/controls/qmldir`\r\n\r\n  addModulePath(moduleName, dirPath) {\r\n    // Keep the mapping. It will be used in loadImports() function.\r\n    // Remove trailing slash as it required for `readQmlDir`.\r\n    this.userAddedModulePaths[moduleName] = dirPath.replace(/\\/$/, \"\");\r\n  }\r\n\r\n  registerProperty(obj, propName) {\r\n    const dependantProperties = [];\r\n    let value = obj[propName];\r\n\r\n    const getter = () => {\r\n      const QMLProperty = QmlWeb.QMLProperty;\r\n      if (QMLProperty.evaluatingProperty &&\r\n          dependantProperties.indexOf(QMLProperty.evaluatingProperty) === -1) {\r\n        dependantProperties.push(QMLProperty.evaluatingProperty);\r\n      }\r\n      return value;\r\n    };\r\n\r\n    const setter = newVal => {\r\n      value = newVal;\r\n      for (const i in dependantProperties) {\r\n        dependantProperties[i].update();\r\n      }\r\n    };\r\n\r\n    QmlWeb.setupGetterSetter(obj, propName, getter, setter);\r\n  }\r\n\r\n  loadImports(importsArray, currentFileDir = this.$basePath,\r\n      importContextId = -1) {\r\n    if (!this.qmldirsContents) {\r\n      this.qmldirsContents = {}; // cache\r\n\r\n      // putting initial keys in qmldirsContents - is a hack. We should find a\r\n      // way to explain to qmlweb, is this built-in module or qmldir-style\r\n      // module.\r\n      for (const module in QmlWeb.modules) {\r\n        if (module !== \"Main\") {\r\n          this.qmldirsContents[module] = {};\r\n        }\r\n      }\r\n    }\r\n\r\n    if (!this.qmldirs) {\r\n      this.qmldirs = {}; // resulting components lookup table\r\n    }\r\n\r\n    if (!importsArray || importsArray.length === 0) {\r\n      return;\r\n    }\r\n\r\n    for (let i = 0; i < importsArray.length; i++) {\r\n      this.loadImport(importsArray[i], currentFileDir, importContextId);\r\n    }\r\n  }\r\n\r\n  loadImport(entry, currentFileDir, importContextId) {\r\n    let name = entry[1];\r\n\r\n    // is it url to remote resource\r\n    const nameIsUrl = name.indexOf(\"//\") === 0 || name.indexOf(\"://\") >= 0;\r\n    // is it a module name, e.g. QtQuick, QtQuick.Controls, etc\r\n    const nameIsQualifiedModuleName = entry[4];\r\n    // is it a js file\r\n    const nameIsJs = name.slice(-3) === \".js\";\r\n    // local [relative] dir\r\n    const nameIsDir = !nameIsQualifiedModuleName && !nameIsUrl && !nameIsJs;\r\n\r\n    if (nameIsDir) {\r\n      name = this.$resolvePath(name, currentFileDir);\r\n      if (name[name.length - 1] === \"/\") {\r\n        // remove trailing slash as it required for `readQmlDir`\r\n        name = name.substr(0, name.length - 1);\r\n      }\r\n    }\r\n\r\n    let content = this.qmldirsContents[name];\r\n    // check if we have already loaded that qmldir file\r\n    if (!content) {\r\n      if (nameIsQualifiedModuleName && this.userAddedModulePaths[name]) {\r\n        // 1. we have qualified module and user had configured path for that\r\n        // module with this.addModulePath\r\n        content = QmlWeb.readQmlDir(this.userAddedModulePaths[name]);\r\n      } else if (nameIsUrl || nameIsDir) {\r\n        // 2. direct load\r\n        // nameIsUrl => url do not need dirs\r\n        // nameIsDir => already computed full path above\r\n        content = QmlWeb.readQmlDir(name);\r\n      } else if (nameIsJs) {\r\n        // 3. Js file, don't need qmldir\r\n      } else {\r\n        // 4. qt-style lookup for qualified module\r\n        const probableDirs = [currentFileDir].concat(this.importPathList());\r\n        const diredName = name.replace(/\\./g, \"/\");\r\n\r\n        for (let k = 0; k < probableDirs.length; k++) {\r\n          const file = probableDirs[k] + diredName;\r\n          content = QmlWeb.readQmlDir(file);\r\n          if (content) {\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      this.qmldirsContents[name] = content;\r\n    }\r\n\r\n    /* If there is no qmldir, add these directories to the list of places to\r\n      * search for components (within this import scope). \"noqmldir\" is\r\n      * inserted into the qmldir cache to avoid future attempts at fetching\r\n      * the qmldir file, but we always need to the call to\r\n      * \"addComponentImportPath\" for these sorts of directories. */\r\n    if (!content || content === \"noqmldir\") {\r\n      if (nameIsDir) {\r\n        if (entry[3]) {\r\n          /* Use entry[1] directly, as we don't want to include the\r\n            * basePath, otherwise it gets prepended twice in\r\n            * createComponent. */\r\n          this.addComponentImportPath(importContextId,\r\n            `${entry[1]}/`, entry[3]);\r\n        } else {\r\n          this.addComponentImportPath(importContextId, `${name}/`);\r\n        }\r\n      }\r\n\r\n      this.qmldirsContents[name] = \"noqmldir\";\r\n      return;\r\n    }\r\n\r\n    // copy founded externals to global var\r\n    // TODO actually we have to copy it to current component\r\n    for (const attrname in content.externals) {\r\n      this.qmldirs[attrname] = content.externals[attrname];\r\n    }\r\n\r\n    // keep already loaded qmldir files\r\n    this.qmldirsContents[name] = content;\r\n  }\r\n\r\n  size() {\r\n    return {\r\n      width: this.rootObject.getWidth(),\r\n      height: this.rootObject.getHeight()\r\n    };\r\n  }\r\n\r\n  focusedElement() {\r\n    return this.rootContext().activeFocus;\r\n  }\r\n\r\n  //---------- Private Methods ----------\r\n\r\n  $initKeyboard() {\r\n    document.onkeypress = e => {\r\n      let focusedElement = this.focusedElement();\r\n      const event = QmlWeb.eventToKeyboard(e || window.event);\r\n      const eventName = QmlWeb.keyboardSignals[event.key];\r\n\r\n      while (focusedElement && !event.accepted) {\r\n        const backup = focusedElement.$context.event;\r\n        focusedElement.$context.event = event;\r\n        focusedElement.Keys.pressed(event);\r\n        if (eventName) {\r\n          focusedElement.Keys[eventName](event);\r\n        }\r\n        focusedElement.$context.event = backup;\r\n        if (event.accepted) {\r\n          e.preventDefault();\r\n        } else {\r\n          focusedElement = focusedElement.$parent;\r\n        }\r\n      }\r\n    };\r\n\r\n    document.onkeyup = e => {\r\n      let focusedElement = this.focusedElement();\r\n      const event = QmlWeb.eventToKeyboard(e || window.event);\r\n\r\n      while (focusedElement && !event.accepted) {\r\n        const backup = focusedElement.$context.event;\r\n        focusedElement.$context.event = event;\r\n        focusedElement.Keys.released(event);\r\n        focusedElement.$context.event = backup;\r\n        if (event.accepted) {\r\n          e.preventDefault();\r\n        } else {\r\n          focusedElement = focusedElement.$parent;\r\n        }\r\n      }\r\n    };\r\n  }\r\n\r\n  _tick() {\r\n    const now = Date.now();\r\n    const elapsed = now - this._lastTick;\r\n    this._lastTick = now;\r\n    this._tickers.forEach(ticker => ticker(now, elapsed));\r\n  }\r\n\r\n  // Load resolved file, parse and construct as Component (.qml)\r\n  loadComponent(file) {\r\n    if (file in this.components) {\r\n      return this.components[file];\r\n    }\r\n\r\n    const uri = this.$parseURI(file);\r\n    if (!uri) {\r\n      return undefined;\r\n    }\r\n\r\n    let tree;\r\n    if (uri.scheme === \"qrc://\") {\r\n      tree = QmlWeb.qrc[uri.path];\r\n      if (!tree) {\r\n        return undefined;\r\n      }\r\n      // QmlWeb.qrc contains pre-parsed Component objects, but they still need\r\n      // convertToEngine called on them.\r\n      tree = QmlWeb.convertToEngine(tree);\r\n    } else {\r\n      const src = QmlWeb.getUrlContents(file, true);\r\n      if (!src) {\r\n        console.error(\"QMLEngine.loadComponent: Failed to load:\", file);\r\n        return undefined;\r\n      }\r\n\r\n      console.log(\"QMLEngine.loadComponent: Loading file:\", file);\r\n      tree = QmlWeb.parseQML(src, file);\r\n    }\r\n\r\n    if (!tree) {\r\n      return undefined;\r\n    }\r\n\r\n    if (tree.$children.length !== 1) {\r\n      console.error(\"QMLEngine.loadComponent: Failed to load:\", file,\r\n        \": A QML component must only contain one root element!\");\r\n      return undefined;\r\n    }\r\n\r\n    tree.$file = file;\r\n    this.components[file] = tree;\r\n    return tree;\r\n  }\r\n\r\n  // Load resolved file and parse as JavaScript\r\n  loadJS(file) {\r\n    if (file in this.js) {\r\n      return this.js[file];\r\n    }\r\n\r\n    const uri = this.$parseURI(file);\r\n    if (!uri) {\r\n      return undefined;\r\n    }\r\n\r\n    let jsData;\r\n    if (uri.scheme === \"qrc://\") {\r\n      jsData = QmlWeb.qrc[uri.path];\r\n    } else {\r\n      QmlWeb.loadParser();\r\n      jsData = QmlWeb.jsparse(QmlWeb.getUrlContents(file));\r\n    }\r\n\r\n    if (!jsData) {\r\n      return undefined;\r\n    }\r\n\r\n    // Remove any \".pragma\" statements, as they are not valid JavaScript\r\n    jsData.source = jsData.source.replace(/\\.pragma.*(?:\\r\\n|\\r|\\n)/, \"\\n\");\r\n\r\n    const contextSetter = new Function(\"$context\", `\r\n      with(QmlWeb) with ($context) {\r\n        ${jsData.source}\r\n      }\r\n      ${jsData.exports.map(sym => `$context.${sym} = ${sym};`).join(\"\")}\r\n    `);\r\n\r\n    this.js[file] = contextSetter;\r\n\r\n    return contextSetter;\r\n  }\r\n\r\n  $registerStart(f) {\r\n    this._whenStart.push(f);\r\n  }\r\n\r\n  $registerStop(f) {\r\n    this._whenStop.push(f);\r\n  }\r\n\r\n  $addTicker(t) {\r\n    this._tickers.push(t);\r\n  }\r\n\r\n  $removeTicker(t) {\r\n    const index = this._tickers.indexOf(t);\r\n    if (index !== -1) {\r\n      this._tickers.splice(index, 1);\r\n    }\r\n  }\r\n\r\n  $initializePropertyBindings() {\r\n    // Initialize property bindings\r\n    // we use `while`, because $initializePropertyBindings may be called\r\n    // recursive (because of Loader and/or createQmlObject )\r\n    while (this.bindedProperties.length > 0) {\r\n      const property = this.bindedProperties.shift();\r\n\r\n      if (!property.binding) {\r\n        // Probably, the binding was overwritten by an explicit value. Ignore.\r\n        continue;\r\n      }\r\n\r\n      if (property.needsUpdate) {\r\n        property.update();\r\n      } else if (geometryProperties.indexOf(property.name) >= 0) {\r\n        // It is possible that bindings with these names was already evaluated\r\n        // during eval of other bindings but in that case $updateHGeometry and\r\n        // $updateVGeometry could be blocked during their eval.\r\n        // So we call them explicitly, just in case.\r\n        const { obj, changed } = property;\r\n        if (obj.$updateHGeometry &&\r\n            changed.isConnected(obj, obj.$updateHGeometry)) {\r\n          obj.$updateHGeometry(property.val, property.val, property.name);\r\n        }\r\n        if (obj.$updateVGeometry &&\r\n            changed.isConnected(obj, obj.$updateVGeometry)) {\r\n          obj.$updateVGeometry(property.val, property.val, property.name);\r\n        }\r\n      }\r\n    }\r\n\r\n    this.$initializeAliasSignals();\r\n  }\r\n\r\n  // This parses the full URL into scheme, authority and path\r\n  $parseURI(uri) {\r\n    const match = uri.match(/^([^/]*?:\\/\\/)(.*?)(\\/.*)$/);\r\n    if (match) {\r\n      return {\r\n        scheme: match[1],\r\n        authority: match[2],\r\n        path: match[3]\r\n      };\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  // Return a path to load the file\r\n  $resolvePath(file, basePath = this.$basePath) {\r\n    // probably, replace :// with :/ ?\r\n    if (!file || file.indexOf(\"://\") !== -1) {\r\n      return file;\r\n    }\r\n\r\n    const schemes = [\"data:\", \"blob:\", \"about:\"];\r\n    for (let i = 0; i < schemes.length; i++) {\r\n      if (file.lastIndexOf(schemes[i], 0) === 0) {\r\n        return file;\r\n      }\r\n    }\r\n\r\n    const basePathURI = this.$parseURI(basePath);\r\n    if (!basePathURI) {\r\n      return file;\r\n    }\r\n\r\n    let path = basePathURI.path;\r\n    if (file.indexOf(\"/\") === 0) {\r\n      path = file;\r\n    } else {\r\n      path = `${path}${file}`;\r\n    }\r\n\r\n    // Remove duplicate slashes and dot segments in the path\r\n    path = this.removeDotSegments(path.replace(/([^:]\\/)\\/+/g, \"$1\"));\r\n\r\n    return `${basePathURI.scheme}${basePathURI.authority}${path}`;\r\n  }\r\n\r\n  // Return a DOM-valid path to load the image (fileURL is an already-resolved\r\n  // URL)\r\n  $resolveImageURL(fileURL) {\r\n    const uri = this.$parseURI(fileURL);\r\n    // If we are within the resource system, look up a \"real\" path that can be\r\n    // used by the DOM. If not found, return the path itself without the\r\n    // \"qrc://\" scheme.\r\n    if (uri && uri.scheme === \"qrc://\") {\r\n      return QmlWeb.qrc[uri.path] || uri.path;\r\n    }\r\n\r\n    // Something we can't parse, just pass it through\r\n    return fileURL;\r\n  }\r\n\r\n  $initializeAliasSignals() {\r\n    // Perform pending operations. Now we use it only to init alias's \"changed\"\r\n    // handlers, that's why we have such strange function name.\r\n    while (this.pendingOperations.length > 0) {\r\n      const op = this.pendingOperations.shift();\r\n      op[0](op[1], op[2], op[3]);\r\n    }\r\n    this.pendingOperations = [];\r\n  }\r\n\r\n  callCompletedSignals() {\r\n    // the while loop is better than for..in loop, because completedSignals\r\n    // array might change dynamically when some completed signal handlers will\r\n    // create objects dynamically via createQmlObject or Loader\r\n    while (this.completedSignals.length > 0) {\r\n      const handler = this.completedSignals.shift();\r\n      handler();\r\n    }\r\n  }\r\n}\r\n\r\nQmlWeb.QMLEngine = QMLEngine;\r\n","function QMLInteger(val) {\r\n  return val | 0;\r\n}\r\nQMLInteger.plainType = true;\r\nQmlWeb.qmlInteger = QMLInteger;\r\n","function QMLList(meta) {\r\n  const list = [];\r\n  if (meta.object instanceof Array) {\r\n    for (const i in meta.object) {\r\n      list.push(QmlWeb.construct({\r\n        object: meta.object[i],\r\n        parent: meta.parent,\r\n        context: meta.context\r\n      }));\r\n    }\r\n  } else if (meta.object instanceof QmlWeb.QMLMetaElement) {\r\n    list.push(QmlWeb.construct({\r\n      object: meta.object,\r\n      parent: meta.parent,\r\n      context: meta.context\r\n    }));\r\n  }\r\n\r\n  return list;\r\n}\r\nQMLList.plainType = true;\r\nQmlWeb.qmlList = QMLList;\r\n","function QMLNumber(val) {\r\n  return +val;\r\n}\r\nQMLNumber.plainType = true;\r\nQmlWeb.qmlNumber = QMLNumber;\r\n","const QMLOperationState = {\r\n  Idle: 1,\r\n  Init: 2,\r\n  Running: 3\r\n};\r\n\r\nQmlWeb.QMLOperationState = QMLOperationState;\r\n","class QMLProperty {\r\n  constructor(type, obj, name) {\r\n    this.obj = obj;\r\n    this.name = name;\r\n    this.changed = QmlWeb.Signal.signal([], { obj });\r\n    this.binding = null;\r\n    this.objectScope = null;\r\n    this.componentScope = null;\r\n    this.value = undefined;\r\n    this.type = type;\r\n    this.animation = null;\r\n    this.needsUpdate = true;\r\n\r\n    // This list contains all signals that hold references to this object.\r\n    // It is needed when deleting, as we need to tidy up all references to this\r\n    // object.\r\n    this.$tidyupList = [];\r\n  }\r\n\r\n  // Called by update and set to actually set this.val, performing any type\r\n  // conversion required.\r\n  $setVal(val, componentScope) {\r\n    const constructors = QmlWeb.constructors;\r\n    if (constructors[this.type] === QmlWeb.qmlList) {\r\n      this.val = QmlWeb.qmlList({\r\n        object: val,\r\n        parent: this.obj,\r\n        context: componentScope\r\n      });\r\n    } else if (val instanceof QmlWeb.QMLMetaElement) {\r\n      const QMLComponent = QmlWeb.getConstructor(\"QtQml\", \"2.0\", \"Component\");\r\n      if (constructors[val.$class] === QMLComponent ||\r\n          constructors[this.type] === QMLComponent) {\r\n        this.val = new QMLComponent({\r\n          object: val,\r\n          parent: this.obj,\r\n          context: componentScope\r\n        });\r\n        /* $basePath must be set here so that Components that are assigned to\r\n         * properties (e.g. Repeater delegates) can properly resolve child\r\n         * Components that live in the same directory in\r\n         * Component.createObject. */\r\n        this.val.$basePath = componentScope.$basePath;\r\n      } else {\r\n        this.val = QmlWeb.construct({\r\n          object: val,\r\n          parent: this.obj,\r\n          context: componentScope\r\n        });\r\n      }\r\n    } else if (!constructors[this.type]) {\r\n      this.val = val;\r\n    } else if (constructors[this.type].requireParent) {\r\n      this.val = new constructors[this.type](this.obj, val);\r\n    } else if (val === undefined && constructors[this.type].nonNullableType) {\r\n      this.val = new constructors[this.type]();\r\n    } else if (constructors[this.type].requireConstructor) {\r\n      this.val = new constructors[this.type](val);\r\n    } else if (val instanceof Object || val === undefined || val === null) {\r\n      this.val = val;\r\n    } else if (constructors[this.type].plainType) {\r\n      this.val = constructors[this.type](val);\r\n    } else {\r\n      this.val = new constructors[this.type](val);\r\n    }\r\n    if (this.val && this.val.$changed) {\r\n      this.val.$changed.connect(() => {\r\n        const oldVal = this.val; // TODO\r\n        this.changed(this.val, oldVal, this.name);\r\n      });\r\n    } else if (this.val && this.val.$properties) {\r\n      Object.keys(this.val.$properties).forEach(pname => {\r\n        const prop = this.val.$properties[pname];\r\n        if (!prop || !prop.connect) return;\r\n        // TODO: oldVal\r\n        prop.connect(() => this.changed(this.val, this.val, this.name));\r\n      });\r\n    }\r\n  }\r\n\r\n  // Updater recalculates the value of a property if one of the dependencies\r\n  // changed\r\n  update() {\r\n    this.needsUpdate = false;\r\n\r\n    if (!this.binding) {\r\n      return;\r\n    }\r\n\r\n    const oldVal = this.val;\r\n\r\n    try {\r\n      QMLProperty.pushEvaluatingProperty(this);\r\n      if (!this.binding.compiled) {\r\n        this.binding.compile();\r\n      }\r\n      this.$setVal(this.binding.eval(this.objectScope, this.componentScope,\r\n        this.componentScopeBasePath), this.componentScope);\r\n    } catch (e) {\r\n      console.log(\"QMLProperty.update binding error:\",\r\n        e,\r\n        Function.prototype.toString.call(this.binding.eval)\r\n      );\r\n    } finally {\r\n      QMLProperty.popEvaluatingProperty();\r\n    }\r\n\r\n    if (this.animation) {\r\n      this.animation.$actions = [{\r\n        target: this.animation.target || this.obj,\r\n        property: this.animation.property || this.name,\r\n        from: this.animation.from || oldVal,\r\n        to: this.animation.to || this.val\r\n      }];\r\n      this.animation.restart();\r\n    }\r\n\r\n    if (this.val !== oldVal) {\r\n      this.changed(this.val, oldVal, this.name);\r\n    }\r\n  }\r\n\r\n  // Define getter\r\n  get() {\r\n    //if (this.needsUpdate && !QMLProperty.evaluatingPropertyPaused) {\r\n    if (this.needsUpdate &&\r\n        QmlWeb.engine.operationState !== QmlWeb.QMLOperationState.Init) {\r\n      this.update();\r\n    }\r\n\r\n    // If this call to the getter is due to a property that is dependant on this\r\n    // one, we need it to take track of changes\r\n    if (QMLProperty.evaluatingProperty) {\r\n      //console.log(this,QMLProperty.evaluatingPropertyStack.slice(0),this.val);\r\n      this.changed.connect(\r\n        QMLProperty.evaluatingProperty,\r\n        QMLProperty.prototype.update,\r\n        QmlWeb.Signal.UniqueConnection\r\n      );\r\n    }\r\n\r\n    return this.val;\r\n  }\r\n  // Define setter\r\n  set(newVal, reason, objectScope, componentScope) {\r\n    const oldVal = this.val;\r\n\r\n    let val = newVal;\r\n    if (val instanceof QmlWeb.QMLBinding) {\r\n      if (!objectScope || !componentScope) {\r\n        throw new Error(\"Internal error: binding assigned without scope\");\r\n      }\r\n      this.binding = val;\r\n      this.objectScope = objectScope;\r\n      this.componentScope = componentScope;\r\n      this.componentScopeBasePath = componentScope.$basePath;\r\n\r\n      if (QmlWeb.engine.operationState !== QmlWeb.QMLOperationState.Init) {\r\n        if (!val.compiled) {\r\n          val.compile();\r\n        }\r\n        try {\r\n          QMLProperty.pushEvaluatingProperty(this);\r\n          this.needsUpdate = false;\r\n          val = this.binding.eval(objectScope, componentScope,\r\n            this.componentScopeBasePath);\r\n        } finally {\r\n          QMLProperty.popEvaluatingProperty();\r\n        }\r\n      } else {\r\n        QmlWeb.engine.bindedProperties.push(this);\r\n        return;\r\n      }\r\n    } else {\r\n      if (reason !== QMLProperty.ReasonAnimation) {\r\n        this.binding = null;\r\n      }\r\n      if (val instanceof Array) {\r\n        val = val.slice(); // Copies the array\r\n      }\r\n    }\r\n\r\n    if (reason === QMLProperty.ReasonInit && typeof val === \"undefined\") {\r\n      if (QMLProperty.typeInitialValues.hasOwnProperty(this.type)) {\r\n        val = QMLProperty.typeInitialValues[this.type];\r\n      }\r\n    }\r\n\r\n    this.$setVal(val, componentScope);\r\n\r\n    if (this.val !== oldVal) {\r\n      if (this.animation && reason === QMLProperty.ReasonUser) {\r\n        this.animation.running = false;\r\n        this.animation.$actions = [{\r\n          target: this.animation.target || this.obj,\r\n          property: this.animation.property || this.name,\r\n          from: this.animation.from || oldVal,\r\n          to: this.animation.to || this.val\r\n        }];\r\n        this.animation.running = true;\r\n      }\r\n      if (this.obj.$syncPropertyToRemote instanceof Function &&\r\n          reason === QMLProperty.ReasonUser) {\r\n        // is a remote object from e.g. a QWebChannel\r\n        this.obj.$syncPropertyToRemote(this.name, val);\r\n      } else {\r\n        this.changed(this.val, oldVal, this.name);\r\n      }\r\n    }\r\n  }\r\n\r\n  static pushEvalStack() {\r\n    QMLProperty.evaluatingPropertyStackOfStacks.push(\r\n      QMLProperty.evaluatingPropertyStack\r\n    );\r\n    QMLProperty.evaluatingPropertyStack = [];\r\n    QMLProperty.evaluatingProperty = undefined;\r\n  //  console.log(\"evaluatingProperty=>undefined due to push stck \");\r\n  }\r\n\r\n  static popEvalStack() {\r\n    QMLProperty.evaluatingPropertyStack =\r\n      QMLProperty.evaluatingPropertyStackOfStacks.pop() || [];\r\n    QMLProperty.evaluatingProperty =\r\n      QMLProperty.evaluatingPropertyStack[\r\n        QMLProperty.evaluatingPropertyStack.length - 1\r\n      ];\r\n  }\r\n\r\n  static pushEvaluatingProperty(prop) {\r\n    // TODO say warnings if already on stack. This means binding loop.\r\n    // BTW actually we do not loop because needsUpdate flag is reset before\r\n    // entering update again.\r\n    if (QMLProperty.evaluatingPropertyStack.indexOf(prop) >= 0) {\r\n      console.error(\"Property binding loop detected for property\",\r\n        prop.name,\r\n        [prop].slice(0)\r\n      );\r\n    }\r\n    QMLProperty.evaluatingProperty = prop;\r\n    QMLProperty.evaluatingPropertyStack.push(prop); //keep stack of props\r\n  }\r\n\r\n  static popEvaluatingProperty() {\r\n    QMLProperty.evaluatingPropertyStack.pop();\r\n    QMLProperty.evaluatingProperty = QMLProperty.evaluatingPropertyStack[\r\n      QMLProperty.evaluatingPropertyStack.length - 1\r\n    ];\r\n  }\r\n}\r\n\r\n// Property that is currently beeing evaluated. Used to get the information\r\n// which property called the getter of a certain other property for\r\n// evaluation and is thus dependant on it.\r\nQMLProperty.evaluatingProperty = undefined;\r\nQMLProperty.evaluatingPropertyPaused = false;\r\nQMLProperty.evaluatingPropertyStack = [];\r\nQMLProperty.evaluatingPropertyStackOfStacks = [];\r\n\r\nQMLProperty.typeInitialValues = {\r\n  int: 0,\r\n  real: 0,\r\n  double: 0,\r\n  string: \"\",\r\n  bool: false,\r\n  list: [],\r\n  enum: 0,\r\n  url: \"\"\r\n};\r\n\r\nQMLProperty.ReasonUser = 0;\r\nQMLProperty.ReasonInit = 1;\r\nQMLProperty.ReasonAnimation = 2;\r\n\r\nQmlWeb.QMLProperty = QMLProperty;\r\n","function QMLString(val) {\r\n  return `${val}`;\r\n}\r\nQMLString.plainType = true;\r\nQmlWeb.qmlString = QMLString;\r\n","function QMLUrl(val) {\r\n  return QmlWeb.engine.$resolvePath(`${val}`);\r\n}\r\nQMLUrl.plainType = true;\r\nQmlWeb.qmlUrl = QMLUrl;\r\n","function QMLVariant(val) {\r\n  return val;\r\n}\r\nQMLVariant.plainType = true;\r\nQmlWeb.qmlVariant = QMLVariant;\r\n","window.addEventListener(\"load\", () => {\r\n  const metaTags = document.getElementsByTagName(\"body\");\r\n  for (let i = 0; i < metaTags.length; ++i) {\r\n    const metaTag = metaTags[i];\r\n    const source = metaTag.getAttribute(\"data-qml\");\r\n    if (source) {\r\n      QmlWeb.qmlEngine = new QmlWeb.QMLEngine();\r\n      QmlWeb.qmlEngine.loadFile(source);\r\n      QmlWeb.qmlEngine.start();\r\n      break;\r\n    }\r\n  }\r\n});\r\n","const anchorNames = [\r\n  \"left\", \"right\", \"top\", \"bottom\", \"verticalCenter\", \"horizontalCenter\"\r\n];\r\n\r\nconst ignoreProps = [\r\n  \"x\", \"y\", \"z\", \"scale\", \"rotation\", \"implicitWidth\", \"implicitHeight\"\r\n];\r\n\r\nfunction getProperties(file) {\r\n  // TODO: implement a cleaner way\r\n\r\n  const div = document.createElement(\"div\");\r\n  const engine = new QmlWeb.QMLEngine(div);\r\n  engine.loadFile(file);\r\n\r\n  const qml = engine.rootObject;\r\n  const properties = Object.keys(qml.$properties).filter(name => {\r\n    // Invalid names\r\n    if (!name.match(/^[a-z]+$/i) || name === \"is\") return false;\r\n\r\n    // We don't need anchors\r\n    if (anchorNames.indexOf(name) !== -1) return false;\r\n\r\n    // These properties are not supported in a good way on top-level items\r\n    if (ignoreProps.indexOf(name) !== -1) return false;\r\n\r\n    const type = qml.$properties[name].type;\r\n    return [\"real\", \"color\", \"int\", \"bool\", \"string\"].indexOf(type) !== -1;\r\n  });\r\n\r\n  engine.stop();\r\n  return properties;\r\n}\r\n\r\nfunction registerElement(name, file) {\r\n  // Delay until the document is fully loaded\r\n  if (document.readyState === \"loading\") {\r\n    document.addEventListener(\"DOMContentLoaded\", () => {\r\n      registerElement(name, file);\r\n    });\r\n    return;\r\n  }\r\n\r\n  // Bail out if Custom Elements v1 are not present\r\n  if (!window.customElements) {\r\n    throw new Error(\r\n      \"window.customElements are not supported. Consider installing a polyfill.\"\r\n    );\r\n  }\r\n\r\n  // We need attributes list at this point, those form a static property\r\n  const properties = getProperties(file);\r\n  const attributes = properties.map(pname => pname.toLowerCase());\r\n  const attr2prop = properties.reduce((map, pname) => {\r\n    map[pname.toLowerCase()] = pname;\r\n    return map;\r\n  }, {});\r\n\r\n  const QmlElement = class extends HTMLElement {\r\n    connectedCallback() {\r\n      // Default wrapper display is inline-block to support native width/height\r\n      const computedStyle = window.getComputedStyle(this);\r\n      if (computedStyle.display === \"inline\") {\r\n        this.style.display = \"inline-block\";\r\n      }\r\n\r\n      const engine = this.engine = new QmlWeb.QMLEngine(this);\r\n      engine.loadFile(file);\r\n      engine.start();\r\n      const qml = this.qml = engine.rootObject;\r\n\r\n      // Bind attributes\r\n      attributes.forEach(attr => {\r\n        const pname = attr2prop[attr] || attr;\r\n        const val = this.getAttribute(attr);\r\n        if (typeof val === \"string\") {\r\n          qml[pname] = val;\r\n        }\r\n        this.applyAttribute(attr);\r\n        Object.defineProperty(\r\n          this,\r\n          attr,\r\n          {\r\n            get() {\r\n              return this.qml[pname];\r\n            },\r\n            set(value) {\r\n              this.qml[pname] = value;\r\n              this.applyAttribute(attr);\r\n            }\r\n          }\r\n        );\r\n        qml.$properties[pname].changed.connect(() => this.applyAttribute(attr));\r\n      });\r\n\r\n      // Set and update wrapper width/height\r\n      this.style.width = `${qml.width}px`;\r\n      this.style.height = `${qml.height}px`;\r\n      qml.$properties.width.changed.connect(width => {\r\n        this.style.width = `${width}px`;\r\n      });\r\n      qml.$properties.height.changed.connect(height => {\r\n        this.style.height = `${height}px`;\r\n      });\r\n    }\r\n\r\n    static get observedAttributes() {\r\n      return attributes;\r\n    }\r\n\r\n    attributeChangedCallback(attr, oldValue, newValue) {\r\n      if (!this.qml) return;\r\n      const pname = attr2prop[attr] || attr;\r\n      const prop = this.qml.$properties[pname];\r\n      if (!prop) return;\r\n      switch (prop.type) {\r\n        case \"bool\":\r\n          this.qml[pname] = typeof newValue === \"string\";\r\n          break;\r\n        default:\r\n          this.qml[pname] = newValue;\r\n      }\r\n    }\r\n\r\n    applyAttribute(attr) {\r\n      const pname = attr2prop[attr] || attr;\r\n      const prop = this.qml.$properties[pname];\r\n      if (!prop) {\r\n        this.deleteAttribute(attr);\r\n        return;\r\n      }\r\n      const value = this.qml[pname];\r\n      switch (prop.type) {\r\n        case \"bool\":\r\n          if (value) {\r\n            this.setAttribute(attr, \"\");\r\n          } else {\r\n            this.removeAttribute(attr);\r\n          }\r\n          break;\r\n        default:\r\n          this.setAttribute(attr, this.qml[pname]);\r\n      }\r\n    }\r\n  };\r\n\r\n  window.customElements.define(name, QmlElement);\r\n}\r\n\r\nQmlWeb.registerElement = registerElement;\r\n","const Easing = {\r\n  Linear: 1,\r\n  InQuad: 2, OutQuad: 3, InOutQuad: 4, OutInQuad: 5,\r\n  InCubic: 6, OutCubic: 7, InOutCubic: 8, OutInCubic: 9,\r\n  InQuart: 10, OutQuart: 11, InOutQuart: 12, OutInQuart: 13,\r\n  InQuint: 14, OutQuint: 15, InOutQuint: 16, OutInQuint: 17,\r\n  InSine: 18, OutSine: 19, InOutSine: 20, OutInSine: 21,\r\n  InExpo: 22, OutExpo: 23, InOutExpo: 24, OutInExpo: 25,\r\n  InCirc: 26, OutCirc: 27, InOutCirc: 28, OutInCirc: 29,\r\n  InElastic: 30, OutElastic: 31, InOutElastic: 32, OutInElastic: 33,\r\n  InBack: 34, OutBack: 35, InOutBack: 36, OutInBack: 37,\r\n  InBounce: 38, OutBounce: 39, InOutBounce: 40, OutInBounce: 41\r\n};\r\n\r\n// eslint-disable-next-line complexity\r\nQmlWeb.$ease = (type, period, amplitude, overshoot, t) => {\r\n  switch (type) {\r\n    // Linear\r\n    case Easing.Linear:\r\n      return t;\r\n\r\n    // Quad\r\n    case Easing.InQuad:\r\n      return Math.pow(t, 2);\r\n    case Easing.OutQuad:\r\n      return -Math.pow(t - 1, 2) + 1;\r\n    case Easing.InOutQuad:\r\n      if (t < 0.5) {\r\n        return 2 * Math.pow(t, 2);\r\n      }\r\n      return -2 * Math.pow(t - 1, 2) + 1;\r\n    case Easing.OutInQuad:\r\n      if (t < 0.5) {\r\n        return -2 * Math.pow(t - 0.5, 2) + 0.5;\r\n      }\r\n      return 2 * Math.pow(t - 0.5, 2) + 0.5;\r\n\r\n    // Cubic\r\n    case Easing.InCubic:\r\n      return Math.pow(t, 3);\r\n    case Easing.OutCubic:\r\n      return Math.pow(t - 1, 3) + 1;\r\n    case Easing.InOutCubic:\r\n      if (t < 0.5) {\r\n        return 4 * Math.pow(t, 3);\r\n      }\r\n      return 4 * Math.pow(t - 1, 3) + 1;\r\n    case Easing.OutInCubic:\r\n      return 4 * Math.pow(t - 0.5, 3) + 0.5;\r\n\r\n    // Quart\r\n    case Easing.InQuart:\r\n      return Math.pow(t, 4);\r\n    case Easing.OutQuart:\r\n      return -Math.pow(t - 1, 4) + 1;\r\n    case Easing.InOutQuart:\r\n      if (t < 0.5) {\r\n        return 8 * Math.pow(t, 4);\r\n      }\r\n      return -8 * Math.pow(t - 1, 4) + 1;\r\n    case Easing.OutInQuart:\r\n      if (t < 0.5) {\r\n        return -8 * Math.pow(t - 0.5, 4) + 0.5;\r\n      }\r\n      return 8 * Math.pow(t - 0.5, 4) + 0.5;\r\n\r\n    // Quint\r\n    case Easing.InQuint:\r\n      return Math.pow(t, 5);\r\n    case Easing.OutQuint:\r\n      return Math.pow(t - 1, 5) + 1;\r\n    case Easing.InOutQuint:\r\n      if (t < 0.5) {\r\n        return 16 * Math.pow(t, 5);\r\n      }\r\n      return 16 * Math.pow(t - 1, 5) + 1;\r\n    case Easing.OutInQuint:\r\n      if (t < 0.5) {\r\n        return 16 * Math.pow(t - 0.5, 5) + 0.5;\r\n      }\r\n      return 16 * Math.pow(t - 0.5, 5) + 0.5;\r\n\r\n    // Sine\r\n    case Easing.InSine:\r\n      return -Math.cos(0.5 * Math.PI * t) + 1;\r\n    case Easing.OutSine:\r\n      return Math.sin(0.5 * Math.PI * t);\r\n    case Easing.InOutSine:\r\n      return -0.5 * Math.cos(Math.PI * t) + 0.5;\r\n    case Easing.OutInSine:\r\n      if (t < 0.5) {\r\n        return 0.5 * Math.sin(Math.PI * t);\r\n      }\r\n      return -0.5 * Math.sin(Math.PI * t) + 1;\r\n\r\n    // Expo\r\n    case Easing.InExpo:\r\n      return 1 / 1023 * (Math.pow(2, 10 * t) - 1);\r\n    case Easing.OutExpo:\r\n      return -1024 / 1023 * (Math.pow(2, -10 * t) - 1);\r\n    case Easing.InOutExpo:\r\n      if (t < 0.5) {\r\n        return 1 / 62 * (Math.pow(2, 10 * t) - 1);\r\n      }\r\n      return -512 / 31 * Math.pow(2, -10 * t) + 63 / 62;\r\n    case Easing.OutInExpo:\r\n      if (t < 0.5) {\r\n        return -16 / 31 * (Math.pow(2, -10 * t) - 1);\r\n      }\r\n      return 1 / 1984 * Math.pow(2, 10 * t) + 15 / 31;\r\n\r\n    // Circ\r\n    case Easing.InCirc:\r\n      return 1 - Math.sqrt(1 - t * t);\r\n    case Easing.OutCirc:\r\n      return Math.sqrt(1 - Math.pow(t - 1, 2));\r\n    case Easing.InOutCirc:\r\n      if (t < 0.5) {\r\n        return 0.5 * (1 - Math.sqrt(1 - 4 * t * t));\r\n      }\r\n      return 0.5 * (Math.sqrt(1 - 4 * Math.pow(t - 1, 2)) + 1);\r\n    case Easing.OutInCirc:\r\n      if (t < 0.5) {\r\n        return 0.5 * Math.sqrt(1 - Math.pow(2 * t - 1, 2));\r\n      }\r\n      return 0.5 * (2 - Math.sqrt(1 - Math.pow(2 * t - 1, 2)));\r\n\r\n    // Elastic\r\n    case Easing.InElastic:\r\n      return -amplitude * Math.pow(2, 10 * t - 10) *\r\n        Math.sin(2 * t * Math.PI / period - Math.asin(1 / amplitude));\r\n    case Easing.OutElastic:\r\n      return amplitude * Math.pow(2, -10 * t) *\r\n        Math.sin(2 * t * Math.PI / period - Math.asin(1 / amplitude)) + 1;\r\n    case Easing.InOutElastic:\r\n      if (t < 0.5) {\r\n        return -0.5 * amplitude * Math.pow(2, 20 * t - 10) *\r\n          Math.sin(4 * t * Math.PI / period - Math.asin(1 / amplitude));\r\n      }\r\n      return -0.5 * amplitude * Math.pow(2, -20 * t + 10) *\r\n        Math.sin(4 * t * Math.PI / period + Math.asin(1 / amplitude)) + 1;\r\n    case Easing.OutInElastic:\r\n      if (t < 0.5) {\r\n        return 0.5 * amplitude * Math.pow(2, -20 * t) *\r\n          Math.sin(4 * t * Math.PI / period - Math.asin(1 / amplitude)) + 0.5;\r\n      }\r\n      return -0.5 * amplitude * Math.pow(2, 20 * t - 20) *\r\n        Math.sin(4 * t * Math.PI / period - Math.asin(1 / amplitude)) + 0.5;\r\n\r\n    // Back\r\n    case Easing.InBack:\r\n      return (overshoot + 1) * Math.pow(t, 3) - overshoot * Math.pow(t, 2);\r\n    case Easing.OutBack:\r\n      return (overshoot + 1) * Math.pow(t - 1, 3) +\r\n             overshoot * Math.pow(t - 1, 2) + 1;\r\n    case Easing.InOutBack:\r\n      if (t < 0.5) {\r\n        return 4 * (overshoot + 1) * Math.pow(t, 3) -\r\n               2 * overshoot * Math.pow(t, 2);\r\n      }\r\n      return 0.5 * (overshoot + 1) * Math.pow(2 * t - 2, 3) +\r\n             overshoot / 2 * Math.pow(2 * t - 2, 2) + 1;\r\n    case Easing.OutInBack:\r\n      if (t < 0.5) {\r\n        return 0.5 * ((overshoot + 1) * Math.pow(2 * t - 1, 3) +\r\n               overshoot * Math.pow(2 * t - 1, 2) + 1);\r\n      }\r\n      return 4 * (overshoot + 1) * Math.pow(t - 0.5, 3) -\r\n             2 * overshoot * Math.pow(t - 0.5, 2) + 0.5;\r\n    // Bounce\r\n    case Easing.InBounce:\r\n      if (t < 1 / 11) {\r\n        return -amplitude * 121 / 16 * (t * t - 1 / 11 * t);\r\n      } else if (t < 3 / 11) {\r\n        return -amplitude * 121 / 16 * (t * t - 4 / 11 * t + 3 / 121);\r\n      } else if (t < 7 / 11) {\r\n        return -amplitude * 121 / 16 * (t * t - 10 / 11 * t + 21 / 121);\r\n      }\r\n      return -(121 / 16) * (t * t - 2 * t + 1) + 1;\r\n    case Easing.OutBounce:\r\n      if (t < 4 / 11) {\r\n        return 121 / 16 * t * t;\r\n      } else if (t < 8 / 11) {\r\n        return amplitude * (121 / 16) * (t * t - 12 / 11 * t + 32 / 121) + 1;\r\n      } else if (t < 10 / 11) {\r\n        return amplitude * (121 / 16) * (t * t - 18 / 11 * t + 80 / 121) + 1;\r\n      }\r\n      return amplitude * (121 / 16) * (t * t - 21 / 11 * t + 10 / 11) + 1;\r\n    case Easing.InOutBounce:\r\n      if (t < 1 / 22) {\r\n        return -amplitude * 121 / 8 * (t * t - 1 / 22 * t);\r\n      } else if (t < 3 / 22) {\r\n        return -amplitude * 121 / 8 * (t * t - 2 / 11 * t + 3 / 484);\r\n      } else if (t < 7 / 22) {\r\n        return -amplitude * 121 / 8 * (t * t - 5 / 11 * t + 21 / 484);\r\n      } else if (t < 11 / 22) {\r\n        return -121 / 8 * (t * t - t + 0.25) + 0.5;\r\n      } else if (t < 15 / 22) {\r\n        return 121 / 8 * (t * t - t) + 137 / 32;\r\n      } else if (t < 19 / 22) {\r\n        return amplitude * 121 / 8 * (t * t - 17 / 11 * t + 285 / 484) + 1;\r\n      } else if (t < 21 / 22) {\r\n        return amplitude * 121 / 8 * (t * t - 20 / 11 * t + 399 / 484) + 1;\r\n      }\r\n      return amplitude * 121 / 8 * (t * t - 43 / 22 * t + 21 / 22) + 1;\r\n    case Easing.OutInBounce:\r\n      if (t < 4 / 22) {\r\n        return 121 / 8 * t * t;\r\n      } else if (t < 8 / 22) {\r\n        return -amplitude * 121 / 8 * (t * t - 6 / 11 * t + 8 / 121) + 0.5;\r\n      } else if (t < 10 / 22) {\r\n        return -amplitude * 121 / 8 * (t * t - 9 / 11 * t + 20 / 121) + 0.5;\r\n      } else if (t < 11 / 22) {\r\n        return -amplitude * 121 / 8 * (t * t - 21 / 22 * t + 5 / 22) + 0.5;\r\n      } else if (t < 12 / 22) {\r\n        return amplitude * 121 / 8 * (t * t - 23 / 22 * t + 3 / 11) + 0.5;\r\n      } else if (t < 14 / 22) {\r\n        return amplitude * 121 / 8 * (t * t - 13 / 11 * t + 42 / 121) + 0.5;\r\n      } else if (t < 18 / 22) {\r\n        return amplitude * 121 / 8 * (t * t - 16 / 11 * t + 63 / 121) + 0.5;\r\n      }\r\n      return -121 / 8 * (t * t - 2 * t + 117 / 121) + 0.5;\r\n\r\n    // Default\r\n    default:\r\n      console.error(\"Unsupported animation type: \", type);\r\n      return t;\r\n  }\r\n};\r\n\r\nQmlWeb.Easing = Easing;\r\n","/* eslint accessor-pairs: 0 */\r\n\r\nfunction setupGetter(obj, propName, func) {\r\n  Object.defineProperty(obj, propName, {\r\n    get: func,\r\n    configurable: true,\r\n    enumerable: true\r\n  });\r\n}\r\n\r\nfunction setupSetter(obj, propName, func) {\r\n  Object.defineProperty(obj, propName, {\r\n    set: func,\r\n    configurable: true,\r\n    enumerable: false\r\n  });\r\n}\r\n\r\nfunction setupGetterSetter(obj, propName, getter, setter) {\r\n  Object.defineProperty(obj, propName, {\r\n    get: getter,\r\n    set: setter,\r\n    configurable: true,\r\n    enumerable: false\r\n  });\r\n}\r\n\r\nQmlWeb.setupGetter = setupGetter;\r\nQmlWeb.setupSetter = setupSetter;\r\nQmlWeb.setupGetterSetter = setupGetterSetter;\r\n","class QmlWebHelpers {\r\n  static arrayFindIndex(array, callback) {\r\n    // Note: does not support thisArg, we don't need that\r\n    if (!Array.prototype.findIndex) {\r\n      for (const key in array) {\r\n        if (callback(array[key], key, array)) {\r\n          return key;\r\n        }\r\n      }\r\n      return -1;\r\n    }\r\n    return Array.prototype.findIndex.call(array, callback);\r\n  }\r\n  static mergeObjects(...args) {\r\n    const merged = {};\r\n    for (const i in args) {\r\n      const arg = args[i];\r\n      if (!arg) {\r\n        continue;\r\n      }\r\n      for (const key in arg) {\r\n        merged[key] = arg[key];\r\n      }\r\n    }\r\n    return merged;\r\n  }\r\n}\r\n\r\nQmlWeb.helpers = QmlWebHelpers;\r\n","/* eslint-disable no-unused-vars */\r\n\r\nfunction formatString(sourceText, n) {\r\n  let text = sourceText;\r\n  if (typeof n !== \"undefined\") {\r\n    if (typeof n !== \"number\") {\r\n      throw new Error(\"(n) must be a number\");\r\n    }\r\n    text = text.replace(/%n/, n.toString(10));\r\n  }\r\n  return text;\r\n}\r\n\r\nQmlWeb.qsTr = function(sourceText, disambiguation, n) {\r\n  return formatString(sourceText, n);\r\n};\r\n\r\nQmlWeb.qsTrId = function(id, n) {\r\n  return formatString(id, n);\r\n};\r\n\r\nQmlWeb.qsTranslate = function(context, sourceText, disambiguation, n) {\r\n  return formatString(sourceText, n);\r\n};\r\n\r\n// Somewhy these are documented, but not defined in Qt QML 5.10\r\n/*\r\nQmlWeb.qsTrIdNoOp = function(id) {\r\n  return id;\r\n};\r\n\r\nQmlWeb.qsTrNoOp = function(sourceText, disambiguation) {\r\n  return sourceText;\r\n};\r\n\r\nQmlWeb.qsTranslateNoOp = function(context, sourceText, disambiguation) {\r\n  return sourceText;\r\n};\r\n*/\r\n","/* @license\r\n\r\nMIT License\r\n\r\nCopyright (c) 2011 Lauri Paimen <lauri@paimen.info>\r\nCopyright (c) 2015 Pavel Vasev <pavel.vasev@gmail.com> - initial and working\r\n                                                         import implementation.\r\nCopyright (c) 2016 QmlWeb contributors\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of\r\nthis software and associated documentation files (the \"Software\"), to deal in\r\nthe Software without restriction, including without limitation the rights to\r\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\r\nthe Software, and to permit persons to whom the Software is furnished to do so,\r\nsubject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\r\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\r\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\r\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\r\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n*/\r\n\r\n\r\n/**\r\n * Get URL contents.\r\n * @param url {String} Url to fetch.\r\n * @param skipExceptions {bool} when turned on, ignore exeptions and return\r\n *        false. This feature is used by readQmlDir.\r\n * @private\r\n * @return {mixed} String of contents or false in errors.\r\n */\r\nfunction getUrlContents(url, skipExceptions) {\r\n  if (typeof QmlWeb.urlContentCache[url] === \"undefined\") {\r\n    const xhr = new XMLHttpRequest();\r\n    xhr.open(\"GET\", url, false);\r\n\r\n    if (skipExceptions) {\r\n      try {\r\n        xhr.send(null);\r\n      } catch (e) {\r\n        return false;\r\n      }\r\n      // it is OK to not have logging here, because DeveloperTools already will\r\n      // have red log record\r\n    } else {\r\n      xhr.send(null);\r\n    }\r\n\r\n    if (xhr.status !== 200 && xhr.status !== 0) { // 0 if accessing with file://\r\n      console.log(`Retrieving ${url} failed: ${xhr.responseText}`, xhr);\r\n      return false;\r\n    }\r\n    QmlWeb.urlContentCache[url] = xhr.responseText;\r\n  }\r\n  return QmlWeb.urlContentCache[url];\r\n}\r\nif (typeof QmlWeb.urlContentCache === \"undefined\") {\r\n  QmlWeb.urlContentCache = {};\r\n}\r\n\r\n/**\r\n * Read qmldir spec file at directory.\r\n * @param url Url of the directory\r\n * @return {Object} Object, where .internals lists qmldir internal references\r\n *                          and .externals lists qmldir external references.\r\n */\r\n\r\n/*  Note on how importing works.\r\n\r\nparseQML gives us `tree.$imports` variable, which contains information from\r\n`import` statements.\r\n\r\nAfter each call to parseQML, we call engine.loadImports(tree.$imports).\r\nIt in turn invokes readQmlDir() calls for each import, with respect to current\r\ncomponent base path and engine.importPathList().\r\n\r\nWe keep all component names from all qmldir files in global variable\r\n`engine.qmldir`.\r\n\r\nIn construct() function, we use `engine.qmldir` for component url lookup.\r\n\r\nReference import info: http://doc.qt.io/qt-5/qtqml-syntax-imports.html\r\nAlso please look at notes and TODO's in qtcore.js::loadImports() and\r\nqtcore.js::construct() methods.\r\n*/\r\n\r\nfunction readQmlDir(url) {\r\n  // in case 'url' is empty, do not attach \"/\"\r\n  // Q1: when this happen?\r\n  const qmldirFileUrl = url.length > 0 ? `${url}/qmldir` : \"qmldir\";\r\n\r\n  const parsedUrl = QmlWeb.engine.$parseURI(qmldirFileUrl);\r\n\r\n  let qmldir;\r\n  if (parsedUrl.scheme === \"qrc://\") {\r\n    qmldir = QmlWeb.qrc[parsedUrl.path];\r\n  } else {\r\n    qmldir = getUrlContents(qmldirFileUrl, true) || undefined;\r\n  }\r\n\r\n  const internals = {};\r\n  const externals = {};\r\n\r\n  if (qmldir === undefined) {\r\n    return false;\r\n  }\r\n\r\n  // we have to check for \"://\"\r\n  // In that case, item path is meant to be absolute, and we have no need to\r\n  // prefix it with base url\r\n  function makeurl(path) {\r\n    if (path.indexOf(\"://\") > 0) {\r\n      return path;\r\n    }\r\n    return `${url}/${path}`;\r\n  }\r\n\r\n  const lines = qmldir.split(/\\r?\\n/);\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const line = lines[i].trim();\r\n    if (!line.length || line[0] === \"#\") continue; // Empty line or comment\r\n    const parts = line.split(/\\s+/);\r\n    const res = {};\r\n    switch (parts[0]) {\r\n      case \"designersupported\": // Just a flag for IDE\r\n      case \"typeinfo\": // For IDE code completion etc\r\n        break;\r\n      case \"plugin\":\r\n      case \"classname\":\r\n      case \"depends\":\r\n      case \"module\":\r\n        console.log(`${url}: qmldir \"${parts[0]}\" entries are not supported`);\r\n        break;\r\n      case \"internal\":\r\n      case \"singleton\":\r\n        res[parts[0]] = true;\r\n        parts.shift();\r\n        // fall through\r\n      default:\r\n        if (parts.length === 2) {\r\n          res.url = makeurl(parts[1]);\r\n        } else {\r\n          res.version = parts[1];\r\n          res.url = makeurl(parts[2]);\r\n        }\r\n        externals[parts[0]] = res;\r\n    }\r\n  }\r\n  return { internals, externals };\r\n}\r\n\r\nQmlWeb.getUrlContents = getUrlContents;\r\nQmlWeb.readQmlDir = readQmlDir;\r\n","function importJavascriptInContext(contextSetter, $context) {\r\n  /* Set the QmlWeb.executionContext so that any internal calls to Qt.include\r\n   * will have the proper context */\r\n  const oldExecutionContext = QmlWeb.executionContext;\r\n  QmlWeb.executionContext = $context;\r\n  contextSetter($context);\r\n  QmlWeb.executionContext = oldExecutionContext;\r\n}\r\n\r\nQmlWeb.importJavascriptInContext = importJavascriptInContext;\r\n","QmlWeb.keyCodeToQt = e => {\r\n  const Qt = QmlWeb.Qt;\r\n  e.keypad = e.keyCode >= 96 && e.keyCode <= 111;\r\n  if (e.keyCode === Qt.Key_Tab && e.shiftKey) {\r\n    return Qt.Key_Backtab;\r\n  }\r\n  if (e.keyCode >= 97 && e.keyCode <= 122) {\r\n    return e.keyCode - (97 - Qt.Key_A);\r\n  }\r\n  return e.keyCode;\r\n};\r\n\r\nQmlWeb.eventToKeyboard = e => ({\r\n  accepted: false,\r\n  count: 1,\r\n  isAutoRepeat: false,\r\n  key: QmlWeb.keyCodeToQt(e),\r\n  modifiers: e.ctrlKey * QmlWeb.Qt.CtrlModifier\r\n           | e.altKey * QmlWeb.Qt.AltModifier\r\n           | e.shiftKey * QmlWeb.Qt.ShiftModifier\r\n           | e.metaKey * QmlWeb.Qt.MetaModifier\r\n           | e.keypad * QmlWeb.Qt.KeypadModifier,\r\n  text: String.fromCharCode(e.charCode)\r\n});\r\n\r\nQmlWeb.keyboardSignals = {};\r\n[\r\n  \"asterisk\", \"back\", \"backtab\", \"call\", \"cancel\", \"delete\", \"escape\", \"flip\",\r\n  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, \"hangup\", \"menu\", \"no\", \"return\", \"select\",\r\n  \"space\", \"tab\", \"volumeDown\", \"volumeUp\", \"yes\", \"up\", \"right\", \"down\", \"left\"\r\n].forEach(key => {\r\n  const name = key.toString();\r\n  const qtName = `Key_${name[0].toUpperCase()}${name.slice(1)}`;\r\n  const prefix = typeof key === \"number\" ? \"digit\" : \"\";\r\n  QmlWeb.keyboardSignals[QmlWeb.Qt[qtName]] = `${prefix}${name}Pressed`;\r\n});\r\n","QmlWeb.executionContext = null;\r\n\r\nconst modules = {\r\n  Main: {\r\n    int: QmlWeb.qmlInteger,\r\n    real: QmlWeb.qmlNumber,\r\n    double: QmlWeb.qmlNumber,\r\n    string: QmlWeb.qmlString,\r\n    bool: QmlWeb.qmlBoolean,\r\n    list: QmlWeb.qmlList,\r\n    color: QmlWeb.QColor,\r\n    font: QmlWeb.QFont,\r\n    size: QmlWeb.QSizeF,\r\n    point: QmlWeb.QPointF,\r\n    rect: QmlWeb.QRectF,\r\n    vector2d: QmlWeb.QVector2D,\r\n    vector3d: QmlWeb.QVector3D,\r\n    vector4d: QmlWeb.QVector4D,\r\n    quaternion: QmlWeb.QQuaternion,\r\n    matrix4x4: QmlWeb.QMatrix4x4,\r\n    enum: QmlWeb.qmlNumber,\r\n    url: QmlWeb.qmlUrl,\r\n    variant: QmlWeb.qmlVariant,\r\n    var: QmlWeb.qmlVariant\r\n  }\r\n};\r\n\r\n// All object constructors\r\nQmlWeb.constructors = modules.Main;\r\n\r\nconst perImportContextConstructors = {};\r\nlet importContextIds = 0;\r\n\r\n// Helper. Adds a type to the constructor list\r\nfunction registerGlobalQmlType(name, type) {\r\n  QmlWeb[type.name] = type;\r\n  QmlWeb.constructors[name] = type;\r\n  modules.Main[name] = type;\r\n}\r\n\r\n// Helper. Register a type to a module\r\nfunction registerQmlType(spec) {\r\n  if (!/.*_.*/.test(spec.name)) {\r\n    throw new Error(`Invalid class name: ${spec.name}`);\r\n  }\r\n\r\n  const name = spec.name.replace(/.*_/, \"\");\r\n  const module = spec.name.replace(/(_[0-9]+)?_[^_]+$/, \"\").replace(/_/g, \".\");\r\n\r\n  spec.$qmlTypeInfo = {\r\n    enums: spec.hasOwnProperty(\"enums\") ? spec.enums : {},\r\n    signals: spec.hasOwnProperty(\"signals\") ? spec.signals : {},\r\n    properties: spec.hasOwnProperty(\"properties\") ? spec.properties : {},\r\n    defaultProperty: spec.defaultProperty\r\n  };\r\n\r\n  if (spec.hasOwnProperty(\"global\") && spec.global) {\r\n    registerGlobalQmlType(name, spec);\r\n  }\r\n\r\n  const moduleDescriptor = {\r\n    name,\r\n    versions: spec.hasOwnProperty(\"versions\") ? spec.versions : /.*/,\r\n    constructor: spec\r\n  };\r\n  if (!modules.hasOwnProperty(module)) {\r\n    modules[module] = [];\r\n  }\r\n  modules[module].push(moduleDescriptor);\r\n\r\n  // TODO: Move to module initialization?\r\n  /*\r\n    http://doc.qt.io/qt-5/qtqml-syntax-objectattributes.html#attached-properties-and-attached-signal-handlers\r\n\r\n    Some object treated as Attached. For example, Component.\r\n    Here, we set property to object `QMLBaseObject.prototype` with name of that\r\n    object, and with specific getter func.\r\n    E.g., we create \"someitem.Component\" here.\r\n    Later, if somebody will read that property, the getter will be invoked.\r\n    Here all getters are set to `getAttachedObject` only, which is actually\r\n    dedicated for Component attached object.\r\n    The code of `getAttachedObject` checks whether $Component internal\r\n    variable exist, and creates it if it absent.\r\n    Then, `getAttachedObject` adds self \"completed\" signal to global\r\n    `engine.completedSignals`.\r\n    That is how completed handlers gathered into global list. This list then\r\n    is called by `engine.callCompletedSignals`.\r\n\r\n    p.s. At the moment, Repeater and Loader manually call\r\n    `Component.completed` signals on objects they create.\r\n    At the same time, those signals are still pushed to\r\n    `engine.completedSignals` by getAttachedObject.\r\n  */\r\n  if (spec.getAttachedObject) {\r\n    const QMLBaseObject = QmlWeb.getConstructor(\"QtQml\", \"2.0\", \"QtObject\");\r\n    QmlWeb.setupGetter(QMLBaseObject.prototype, name, spec.getAttachedObject);\r\n  }\r\n}\r\n\r\nfunction getConstructor(moduleName, version, name) {\r\n  if (typeof modules[moduleName] !== \"undefined\") {\r\n    for (let i = 0; i < modules[moduleName].length; ++i) {\r\n      const type = modules[moduleName][i];\r\n      if (type.name === name && type.versions.test(version)) {\r\n        return type.constructor;\r\n      }\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\nfunction getModuleConstructors(moduleName, version) {\r\n  const constructors = {};\r\n  if (typeof modules[moduleName] === \"undefined\") {\r\n    console.warn(`module \"${moduleName}\" not found`);\r\n    return constructors;\r\n  }\r\n  for (let i = 0; i < modules[moduleName].length; ++i) {\r\n    const module = modules[moduleName][i];\r\n    if (module.versions.test(version)) {\r\n      constructors[module.name] = module.constructor;\r\n    }\r\n  }\r\n  return constructors;\r\n}\r\n\r\nfunction loadImports(self, imports) {\r\n  const mergeObjects = QmlWeb.helpers.mergeObjects;\r\n  let constructors = mergeObjects(modules.Main);\r\n  if (imports.filter(row => row[1] === \"QtQml\").length === 0 &&\r\n      imports.filter(row => row[1] === \"QtQuick\").length === 1) {\r\n    imports.push([\"qmlimport\", \"QtQml\", 2, \"\", true]);\r\n  }\r\n  for (let i = 0; i < imports.length; ++i) {\r\n    const [, moduleName, moduleVersion, moduleAlias] = imports[i];\r\n    if (typeof moduleVersion !== \"number\") continue;\r\n    const versionString = moduleVersion % 1 === 0 ?\r\n                            moduleVersion.toFixed(1) :\r\n                            moduleVersion.toString();\r\n    const moduleConstructors = getModuleConstructors(moduleName, versionString);\r\n\r\n    if (moduleAlias !== \"\") {\r\n      constructors[moduleAlias] = mergeObjects(\r\n        constructors[moduleAlias],\r\n        moduleConstructors\r\n      );\r\n    } else {\r\n      constructors = mergeObjects(constructors, moduleConstructors);\r\n    }\r\n  }\r\n  self.importContextId = importContextIds++;\r\n  perImportContextConstructors[self.importContextId] = constructors;\r\n  QmlWeb.constructors = constructors; // TODO: why do we need this?\r\n}\r\n\r\n/**\r\n * QML Object constructor.\r\n * @param {Object} meta Meta information about the object and the creation\r\n *                      context\r\n * @return {Object} New qml object\r\n */\r\nfunction construct(meta) {\r\n  let item;\r\n\r\n  let constructors = perImportContextConstructors[meta.context.importContextId];\r\n\r\n  const classComponents = meta.object.$class.split(\".\");\r\n  for (let ci = 0; ci < classComponents.length; ++ci) {\r\n    const c = classComponents[ci];\r\n    constructors = constructors[c];\r\n    if (constructors === undefined) {\r\n      break;\r\n    }\r\n  }\r\n\r\n  if (constructors !== undefined) {\r\n    const constructor = constructors;\r\n    meta.super = constructor;\r\n    item = new constructor(meta);\r\n    meta.super = undefined;\r\n  } else {\r\n    // Load component from file. Please look at import.js for main notes.\r\n    // Actually, we have to use that order:\r\n    // 1) try to load component from current basePath\r\n    // 2) from importPathList\r\n    // 3) from directories in imports statements and then\r\n    // 4) from qmldir files\r\n    // Currently we support only 1,2 and 4 and use order: 4,1,2\r\n    // TODO: engine.qmldirs is global for all loaded components.\r\n    //       That's not qml's original behaviour.\r\n    const qdirInfo = QmlWeb.engine.qmldirs[meta.object.$class];\r\n    // Are we have info on that component in some imported qmldir files?\r\n\r\n    /* This will also be set in applyProperties, but needs to be set here\r\n     * for Qt.createComponent to have the correct context. */\r\n    QmlWeb.executionContext = meta.context;\r\n\r\n    let filePath;\r\n    if (qdirInfo) {\r\n      filePath = qdirInfo.url;\r\n    } else if (classComponents.length === 2) {\r\n      const qualified = QmlWeb.engine.qualifiedImportPath(\r\n        meta.context.importContextId, classComponents[0]\r\n      );\r\n      filePath = `${qualified}${classComponents[1]}.qml`;\r\n    } else {\r\n      filePath = `${classComponents[0]}.qml`;\r\n    }\r\n\r\n    const component = QmlWeb.Qt.createComponent(filePath);\r\n\r\n    if (!component) {\r\n      throw new Error(`No constructor found for ${meta.object.$class}`);\r\n    }\r\n\r\n    item = component.$createObject(meta.parent);\r\n    if (typeof item.dom !== \"undefined\") {\r\n      item.dom.className += ` ${classComponents[classComponents.length - 1]}`;\r\n      if (meta.object.id) {\r\n        item.dom.className += `  ${meta.object.id}`;\r\n      }\r\n    }\r\n    // Handle default properties\r\n  }\r\n\r\n  // id\r\n  if (meta.object.id) {\r\n    QmlWeb.setupGetterSetter(\r\n      meta.context, meta.object.id,\r\n      () => item,\r\n      () => {}\r\n    );\r\n  }\r\n\r\n  // keep path in item for probale use it later in Qt.resolvedUrl\r\n  item.$context.$basePath = QmlWeb.engine.$basePath; //gut\r\n\r\n  // We want to use the item's scope, but this Component's imports\r\n  item.$context.importContextId = meta.context.importContextId;\r\n\r\n  // Apply properties (Bindings won't get evaluated, yet)\r\n  QmlWeb.applyProperties(meta.object, item, item, item.$context);\r\n\r\n  return item;\r\n}\r\n\r\nQmlWeb.modules = modules;\r\nQmlWeb.registerGlobalQmlType = registerGlobalQmlType;\r\nQmlWeb.registerQmlType = registerQmlType;\r\nQmlWeb.getConstructor = getConstructor;\r\nQmlWeb.loadImports = loadImports;\r\nQmlWeb.construct = construct;\r\n","/**\r\n * Create property getters and setters for object.\r\n * @param {Object} obj Object for which gsetters will be set\r\n * @param {String} propName Property name\r\n * @param {Object} [options] Options that allow finetuning of the property\r\n */\r\nfunction createProperty(type, obj, propName, options = {}) {\r\n  const QMLProperty = QmlWeb.QMLProperty;\r\n  const prop = new QMLProperty(type, obj, propName);\r\n  obj[`${propName}Changed`] = prop.changed;\r\n  obj.$properties[propName] = prop;\r\n  obj.$properties[propName].set(options.initialValue, QMLProperty.ReasonInit);\r\n\r\n  const getter = () => obj.$properties[propName].get();\r\n  let setter;\r\n  if (options.readOnly) {\r\n    setter = function(newVal) {\r\n      if (!obj.$canEditReadOnlyProperties) {\r\n        throw new Error(`property '${propName}' has read only access`);\r\n      }\r\n      obj.$properties[propName].set(newVal, QMLProperty.ReasonUser);\r\n    };\r\n  } else {\r\n    setter = function(newVal) {\r\n      obj.$properties[propName].set(newVal, QMLProperty.ReasonUser);\r\n    };\r\n  }\r\n  QmlWeb.setupGetterSetter(obj, propName, getter, setter);\r\n  if (obj.$isComponentRoot) {\r\n    let skip = false;\r\n    if (options.noContextOverride) {\r\n      // Don't override context properties if options.noContextOverride is on\r\n      const descr = Object.getOwnPropertyDescriptor(obj.$context, propName);\r\n      skip = descr && (descr.get || descr.set);\r\n    }\r\n    if (!skip) {\r\n      QmlWeb.setupGetterSetter(obj.$context, propName, getter, setter);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Create property getters and setters for object.\r\n * @param {Object} obj Object for which gsetters will be set\r\n * @param {Object} properties An object containing properties descriptors\r\n */\r\nfunction createProperties(obj, properties) {\r\n  Object.keys(properties).forEach(name => {\r\n    let desc = properties[name];\r\n    if (typeof desc === \"string\") {\r\n      desc = { type: desc };\r\n    }\r\n    createProperty(desc.type, obj, name, desc);\r\n  });\r\n}\r\n\r\n/**\r\n * Apply properties from metaObject to item.\r\n * @param {Object} metaObject Source of properties\r\n * @param {Object} item Target of property apply\r\n * @param {Object} objectScope Scope in which properties should be evaluated\r\n * @param {Object} componentScope Component scope in which properties should be\r\n *                 evaluated\r\n */\r\nfunction applyProperties(metaObject, item, objectScopeIn, componentScope) {\r\n  const QMLProperty = QmlWeb.QMLProperty;\r\n  const objectScope = objectScopeIn || item;\r\n  QmlWeb.executionContext = componentScope;\r\n\r\n  const children = metaObject.$children;\r\n  if (children && children.length > 0) {\r\n    if (item.$defaultProperty) {\r\n      // TODO: detect based on property type, not children count?\r\n      const value = children.length === 1 ? children[0] : children;\r\n      item.$properties[item.$defaultProperty].set(\r\n        value,\r\n        QMLProperty.ReasonInit,\r\n        objectScope, componentScope\r\n      );\r\n    } else {\r\n      throw new Error(\"Cannot assign to unexistant default property\");\r\n    }\r\n  }\r\n  // We purposefully set the default property AFTER using it, in order to only\r\n  // have it applied for instanciations of this component, but not for its\r\n  // internal children\r\n  if (metaObject.$defaultProperty) {\r\n    item.$defaultProperty = metaObject.$defaultProperty;\r\n  }\r\n\r\n  for (const i in metaObject) {\r\n    const value = metaObject[i];\r\n    if (i === \"id\" || i === \"$class\") { // keep them\r\n      item[i] = value;\r\n      continue;\r\n    }\r\n\r\n    // skip global id's and internal values\r\n    if (i === \"id\" || i[0] === \"$\") { // TODO: what? See above.\r\n      continue;\r\n    }\r\n\r\n    // slots\r\n    if (i.indexOf(\"on\") === 0 && i.length > 2 && /[A-Z]/.test(i[2])) {\r\n      const signalName = i[2].toLowerCase() + i.slice(3);\r\n      if (connectSignal(item, signalName, value, objectScope, componentScope)) {\r\n        continue;\r\n      }\r\n      if (item.$setCustomSlot) {\r\n        item.$setCustomSlot(signalName, value, objectScope, componentScope);\r\n        continue;\r\n      }\r\n    }\r\n\r\n    if (value instanceof Object) {\r\n      if (applyProperty(item, i, value, objectScope, componentScope)) {\r\n        continue;\r\n      }\r\n    }\r\n\r\n    if (item.$properties && i in item.$properties) {\r\n      item.$properties[i].set(value, QMLProperty.ReasonInit, objectScope,\r\n                                                             componentScope);\r\n    } else if (i in item) {\r\n      item[i] = value;\r\n    } else if (item.$setCustomData) {\r\n      item.$setCustomData(i, value);\r\n    } else {\r\n      console.warn(\r\n        `Cannot assign to non-existent property \"${i}\". Ignoring assignment.`\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nfunction applyProperty(item, i, value, objectScope, componentScope) {\r\n  const QMLProperty = QmlWeb.QMLProperty;\r\n\r\n  if (value instanceof QmlWeb.QMLSignalDefinition) {\r\n    item.$Signals[i] = QmlWeb.Signal.signal(value.parameters);\r\n    if (!(i in item)) {\r\n      item[i] = item.$Signals[i];\r\n      if (item.$isComponentRoot) {\r\n        componentScope[i] = item[i];\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  if (value instanceof QmlWeb.QMLMethod) {\r\n    value.compile();\r\n    item[i] = value.eval(objectScope, componentScope,\r\n      componentScope.$basePath);\r\n    if (item.$isComponentRoot) {\r\n      componentScope[i] = item[i];\r\n    }\r\n    return true;\r\n  }\r\n\r\n  if (value instanceof QmlWeb.QMLAliasDefinition) {\r\n    // TODO\r\n    // 1. Alias must be able to point to prop or id of local object,\r\n    //    eg: property alias q: t\r\n    // 2. Alias may have same name as id it points to: property alias\r\n    //    someid: someid\r\n    // 3. Alias proxy (or property proxy) to proxy prop access to selected\r\n    //    incapsulated object. (think twice).\r\n    createProperty(\"alias\", item, i, { noContextOverride: true });\r\n    item.$properties[i].componentScope = componentScope;\r\n    item.$properties[i].componentScopeBasePath = componentScope.$basePath;\r\n    item.$properties[i].val = value;\r\n    item.$properties[i].get = function() {\r\n      const obj = this.componentScope[this.val.objectName];\r\n      const propertyName = this.val.propertyName;\r\n      return propertyName ? obj.$properties[propertyName].get() : obj;\r\n    };\r\n    item.$properties[i].set = function(newVal, reason, _objectScope,\r\n                                       _componentScope) {\r\n      if (!this.val.propertyName) {\r\n        throw new Error(\"Cannot set alias property pointing to an QML object.\");\r\n      }\r\n      const obj = this.componentScope[this.val.objectName];\r\n      const prop = obj.$properties[this.val.propertyName];\r\n      prop.set(newVal, reason, _objectScope, _componentScope);\r\n    };\r\n\r\n    if (value.propertyName) {\r\n      const con = prop => {\r\n        const obj = prop.componentScope[prop.val.objectName];\r\n        if (!obj) {\r\n          console.error(\"qtcore: target object \", prop.val.objectName,\r\n                        \" not found for alias \", prop);\r\n          return;\r\n        }\r\n        const targetProp = obj.$properties[prop.val.propertyName];\r\n        if (!targetProp) {\r\n          console.error(\r\n            \"qtcore: target property [\", prop.val.objectName, \"].\",\r\n            prop.val.propertyName, \" not found for alias \", prop.name\r\n          );\r\n          return;\r\n        }\r\n        // targetProp.changed.connect( prop.changed );\r\n        // it is not sufficient to connect to `changed` of source property\r\n        // we have to propagate own changed to it too\r\n        // seems the best way to do this is to make them identical?..\r\n        // prop.changed = targetProp.changed;\r\n        // obj[`${i}Changed`] = prop.changed;\r\n        // no. because those object might be destroyed later.\r\n        let loopWatchdog = false;\r\n        targetProp.changed.connect(item, (...args) => {\r\n          if (loopWatchdog) return;\r\n          loopWatchdog = true;\r\n          prop.changed.apply(item, args);\r\n          loopWatchdog = false;\r\n        });\r\n        prop.changed.connect(obj, (...args) => {\r\n          if (loopWatchdog) return;\r\n          loopWatchdog = true;\r\n          targetProp.changed.apply(obj, args);\r\n          loopWatchdog = false;\r\n        });\r\n      };\r\n      QmlWeb.engine.pendingOperations.push([con, item.$properties[i]]);\r\n    }\r\n    return true;\r\n  }\r\n\r\n  if (value instanceof QmlWeb.QMLPropertyDefinition) {\r\n    createProperty(value.type, item, i);\r\n    item.$properties[i].set(value.value, QMLProperty.ReasonInit,\r\n                            objectScope, componentScope);\r\n    return true;\r\n  }\r\n\r\n  if (item[i] && value instanceof QmlWeb.QMLMetaPropertyGroup) {\r\n    // Apply properties one by one, otherwise apply at once\r\n    applyProperties(value, item[i], objectScope, componentScope);\r\n    return true;\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\nfunction connectSignal(item, signalName, value, objectScope, componentScope) {\r\n  const signal = item.$Signals && item.$Signals[signalName] || item[signalName];\r\n  if (!signal) {\r\n    console.warn(`No signal called ${signalName} found!`);\r\n    return undefined;\r\n  } else if (typeof signal.connect !== \"function\") {\r\n    console.warn(`${signalName} is not a signal!`);\r\n    return undefined;\r\n  }\r\n\r\n  if (!value.compiled) {\r\n    const params = [];\r\n    for (const j in signal.parameters) {\r\n      params.push(signal.parameters[j].name);\r\n    }\r\n    // Wrap value.src in IIFE in case it includes a \"return\"\r\n    value.src = `(\r\n      function(${params.join(\", \")}) {\r\n        QmlWeb.executionContext = __executionContext;\r\n        const bp = QmlWeb.engine.$basePath;\r\n        QmlWeb.engine.$basePath = \"${componentScope.$basePath}\";\r\n        try {\r\n          (function() {\r\n            ${value.src}\r\n          })();\r\n        } finally {\r\n          QmlWeb.engine.$basePath = bp;\r\n        }\r\n      }\r\n    )`;\r\n    value.isFunction = false;\r\n    value.compile();\r\n  }\r\n  // Don't pass in __basePath argument, as QMLEngine.$basePath is set in the\r\n  // value.src, as we need it set at the time the slot is called.\r\n  const slot = value.eval(objectScope, componentScope);\r\n  signal.connect(item, slot);\r\n  return slot;\r\n}\r\n\r\nQmlWeb.createProperty = createProperty;\r\nQmlWeb.createProperties = createProperties;\r\nQmlWeb.applyProperties = applyProperties;\r\nQmlWeb.connectSignal = connectSignal;\r\n","/* @license\r\n\r\nMIT License\r\n\r\nCopyright (c) 2011 Lauri Paimen <lauri@paimen.info>\r\nCopyright (c) 2013 Anton Kreuzkamp <akreuzkamp@web.de>\r\nCopyright (c) 2016 QmlWeb contributors\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of\r\nthis software and associated documentation files (the \"Software\"), to deal in\r\nthe Software without restriction, including without limitation the rights to\r\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\r\nthe Software, and to permit persons to whom the Software is furnished to do so,\r\nsubject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\r\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\r\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\r\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\r\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n*/\r\n\r\nclass QMLMethod extends QmlWeb.QMLBinding {\r\n}\r\n\r\n/**\r\n * Create an object representing a QML property definition.\r\n * @param {String} type The type of the property\r\n * @param {Array} value The default value of the property\r\n * @return {Object} Object representing the defintion\r\n */\r\nclass QMLPropertyDefinition {\r\n  constructor(type, value) {\r\n    this.type = type;\r\n    this.value = value;\r\n  }\r\n}\r\n\r\nclass QMLAliasDefinition {\r\n  constructor(objName, propName) {\r\n    this.objectName = objName;\r\n    this.propertyName = propName;\r\n  }\r\n}\r\n\r\n/**\r\n * Create an object representing a QML signal definition.\r\n * @param {Array} params The parameters the signal ships\r\n * @return {Object} Object representing the defintion\r\n */\r\nclass QMLSignalDefinition {\r\n  constructor(params) {\r\n    this.parameters = params;\r\n  }\r\n}\r\n\r\n/**\r\n * Create an object representing a group of QML properties (like anchors).\r\n * @return {Object} Object representing the group\r\n */\r\nclass QMLMetaPropertyGroup {\r\n}\r\n\r\n/**\r\n * Create an object representing a QML element.\r\n * @param {String} type Type of the element\r\n * @param {String} onProp Name of the property specified with the \"on\" keyword\r\n */\r\nclass QMLMetaElement {\r\n  constructor(type, onProp) {\r\n    this.$class = type;\r\n    this.$children = [];\r\n    this.$on = onProp;\r\n  }\r\n}\r\n\r\n// Convert parser tree to the format understood by engine\r\nfunction convertToEngine(tree) {\r\n  const type = tree[0];\r\n  const walker = convertToEngine.walkers[type];\r\n  if (!walker) {\r\n    console.log(`No walker for ${type}`);\r\n    return undefined;\r\n  }\r\n  return walker(...tree.slice(1));\r\n}\r\n\r\nconvertToEngine.stringifyDots = function(elem) {\r\n  let sub = elem;\r\n  const path = [];\r\n  while (sub[0] === \"dot\") {\r\n    path.push(sub[1]);\r\n    sub = sub[2];\r\n  }\r\n  path.push(sub);\r\n  return path.join(\".\");\r\n};\r\n\r\nconvertToEngine.applyProp = function(item, name, val) {\r\n  let curr = item; // output structure\r\n  let sub = name; // input structure\r\n  while (sub[0] === \"dot\") {\r\n    if (!curr[sub[1]]) {\r\n      curr[sub[1]] = new QMLMetaPropertyGroup();\r\n    }\r\n    curr = curr[sub[1]];\r\n    sub = sub[2];\r\n  }\r\n  curr[sub] = val;\r\n};\r\n\r\nconvertToEngine.walkers = {\r\n  toplevel: (imports, statement) => {\r\n    const item = { $class: \"Component\" };\r\n    item.$imports = imports;\r\n    item.$children = [convertToEngine(statement)];\r\n    return item;\r\n  },\r\n  qmlelem: (elem, onProp, statements) => {\r\n    const item = new QMLMetaElement(\r\n      convertToEngine.stringifyDots(elem),\r\n      onProp\r\n    );\r\n\r\n    for (const i in statements) {\r\n      const statement = statements[i];\r\n      const name = statement[1];\r\n      const val = convertToEngine(statement);\r\n      switch (statement[0]) {\r\n        case \"qmldefaultprop\":\r\n          item.$defaultProperty = name;\r\n          item[name] = val;\r\n          break;\r\n        case \"qmlprop\":\r\n        case \"qmlpropdef\":\r\n        case \"qmlaliasdef\":\r\n        case \"qmlmethod\":\r\n        case \"qmlsignaldef\":\r\n          convertToEngine.applyProp(item, name, val);\r\n          break;\r\n        case \"qmlelem\":\r\n          item.$children.push(val);\r\n          break;\r\n        case \"qmlobjdef\":\r\n          throw new Error(\r\n            \"qmlobjdef support was removed, update qmlweb-parser to ^0.3.0.\"\r\n          );\r\n        case \"qmlobj\":\r\n          // Create object to item\r\n          item[name] = item[name] || new QMLMetaPropertyGroup();\r\n          for (const j in val) {\r\n            item[name][j] = val[j];\r\n          }\r\n          break;\r\n        default:\r\n          console.log(\"Unknown statement\", statement);\r\n      }\r\n    }\r\n\r\n    return item;\r\n  },\r\n  qmlprop: (name, tree, src) => {\r\n    if (name === \"id\") {\r\n      // id property\r\n      return tree[1][1];\r\n    }\r\n    return convertToEngine.bindout(tree, src);\r\n  },\r\n  qmlobjdef: (name, property, tree, src) =>\r\n    convertToEngine.bindout(tree, src),\r\n  qmlobj: (elem, statements) => {\r\n    const item = {};\r\n    for (const i in statements) {\r\n      const statement = statements[i];\r\n      const name = statement[1];\r\n      const val = convertToEngine(statement);\r\n      if (statement[0] === \"qmlprop\") {\r\n        convertToEngine.applyProp(item, name, val);\r\n      }\r\n    }\r\n    return item;\r\n  },\r\n  qmlmethod: (name, tree, src) =>\r\n    new QMLMethod(src),\r\n  qmlpropdef: (name, type, tree, src) =>\r\n    new QMLPropertyDefinition(\r\n      type,\r\n      tree ? convertToEngine.bindout(tree, src) : undefined\r\n    ),\r\n  qmlaliasdef: (name, objName, propName) =>\r\n    new QMLAliasDefinition(objName, propName),\r\n  qmlsignaldef: (name, params) =>\r\n    new QMLSignalDefinition(params),\r\n  qmldefaultprop: tree => convertToEngine(tree),\r\n  name: src => {\r\n    if (src === \"true\" || src === \"false\") {\r\n      return src === \"true\";\r\n    } else if (typeof src === \"boolean\") {\r\n      // TODO: is this needed? kept for compat with ==\r\n      return src;\r\n    }\r\n    return new QmlWeb.QMLBinding(src, [\"name\", src]);\r\n  },\r\n  num: src => +src,\r\n  string: src => String(src),\r\n  array: (tree, src) => {\r\n    const a = [];\r\n    let isList = false;\r\n    let hasBinding = false;\r\n    for (const i in tree) {\r\n      const val = convertToEngine.bindout(tree[i]);\r\n      a.push(val);\r\n\r\n      if (val instanceof QMLMetaElement) {\r\n        isList = true;\r\n      } else if (val instanceof QmlWeb.QMLBinding) {\r\n        hasBinding = true;\r\n      }\r\n    }\r\n\r\n    if (hasBinding) {\r\n      if (isList) {\r\n        throw new TypeError(\r\n          \"An array may either contain bindings or Element definitions.\"\r\n        );\r\n      }\r\n      return new QmlWeb.QMLBinding(src, tree);\r\n    }\r\n\r\n    return a;\r\n  }\r\n};\r\n\r\n// Try to bind out tree and return static variable instead of binding\r\nconvertToEngine.bindout = function(statement, binding) {\r\n  // We want to process the content of the statement\r\n  // (but still handle the case, we get the content directly)\r\n  const tree = statement[0] === \"stat\" ? statement[1] : statement;\r\n\r\n  const type = tree[0];\r\n  const walker = convertToEngine.walkers[type];\r\n  if (walker) {\r\n    return walker(...tree.slice(1));\r\n  }\r\n  return new QmlWeb.QMLBinding(binding, tree);\r\n};\r\n\r\nfunction loadParser() {\r\n  if (typeof QmlWeb.parse !== \"undefined\") {\r\n    return;\r\n  }\r\n\r\n  console.log(\"Loading parser...\");\r\n  const tags = document.getElementsByTagName(\"script\");\r\n  for (const i in tags) {\r\n    if (tags[i].src && tags[i].src.match(/\\/(qt|qmlweb)\\./)) {\r\n      const src = tags[i].src.replace(\r\n        /\\/(qt|qmlweb)\\.(es201.\\.)?/,\r\n        \"/qmlweb.parser.\"\r\n      );\r\n      // TODO: rewrite to async loading\r\n      const xhr = new XMLHttpRequest();\r\n      xhr.open(\"GET\", src, false);\r\n      xhr.send(null);\r\n      if (xhr.status !== 200 && xhr.status !== 0) {\r\n        // xhr.status === 0 if accessing with file://\r\n        throw new Error(\"Could not load QmlWeb parser!\");\r\n      }\r\n      new Function(xhr.responseText)();\r\n      return;\r\n    }\r\n  }\r\n}\r\n\r\n// Function to parse qml and output tree expected by engine\r\nfunction parseQML(src, file) {\r\n  loadParser();\r\n  QmlWeb.parse.nowParsingFile = file;\r\n  const parsetree = QmlWeb.parse(src, QmlWeb.parse.QmlDocument);\r\n  return convertToEngine(parsetree);\r\n}\r\n\r\nQmlWeb.QMLMethod = QMLMethod;\r\nQmlWeb.QMLPropertyDefinition = QMLPropertyDefinition;\r\nQmlWeb.QMLAliasDefinition = QMLAliasDefinition;\r\nQmlWeb.QMLSignalDefinition = QMLSignalDefinition;\r\nQmlWeb.QMLMetaPropertyGroup = QMLMetaPropertyGroup;\r\nQmlWeb.QMLMetaElement = QMLMetaElement;\r\nQmlWeb.convertToEngine = convertToEngine;\r\nQmlWeb.loadParser = loadParser;\r\nQmlWeb.parseQML = parseQML;\r\n","/*\r\n\r\nQmlWeb.qrc is analogous to the Qt Resource System. It is expected to map a path\r\nwithin the resource system to the following pieces of data:\r\n\r\n1) For a QML Component, it is the return value of QmlWeb.parse\r\n2) For a JavaScript file, it is the return value of QmlWeb.jsparse\r\n2) For an image, it is any URL that an <img> tag can accept (e.g. a standard\r\n   URL to an image resource, or a \"data:\" URI). If there is no entry for a\r\n   given qrc image path, it will fall back to passing the path right through to\r\n   the DOM. This is mainly a convenience until support for images is added to\r\n   gulp-qmlweb.\r\n\r\nThe \"data-qml\" tag on <body> can be set to a \"qrc://\" URL like\r\n\"qrc:///root.qml\" to use a pre-parsed \"/root.qml\" from QmlWeb.qrc.\r\n\r\nSince relative URLs are resolved relative to the URL of the containing\r\ncomponent, any relative URL set within a file in the resource system will also\r\nresolve within the resource system. To access a Component, JavaScript or image\r\nfile that is stored outside of the resources system from within the resource\r\nsystem, a full URL must be used (e.g. \"http://www.example.com/images/foo.png\").\r\n\r\nVice-versa, in order to access a Component, JavaScript or image file that is\r\nstored within the resource system from outside of the resource system, a full\r\n\"qrc://\" URL must be used (e.g. \"qrc:///images/foo.png\").\r\n\r\nMore details here: http://doc.qt.io/qt-5/qml-url.html\r\n\r\n*/\r\nQmlWeb.qrc = {};\r\n","QmlWeb.screenshot = function(div, options) {\r\n  const rect = div.getBoundingClientRect();\r\n  const offset = {\r\n    width: div.offsetWidth,\r\n    height: div.offsetHeight,\r\n    top: rect.top,\r\n    left: rect.left\r\n  };\r\n  for (let win = window; win !== window.top; win = win.parent) {\r\n    const rectframe = win.frameElement.getBoundingClientRect();\r\n    offset.top += rectframe.top;\r\n    offset.left += rectframe.left;\r\n  }\r\n  const fileName = options && options.fileName || undefined;\r\n\r\n  let image;\r\n  if (window.top.chromeScreenshot) {\r\n    image = document.createElement(\"img\");\r\n    window.top.chromeScreenshot({ offset, fileName })\r\n      .then(base64 => {\r\n        image.src = `data:image/png;base64,${base64}`;\r\n      });\r\n  } else if (window.top.callPhantom) {\r\n    const base64 = window.top.callPhantom(\"render\", { offset, fileName });\r\n    image = document.createElement(\"img\");\r\n    image.src = `data:image/png;base64,${base64}`;\r\n  } else {\r\n    throw new Error(\"Screenshots are not supported on this platform\");\r\n  }\r\n  return image;\r\n};\r\n\r\nQmlWeb.image2canvas = function(img) {\r\n  const canvas = document.createElement(\"canvas\");\r\n  const ctx = canvas.getContext(\"2d\");\r\n  canvas.height = img.height;\r\n  canvas.width = img.width;\r\n  ctx.drawImage(img, 0, 0);\r\n  return { canvas, ctx };\r\n};\r\n\r\nQmlWeb.image2dataUrl = function(img) {\r\n  const { canvas } = QmlWeb.image2canvas(img);\r\n  return canvas.toDataURL(\"image/png\", 1);\r\n};\r\n\r\nQmlWeb.image2pixels = function(img) {\r\n  const { ctx } = QmlWeb.image2canvas(img);\r\n  return ctx.getImageData(0, 0, img.width, img.height).data;\r\n};\r\n\r\nQmlWeb.imagesEqual = function(a, b) {\r\n  if (a.width !== b.width || a.height !== b.height) {\r\n    return false;\r\n  }\r\n  return QmlWeb.image2dataUrl(a) === QmlWeb.image2dataUrl(b);\r\n};\r\n","// Base object for all qml elements\r\nclass QtQml_QtObject extends QmlWeb.QObject {\r\n  $Signals = {};\r\n\r\n  constructor(meta) {\r\n    super(meta.parent);\r\n\r\n    this.$isComponentRoot = meta.isComponentRoot;\r\n    this.$context = meta.context;\r\n\r\n    // Component get own properties\r\n    this.$attributes = [];\r\n    for (const key in meta.object) {\r\n      if (!meta.object.hasOwnProperty(key) || !meta.object[key]) {\r\n        continue;\r\n      }\r\n      const name = meta.object[key].__proto__.constructor.name;\r\n      if (name === \"QMLPropertyDefinition\" || name === \"QMLAliasDefinition\") {\r\n        this.$attributes.push(key);\r\n      }\r\n    }\r\n\r\n    const Signal = QmlWeb.Signal;\r\n    \r\n    this.Keys = new QmlWeb.QObject(this);\r\n    this.Keys.asteriskPresed = Signal.signal();\r\n    this.Keys.backPressed = Signal.signal();\r\n    this.Keys.backtabPressed = Signal.signal();\r\n    this.Keys.callPressed = Signal.signal();\r\n    this.Keys.cancelPressed = Signal.signal();\r\n    this.Keys.deletePressed = Signal.signal();\r\n    for (let i = 0; i < 10; ++i) {\r\n      this.Keys[`digit${i}Pressed`] = Signal.signal();\r\n    }\r\n    this.Keys.escapePressed = Signal.signal();\r\n    this.Keys.flipPressed = Signal.signal();\r\n    this.Keys.hangupPressed = Signal.signal();\r\n    this.Keys.leftPressed = Signal.signal();\r\n    this.Keys.menuPressed = Signal.signal();\r\n    this.Keys.noPressed = Signal.signal();\r\n    this.Keys.pressed = Signal.signal();\r\n    this.Keys.released = Signal.signal();\r\n    this.Keys.returnPressed = Signal.signal();\r\n    this.Keys.rightPressed = Signal.signal();\r\n    this.Keys.selectPressed = Signal.signal();\r\n    this.Keys.spacePressed = Signal.signal();\r\n    this.Keys.tabPressed = Signal.signal();\r\n    this.Keys.upPressed = Signal.signal();\r\n    this.Keys.volumeDownPressed = Signal.signal();\r\n    this.Keys.volumeUpPressed = Signal.signal();\r\n    this.Keys.yesPressed = Signal.signal();\r\n\r\n    // Initialize properties, signals, etc.\r\n    const types = [];\r\n    let type = meta.super;\r\n    while (type) {\r\n      types.unshift(type);\r\n      type = Object.getPrototypeOf(type);\r\n    }\r\n    types.forEach(entry => {\r\n      if (!entry.hasOwnProperty(\"$qmlTypeInfo\")) return;\r\n      const info = entry.$qmlTypeInfo || {};\r\n\r\n      Object.keys(info.enums).forEach(name => {\r\n        // TODO: not exported to the whole file scope yet\r\n        this[name] = info.enums[name];\r\n\r\n        if (!global[name]) {\r\n          global[name] = this[name]; // HACK\r\n        }\r\n      });\r\n\r\n      QmlWeb.createProperties(this, info.properties);\r\n\r\n      Object.keys(info.signals).forEach(name => {\r\n        const params = info.signals[name];\r\n        this.$Signals[name] = QmlWeb.Signal.signal(params);\r\n        if (!(name in this)) this[name] = this.$Signals[name];\r\n      });\r\n\r\n      if (info.defaultProperty) {\r\n        this.$defaultProperty = info.defaultProperty;\r\n      }\r\n    });\r\n    meta.initialized = true;\r\n  }\r\n  getAttributes() {\r\n    return this.$attributes;\r\n  }\r\n}\r\nQmlWeb.registerQmlType(QtQml_QtObject);\n","// eslint-disable-next-line no-undef\r\nclass QtBluetooth_BluetoothDiscoveryModel extends QtQml_QtObject {\r\n  static enums = {\r\n    BluetoothDiscoveryModel: {\r\n      FullServiceDiscovery: 1, MinimalServiceDiscovery: 0, DeviceDiscovery: 2,\r\n      NoError: 0, InputOutputError: 1, PoweredOffError: 2,\r\n      InvalidBluetoothAdapterError: 4, UnknownError: 3\r\n    }\r\n  };\r\n  static properties = {\r\n    discoveryMode: { type: \"enum\", initialValue: 3 }, // MinimalServiceDiscovery\r\n    error: { type: \"enum\", initialValue: 0 }, // NoError\r\n    remoteAddress: \"string\",\r\n    running: \"bool\",\r\n    uuidFilter: \"string\",\r\n    url: \"url\"\r\n  };\r\n  static signals = {\r\n    deviceDiscovered: [{ type: \"string\", name: \"device\" }],\r\n    serviceDiscovered: [{ type: \"string\", name: \"device\" }]\r\n  };\r\n\r\n  // TODO: implementation based on navigator.bluetooth\r\n}\r\nQmlWeb.registerQmlType(QtBluetooth_BluetoothDiscoveryModel);\n","// eslint-disable-next-line no-undef\r\nclass QtMultimedia_Audio extends QtQml_QtObject {\r\n  static versions = /^5\\./;\r\n  static enums = {\r\n    Audio: {\r\n      Available: 0, Busy: 2, Unavailable: 1, ResourceMissing: 3,\r\n\r\n      NoError: 0, ResourceError: 1, FormatError: 2, NetworkError: 4,\r\n      AccessDenied: 8, ServiceMissing: 16,\r\n\r\n      StoppedState: 0, PlayingState: 1, PausedState: 2,\r\n\r\n      NoMedia: 0, Loading: 1, Loaded: 2, Buffering: 4, Stalled: 8,\r\n      EndOfMedia: 16, InvalidMedia: 32, UnknownStatus: 64\r\n    }\r\n  };\r\n  static properties = {\r\n    audioRole: \"enum\", // TODO\r\n    autoLoad: { type: \"bool\", initialValue: true },\r\n    autoPlay: \"bool\",\r\n    availability: \"enum\", // Audio.Available\r\n    duration: \"int\",\r\n    error: \"enum\", // Audio.NoError\r\n    errorString: \"string\",\r\n    hasAudio: \"bool\",\r\n    hasVideo: \"bool\",\r\n    loops: { type: \"int\", initialValue: 1 },\r\n    mediaObject: \"var\",\r\n    // TODO: metaData\r\n    muted: \"bool\",\r\n    playbackRate: { type: \"real\", initialValue: 1 },\r\n    playbackState: \"enum\", // Audio.StoppedState\r\n    playlinst: \"Playlist\",\r\n    position: \"int\",\r\n    seekable: \"bool\",\r\n    source: \"url\",\r\n    status: \"enum\", // Audio.NoMedia\r\n    volume: { type: \"real\", initialValue: 1 }\r\n  };\r\n  static signals = {\r\n    error: [\r\n      { type: \"enum\", name: \"error\" },\r\n      { type: \"string\", name: \"errorString\" }\r\n    ],\r\n    paused: [],\r\n    playing: [],\r\n    stopped: []\r\n  };\r\n\r\n  pause() {\r\n    // TODO\r\n  }\r\n  play() {\r\n    // TODO\r\n  }\r\n  seek(/* offset */) {\r\n    // TODO\r\n  }\r\n  stop() {\r\n    // TODO\r\n  }\r\n  supportedAudioRoles() {\r\n    // TODO\r\n  }\r\n}\r\nQmlWeb.registerQmlType(QtMultimedia_Audio);\n","// eslint-disable-next-line no-undef\r\nclass QtMultimedia_Camera extends QtQml_QtObject {\r\n  static versions = /^5\\./;\r\n  static enums = {\r\n    Camera: {\r\n      Available: 0, Busy: 2, Unavailable: 1, ResourceMissing: 3,\r\n\r\n      UnloadedState: 0, LoadedState: 1, ActiveState: 2\r\n    }\r\n  };\r\n  static properties = {\r\n    availability: \"enum\", // Camera.Available\r\n    cameraState: { type: \"enum\", initialValue: 2 }, // Camera.ActiveState\r\n    cameraStatus: \"enum\", // TODO\r\n    captureMode: \"enum\", // TODO\r\n    deviceId: \"string\",\r\n    digitalZoom: { type: \"real\", initialValue: 1 },\r\n    displayName: \"string\",\r\n    errorCode: \"enum\", // TODO\r\n    errorString: \"string\",\r\n    lockStatus: \"enum\", // TODO\r\n    maximumDigitalZoom: \"real\",\r\n    maximumOpticalZoom: \"real\",\r\n    opticalZoom: { type: \"real\", initialValue: 1 },\r\n    orientation: \"int\",\r\n    position: \"enum\", // TODO\r\n  };\r\n  static signals = {\r\n    error: [\r\n      { type: \"enum\", name: \"errorCode\" },\r\n      { type: \"string\", name: \"errorString\" }\r\n    ]\r\n  };\r\n\r\n  // TODO: impl\r\n}\r\nQmlWeb.registerQmlType(QtMultimedia_Camera);\n","// eslint-disable-next-line no-undef\r\nclass QtMultimedia_MediaPlayer extends QtQml_QtObject {\r\n  static versions = /^5\\./;\r\n  static enums = {\r\n    MediaPlayer: {\r\n      Available: 0, Busy: 2, Unavailable: 1, ResourceMissing: 3,\r\n\r\n      NoError: 0, ResourceError: 1, FormatError: 2, NetworkError: 4,\r\n      AccessDenied: 8, ServiceMissing: 16,\r\n\r\n      StoppedState: 0, PlayingState: 1, PausedState: 2,\r\n\r\n      NoMedia: 0, Loading: 1, Loaded: 2, Buffering: 4, Stalled: 8,\r\n      EndOfMedia: 16, InvalidMedia: 32, UnknownStatus: 64\r\n    }\r\n  };\r\n  static properties = {\r\n    audioRole: \"enum\", // TODO\r\n    autoLoad: { type: \"bool\", initialValue: true },\r\n    autoPlay: \"bool\",\r\n    availability: \"enum\", // MediaPlayer.Available\r\n    bufferProgress: \"real\",\r\n    duration: \"int\",\r\n    error: \"enum\", // MediaPlayer.NoError\r\n    errorString: \"string\",\r\n    hasAudio: \"bool\",\r\n    hasVideo: \"bool\",\r\n    loops: \"int\",\r\n    muted: \"bool\",\r\n    playbackRate: { type: \"real\", initialValue: 1 },\r\n    playbackState: \"enum\", // MediaPlayer.StoppedState\r\n    position: \"int\",\r\n    seekable: \"bool\",\r\n    source: \"url\",\r\n    status: \"enum\", // MediaPlayer.NoMedia\r\n    volume: \"real\"\r\n  };\r\n  static signals = {\r\n    error: [\r\n      { type: \"enum\", name: \"error\" },\r\n      { type: \"string\", name: \"errorString\" }\r\n    ],\r\n    paused: [],\r\n    playing: [],\r\n    stopped: []\r\n  };\r\n\r\n  // TODO: impl\r\n}\r\nQmlWeb.registerQmlType(QtMultimedia_MediaPlayer);\n","// eslint-disable-next-line no-undef\r\nclass QtNfc_NearField extends QtQml_QtObject {\r\n  static properties = {\r\n    filter: \"list\",\r\n    messageRecords: \"list\",\r\n    orderMatch: \"bool\",\r\n    polling: \"bool\"\r\n  };\r\n  static signals = {\r\n    tagFound: [],\r\n    tagRemoved: []\r\n  };\r\n\r\n  // TODO: implementation based on Web NFC API\r\n}\r\nQmlWeb.registerQmlType(QtNfc_NearField);\n","// eslint-disable-next-line no-undef\r\nclass QtQml_Binding extends QtQml_QtObject {\r\n  static properties = {\r\n    target: { type: \"QtObject\", initialValue: null },\r\n    property: { type: \"string\", initialValue: \"\" },\r\n    value: { type: \"var\", initialValue: undefined },\r\n    when: { type: \"bool\", initialValue: true }\r\n  };\r\n\r\n  constructor(meta) {\r\n    super(meta);\r\n\r\n    this.$property = undefined;\r\n\r\n    this.valueChanged.connect(this, this.$onValueChanged);\r\n    this.targetChanged.connect(this, this.$updateBinding);\r\n    this.propertyChanged.connect(this, this.$updateBinding);\r\n    this.whenChanged.connect(this, this.$updateBinding);\r\n  }\r\n\r\n  $updateBinding() {\r\n    if (!this.when || !this.target\r\n        || !this.target.hasOwnProperty(this.property)\r\n        || this.value === undefined) {\r\n      this.$property = undefined;\r\n      return;\r\n    }\r\n    this.$property = this.target.$properties[this.property];\r\n    this.$onValueChanged(this.value); // trigger value update\r\n  }\r\n\r\n  $onValueChanged(value) {\r\n    if (value !== undefined && this.$property) {\r\n      this.$property.set(value);\r\n    }\r\n  }\r\n}\r\nQmlWeb.registerQmlType(QtQml_Binding);\n","class QMLContext {\r\n  nameForObject(obj) {\r\n    for (const name in this) {\r\n      if (this[name] === obj) {\r\n        return name;\r\n      }\r\n    }\r\n    return undefined;\r\n  }\r\n}\r\n\r\n// eslint-disable-next-line no-undef\r\nclass QtQml_Component extends QtQml_QtObject {\r\n  static global = true;\r\n\r\n  constructor(meta) {\r\n    super(meta);\r\n\r\n    if (QmlWeb.constructors[meta.object.$class] === QtQml_Component) {\r\n      this.$metaObject = meta.object.$children[0];\r\n    } else {\r\n      this.$metaObject = meta.object;\r\n    }\r\n    this.$context = meta.context;\r\n\r\n    this.$jsImports = [];\r\n\r\n    if (meta.object.$imports instanceof Array) {\r\n      const moduleImports = [];\r\n      const loadImport = importDesc => {\r\n        if (/\\.js$/.test(importDesc[1])) {\r\n          this.$jsImports.push(importDesc);\r\n        } else {\r\n          moduleImports.push(importDesc);\r\n        }\r\n      };\r\n\r\n      for (let i = 0; i < meta.object.$imports.length; ++i) {\r\n        loadImport(meta.object.$imports[i]);\r\n      }\r\n      QmlWeb.loadImports(this, moduleImports);\r\n    }\r\n\r\n    /* If this Component does not have any imports, it is likely one that was\r\n     * created within another Component file. It should inherit the\r\n     * importContextId of the Component file it was created within. */\r\n    if (this.importContextId === undefined) {\r\n      this.importContextId = meta.context.importContextId;\r\n    }\r\n  }\r\n  finalizeImports($context) {\r\n    const engine = QmlWeb.engine;\r\n    for (let i = 0; i < this.$jsImports.length; ++i) {\r\n      const importDesc = this.$jsImports[i];\r\n      const js = engine.loadJS(engine.$resolvePath(importDesc[1]));\r\n\r\n      if (!js) {\r\n        console.log(\"Component.finalizeImports: failed to import JavaScript\",\r\n          importDesc[1]);\r\n        continue;\r\n      }\r\n\r\n      if (importDesc[3] !== \"\") {\r\n        $context[importDesc[3]] = {};\r\n        QmlWeb.importJavascriptInContext(js, $context[importDesc[3]]);\r\n      } else {\r\n        QmlWeb.importJavascriptInContext(js, $context);\r\n      }\r\n    }\r\n  }\r\n  $createObject(parent, properties = {}, context = this.$context) {\r\n    const engine = QmlWeb.engine;\r\n    const oldState = engine.operationState;\r\n    engine.operationState = QmlWeb.QMLOperationState.Init;\r\n    // change base path to current component base path\r\n    const bp = engine.$basePath;\r\n    engine.$basePath = this.$basePath ? this.$basePath : engine.$basePath;\r\n\r\n    const newContext = context ? Object.create(context) : new QMLContext();\r\n\r\n    if (this.importContextId !== undefined) {\r\n      newContext.importContextId = this.importContextId;\r\n    }\r\n\r\n    const item = QmlWeb.construct({\r\n      object: this.$metaObject,\r\n      parent,\r\n      context: newContext,\r\n      isComponentRoot: true\r\n    });\r\n\r\n    this.finalizeImports(item.$context);\r\n\r\n    Object.keys(properties).forEach(propname => {\r\n      item[propname] = properties.propname;\r\n    });\r\n\r\n    // change base path back\r\n    // TODO looks a bit hacky\r\n    engine.$basePath = bp;\r\n\r\n    engine.operationState = oldState;\r\n    return item;\r\n  }\r\n  createObject(parent, properties = {}) {\r\n    const item = this.$createObject(parent, properties);\r\n    const QMLItem = QmlWeb.getConstructor(\"QtQuick\", \"2.0\", \"Item\");\r\n\r\n    if (item instanceof QMLItem) {\r\n      item.$properties.parent.set(parent, QmlWeb.QMLProperty.ReasonInit);\r\n    }\r\n\r\n    return item;\r\n  }\r\n  static getAttachedObject() {\r\n    // see QMLEngine.js for explanation how it is used.\r\n    if (!this.$Component) {\r\n      this.$Component = new QmlWeb.QObject(this);\r\n      this.$Component.completed = QmlWeb.Signal.signal([]);\r\n      QmlWeb.engine.completedSignals.push(this.$Component.completed);\r\n\r\n      this.$Component.destruction = QmlWeb.Signal.signal([]);\r\n    }\r\n    return this.$Component;\r\n  }\r\n}\r\nQmlWeb.registerQmlType(QtQml_Component);\n","// eslint-disable-next-line no-undef\r\nclass QtQml_Connections extends QtQml_QtObject {\r\n  static properties = {\r\n    target: \"QtObject\",\r\n    ignoreUnknownSignals: \"bool\"\r\n  };\r\n\r\n  constructor(meta) {\r\n    super(meta);\r\n    this.target = this.$parent;\r\n    this.$connections = {};\r\n\r\n    this.$old_target = this.target;\r\n    this.targetChanged.connect(this, this.$onTargetChanged);\r\n    this.Component.completed.connect(this, this.Component$onCompleted);\r\n  }\r\n  $onTargetChanged() {\r\n    this.$reconnectTarget();\r\n  }\r\n  Component$onCompleted() {\r\n    this.$reconnectTarget();\r\n  }\r\n  $reconnectTarget() {\r\n    const old_target = this.$old_target;\r\n    for (const i in this.$connections) {\r\n      const c = this.$connections[i];\r\n      if (c._currentConnection && old_target && old_target[i] &&\r\n          typeof old_target[i].disconnect === \"function\") {\r\n        old_target[i].disconnect(c._currentConnection);\r\n      }\r\n      if (this.target) {\r\n        c._currentConnection = QmlWeb.connectSignal(this.target, i, c.value,\r\n          c.objectScope, c.componentScope);\r\n      }\r\n    }\r\n    this.$old_target = this.target;\r\n  }\r\n  $setCustomSlot(propName, value, objectScope, componentScope) {\r\n    this.$connections[propName] = { value, objectScope, componentScope };\r\n  }\r\n}\r\nQmlWeb.registerQmlType(QtQml_Connections);\n","// eslint-disable-next-line no-undef\r\nclass QtQml_Timer extends QtQml_QtObject {\r\n  static properties = {\r\n    interval: { type: \"int\", initialValue: 1000 },\r\n    parent: { type: \"QtObject\", readOnly: true },\r\n    repeat: \"bool\",\r\n    running: \"bool\",\r\n    triggeredOnStart: \"bool\"\r\n  };\r\n  static signals = {\r\n    triggered: []\r\n  };\r\n\r\n  constructor(meta) {\r\n    super(meta);\r\n\r\n    this.$properties.parent.set(this.$parent, QmlWeb.QMLProperty.ReasonInit);\r\n\r\n    /* This ensures that if the user toggles the \"running\" property manually,\r\n     * the timer will trigger. */\r\n    this.runningChanged.connect(this, this.$onRunningChanged);\r\n\r\n    QmlWeb.engine.$addTicker((...args) => this.$ticker(...args));\r\n\r\n    QmlWeb.engine.$registerStart(() => {\r\n      if (this.running) {\r\n        this.restart();\r\n      }\r\n    });\r\n\r\n    QmlWeb.engine.$registerStop(() => this.stop());\r\n  }\r\n  start() {\r\n    this.running = true;\r\n  }\r\n  stop() {\r\n    this.running = false;\r\n  }\r\n  restart() {\r\n    this.stop();\r\n    this.start();\r\n  }\r\n  $ticker(now) {\r\n    if (!this.running) return;\r\n    if (now - this.$prevTrigger >= this.interval) {\r\n      this.$prevTrigger = now;\r\n      this.$trigger();\r\n    }\r\n  }\r\n  $onRunningChanged() {\r\n    if (this.running) {\r\n      this.$prevTrigger = Date.now();\r\n      if (this.triggeredOnStart) {\r\n        this.$trigger();\r\n      }\r\n    }\r\n  }\r\n  $trigger() {\r\n    if (!this.repeat) {\r\n      // We set the value directly in order to be able to emit the\r\n      // runningChanged signal after triggered, like Qt does it.\r\n      this.$properties.running.val = false;\r\n    }\r\n\r\n    // Trigger this.\r\n    this.triggered();\r\n\r\n    if (!this.repeat) {\r\n      // Emit changed signal manually after setting the value manually above.\r\n      this.runningChanged();\r\n    }\r\n  }\r\n}\r\nQmlWeb.registerQmlType(QtQml_Timer);\n","// eslint-disable-next-line no-undef\r\nclass QtQuick_Layouts_Layout extends QtQml_QtObject {\r\n  static versions = /^1\\./;\r\n\r\n  constructor(meta) {\r\n    super(meta);\r\n    throw new Error(\"Do not create objects of type Layout\");\r\n  }\r\n  static getAttachedObject() {\r\n    if (!this.$Layout) {\r\n      this.$Layout = new QmlWeb.QObject(this);\r\n      QmlWeb.createProperties(this.$Layout, {\r\n        alignment: \"enum\",\r\n        bottomMargin: \"real\",\r\n        column: \"int\",\r\n        columnSpan: \"int\",\r\n        fillHeight: \"bool\",\r\n        fillWidth: \"bool\",\r\n        leftMargin: \"real\",\r\n        margins: \"real\",\r\n        maximumHeight: \"real\",\r\n        maximumWidth: \"real\",\r\n        minimumHeight: \"real\",\r\n        minimumWidth: \"real\",\r\n        preferredHeight: \"real\",\r\n        preferredWidth: \"real\",\r\n        rightMargin: \"real\",\r\n        row: \"int\",\r\n        rowSpan: \"int\",\r\n        topMargin: \"real\"\r\n      });\r\n    }\r\n    return this.$Layout;\r\n  }\r\n}\r\nQmlWeb.registerQmlType(QtQuick_Layouts_Layout);\n","// eslint-disable-next-line no-undef\r\nclass QtQuick_Particles_Direction extends QtQml_QtObject {\r\n  static versions = /^2\\./;\r\n\r\n  // TODO\r\n}\r\nQmlWeb.registerQmlType(QtQuick_Particles_Direction);\n","// eslint-disable-next-line no-undef, max-len\r\nclass QtQuick_Particles_AngleDirection extends QtQuick_Particles_Direction {\r\n  static versions = /^2\\./;\r\n  static properties = {\r\n    angle: \"real\",\r\n    angleVariation: \"real\",\r\n    magnitude: \"real\",\r\n    magnitudeVariation: \"real\"\r\n  };\r\n\r\n  // TODO\r\n}\r\nQmlWeb.registerQmlType(QtQuick_Particles_AngleDirection);\n","// eslint-disable-next-line no-undef\r\nclass QtQuick_Window_Screen extends QtQml_QtObject {\r\n  constructor(meta) {\r\n    super(meta);\r\n    throw new Error(\"Screen can only be used via the attached property.\");\r\n  }\r\n  static getAttachedObject() {\r\n    if (!QtQuick_Window_Screen.$Screen) {\r\n      const screen = QtQuick_Window_Screen.$Screen = new QmlWeb.QObject();\r\n      // TODO: read-only\r\n      QmlWeb.createProperties(screen, {\r\n        name: \"string\",\r\n        orientation: \"enum\",\r\n        orientationUpdateMask: \"enum\",\r\n        primaryOrientation: \"enum\",\r\n        pixelDensity: \"real\",\r\n        devicePixelRatio: \"real\",\r\n        desktopAvailableHeight: \"int\",\r\n        desktopAvailableWidth: \"int\",\r\n        height: \"int\",\r\n        width: \"int\"\r\n      });\r\n      screen.name = window.navigator.appName;\r\n      screen.devicePixelRatio = window.devicePixelRatio;\r\n      screen.pixelDensity = window.devicePixelRatio * 96 / 25.4; // per mm\r\n      QtQuick_Window_Screen.$populateScreen();\r\n      window.addEventListener(\"resize\", () =>\r\n        QtQuick_Window_Screen.$populateScreen()\r\n      );\r\n\r\n      // TODO: orientation\r\n      const Qt = QmlWeb.Qt;\r\n      screen.orientationUpdateMask = 0;\r\n      screen.orientation = Qt.PrimaryOrientation;\r\n      screen.primaryOrientation = Qt.PrimaryOrientation;\r\n    }\r\n    return QtQuick_Window_Screen.$Screen;\r\n  }\r\n  static $populateScreen() {\r\n    const screen = QtQuick_Window_Screen.$Screen;\r\n    screen.desktopAvailableHeight = window.outerHeight;\r\n    screen.desktopAvailableWidth = window.outerWidth;\r\n    screen.height = window.innerHeight;\r\n    screen.width = window.innerWidth;\r\n  }\r\n}\r\nQmlWeb.registerQmlType(QtQuick_Window_Screen);\n","// eslint-disable-next-line no-undef\r\nclass QtQuick_Animation extends QtQml_QtObject {\r\n  static enums = {\r\n    Animation: { Infinite: -1 },\r\n    Easing: QmlWeb.Easing\r\n  };\r\n  static properties = {\r\n    alwaysRunToEnd: \"bool\",\r\n    loops: { type: \"int\", initialValue: 1 },\r\n    paused: \"bool\",\r\n    running: \"bool\"\r\n  };\r\n  static signals = {\r\n    finished: [],\r\n    started: [],\r\n    stopped: [],\r\n  };\r\n\r\n  restart() {\r\n    this.stop();\r\n    this.start();\r\n  }\r\n  start() {\r\n    this.running = true;\r\n    this.started();\r\n  }\r\n  stop() {\r\n    this.running = false;\r\n    this.stopped();\r\n  }\r\n  pause() {\r\n    this.paused = true;\r\n  }\r\n  resume() {\r\n    this.paused = false;\r\n  }\r\n  complete() {\r\n    this.running = false;\r\n    this.stopped();\r\n    this.finished();\r\n    //console.log(\"Unbound method for\", this);\r\n  }\r\n}\r\nQmlWeb.registerQmlType(QtQuick_Animation);\n","// eslint-disable-next-line no-undef\r\nclass QtQuick_Animator extends QtQuick_Animation {\r\n  static versions = /^2\\./;\r\n  static properties = {\r\n    duration: { type: \"int\", initialValue: 250 },\r\n    from: \"real\",\r\n    target: \"Item\",\r\n    to: \"real\"\r\n  };\r\n\r\n  constructor(meta) {\r\n    super(meta);\r\n\r\n    this.easing = new QmlWeb.QObject(this);\r\n    QmlWeb.createProperties(this.easing, {\r\n      type: { type: \"enum\", initialValue: this.Easing.Linear },\r\n      amplitude: { type: \"real\", initialValue: 1 },\r\n      overshoot: { type: \"real\", initialValue: 1.70158 },\r\n      period: { type: \"real\", initialValue: 0.3 },\r\n      bezierCurve: \"list\"\r\n    });\r\n  }\r\n}\r\nQmlWeb.registerQmlType(QtQuick_Animator);\n","// eslint-disable-next-line no-undef\r\nclass QtQuick_Behavior extends QtQml_QtObject {\r\n  static properties = {\r\n    animation: \"Animation\",\r\n    enabled: { type: \"bool\", initialValue: true }\r\n  };\r\n  static defaultProperty = \"animation\";\r\n\r\n  constructor(meta) {\r\n    super(meta);\r\n    this.$on = meta.object.$on;\r\n\r\n    this.animationChanged.connect(this, this.$onAnimationChanged);\r\n    this.enabledChanged.connect(this, this.$onEnabledChanged);\r\n  }\r\n  $onAnimationChanged(newVal) {\r\n    newVal.target = this.$parent;\r\n    newVal.property = this.$on;\r\n    this.$parent.$properties[this.$on].animation = newVal;\r\n  }\r\n  $onEnabledChanged(newVal) {\r\n    this.$parent.$properties[this.$on].animation = newVal\r\n      ? this.animation\r\n      : null;\r\n  }\r\n}\r\nQmlWeb.registerQmlType(QtQuick_Behavior);\n","// eslint-disable-next-line no-undef\r\nclass QtQuick_FontLoader extends QtQml_QtObject {\r\n  static enums = {\r\n    FontLoader: { Null: 0, Ready: 1, Loading: 2, Error: 3 }\r\n  };\r\n  static properties = {\r\n    name: \"string\",\r\n    source: \"url\",\r\n    status: \"enum\" // FontLoader.Null\r\n  };\r\n\r\n  constructor(meta) {\r\n    super(meta);\r\n\r\n    this.$lastName = \"\";\r\n    this.$inTouchName = false;\r\n\r\n    /*\r\n      Maximum timeout is the maximum time for a font to load. If font isn't\r\n      loaded in this time, the status is set to Error.\r\n      For both cases (with and without FontLoader.js) if the font takes more\r\n      than the maximum timeout to load, dimensions recalculations for elements\r\n      that are using this font will not be triggered or will have no effect.\r\n\r\n      FontLoader.js uses only the last timeout. The state and name properties\r\n      are set immediately when the font loads. If the font could not be loaded,\r\n      the Error status will be set only when this timeout expires. If the font\r\n      loading takes more than the timeout, the name property is set, but the\r\n      status is set to Error.\r\n\r\n      Fallback sets the font name immediately and touches it several times to\r\n      trigger dimensions recalcuations. The status is set to Error and should\r\n      not be used.\r\n    */\r\n    // 15 seconds maximum\r\n    this.$timeouts = [20, 50, 100, 300, 500, 1000, 3000, 5000, 10000, 15000];\r\n\r\n    this.sourceChanged.connect(this, this.$onSourceChanged);\r\n    this.nameChanged.connect(this, this.$onNameChanged);\r\n  }\r\n  $loadFont(fontName, fontFace) {\r\n    /* global FontLoader */\r\n    if (this.$lastName === fontName || this.$inTouchName) {\r\n      return;\r\n    }\r\n    this.$lastName = fontName;\r\n\r\n    if (!fontName) {\r\n      this.status = this.FontLoader.Null;\r\n      return;\r\n    }\r\n    this.status = this.FontLoader.Loading;\r\n\r\n    let promise;\r\n    if (fontFace) {\r\n      promise = fontFace.loaded;\r\n    } else if (document.fonts && document.fonts.load) {\r\n      promise = document.fonts.load(fontName);\r\n    }\r\n\r\n    if (promise) {\r\n      promise.then(\r\n        () => {\r\n          if (this.$lastName !== fontName) return;\r\n          this.name = fontName;\r\n          this.status = this.FontLoader.Ready;\r\n        },\r\n        () => {\r\n          if (this.$lastName !== fontName) return;\r\n          this.status = this.FontLoader.Error;\r\n        }\r\n      );\r\n    } else if (typeof FontLoader === \"function\") {\r\n      const fontLoader = new FontLoader([fontName], {\r\n        fontsLoaded: error => {\r\n          if (error !== null) {\r\n            if (this.$lastName === fontName &&\r\n                error.notLoadedFontFamilies[0] === fontName) {\r\n              // Set the name for the case of font loading after the timeout.\r\n              this.name = fontName;\r\n              this.status = this.FontLoader.Error;\r\n            }\r\n          }\r\n        },\r\n        fontLoaded: font => {\r\n          if (this.$lastName === fontName && font.family === fontName) {\r\n            this.name = fontName;\r\n            this.status = this.FontLoader.Ready;\r\n          }\r\n        }\r\n      }, this.$timeouts[this.$timeouts.length - 1]);\r\n      // Else I get problems loading multiple fonts (FontLoader.js bug?)\r\n      FontLoader.testDiv = null;\r\n      fontLoader.loadFonts();\r\n    } else {\r\n      console.warn(`FontLoader.js library is not loaded.\r\nYou should load FontLoader.js if you want to use QtQuick FontLoader elements.\r\nRefs: https://github.com/smnh/FontLoader.`);\r\n      // You should not rely on 'status' property without FontLoader.js.\r\n      this.status = this.FontLoader.Error;\r\n      this.name = fontName;\r\n      this.$cycleTouchName(fontName, 0);\r\n    }\r\n  }\r\n  $cycleTouchName(fontName, i) {\r\n    if (this.$lastName !== fontName) {\r\n      return;\r\n    }\r\n    if (i > 0) {\r\n      const name = this.name;\r\n      this.$inTouchName = true;\r\n      // Calling this.nameChanged() is not enough, we have to actually change\r\n      // the value to flush the bindings.\r\n      this.name = \"sans-serif\";\r\n      this.name = name;\r\n      this.$inTouchName = false;\r\n    }\r\n    if (i < this.$timeouts.length) {\r\n      setTimeout(() => {\r\n        this.$cycleTouchName(fontName, i + 1);\r\n      }, this.$timeouts[i] - (i > 0 ? this.$timeouts[i - 1] : 0));\r\n    }\r\n  }\r\n  $onSourceChanged(font_src) {\r\n    // Load font by source url\r\n    const rand = Math.round(Math.random() * 1e15);\r\n    const fontName = `font_${Date.now().toString(36)}_${rand.toString(36)}`;\r\n    if (typeof FontFace !== \"undefined\"\r\n        && document.fonts && document.fonts.add) {\r\n      const fontFace = new FontFace(fontName, `url('${font_src}')`);\r\n      document.fonts.add(fontFace);\r\n      fontFace.load();\r\n      this.$loadFont(fontName, fontFace);\r\n      return;\r\n    }\r\n    if (!this.$domStyle) {\r\n      this.$domStyle = document.createElement(\"style\");\r\n    }\r\n    this.$domStyle.innerHTML = `@font-face {\r\n      font-family: ${fontName};\r\n      src: url('${font_src}');\r\n    }`;\r\n    document.getElementsByTagName(\"head\")[0].appendChild(this.$domStyle);\r\n    this.$loadFont(fontName);\r\n  }\r\n  $onNameChanged(fontName) {\r\n    // Load font by the name\r\n    this.$loadFont(fontName);\r\n  }\r\n}\r\nQmlWeb.registerQmlType(QtQuick_FontLoader);\n","class QtQuick_GradientStop extends QtQml_QtObject {\r\n    static properties = {\r\n        color: { type: \"color\", initialValue: \"black\" },\r\n        position: \"real\",\r\n    };\r\n   \r\n    constructor(meta) {\r\n        super(meta);\r\n\r\n        this.positionChanged.connect(this, this.$positionChanged)\r\n        this.colorChanged.connect(this, this.$colorChanged)\r\n        //this.$parent.stops.push({position: this.position, color: this.color})\r\n    }\r\n    $colorChanged(){\r\n        //console.log(this.color)\r\n    }\r\n    $positionChanged(){\r\n        //console.log(this.position)\r\n    }\r\n\r\n}\r\n  QmlWeb.registerQmlType(QtQuick_GradientStop);\n","// eslint-disable-next-line no-undef\r\nclass QtQuick_Item extends QtQml_QtObject {\r\n  static properties = {\r\n    $opacity: { type: \"real\", initialValue: 1 },\r\n    parent: \"Item\",\r\n    antialiasing: \"bool\",\r\n    state: \"string\",\r\n    states: \"list\",\r\n    transitions: \"list\",\r\n    data: \"list\",\r\n    children: \"list\",\r\n    resources: \"list\",\r\n    transform: \"list\",\r\n    x: \"real\",\r\n    y: \"real\",\r\n    z: \"real\",\r\n    width: \"real\",\r\n    height: \"real\",\r\n    implicitWidth: \"real\",\r\n    implicitHeight: \"real\",\r\n    left: \"real\",\r\n    right: \"real\",\r\n    top: \"real\",\r\n    bottom: \"real\",\r\n    horizontalCenter: \"real\",\r\n    verticalCenter: \"real\",\r\n    rotation: \"real\",\r\n    scale: { type: \"real\", initialValue: 1 },\r\n    opacity: { type: \"real\", initialValue: 1 },\r\n    visible: { type: \"bool\", initialValue: true },\r\n    clip: \"bool\",\r\n    focus: \"bool\",\r\n    enabled: { type: \"bool\", initialValue: true },\r\n\r\n  };\r\n  static defaultProperty = \"data\";\r\n\r\n  constructor(meta) {\r\n    super(meta);\r\n\r\n    if (!this.dom) { // Create a dom element for this item.\r\n      this.dom = document.createElement(meta.tagName || \"div\");\r\n    }\r\n    this.dom.style.position = \"absolute\";\r\n    this.dom.style.pointerEvents = \"none\";\r\n    if (meta.style) {\r\n      for (const key in meta.style) {\r\n        if (!meta.style.hasOwnProperty(key)) continue;\r\n        this.dom.style[key] = meta.style[key];\r\n      }\r\n    }\r\n\r\n    // In case the class is qualified, only use the last part for the css class\r\n    // name.\r\n    const classComponent = meta.object.$class.split(\".\").pop();\r\n    this.dom.className = `${classComponent}${this.id ? ` ${this.id}` : \"\"}`;\r\n    this.css = this.dom.style;\r\n    this.impl = null; // Store the actually drawn element\r\n\r\n    this.css.boxSizing = \"border-box\";\r\n\r\n    if (this.$isComponentRoot) {\r\n      QmlWeb.createProperty(\"var\", this, \"activeFocus\");\r\n    }\r\n\r\n    this.parentChanged.connect(this, this.$onParentChanged_);\r\n    this.dataChanged.connect(this, this.$onDataChanged);\r\n    this.stateChanged.connect(this, this.$onStateChanged);\r\n    this.visibleChanged.connect(this, this.$onVisibleChanged_);\r\n    this.clipChanged.connect(this, this.$onClipChanged);\r\n    this.zChanged.connect(this, this.$onZChanged);\r\n    this.xChanged.connect(this, this.$onXChanged);\r\n    this.yChanged.connect(this, this.$onYChanged);\r\n    this.widthChanged.connect(this, this.$onWidthChanged_);\r\n    this.heightChanged.connect(this, this.$onHeightChanged_);\r\n    this.focusChanged.connect(this, this.$onFocusChanged_);\r\n\r\n    this.widthChanged.connect(this, this.$updateHGeometry);\r\n    this.heightChanged.connect(this, this.$updateVGeometry);\r\n    this.implicitWidthChanged.connect(this, this.$onImplicitWidthChanged);\r\n    this.implicitHeightChanged.connect(this, this.$onImplicitHeightChanged);\r\n\r\n    this.$isUsingImplicitWidth = true;\r\n    this.$isUsingImplicitHeight = true;\r\n\r\n    this.anchors = new QmlWeb.QObject(this);\r\n    QmlWeb.createProperties(this.anchors, {\r\n      left: \"var\",\r\n      right: \"var\",\r\n      top: \"var\",\r\n      bottom: \"var\",\r\n      horizontalCenter: \"var\",\r\n      verticalCenter: \"var\",\r\n      fill: \"Item\",\r\n      centerIn: \"Item\",\r\n      margins: \"real\",\r\n      leftMargin: \"real\",\r\n      rightMargin: \"real\",\r\n      topMargin: \"real\",\r\n      bottomMargin: \"real\"\r\n    });\r\n    this.anchors.leftChanged.connect(this, this.$updateHGeometry);\r\n    this.anchors.rightChanged.connect(this, this.$updateHGeometry);\r\n    this.anchors.topChanged.connect(this, this.$updateVGeometry);\r\n    this.anchors.bottomChanged.connect(this, this.$updateVGeometry);\r\n    this.anchors.horizontalCenterChanged.connect(this, this.$updateHGeometry);\r\n    this.anchors.verticalCenterChanged.connect(this, this.$updateVGeometry);\r\n    this.anchors.fillChanged.connect(this, this.$updateHGeometry);\r\n    this.anchors.fillChanged.connect(this, this.$updateVGeometry);\r\n    this.anchors.centerInChanged.connect(this, this.$updateHGeometry);\r\n    this.anchors.centerInChanged.connect(this, this.$updateVGeometry);\r\n    this.anchors.leftMarginChanged.connect(this, this.$updateHGeometry);\r\n    this.anchors.rightMarginChanged.connect(this, this.$updateHGeometry);\r\n    this.anchors.topMarginChanged.connect(this, this.$updateVGeometry);\r\n    this.anchors.bottomMarginChanged.connect(this, this.$updateVGeometry);\r\n    this.anchors.marginsChanged.connect(this, this.$updateHGeometry);\r\n    this.anchors.marginsChanged.connect(this, this.$updateVGeometry);\r\n\r\n    // childrenRect property\r\n    this.childrenRect = new QmlWeb.QObject(this);\r\n    QmlWeb.createProperties(this.childrenRect, {\r\n      x: \"real\", // TODO ro\r\n      y: \"real\", // TODO ro\r\n      width: \"real\", // TODO ro\r\n      height: \"real\" // TODO ro\r\n    });\r\n\r\n    this.rotationChanged.connect(this, this.$updateTransform);\r\n    this.scaleChanged.connect(this, this.$updateTransform);\r\n    this.transformChanged.connect(this, this.$updateTransform);\r\n\r\n    this.Component.completed.connect(this, this.Component$onCompleted_);\r\n    this.opacityChanged.connect(this, this.$calculateOpacity);\r\n    if (this.$parent) {\r\n      this.$parent.$opacityChanged.connect(this, this.$calculateOpacity);\r\n    }\r\n\r\n    this.spacing = 0;\r\n    this.$revertActions = [];\r\n    this.css.left = `${this.x}px`;\r\n    this.css.top = `${this.y}px`;\r\n\r\n    this.disabledList = []\r\n  }\r\n  mapToItem(item, x, y){\r\n      return {\r\n        x: item.x + x + this.parent.x,\r\n        y: item.y + y + this.parent.y,\r\n      }\r\n  }\r\n  $firstParentForWheel(){\r\n    let item = this.parent\r\n    while(item.parent && !(item instanceof QtQuick_ListView || item instanceof QtQuick_GridView || item instanceof QtQuick_Flickable)){\r\n      item = item.parent\r\n    }\r\n    return (item instanceof QtQuick_ListView || item instanceof QtQuick_GridView || item instanceof QtQuick_Flickable) ? item : null\r\n  }\r\n  $offAllMouseEvent(){\r\n    let item = this.parent\r\n    while(item.parent){\r\n      item = item.parent\r\n    }\r\n    this.areaList = []\r\n    let func = item => {\r\n      for(let child of item.children){\r\n        if(child != this){\r\n          if(child instanceof QtQuick_MouseArea || child instanceof QtQuick_ListView || child instanceof QtQuick_GridView || child instanceof QtQuick_Flickable){\r\n            if(child.enabled) {\r\n              child.enabled = false;\r\n              this.disabledList.push(child);\r\n            }\r\n          }\r\n        }\r\n        func(child)\r\n      }\r\n    }\r\n    func(item)\r\n  }\r\n  $onAllMouseEvent(){\r\n    obj = this.disabledList.pop();\r\n    while(obj){\r\n      obj.enabled = true;\r\n      obj = this.disabledList.pop();\r\n    }\r\n  }\r\n  $onParentChanged_(newParent, oldParent, propName) {\r\n    if (oldParent) {\r\n      oldParent.children.splice(oldParent.children.indexOf(this), 1);\r\n      oldParent.childrenChanged();\r\n      oldParent.dom.removeChild(this.dom);\r\n    }\r\n    if (newParent && newParent.children.indexOf(this) === -1) {\r\n      newParent.children.push(this);\r\n      newParent.childrenChanged();\r\n    }\r\n    if (newParent) {\r\n      newParent.dom.appendChild(this.dom);\r\n    }\r\n    this.$updateHGeometry(newParent, oldParent, propName);\r\n    this.$updateVGeometry(newParent, oldParent, propName);\r\n  }\r\n  $onDataChanged(newData) {\r\n    const QMLItem = QmlWeb.getConstructor(\"QtQuick\", \"2.0\", \"Item\");\r\n    for (const i in newData) {\r\n      const child = newData[i];\r\n      if (child instanceof QMLItem) {\r\n        child.parent = this; // This will also add it to children.\r\n      } else {\r\n        this.resources.push(child);\r\n      }\r\n    }\r\n  }\r\n  $onStateChanged(newVal, oldVal) {\r\n    // let oldState; // TODO: do we need oldState?\r\n    let newState;\r\n    for (let i = 0; i < this.states.length; i++) {\r\n      if (this.states[i].name === newVal) {\r\n        newState = this.states[i];\r\n      }\r\n      /*\r\n      else if (this.states[i].name === oldVal) {\r\n        oldState = this.states[i];\r\n      }\r\n      */\r\n    }\r\n\r\n    const actions = this.$revertActions.slice();\r\n\r\n    // Get current values for revert actions\r\n    \r\n    for (const i in actions) {\r\n      const action = actions[i];\r\n      action.from = action.target[action.property];\r\n    }\r\n    if (newState) {\r\n      const changes = newState.$getAllChanges();\r\n\r\n      // Get all actions we need to do and create actions to revert them\r\n      for (let i = 0; i < changes.length; i++) {\r\n        this.$applyChange(actions, changes[i]);\r\n      }\r\n    }\r\n\r\n    // Set all property changes and fetch the actual values afterwards\r\n    // The latter is needed for transitions. We need to set all properties\r\n    // before we fetch the values because properties can be interdependent.\r\n\r\n    let transitionProps = []\r\n    for (let n = 0; n < this.transitions.length; n++) {\r\n      let transition = this.transitions[n];\r\n      for (let k = 0; k < transition.$properties.animations.val.length; k++) {\r\n        transitionProps = transition.$properties.animations.val[k].$props;\r\n      }\r\n    }\r\n    for (const i in actions) {\r\n      const action = actions[i];\r\n      if(transitionProps.indexOf(action.property) < 0){\r\n        action.target.$properties[action.property].set(\r\n          action.value, QmlWeb.QMLProperty.ReasonUser, action.target,\r\n          newState ? newState.$context : action.target.$context\r\n        );\r\n      }\r\n    }\r\n\r\n    \r\n    for (const i in actions) {\r\n      const action = actions[i];\r\n      //action.to = action.target[action.property];\r\n      if (action.explicit) {\r\n        // Remove binding\r\n        action.target[action.property] = action.target[action.property];\r\n        action.value = action.target[action.property];\r\n      }\r\n    }\r\n\r\n    // Find the best transition to use\r\n    let transition;\r\n    let rating = 0;\r\n    for (let i = 0; i < this.transitions.length; i++) {\r\n      // We need to stop running transitions, so let's do\r\n      // it while iterating through the transitions anyway\r\n      this.transitions[i].$stop();\r\n      const curTransition = this.transitions[i];\r\n      let curRating = 0;\r\n      if (curTransition.from === oldVal ||\r\n          curTransition.reversible && curTransition.from === newVal) {\r\n        curRating += 2;\r\n      } else if (curTransition.from === \"*\") {\r\n        curRating++;\r\n      } else {\r\n        continue;\r\n      }\r\n      if (curTransition.to === newVal ||\r\n        curTransition.reversible && curTransition.to === oldVal) {\r\n        curRating += 2;\r\n      } else if (curTransition.to === \"*\") {\r\n        curRating++;\r\n      } else {\r\n        continue;\r\n      }\r\n      if (curRating > rating) {\r\n        rating = curRating;\r\n        transition = curTransition;\r\n      }\r\n    }\r\n    if (transition) {\r\n      transition.$start(actions);\r\n    }\r\n  }\r\n  $applyChange(actions, change) {\r\n    const arrayFindIndex = QmlWeb.helpers.arrayFindIndex;\r\n    for (let j = 0; j < change.$actions.length; j++) {\r\n      const item = change.$actions[j];\r\n\r\n      const action = {\r\n        target: change.target,\r\n        property: item.property,\r\n        origValue: change.target.$properties[item.property].binding ||\r\n                    change.target.$properties[item.property].val,\r\n        value: item.value,\r\n        from: change.target[item.property],\r\n        to: item.value,\r\n        explicit: change.explicit\r\n      };\r\n\r\n      const actionIndex = arrayFindIndex(actions, element =>\r\n        element.target === action.target &&\r\n        element.property === action.property\r\n      );\r\n      if (actionIndex !== -1) {\r\n        actions[actionIndex] = action;\r\n      } else {\r\n        actions.push(action);\r\n      }\r\n\r\n      // Look for existing revert action, else create it\r\n      const revertIndex = arrayFindIndex(this.$revertActions, element =>\r\n        element.target === change.target &&\r\n        element.property === item.property\r\n      );\r\n      if (revertIndex !== -1 && !change.restoreEntryValues) {\r\n        // We don't want to revert, so remove it\r\n        this.$revertActions.splice(revertIndex, 1);\r\n      } else if (revertIndex === -1 && change.restoreEntryValues) {\r\n        this.$revertActions.push({\r\n          target: change.target,\r\n          property: item.property,\r\n          value: change.target.$properties[item.property].binding ||\r\n                  change.target.$properties[item.property].val,\r\n          from: undefined,\r\n          to: change.target[item.property]\r\n        });\r\n      }\r\n    }\r\n  }\r\n  $onVisibleChanged_(newVal) {\r\n    this.css.visibility = newVal ? \"inherit\" : \"hidden\";\r\n  }\r\n  $onClipChanged(newVal) {\r\n    this.css.overflow = newVal ? \"hidden\" : \"visible\";\r\n  }\r\n  $onZChanged() {\r\n    this.$updateTransform();\r\n  }\r\n  $onXChanged(newVal) {\r\n    this.css.left = `${newVal}px`;\r\n    this.$updateHGeometry();\r\n  }\r\n  $onYChanged(newVal) {\r\n    this.css.top = `${newVal}px`;\r\n    this.$updateVGeometry();\r\n  }\r\n  $onWidthChanged_(newVal) {\r\n    this.css.width = newVal ? `${newVal}px` : \"auto\";\r\n  }\r\n  $onHeightChanged_(newVal) {\r\n    this.css.height = newVal ? `${newVal}px` : \"auto\";\r\n  }\r\n  $onFocusChanged_(newVal) {\r\n    if (newVal) {\r\n      if (this.dom.firstChild) {\r\n        this.dom.firstChild.focus();\r\n      }\r\n      document.qmlFocus = this;\r\n      this.$context.activeFocus = this;\r\n    } else if (document.qmlFocus === this) {\r\n      document.getElementsByTagName(\"BODY\")[0].focus();\r\n      document.qmlFocus = QmlWeb.engine.rootContext().base;\r\n      this.$context.activeFocus = null;\r\n    }\r\n  }\r\n  setupFocusOnDom(element) {\r\n    element.addEventListener(\"focus\", () => {this.focus = true});\r\n    element.addEventListener(\"blur\", () => {this.focus = false});\r\n  }\r\n  $updateTransform() {\r\n    const QMLTranslate = QmlWeb.getConstructor(\"QtQuick\", \"2.0\", \"Translate\");\r\n    const QMLRotation = QmlWeb.getConstructor(\"QtQuick\", \"2.0\", \"Rotation\");\r\n    const QMLScale = QmlWeb.getConstructor(\"QtQuick\", \"2.0\", \"Scale\");\r\n    let transform = `rotate(${this.rotation}deg) scale(${this.scale})`;\r\n    let filter = \"\";\r\n    const transformStyle = \"preserve-3d\";\r\n\r\n    for (let i = 0; i < this.transform.length; i++) {\r\n      const t = this.transform[i];\r\n      if (t instanceof QMLRotation) {\r\n        const ax = t.axis;\r\n        transform += ` rotate3d(${ax.x}, ${ax.y}, ${ax.z}, ${ax.angle}deg)`;\r\n      } else if (t instanceof QMLScale) {\r\n        transform += ` scale(${t.xScale}, ${t.yScale})`;\r\n      } else if (t instanceof QMLTranslate) {\r\n        transform += ` translate(${t.x}px, ${t.y}px)`;\r\n      } else if (typeof t.transformType !== \"undefined\") {\r\n        if (t.transformType === \"filter\") {\r\n          filter += `${t.operation}(${t.parameters}) `;\r\n        }\r\n      } else if (typeof t === \"string\") {\r\n        transform += t;\r\n      }\r\n    }\r\n    if (typeof this.z === \"number\") {\r\n      transform += ` translate3d(0, 0, ${this.z}px)`;\r\n      // should also consider z as zIndex for stacking order behaviour of qml\r\n      // see http://doc.qt.io/qt-5/qml-qtquick-item.html#z-prop\r\n      this.dom.style.zIndex = this.z;\r\n    }\r\n    this.dom.style.transform = transform;\r\n    this.dom.style.transformStyle = transformStyle;\r\n    this.dom.style.webkitTransform = transform; // Chrome, Safari and Opera\r\n    this.dom.style.webkitTransformStyle = transformStyle;\r\n    this.dom.style.msTransform = transform;     // IE\r\n    this.dom.style.filter = filter;\r\n    this.dom.style.webkitFilter = filter; // Chrome, Safari and Opera\r\n  }\r\n  Component$onCompleted_() {\r\n    this.$calculateOpacity();\r\n  }\r\n  $calculateOpacity() {\r\n    // TODO: reset all opacity on layer.enabled changed\r\n    /*\r\n    if (false) { // TODO: check layer.enabled\r\n      this.css.opacity = this.opacity;\r\n    }\r\n    */\r\n    const parentOpacity = this.$parent && this.$parent.$opacity || 1;\r\n    this.$opacity = this.opacity * parentOpacity;\r\n    if (this.impl) {\r\n      this.impl.style.opacity = this.$opacity;\r\n    }\r\n  }\r\n  $onImplicitWidthChanged() {\r\n    if (this.$isUsingImplicitWidth) {\r\n      this.width = this.implicitWidth;\r\n      this.$isUsingImplicitWidth = true;\r\n    }\r\n  }\r\n  $onImplicitHeightChanged() {\r\n    if (this.$isUsingImplicitHeight) {\r\n      this.height = this.implicitHeight;\r\n      this.$isUsingImplicitHeight = true;\r\n    }\r\n  }\r\n  $updateHGeometry(newVal, oldVal, propName) {\r\n    const anchors = this.anchors || this;\r\n    if (this.$updatingHGeometry) {\r\n      return;\r\n    }\r\n    this.$updatingHGeometry = true;\r\n\r\n    const flags = QmlWeb.Signal.UniqueConnection;\r\n    const lM = anchors.leftMargin || anchors.margins;\r\n    const rM = anchors.rightMargin || anchors.margins;\r\n    const w = this.width;\r\n    const left = this.parent ? this.parent.left : 0;\r\n\r\n    // Width\r\n    if (propName === \"width\") {\r\n      this.$isUsingImplicitWidth = false;\r\n    }\r\n\r\n    // Position TODO: Layouts\r\n\r\n    const u = {}; // our update object\r\n\r\n    if (anchors.fill !== undefined) {\r\n      const fill = anchors.fill;\r\n      const props = fill.$properties;\r\n      props.left.changed.connect(this, this.$updateHGeometry, flags);\r\n      props.right.changed.connect(this, this.$updateHGeometry, flags);\r\n      props.width.changed.connect(this, this.$updateHGeometry, flags);\r\n\r\n      this.$isUsingImplicitWidth = false;\r\n      u.width = fill.width - lM - rM;\r\n      u.x = fill.left - left + lM;\r\n      u.left = fill.left + lM;\r\n      u.right = fill.right - rM;\r\n      u.horizontalCenter = (u.left + u.right) / 2;\r\n    } else if (anchors.centerIn !== undefined) {\r\n      const horizontalCenter = anchors.centerIn.$properties.horizontalCenter;\r\n      horizontalCenter.changed.connect(this, this.$updateHGeometry, flags);\r\n\r\n      u.horizontalCenter = anchors.centerIn.horizontalCenter;\r\n      u.x = u.horizontalCenter - w / 2 - left;\r\n      u.left = u.horizontalCenter - w / 2;\r\n      u.right = u.horizontalCenter + w / 2;\r\n    } else if (anchors.left !== undefined) {\r\n      u.left = anchors.left + lM;\r\n      if (anchors.right !== undefined) {\r\n        u.right = anchors.right - rM;\r\n        this.$isUsingImplicitWidth = false;\r\n        u.width = u.right - u.left;\r\n        u.x = u.left - left;\r\n        u.horizontalCenter = (u.right + u.left) / 2;\r\n      } else if (anchors.horizontalCenter !== undefined) {\r\n        u.horizontalCenter = anchors.horizontalCenter;\r\n        this.$isUsingImplicitWidth = false;\r\n        u.width = (u.horizontalCenter - u.left) * 2;\r\n        u.x = u.left - left;\r\n        u.right = 2 * u.horizontalCenter - u.left;\r\n      } else {\r\n        u.x = u.left - left;\r\n        u.right = u.left + w;\r\n        u.horizontalCenter = u.left + w / 2;\r\n      }\r\n    } else if (anchors.right !== undefined) {\r\n      u.right = anchors.right - rM;\r\n      if (anchors.horizontalCenter !== undefined) {\r\n        u.horizontalCenter = anchors.horizontalCenter;\r\n        this.$isUsingImplicitWidth = false;\r\n        u.width = (u.right - u.horizontalCenter) * 2;\r\n        u.x = 2 * u.horizontalCenter - u.right - left;\r\n        u.left = 2 * u.horizontalCenter - u.right;\r\n      } else {\r\n        u.x = u.right - w - left;\r\n        u.left = u.right - w;\r\n        u.horizontalCenter = u.right - w / 2;\r\n      }\r\n    } else if (anchors.horizontalCenter !== undefined) {\r\n      u.horizontalCenter = anchors.horizontalCenter;\r\n      u.x = u.horizontalCenter - w / 2 - left;\r\n      u.left = u.horizontalCenter - w / 2;\r\n      u.right = u.horizontalCenter + w / 2;\r\n    } else {\r\n      if (this.parent) {\r\n        const leftProp = this.parent.$properties.left;\r\n        leftProp.changed.connect(this, this.$updateHGeometry, flags);\r\n      }\r\n\r\n      u.left = this.x + left;\r\n      u.right = u.left + w;\r\n      u.horizontalCenter = u.left + w / 2;\r\n    }\r\n\r\n    for (const key in u) {\r\n      this[key] = u[key];\r\n    }\r\n\r\n    this.$updatingHGeometry = false;\r\n\r\n    if (this.parent) this.$updateChildrenRect(this.parent);\r\n  }\r\n  $updateVGeometry(newVal, oldVal, propName) {\r\n    const anchors = this.anchors || this;\r\n    if (this.$updatingVGeometry) {\r\n      return;\r\n    }\r\n    this.$updatingVGeometry = true;\r\n\r\n    const flags = QmlWeb.Signal.UniqueConnection;\r\n    const tM = anchors.topMargin || anchors.margins;\r\n    const bM = anchors.bottomMargin || anchors.margins;\r\n    const h = this.height;\r\n    const top = this.parent ? this.parent.top : 0;\r\n\r\n    // HeighttopProp\r\n    if (propName === \"height\") {\r\n      this.$isUsingImplicitHeight = false;\r\n    }\r\n\r\n    // Position TODO: Layouts\r\n\r\n    const u = {}; // our update object\r\n\r\n    if (anchors.fill !== undefined) {\r\n      const fill = anchors.fill;\r\n      const props = fill.$properties;\r\n      props.top.changed.connect(this, this.$updateVGeometry, flags);\r\n      props.bottom.changed.connect(this, this.$updateVGeometry, flags);\r\n      props.height.changed.connect(this, this.$updateVGeometry, flags);\r\n\r\n      this.$isUsingImplicitHeight = false;\r\n      u.height = fill.height - tM - bM;\r\n      u.y = fill.top - top + tM;\r\n      u.top = fill.top + tM;\r\n      u.bottom = fill.bottom - bM;\r\n      u.verticalCenter = (u.top + u.bottom) / 2;\r\n    } else if (anchors.centerIn !== undefined) {\r\n      const verticalCenter = anchors.centerIn.$properties.verticalCenter;\r\n      verticalCenter.changed.connect(this, this.$updateVGeometry, flags);\r\n\r\n      u.verticalCenter = anchors.centerIn.verticalCenter;\r\n      u.y = u.verticalCenter - h / 2 - top;\r\n      u.top = u.verticalCenter - h / 2;\r\n      u.bottom = u.verticalCenter + h / 2;\r\n    } else if (anchors.top !== undefined) {\r\n      u.top = anchors.top + tM;\r\n      if (anchors.bottom !== undefined) {\r\n        u.bottom = anchors.bottom - bM;\r\n        this.$isUsingImplicitHeight = false;\r\n        u.height = u.bottom - u.top;\r\n        u.y = u.top - top;\r\n        u.verticalCenter = (u.bottom + u.top) / 2;\r\n      } else if ((u.verticalCenter = anchors.verticalCenter) !== undefined) {\r\n        this.$isUsingImplicitHeight = false;\r\n        u.height = (u.verticalCenter - u.top) * 2;\r\n        u.y = u.top - top;\r\n        u.bottom = 2 * u.verticalCenter - u.top;\r\n      } else {\r\n        u.y = u.top - top;\r\n        u.bottom = u.top + h;\r\n        u.verticalCenter = u.top + h / 2;\r\n      }\r\n    } else if (anchors.bottom !== undefined) {\r\n      u.bottom = anchors.bottom - bM;\r\n      if ((u.verticalCenter = anchors.verticalCenter) !== undefined) {\r\n        this.$isUsingImplicitHeight = false;\r\n        u.height = (u.bottom - u.verticalCenter) * 2;\r\n        u.y = 2 * u.verticalCenter - u.bottom - top;\r\n        u.top = 2 * u.verticalCenter - u.bottom;\r\n      } else {\r\n        u.y = u.bottom - h - top;\r\n        u.top = u.bottom - h;\r\n        u.verticalCenter = u.bottom - h / 2;\r\n      }\r\n    } else if (anchors.verticalCenter !== undefined) {\r\n      u.verticalCenter = anchors.verticalCenter;\r\n      u.y = u.verticalCenter - h / 2 - top;\r\n      u.top = u.verticalCenter - h / 2;\r\n      u.bottom = u.verticalCenter + h / 2;\r\n    } else {\r\n      if (this.parent) {\r\n        const topProp = this.parent.$properties.top;\r\n        topProp.changed.connect(this, this.$updateVGeometry, flags);\r\n      }\r\n\r\n      u.top = this.y + top;\r\n      u.bottom = u.top + h;\r\n      u.verticalCenter = u.top + h / 2;\r\n    }\r\n\r\n    for (const key in u) {\r\n      this[key] = u[key];\r\n    }\r\n\r\n    this.$updatingVGeometry = false;\r\n\r\n    if (this.parent) this.$updateChildrenRect(this.parent);\r\n  }\r\n  $updateChildrenRect(component) {\r\n    if (!component || !component.children || component.children.length === 0) {\r\n      return;\r\n    }\r\n    const children = component.children;\r\n\r\n    let maxWidth = 0;\r\n    let maxHeight = 0;\r\n    let minX = children.length > 0 ? children[0].x : 0;\r\n    let minY = children.length > 0 ? children[0].y : 0;\r\n\r\n    for (let i = 0; i < children.length; i++) {\r\n      const child = children[i];\r\n      maxWidth = Math.max(maxWidth, child.x + child.width);\r\n      maxHeight = Math.max(maxHeight, child.y + child.heighth);\r\n      minX = Math.min(minX, child.x);\r\n      minY = Math.min(minX, child.y);\r\n    }\r\n\r\n    component.childrenRect.x = minX;\r\n    component.childrenRect.y = minY;\r\n    component.childrenRect.width = maxWidth;\r\n    component.childrenRect.height = maxHeight;\r\n  }\r\n}\r\nQmlWeb.registerQmlType(QtQuick_Item);\n","// eslint-disable-next-line no-undef\r\nclass QmlWeb_Dom_DomElement extends QtQuick_Item {\r\n  static properties = {\r\n    attrs: { type: \"var\", initialValue: {} },\r\n    style: { type: \"var\", initialValue: {} },\r\n    html: { type: \"string\", initialValue: \"\" },\r\n    text: { type: \"string\", initialValue: \"\" },\r\n    tagName: { type: \"string\", initialValue: \"div\" }\r\n  };\r\n\r\n  constructor(meta) {\r\n    meta.tagName = meta.object.tagName || meta.tagName;\r\n    super(meta);\r\n\r\n    for (const key in meta.object.attrs) {\r\n      if (!meta.object.attrs.hasOwnProperty(key)) continue;\r\n      this.dom[key] = meta.object.attrs[key];\r\n    }\r\n    for (const key in meta.object.style) {\r\n      if (!meta.object.style.hasOwnProperty(key)) continue;\r\n      this.dom.style[key] = meta.object.style[key];\r\n    }\r\n\r\n    this.htmlChanged.connect(() => {\r\n      this.dom.innerHTML = this.html;\r\n    });\r\n    this.textChanged.connect(() => {\r\n      this.dom.innerText = this.text;\r\n    });\r\n  }\r\n}\r\nQmlWeb.registerQmlType(QmlWeb_Dom_DomElement);\n","// eslint-disable-next-line no-undef\r\nclass QmlWeb_Dom_DomDiv extends QmlWeb_Dom_DomElement {\r\n}\r\nQmlWeb.registerQmlType(QmlWeb_Dom_DomDiv);\n","// eslint-disable-next-line no-undef\r\nclass QmlWeb_Dom_DomParagraph extends QmlWeb_Dom_DomElement {\r\n  constructor(meta) {\r\n    meta.tagName = \"p\";\r\n    if (!meta.style) meta.style = {};\r\n    meta.style.margin = 0;\r\n    super(meta);\r\n  }\r\n}\r\nQmlWeb.registerQmlType(QmlWeb_Dom_DomParagraph);\n","// eslint-disable-next-line no-undef\r\nclass QmlWeb_RestModel extends QtQuick_Item {\r\n  static properties = {\r\n    url: \"string\",\r\n    isLoading: \"bool\",\r\n    mimeType: { type: \"string\", initialValue: \"application/json\" },\r\n    queryMimeType: {\r\n      type: \"string\",\r\n      initialValue: \"application/x-www-urlencoded\"\r\n    }\r\n  };\r\n  static signals = {\r\n    fetched: [],\r\n    saved: []\r\n  };\r\n\r\n  constructor(meta) {\r\n    super(meta);\r\n\r\n    this.attributes = this.getAttributes();\r\n    this.runningRequests = 0;\r\n  }\r\n  fetch() {\r\n    this.$ajax({\r\n      method: \"GET\",\r\n      mimeType: this.mimetype,\r\n      success: xhr => {\r\n        this.$xhrReadResponse(xhr);\r\n        this.fetched();\r\n      }\r\n    });\r\n  }\r\n  remove() {\r\n    this.$ajax({\r\n      method: \"DELETE\",\r\n      success: () => {\r\n        this.destroy();\r\n      }\r\n    });\r\n  }\r\n  create() {\r\n    this.$sendToServer(\"POST\");\r\n  }\r\n  save() {\r\n    this.$sendToServer(\"PUT\");\r\n  }\r\n  $sendToServer(method) {\r\n    this.$ajax({\r\n      method,\r\n      mimeType: this.queryMimeType,\r\n      body: this.$generateBodyForPostQuery(),\r\n      success: xhr => {\r\n        this.$xhrReadResponse(xhr);\r\n        this.saved();\r\n      }\r\n    });\r\n  }\r\n  $generateBodyForPostQuery() {\r\n    const object = {};\r\n    for (let i = 0; i < this.attributes.length; ++i) {\r\n      object[this.attributes[i]] = this.$properties[this.attributes[i]].get();\r\n    }\r\n    console.log(object);\r\n    switch (this.queryMimeType) {\r\n      case \"application/json\":\r\n      case \"text/json\":\r\n        return JSON.stringify(object);\r\n      case \"application/x-www-urlencoded\":\r\n        return this.$objectToUrlEncoded(object);\r\n    }\r\n    return undefined;\r\n  }\r\n  $objectToUrlEncoded(object, prefix) {\r\n    const parts = [];\r\n    for (let key in object) {\r\n      if (object.hasOwnProperty(key)) {\r\n        const value = object[key];\r\n        if (typeof prefix !== \"undefined\") {\r\n          key = `${prefix}[${key}]`;\r\n        }\r\n        if (typeof value === \"object\") {\r\n          parts.push(this.$objectToUrlEncoded(value, key));\r\n        } else {\r\n          const ekey = this.$myEncodeURIComponent(key);\r\n          const evalue = this.$myEncodeURIComponent(value);\r\n          parts.push(`${ekey}=${evalue}`);\r\n        }\r\n      }\r\n    }\r\n    return parts.join(\"&\");\r\n  }\r\n  $myEncodeURIComponent(str) {\r\n    return encodeURIComponent(str).replace(/[!'()*]/g, c =>\r\n      `%${c.charCodeAt(0).toString(16)}`\r\n    );\r\n  }\r\n  $ajax(options) {\r\n    const xhr = new XMLHttpRequest();\r\n    xhr.overrideMimeType(this.mimeType);\r\n    xhr.onreadystatechange = () => {\r\n      if (xhr.readyState === XMLHttpRequest.DONE) {\r\n        if (xhr.status === 200) {\r\n          options.success(xhr);\r\n        } else {\r\n          options.failure(xhr);\r\n        }\r\n        this.runningRequests -= 1;\r\n        if (this.runningRequests <= 0) {\r\n          this.isLoading = false;\r\n        }\r\n      }\r\n    };\r\n    xhr.open(options.method, this.url, true);\r\n    if (typeof options.body !== \"undefined\") {\r\n      xhr.setRequestHeader(\"Content-Type\", this.queryMimeType);\r\n      xhr.send(options.body);\r\n    } else {\r\n      xhr.send(null);\r\n    }\r\n    this.runningRequests += 1;\r\n    this.isLoading = true;\r\n  }\r\n  $xhrReadResponse(xhr) {\r\n    let responseObject;\r\n    if (this.mimeType === \"application/json\" || this.mimeType === \"text/json\") {\r\n      responseObject = JSON.parse(xhr.responseText);\r\n    }\r\n    this.$updatePropertiesFromResponseObject(responseObject);\r\n  }\r\n  $updatePropertiesFromResponseObject(responseObject) {\r\n    const QMLProperty = QmlWeb.QMLProperty;\r\n    for (const key in responseObject) {\r\n      if (responseObject.hasOwnProperty(key) && this.$hasProperty(key)) {\r\n        this.$properties[key].set(responseObject[key], QMLProperty.ReasonUser);\r\n      }\r\n    }\r\n  }\r\n  $hasProperty(name) {\r\n    return typeof this.$properties[name] !== \"undefined\";\r\n  }\r\n}\r\nQmlWeb.registerQmlType(QmlWeb_RestModel);\n","// eslint-disable-next-line no-undef\r\nclass Qt_labs_settings_Settings extends QtQuick_Item {\r\n  static properties = {\r\n    category: \"string\"\r\n  };\r\n\r\n  constructor(meta) {\r\n    super(meta);\r\n\r\n    if (typeof window.localStorage === \"undefined\") {\r\n      return;\r\n    }\r\n\r\n    this.Component.completed.connect(this, this.Component$onCompleted);\r\n  }\r\n  Component$onCompleted() {\r\n    this.$loadProperties();\r\n    this.$initializeProperties();\r\n  }\r\n  $getKey(attrName) {\r\n    return `${this.category}/${attrName}`;\r\n  }\r\n  $loadProperties() {\r\n    this.$attributes.forEach(attrName => {\r\n      if (!this.$properties[attrName]) return;\r\n\r\n      const key = this.$getKey(attrName);\r\n      this[attrName] = localStorage.getItem(key);\r\n    });\r\n  }\r\n  $initializeProperties() {\r\n    this.$attributes.forEach(attrName => {\r\n      if (!this.$properties[attrName]) return;\r\n\r\n      let emitter = this;\r\n      let signalName = `${attrName}Changed`;\r\n\r\n      if (this.$properties[attrName].type === \"alias\") {\r\n        emitter = this.$context[this.$properties[attrName].val.objectName];\r\n        signalName = `${this.$properties[attrName].val.propertyName}Changed`;\r\n      }\r\n\r\n      emitter[signalName].connect(this, () => {\r\n        localStorage.setItem(this.$getKey(attrName), this[attrName]);\r\n      });\r\n    });\r\n  }\r\n}\r\nQmlWeb.registerQmlType(Qt_labs_settings_Settings);\n","// eslint-disable-next-line no-undef\r\nclass QtGraphicalEffects_DropShadow extends QtQuick_Item {\r\n    static properties = {\r\n      cached: \"bool\",\r\n      color: { type: \"color\", initialValue: \"black\" },\r\n      horizontalOffset: \"real\",\r\n      radius: { type: \"int\", initialValue: 4 },\r\n      samples: { type: \"int\", initialValue: 9 },\r\n      source: { type: \"var\", initialValue: null },\r\n      spread: { type: \"real\", initialValue: 0 },\r\n      transparentBorder: \"bool\",\r\n      verticalOffset: \"real\",\r\n    };\r\n  \r\n    constructor(meta) {\r\n      super(meta);\r\n      this.colorChanged.connect(this, this.$updateBoxShadow);\r\n      this.samplesChanged.connect(this, this.$updateBoxShadow);\r\n      this.radiusChanged.connect(this, this.$updateBoxShadow);\r\n      this.spreadChanged.connect(this, this.$updateBoxShadow);\r\n      this.sourceChanged.connect(this, this.$updateBoxShadow);\r\n      this.verticalOffsetChanged.connect(this, this.$updateBoxShadow);\r\n      this.horizontalOffsetChanged.connect(this, this.$updateBoxShadow);\r\n    }\r\n    $updateBoxShadow() {\r\n      const { color, horizontalOffset, verticalOffset, radius, spread } = this\r\n      if(this.source) {\r\n        const style = this.source.impl.style\r\n        style.boxShadow = `${horizontalOffset}px ${verticalOffset}px ${radius}px ${spread}px ${color}`\r\n      }\r\n    }\r\n  }\r\n  QmlWeb.registerQmlType(QtGraphicalEffects_DropShadow);\n","// eslint-disable-next-line no-undef\r\nclass QtGraphicalEffects_FastBlur extends QtQuick_Item {\r\n  static properties = {\r\n    radius: \"real\",\r\n    source: { type: \"var\", initialValue: null }\r\n  };\r\n\r\n  constructor(meta) {\r\n    super(meta);\r\n\r\n    this.$previousSource = null;\r\n    this.$filterObject = undefined;\r\n\r\n    this.radiusChanged.connect(this, this.$onRadiusChanged);\r\n    this.sourceChanged.connect(this, this.$onSourceChanged);\r\n  }\r\n  $onRadiusChanged() {\r\n    this.$updateEffect(this.source);\r\n  }\r\n  $onSourceChanged() {\r\n    this.$updateEffect(this.source);\r\n  }\r\n  $updateFilterObject() {\r\n    this.$filterObject = {\r\n      transformType: \"filter\",\r\n      operation: \"blur\",\r\n      parameters: `${this.radius}px`\r\n    };\r\n  }\r\n  $updateEffect(source) {\r\n    console.log(\"updating effect\");\r\n    if (this.$previousSource) {\r\n      const index = this.$previousSource.transform.indexOf(this.$filterObject);\r\n      this.$previousSource.transform.splice(index, 1);\r\n      this.$previousSource.$updateTransform();\r\n    }\r\n    if (source && source.transform) {\r\n      this.$updateFilterObject();\r\n      console.log(\"updating effect:\", this.$filterObject, source);\r\n      source.transform.push(this.$filterObject);\r\n      source.$updateTransform();\r\n      this.$previousSource = source;\r\n    } else {\r\n      this.$previousSource = null;\r\n    }\r\n  }\r\n}\r\nQmlWeb.registerQmlType(QtGraphicalEffects_FastBlur);\n","// eslint-disable-next-line no-undef\r\nclass QtGraphicalEffects_RectangularGlow extends QtQuick_Item {\r\n  static properties = {\r\n    cached: \"bool\",\r\n    color: { type: \"color\", initialValue: \"white\" },\r\n    cornerRadius: \"real\",\r\n    glowRadius: \"real\",\r\n    spread: \"real\"\r\n  };\r\n\r\n  constructor(meta) {\r\n    super(meta);\r\n\r\n    this.impl = document.createElement(\"div\");\r\n    const style = this.impl.style;\r\n    style.pointerEvents = \"none\";\r\n    style.position = \"absolute\";\r\n    style.left = style.right = style.top = style.bottom = \"0px\";\r\n    style.border = \"none\";\r\n    style.backgroundColor = this.color.$css;\r\n    this.dom.appendChild(this.impl);\r\n\r\n    this.colorChanged.connect(this, this.$onColorChanged);\r\n    this.glowRadiusChanged.connect(this, this.$updateBoxShadow);\r\n    this.cornerRadiusChanged.connect(this, this.$updateBoxShadow);\r\n    this.widthChanged.connect(this, this.$updateBoxShadow);\r\n    this.heightChanged.connect(this, this.$updateBoxShadow);\r\n    this.spreadChanged.connect(this, this.$onSpreadChanged);\r\n  }\r\n  $onColorChanged(newVal) {\r\n    this.impl.style.backgroundColor = newVal.$css;\r\n    this.$updateBoxShadow();\r\n  }\r\n  $onSpreadChanged(newVal) {\r\n    if (newVal > 1) {\r\n      this.spread = 1;\r\n    } else if (newVal < 0) {\r\n      this.spread = 0;\r\n    }\r\n    this.$updateBoxShadow();\r\n  }\r\n  $updateBoxShadow() {\r\n    const { color, glowRadius, cornerRadius, spread, width, height } = this;\r\n    const style = this.impl.style;\r\n\r\n    // Calculate boxShadow\r\n    const totle = glowRadius + cornerRadius * (1 - spread);\r\n    const glow = (1 - spread) * totle;\r\n    const blur_radius = glow * 0.64;\r\n    const spread_radius = totle - blur_radius;\r\n    const glow2 = glowRadius / 5;\r\n    const blur_radius_2 = glow2 * 0.8;\r\n    const spread_radius_2 = glow2 - blur_radius_2;\r\n\r\n    style.boxShadow = `${color} 0px 0px ${blur_radius}px ${spread_radius}px,` +\r\n      `${color} 0px 0px ${blur_radius_2}px ${spread_radius_2}px`;\r\n\r\n    // Calculate glow css\r\n    const spread_cornerR = cornerRadius * (1 - spread);\r\n    const rest_cornerR = cornerRadius - spread_cornerR;\r\n    const xScale = (width - spread_cornerR / 4) / width;\r\n    const yScale = (height - spread_cornerR / 4) / height;\r\n\r\n    style.width = `${width - spread_cornerR}px`;\r\n    style.height = `${height - spread_cornerR}px`;\r\n    style.top = `${spread_cornerR / 2}px`;\r\n    style.left = `${spread_cornerR / 2}px`;\r\n    style.filter = `blur(${spread_cornerR / 2}px)`;\r\n    style.borderRadius = `${rest_cornerR / 2}px`;\r\n    style.transform = `scale(${xScale},${yScale})`;\r\n  }\r\n}\r\nQmlWeb.registerQmlType(QtGraphicalEffects_RectangularGlow);\n","// eslint-disable-next-line no-undef\r\nclass QtMobility_GeoLocation extends QtQuick_Item {\r\n  static properties = {\r\n    accuracy: \"double\",\r\n    altitude: \"double\",\r\n    altitudeAccuracy: \"double\",\r\n    heading: \"double\",\r\n    latitude: \"double\",\r\n    longitude: \"double\",\r\n    speed: \"double\",\r\n    timestamp: \"date\",\r\n    label: \"string\"\r\n  };\r\n\r\n  constructor(meta) {\r\n    super(meta);\r\n\r\n    if (!navigator.geolocation) {\r\n      return;\r\n    }\r\n\r\n    navigator.geolocation.getCurrentPosition(pos => this.$updatePosition(pos));\r\n    navigator.geolocation.watchPosition(pos => this.$updatePosition(pos));\r\n  }\r\n  $updatePosition(position) {\r\n    this.accuracy = position.coords.accuracy;\r\n    this.altitude = position.coords.altitude;\r\n    this.altitudeAccuracy = position.coords.altitudeAccuracy;\r\n    this.heading = position.coords.heading;\r\n    this.latitude = position.coords.latitude;\r\n    this.longitude = position.coords.longitude;\r\n    this.speed = position.coords.speed;\r\n    this.timestamp = position.timestamp;\r\n  }\r\n}\r\nQmlWeb.registerQmlType(QtMobility_GeoLocation);\n","// eslint-disable-next-line no-undef\r\nclass QtMultimedia_Video extends QtQuick_Item {\r\n  static versions = /^5\\./;\r\n  static enums = {\r\n    MediaPlayer: {\r\n      Available: 0, Busy: 2, Unavailable: 1, ResourceMissing: 3,\r\n\r\n      NoError: 0, ResourceError: 1, FormatError: 2, NetworkError: 4,\r\n      AccessDenied: 8, ServiceMissing: 16,\r\n\r\n      StoppedState: 0, PlayingState: 1, PausedState: 2,\r\n\r\n      NoMedia: 0, Loading: 1, Loaded: 2, Buffering: 4, Stalled: 8,\r\n      EndOfMedia: 16, InvalidMedia: 32, UnknownStatus: 64\r\n    },\r\n    VideoOutput: { PreserveAspectFit: 0, PreserveAspectCrop: 1, Stretch: 2 }\r\n  };\r\n  static properties = {\r\n    audioRole: \"enum\", // TODO\r\n    autoLoad: { type: \"bool\", initialValue: true },\r\n    autoPlay: \"bool\",\r\n    availability: \"enum\", // MediaPlayer.Available\r\n    bufferProgress: \"real\",\r\n    duration: \"int\",\r\n    error: \"enum\", // MediaPlayer.NoError\r\n    errorString: \"string\",\r\n    fillMode: \"enum\", // VideoOutput.PreserveAspectFit\r\n    hasAudio: \"bool\",\r\n    hasVideo: \"bool\",\r\n    muted: \"bool\",\r\n    orientation: \"int\",\r\n    playbackRate: { type: \"real\", initialValue: 1 },\r\n    playbackState: \"enum\", // MediaPlayer.StoppedState\r\n    position: \"int\",\r\n    seekable: \"bool\",\r\n    source: \"url\",\r\n    status: \"enum\", // MediaPlayer.NoMedia\r\n    volume: \"real\"\r\n  };\r\n  static signals = {\r\n    paused: [],\r\n    playing: [],\r\n    stopped: []\r\n  };\r\n\r\n  constructor(meta) {\r\n    super(meta);\r\n\r\n    this.$runningEventListener = 0;\r\n\r\n    this.impl = document.createElement(\"video\");\r\n    this.impl.style.width = this.impl.style.height = \"100%\";\r\n    this.impl.style.margin = \"0\";\r\n    this.dom.appendChild(this.impl);\r\n\r\n    this.volume = this.impl.volume;\r\n    this.duration = this.impl.duration;\r\n\r\n    this.impl.addEventListener(\"play\", () => {\r\n      this.playing();\r\n      this.playbackState = this.MediaPlayer.PlayingState;\r\n    });\r\n\r\n    this.impl.addEventListener(\"pause\", () => {\r\n      this.paused();\r\n      this.playbackState = this.MediaPlayer.PausedState;\r\n    });\r\n\r\n    this.impl.addEventListener(\"timeupdate\", () => {\r\n      this.$runningEventListener++;\r\n      this.position = this.impl.currentTime * 1000;\r\n      this.$runningEventListener--;\r\n    });\r\n\r\n    this.impl.addEventListener(\"ended\", () => {\r\n      this.stopped();\r\n      this.playbackState = this.MediaPlayer.StoppedState;\r\n    });\r\n\r\n    this.impl.addEventListener(\"progress\", () => {\r\n      if (this.impl.buffered.length > 0) {\r\n        this.progress = this.impl.buffered.end(0) / this.impl.duration;\r\n        this.status = this.progress < 1 ?\r\n          this.MediaPlayer.Buffering :\r\n          this.MediaPlayer.Buffered;\r\n      }\r\n    });\r\n\r\n    this.impl.addEventListener(\"stalled\", () => {\r\n      this.status = this.MediaPlayer.Stalled;\r\n    });\r\n\r\n    this.impl.addEventListener(\"canplaythrough\", () => {\r\n      this.status = this.MediaPlayer.Buffered;\r\n    });\r\n\r\n    this.impl.addEventListener(\"loadstart\", () => {\r\n      this.status = this.MediaPlayer.Loading;\r\n    });\r\n\r\n    this.impl.addEventListener(\"durationchanged\", () => {\r\n      this.duration = this.impl.duration;\r\n    });\r\n\r\n    this.impl.addEventListener(\"volumechanged\", () => {\r\n      this.$runningEventListener++;\r\n      this.volume = this.impl.volume;\r\n      this.$runningEventListener--;\r\n    });\r\n\r\n    this.impl.addEventListener(\"suspend\", () => {\r\n      this.error |= this.MediaPlayer.NetworkError;\r\n    });\r\n\r\n    this.impl.addEventListener(\"error\", () => {\r\n      this.error |= this.MediaPlayer.ResourceError;\r\n    });\r\n\r\n    this.impl.addEventListener(\"ratechange\", () => {\r\n      this.$runningEventListener++;\r\n      this.playbackRate = this.impl.playbackRate;\r\n      this.$runningEventListener--;\r\n    });\r\n\r\n    this.autoPlayChanged.connect(this, this.$onAutoPlayChanged);\r\n    this.sourceChanged.connect(this, this.$onSourceChanged);\r\n    this.positionChanged.connect(this, this.$onPositionChanged);\r\n    this.volumeChanged.connect(this, this.$onVolumeChanged);\r\n    this.playbackRateChanged.connect(this, this.$onPlaybackRateChanged);\r\n    this.mutedChanged.connect(this, this.$onMutedChanged);\r\n    this.fillModeChanged.connect(this, this.$onFillModeChanged);\r\n  }\r\n  $onAutoPlayChanged(newVal) {\r\n    this.impl.autoplay = newVal;\r\n  }\r\n  $onSourceChanged(source) {\r\n    const parts = source.split(\".\");\r\n    const extension = parts[parts.length - 1].toLowerCase();\r\n    const mime = this.mimetypeFromExtension(extension);\r\n    this.impl.src = source;\r\n    if (!this.impl.canPlayType(mime)) {\r\n      this.error |= this.MediaPlayer.FormatError;\r\n    }\r\n  }\r\n  $onPositionChanged(currentTime) {\r\n    if (this.$runningEventListener > 0) return;\r\n    this.impl.currentTime = currentTime / 1000;\r\n  }\r\n  $onVolumeChanged(volume) {\r\n    if (this.$runningEventListener > 0) return;\r\n    this.impl.volume = volume;\r\n  }\r\n  $onPlaybackRateChanged(playbackRate) {\r\n    if (this.$runningEventListener > 0) return;\r\n    this.impl.playbackRate = playbackRate;\r\n  }\r\n  $onMutedChanged(newValue) {\r\n    if (newValue) {\r\n      this.$volulmeBackup = this.impl.volume;\r\n      this.volume = 0;\r\n    } else {\r\n      this.volume = this.$volumeBackup;\r\n    }\r\n  }\r\n  $onFillModeChanged(newValue) {\r\n    switch (newValue) {\r\n      case this.VideoOutput.Stretch:\r\n        this.impl.style.objectFit = \"fill\";\r\n        break;\r\n      case this.VideoOutput.PreserveAspectFit:\r\n        this.impl.style.objectFit = \"\";\r\n        break;\r\n      case this.VideoOutput.PreserveAspectCrop:\r\n        this.impl.style.objectFit = \"cover\";\r\n        break;\r\n    }\r\n  }\r\n  pause() {\r\n    this.impl.pause();\r\n  }\r\n  play() {\r\n    this.impl.play();\r\n  }\r\n  seek(offset) {\r\n    this.impl.currentTime = offset * 1000;\r\n  }\r\n  stop() {\r\n  }\r\n  mimetypeFromExtension(extension) {\r\n    const mimetypes = {\r\n      ogg: \"video/ogg\",\r\n      ogv: \"video/ogg\",\r\n      ogm: \"video/ogg\",\r\n      mp4: \"video/mp4\",\r\n      webm: \"video/webm\"\r\n    };\r\n    return mimetypes[extension] || \"\";\r\n  }\r\n}\r\nQmlWeb.registerQmlType(QtMultimedia_Video);\n","// eslint-disable-next-line no-undef\r\nclass QtMultimedia_VideoOutput extends QtQuick_Item {\r\n  static versions = /^5\\./;\r\n  static enums = {\r\n    VideoOutput: { PreserveAspectFit: 0, PreserveAspectCrop: 1, Stretch: 2 }\r\n  };\r\n  static properties = {\r\n    autoOrientation: \"bool\",\r\n    contentRect: \"rect\",\r\n    fillMode: \"enum\", // VideoOutput.PreserveAspectFit\r\n    filters: \"list\",\r\n    orientation: \"int\",\r\n    source: \"variant\",\r\n    sourceRect: \"rect\"\r\n  };\r\n\r\n  // TODO: impl\r\n}\r\nQmlWeb.registerQmlType(QtMultimedia_VideoOutput);\n","// eslint-disable-next-line no-undef\r\nclass QtQuick_Controls_2_Control extends QtQuick_Item {\r\n  static versions = /^2\\./;\r\n  static properties = {\r\n    availableHeight: \"real\",\r\n    availableWidth: \"real\",\r\n    background: \"Item\",\r\n    bottomPadding: \"real\",\r\n    contentItem: \"Item\",\r\n    focusPolicy: \"enum\",\r\n    focusReason: \"enum\",\r\n    font: \"font\",\r\n    hoverEnabled: \"bool\",\r\n    hovered: \"bool\",\r\n    leftPadding: \"real\",\r\n    locale: \"Locale\",\r\n    mirrored: \"bool\",\r\n    padding: \"real\",\r\n    palette: \"palette\",\r\n    rightPadding: \"real\",\r\n    spacing: \"real\",\r\n    topPadding: \"real\",\r\n    visualFocus: \"bool\",\r\n    wheelEnabled: \"bool\"\r\n  };\r\n\r\n  // TODO\r\n}\r\nQmlWeb.registerQmlType(QtQuick_Controls_2_Control);\n","// eslint-disable-next-line no-undef\r\nclass QtQuick_Controls_2_AbstractButton extends QtQuick_Controls_2_Control {\r\n  static versions = /^2\\./;\r\n  static properties = {\r\n    action: \"Action\",\r\n    autoExclusive: \"bool\",\r\n    checkable: \"bool\",\r\n    checked: \"bool\",\r\n    display: \"enum\",\r\n    // icon is defined manually\r\n    down: \"bool\",\r\n    indicator: \"Item\",\r\n    pressed: \"bool\",\r\n    text: \"string\"\r\n  };\r\n\r\n  constructor(meta) {\r\n    super(meta);\r\n\r\n    this.icon = new QmlWeb.QObject(this);\r\n    QmlWeb.createProperties(this.icon, {\r\n      name: \"string\",\r\n      source: \"url\",\r\n      width: \"int\",\r\n      height: \"int\",\r\n      color: \"color\"\r\n    });\r\n\r\n    // TODO\r\n  }\r\n}\r\nQmlWeb.registerQmlType(QtQuick_Controls_2_AbstractButton);\n","// eslint-disable-next-line no-undef\r\nclass QtQuick_Controls_2_Container extends QtQuick_Controls_2_Control {\r\n  static versions = /^2\\./;\r\n  static properties = {\r\n    contentChildren: \"list\",\r\n    contentData: \"list\",\r\n    contentModel: \"model\",\r\n    count: \"int\",\r\n    currentIndex: \"int\",\r\n    currentItem: \"Item\"\r\n  };\r\n\r\n  constructor(meta) {\r\n    super(meta);\r\n\r\n    this.widthChanged.connect(this, this.layoutChildren);\r\n    this.heightChanged.connect(this, this.layoutChildren);\r\n    this.childrenChanged.connect(this, this.layoutChildren);\r\n    this.childrenChanged.connect(this, this.$onChildrenChanged);\r\n    this.layoutChildren();\r\n  }\r\n  $onChildrenChanged() {\r\n    const flags = QmlWeb.Signal.UniqueConnection;\r\n    for (let i = 0; i < this.children.length; i++) {\r\n      const child = this.children[i];\r\n      child.widthChanged.connect(this, this.layoutChildren, flags);\r\n      child.heightChanged.connect(this, this.layoutChildren, flags);\r\n      child.visibleChanged.connect(this, this.layoutChildren, flags);\r\n    }\r\n  }\r\n  layoutChildren() {\r\n    // noop, defined in individual positioners\r\n  }\r\n}\r\nQmlWeb.registerQmlType(QtQuick_Controls_2_Container);\n","// eslint-disable-next-line no-undef\r\nclass QtQuick_Controls_2_Page extends QtQuick_Controls_2_Control {\r\n  static versions = /^2\\./;\r\n  static properties = {\r\n    contentChildren: \"list\",\r\n    contentData: \"list\",\r\n    contentHeight: \"real\",\r\n    contentWidth: \"real\",\r\n    footer: \"Item\",\r\n    header: \"Item\",\r\n    title: \"string\"\r\n  };\r\n\r\n  // TODO\r\n}\r\nQmlWeb.registerQmlType(QtQuick_Controls_2_Page);\n","// eslint-disable-next-line no-undef\r\nclass QtQuick_Controls_2_SwipeView extends QtQuick_Controls_2_Container {\r\n  static versions = /^2\\./;\r\n  static properties = {\r\n    horizontal: \"bool\",\r\n    interactive: \"bool\",\r\n    orientation: \"enum\",\r\n    vertical: \"bool\"\r\n  };\r\n\r\n  // TODO\r\n\r\n  layoutChildren() {\r\n    let pos = 0;\r\n    for (let i = 0; i < this.children.length; i++) {\r\n      const child = this.children[i];\r\n      if (!child.visible) continue;\r\n      child.height = this.height;\r\n      child.width = this.width;\r\n      child.x = pos;\r\n      pos += child.width;\r\n    }\r\n  }\r\n}\r\nQmlWeb.registerQmlType(QtQuick_Controls_2_SwipeView);\n","// eslint-disable-next-line no-undef\r\nclass QtQuick_Controls_2_TabBar extends QtQuick_Controls_2_Container {\r\n  static versions = /^2\\./;\r\n  static properties = {\r\n    contentHeight: \"real\",\r\n    contentWidth: \"real\",\r\n    position: \"enum\"\r\n  };\r\n\r\n  // TODO\r\n}\r\nQmlWeb.registerQmlType(QtQuick_Controls_2_TabBar);\n","// eslint-disable-next-line no-undef\r\nclass QtQuick_Controls_2_TabButton extends QtQuick_Controls_2_AbstractButton {\r\n  static versions = /^2\\./;\r\n\r\n  // TODO\r\n}\r\nQmlWeb.registerQmlType(QtQuick_Controls_2_TabButton);\n","// eslint-disable-next-line no-undef\r\nclass QtQuick_Controls_Button extends QtQuick_Item {\r\n  static properties = {\r\n    text: \"string\",\r\n    enabled: { type: \"bool\", initialValue: true }\r\n  };\r\n  static signals = {\r\n    clicked: []\r\n  };\r\n\r\n  constructor(meta) {\r\n    super(meta);\r\n\r\n    this.Component.completed.connect(this, this.Component$onCompleted);\r\n    this.textChanged.connect(this, this.$onTextChanged);\r\n    this.enabledChanged.connect(this, this.$onEnabledChanged);\r\n\r\n    const button = this.impl = document.createElement(\"button\");\r\n    button.style.pointerEvents = \"auto\";\r\n    this.dom.appendChild(button);\r\n\r\n    button.onclick = () => {\r\n      this.clicked();\r\n    };\r\n  }\r\n  Component$onCompleted() {\r\n    this.implicitWidth = this.impl.offsetWidth;\r\n    this.implicitHeight = this.impl.offsetHeight;\r\n  }\r\n  $onTextChanged(newVal) {\r\n    this.impl.textContent = newVal;\r\n    //TODO: Replace those statically sized borders\r\n    this.implicitWidth = this.impl.offsetWidth;\r\n    this.implicitHeight = this.impl.offsetHeight;\r\n  }\r\n  $onEnabledChanged(newVal) {\r\n    this.impl.disabled = !newVal;\r\n  }\r\n}\r\nQmlWeb.registerQmlType(QtQuick_Controls_Button);\n","// eslint-disable-next-line no-undef\r\nclass QtQuick_Controls_CheckBox extends QtQuick_Item {\r\n  static properties = {\r\n    text: \"string\",\r\n    font: \"font\",\r\n    checked: \"bool\",\r\n    color: \"color\"\r\n  };\r\n\r\n  constructor(meta) {\r\n    super(meta);\r\n\r\n    this.impl = document.createElement(\"label\");\r\n    this.impl.style.pointerEvents = \"auto\";\r\n\r\n    const checkbox = document.createElement(\"input\");\r\n    checkbox.type = \"checkbox\";\r\n    checkbox.style.verticalAlign = \"text-bottom\";\r\n    checkbox.addEventListener(\"change\", () => {\r\n      this.checked = checkbox.checked;\r\n    });\r\n    this.impl.appendChild(checkbox);\r\n\r\n    const span = document.createElement(\"span\");\r\n    this.impl.appendChild(span);\r\n\r\n    this.dom.appendChild(this.impl);\r\n\r\n    this.Component.completed.connect(this, this.Component$onCompleted);\r\n    this.textChanged.connect(this, this.$onTextChanged);\r\n    this.colorChanged.connect(this, this.$onColorChanged);\r\n    this.checkedChanged.connect(this, this.$onCheckedChanged);\r\n  }\r\n  $onTextChanged(newVal) {\r\n    this.impl.children[1].innerHTML = newVal;\r\n    this.implicitHeight = this.impl.offsetHeight;\r\n    this.implicitWidth = this.impl.offsetWidth > 0 ?\r\n                          this.impl.offsetWidth + 4 :\r\n                          0;\r\n  }\r\n  $onColorChanged(newVal) {\r\n    this.impl.children[1].style.color = newVal.$css;\r\n  }\r\n  $onCheckedChanged() {\r\n    this.impl.children[0].checked = this.checked;\r\n  }\r\n  Component$onCompleted() {\r\n    this.implicitHeight = this.impl.offsetHeight;\r\n    this.implicitWidth = this.impl.offsetWidth > 0 ?\r\n                          this.impl.offsetWidth + 4 :\r\n                          0;\r\n  }\r\n}\r\nQmlWeb.registerQmlType(QtQuick_Controls_CheckBox);\n","// eslint-disable-next-line no-undef\r\nclass QtQuick_Controls_ComboBox extends QtQuick_Item {\r\n  static properties = {\r\n    count: \"int\",\r\n    currentIndex: \"int\",\r\n    currentText: \"string\",\r\n    menu: { type: \"array\", initialValue: [] },\r\n    model: { type: \"array\", initialValue: [] },\r\n    pressed: \"bool\"\r\n  };\r\n  static signals = {\r\n    accepted: [],\r\n    activated: [{ type: \"int\", name: \"index\" }]\r\n  };\r\n\r\n  constructor(meta) {\r\n    super(meta);\r\n\r\n    this.dom.style.pointerEvents = \"auto\";\r\n    this.name = \"QMLComboBox\";\r\n\r\n    // TODO change innerHTML to DOM\r\n    this.dom.innerHTML = \"<select></select>\";\r\n    this.impl = this.dom.firstChild;\r\n\r\n    this.Component.completed.connect(this, this.Component$onCompleted);\r\n    this.modelChanged.connect(this, this.$onModelChanged);\r\n    this.currentIndexChanged.connect(this, this.$onCurrentIndexChanged);\r\n    this.heightChanged.connect(this, this.$onHeightChanged);\r\n    this.widthChanged.connect(this, this.$onWidthChanged);\r\n\r\n    this.dom.onclick = () => {\r\n      const index = this.dom.firstChild.selectedIndex;\r\n      this.currentIndex = index;\r\n      this.currentText = this.model[index];\r\n      this.accepted();\r\n      this.activated(index);\r\n    };\r\n  }\r\n  find(text) {\r\n    return this.model.indexOf(text);\r\n  }\r\n  selectAll() {\r\n    // TODO\r\n  }\r\n  textAt(index) {\r\n    return this.model[index];\r\n  }\r\n  $updateImpl() {\r\n    this.count = this.model.length;\r\n\r\n    const k = this.count; const m = this.model;\r\n\r\n    this.impl.options.length = k;\r\n    for (let i = 0; i < k; i++) {\r\n      this.impl.options[i] = new Option(m[i]);\r\n    }\r\n\r\n    // should call this, because width()/heights() invoke updateV(H)Geometry,\r\n    // which in turn sets valid $useImplicitHeight flag\r\n    const h = this.height; const w = this.width;\r\n\r\n    this.implicitWidth = this.impl.offsetWidth;\r\n    this.implicitHeight = this.impl.offsetHeight;\r\n\r\n    this.$onHeightChanged(h);\r\n    this.$onWidthChanged(w);\r\n\r\n    this.impl.selectedIndex = this.currentIndex;\r\n    this.$updateCurrentText();\r\n  }\r\n  Component$onCompleted() {\r\n    this.$updateImpl();\r\n  }\r\n  $onModelChanged() {\r\n    this.$updateImpl();\r\n  }\r\n  $onCurrentIndexChanged() {\r\n    const i = this.currentIndex;\r\n    if (this.impl.selectedIndex !== i) {\r\n      this.impl.selectedIndex = i;\r\n      this.$updateCurrentText();\r\n      this.activated(i);\r\n    }\r\n  }\r\n  $updateCurrentText() {\r\n    if (typeof this.currentIndex === \"undefined\" || !this.model) {\r\n      this.currentText = undefined;\r\n    } else if (this.currentIndex >= 0 &&\r\n              this.currentIndex < this.model.length) {\r\n      this.currentText = this.model[ this.currentIndex ];\r\n    }\r\n  }\r\n  $onHeightChanged() {\r\n    if (this.height > 0 && this.impl\r\n     && this.height !== this.impl.offsetHeight) {\r\n      this.impl.style.height = `${this.height}px`;\r\n    }\r\n  }\r\n  $onWidthChanged() {\r\n    if (this.width > 0 && this.impl && this.width !== this.impl.offsetWidth) {\r\n      this.impl.style.width = `${this.width}px`;\r\n    }\r\n  }\r\n}\r\nQmlWeb.registerQmlType(QtQuick_Controls_ComboBox);\n","// eslint-disable-next-line no-undef\r\nclass QtQuick_Controls_ScrollView extends QtQuick_Item {\r\n  static properties = {\r\n    contentItem: \"Item\",\r\n    flickableItem: \"Item\", // TODO  0) implement it  1) make it read-only\r\n    viewport: \"Item\", // TODO\r\n    frameVisible: \"bool\",\r\n    highlightOnFocus: \"bool\", // TODO test\r\n    verticalScrollBarPolicy: \"enum\",\r\n    horizontalScrollBarPolicy: \"enum\",\r\n    style: \"Component\" // TODO\r\n  };\r\n  static defaultProperty = \"contentItem\";\r\n\r\n  constructor(meta) {\r\n    super(meta);\r\n\r\n    this.css.pointerEvents = \"auto\";\r\n    this.setupFocusOnDom(this.dom);\r\n\r\n    this.contentItemChanged.connect(this, this.$onContentItemChanged);\r\n    this.flickableItemChanged.connect(this, this.$onFlickableItemChanged);\r\n    this.viewportChanged.connect(this, this.$onViewportChanged);\r\n    this.frameVisibleChanged.connect(this, this.$onFrameVisibleChanged);\r\n    this.highlightOnFocusChanged.connect(this, this.$onHighlightOnFocusChanged);\r\n    this.horizontalScrollBarPolicyChanged.connect(this,\r\n                                      this.$onHorizontalScrollBarPolicyChanged);\r\n    this.verticalScrollBarPolicyChanged.connect(this,\r\n                                        this.$onVerticalScrollBarPolicyChanged);\r\n    this.styleChanged.connect(this, this.$onStyleChanged);\r\n    this.childrenChanged.connect(this, this.$onChildrenChanged);\r\n    this.focusChanged.connect(this, this.$onFocusChanged);\r\n\r\n    this.width = this.implicitWidth = 240; // default QML ScrollView width\r\n    this.height = this.implicitHeight = 150; // default QML ScrollView height\r\n    this.width = this.implicitWidth;\r\n    this.height = this.implicitHeight;\r\n\r\n    const Qt = QmlWeb.Qt;\r\n    this.contentItem = undefined;\r\n    this.flickableItem = undefined;\r\n    this.viewport = undefined;\r\n    this.frameVisible = false;\r\n    this.highlightOnFocus = false;\r\n\r\n    this.verticalScrollBarPolicy = Qt.ScrollBarAsNeeded;\r\n    this.horizontalScrollBarPolicy = Qt.ScrollBarAsNeeded;\r\n    this.style = undefined;\r\n\r\n    this.$onVerticalScrollBarPolicyChanged(this.verticalScrollBarPolicy);\r\n    this.$onHorizontalScrollBarPolicyChanged(this.horizontalScrollBarPolicy);\r\n  }\r\n  $onContentItemChanged(newItem) {\r\n    if (newItem) {\r\n      newItem.parent = this;\r\n    }\r\n  }\r\n  $onFlickableItemChanged() {\r\n  }\r\n  $onHighlightOnFocusChanged() {\r\n  }\r\n  $onViewportChanged() {\r\n  }\r\n  $onFocusChanged(focus) {\r\n    this.css.outline = this.highlight && focus\r\n      ? \"outline: lightblue solid 2px;\"\r\n      : \"\";\r\n  }\r\n  $onFrameVisibleChanged(visible) {\r\n    this.css.border = visible ? \"1px solid gray\" : \"hidden\";\r\n  }\r\n  $onHorizontalScrollBarPolicyChanged(newPolicy) {\r\n    this.css.overflowX = this.$scrollBarPolicyToCssOverflow(newPolicy);\r\n  }\r\n  $onVerticalScrollBarPolicyChanged(newPolicy) {\r\n    this.css.overflowY = this.$scrollBarPolicyToCssOverflow(newPolicy);\r\n  }\r\n  $onStyleChanged() {\r\n  }\r\n  $onChildrenChanged() {\r\n    if (typeof this.contentItem === \"undefined\" && this.children.length === 1) {\r\n      this.contentItem = this.children[0];\r\n    }\r\n  }\r\n  $scrollBarPolicyToCssOverflow(policy) {\r\n    const Qt = QmlWeb.Qt;\r\n    switch (policy) {\r\n      case Qt.ScrollBarAsNeeded:\r\n        return \"auto\";\r\n      case Qt.ScrollBarAlwaysOff:\r\n        return \"hidden\";\r\n      case Qt.ScrollBarAlwaysOn:\r\n        return \"scroll\";\r\n    }\r\n    return \"auto\";\r\n  }\r\n}\r\nQmlWeb.registerQmlType(QtQuick_Controls_ScrollView);\n","/**\r\n *\r\n * TextField is used to accept a line of text input.\r\n * Input constraints can be placed on a TextField item\r\n * (for example, through a validator or inputMask).\r\n * Setting echoMode to an appropriate value enables TextField\r\n * to be used for a password input field.\r\n *\r\n * Valid entries for echoMode and alignment are defined in TextInput.\r\n *\r\n */\r\n\r\n// eslint-disable-next-line no-undef\r\nclass QtQuick_Controls_TextField extends QtQuick_Item {\r\n  static enums = {\r\n    TextInput: { Normal: 0, Password: 1, NoEcho: 2, PasswordEchoOnEdit: 3 }\r\n  };\r\n  static properties = {\r\n    text: \"string\",\r\n    font: \"font\",\r\n    maximumLength: { type: \"int\", initialValue: -1 },\r\n    readOnly: \"bool\",\r\n    validator: \"var\",\r\n    echoMode: \"enum\" // TextInput.Normal\r\n  };\r\n  static signals = {\r\n    accepted: []\r\n  };\r\n\r\n  constructor(meta) {\r\n    super(meta);\r\n\r\n    const input = this.impl = document.createElement(\"input\");\r\n    input.type = \"text\";\r\n    input.disabled = true;\r\n    input.style.pointerEvents = \"auto\";\r\n    input.style.margin = \"0\";\r\n    input.style.width = \"100%\";\r\n    this.dom.appendChild(input);\r\n    this.setupFocusOnDom(input);\r\n    input.disabled = false;\r\n\r\n    this.Component.completed.connect(this, this.Component$onCompleted);\r\n    this.textChanged.connect(this, this.$onTextChanged);\r\n    this.echoModeChanged.connect(this, this.$onEchoModeChanged);\r\n    this.maximumLengthChanged.connect(this, this.$onMaximumLengthChanged);\r\n    this.readOnlyChanged.connect(this, this.$onReadOnlyChanged);\r\n    this.Keys.pressed.connect(this, this.Keys$onPressed);\r\n\r\n    this.impl.addEventListener(\"input\", () => this.$updateValue());\r\n  }\r\n  Component$onCompleted() {\r\n    this.implicitWidth = this.impl.offsetWidth;\r\n    this.implicitHeight = this.impl.offsetHeight;\r\n  }\r\n  $onTextChanged(newVal) {\r\n    // See TextInput for comments\r\n    if (this.impl.value !== newVal) {\r\n      this.impl.value = newVal;\r\n    }\r\n  }\r\n  $onEchoModeChanged(newVal) {\r\n    const TextInput = this.TextInput;\r\n    const input = this.impl;\r\n    switch (newVal) {\r\n      case TextInput.Normal:\r\n        input.type = \"text\";\r\n        break;\r\n      case TextInput.Password:\r\n        input.type = \"password\";\r\n        break;\r\n      case TextInput.NoEcho:\r\n        // Not supported, use password, that's nearest\r\n        input.type = \"password\";\r\n        break;\r\n      case TextInput.PasswordEchoOnEdit:\r\n        // Not supported, use password, that's nearest\r\n        input.type = \"password\";\r\n        break;\r\n    }\r\n  }\r\n  $onMaximumLengthChanged(newVal) {\r\n    this.impl.maxLength = newVal < 0 ? null : newVal;\r\n  }\r\n  $onReadOnlyChanged(newVal) {\r\n    this.impl.disabled = newVal;\r\n  }\r\n  Keys$onPressed(e) {\r\n    const Qt = QmlWeb.Qt;\r\n    const submit = e.key === Qt.Key_Return || e.key === Qt.Key_Enter;\r\n    if (submit && this.$testValidator()) {\r\n      this.accepted();\r\n      e.accepted = true;\r\n    }\r\n  }\r\n  $testValidator() {\r\n    if (this.validator) {\r\n      return this.validator.validate(this.text);\r\n    }\r\n    return true;\r\n  }\r\n  $updateValue() {\r\n    if (this.text !== this.impl.value) {\r\n      this.$canEditReadOnlyProperties = true;\r\n      this.text = this.impl.value;\r\n      this.$canEditReadOnlyProperties = false;\r\n    }\r\n  }\r\n}\r\nQmlWeb.registerQmlType(QtQuick_Controls_TextField);\n","// eslint-disable-next-line no-undef\r\nclass QtQuick_Layouts_ColumnLayout extends QtQuick_Item {\r\n  static versions = /^1\\./;\r\n  static properties = {\r\n    layoutDirection: \"enum\",\r\n    spacing: \"real\"\r\n  };\r\n\r\n  // TODO\r\n}\r\nQmlWeb.registerQmlType(QtQuick_Layouts_ColumnLayout);\n","// eslint-disable-next-line no-undef\r\nclass QtQuick_Layouts_GridLayout extends QtQuick_Item {\r\n  static versions = /^1\\./;\r\n  static properties = {\r\n    columnSpacing: \"real\",\r\n    columns: \"int\",\r\n    flow: \"enum\",\r\n    layoutDirection: \"enum\",\r\n    rowSpacing: \"real\",\r\n    rows: \"int\"\r\n  };\r\n\r\n  // TODO\r\n}\r\nQmlWeb.registerQmlType(QtQuick_Layouts_GridLayout);\n","// eslint-disable-next-line no-undef\r\nclass QtQuick_Layouts_RowLayout extends QtQuick_Item {\r\n  static versions = /^1\\./;\r\n  static properties = {\r\n    layoutDirection: \"enum\",\r\n    spacing: \"real\"\r\n  };\r\n\r\n  // TODO\r\n}\r\nQmlWeb.registerQmlType(QtQuick_Layouts_RowLayout);\n","// eslint-disable-next-line no-undef\r\nclass QtQuick_Layouts_StackLayout extends QtQuick_Item {\r\n  static versions = /^1\\./;\r\n  static properties = {\r\n    count: \"int\",\r\n    currentIndex: \"int\"\r\n  };\r\n\r\n  // TODO\r\n}\r\nQmlWeb.registerQmlType(QtQuick_Layouts_StackLayout);\n","// eslint-disable-next-line no-undef\r\nclass QtQuick_Particles_Emitter extends QtQuick_Item {\r\n  static versions = /^2\\./;\r\n  static properties = {\r\n    acceleration: \"StochasticDirection\",\r\n    emitRate: { type: \"real\", initialValue: 10 },\r\n    enabled: { type: \"bool\", initialValue: true },\r\n    endSize: { type: \"real\", initialValue: -1 },\r\n    group: \"string\",\r\n    lifeSpan: { type: \"int\", initialValue: 1000 },\r\n    lifeSpanVariation: \"int\",\r\n    maximumEmitted: { type: \"int\", initialValue: -1 },\r\n    shape: \"Shape\",\r\n    size: { type: \"real\", initialValue: 16 },\r\n    sizeVariation: \"real\",\r\n    startTime: \"int\",\r\n    system: \"ParticleSystem\",\r\n    velocity: \"StochasticDirection\",\r\n    velocityFromMovement: \"real\"\r\n  };\r\n  static signals = {\r\n    emitParticles: [{ type: \"Array\", name: \"particles\" }]\r\n  };\r\n\r\n  // TODO\r\n\r\n  burst(/*count, x, y*/) {\r\n    // TODO\r\n  }\r\n  pulse(duration) {\r\n    if (this.enabled) return;\r\n    this.enabled = true;\r\n    setTimeout(() => {\r\n      this.enabled = false;\r\n    }, duration);\r\n  }\r\n}\r\nQmlWeb.registerQmlType(QtQuick_Particles_Emitter);\n","// eslint-disable-next-line no-undef\r\nclass QtQuick_Particles_ParticlePainter extends QtQuick_Item {\r\n  static versions = /^2\\./;\r\n  static properties = {\r\n    groups: \"list\",\r\n    system: \"ParticleSystem\"\r\n  };\r\n\r\n  // TODO\r\n}\r\nQmlWeb.registerQmlType(QtQuick_Particles_ParticlePainter);\n","// eslint-disable-next-line no-undef, max-len\r\nclass QtQuick_Particles_CustomParticle extends QtQuick_Particles_ParticlePainter {\r\n  static versions = /^2\\./;\r\n  static properties = {\r\n    fragmentShader: \"string\",\r\n    vertexShader: \"string\"\r\n  };\r\n\r\n  // TODO\r\n}\r\nQmlWeb.registerQmlType(QtQuick_Particles_CustomParticle);\n","// eslint-disable-next-line no-undef\r\nclass QtQuick_Particles_ParticleSystem extends QtQuick_Item {\r\n  static versions = /^2\\./;\r\n  static properties = {\r\n    empty: \"bool\",\r\n    particleStates: \"list\",\r\n    paused: \"bool\",\r\n    running: { type: \"bool\", initialValue: true }\r\n  };\r\n\r\n  // TODO\r\n\r\n  pause() {\r\n    this.paused = true;\r\n  }\r\n  reset() {\r\n    // TODO\r\n  }\r\n  restart() {\r\n    this.running = false;\r\n    this.running = true;\r\n  }\r\n  resume() {\r\n    this.paused = false;\r\n  }\r\n  start() {\r\n    this.running = true;\r\n  }\r\n  stop() {\r\n    this.running = false;\r\n  }\r\n}\r\nQmlWeb.registerQmlType(QtQuick_Particles_ParticleSystem);\n","// eslint-disable-next-line no-undef\r\nclass QtQuick_Window_Window extends QtQuick_Item {\r\n  static versions = /^2\\./;\r\n  static properties = {\r\n    active: \"bool\",\r\n    activeFocusItem: \"Item\",\r\n    color: { type: \"color\", initialValue: \"#ffffff\" },\r\n    //contentItem: \"Item\", // TODO\r\n    contentOrientation: \"enum\",\r\n    flags: \"int\",\r\n    maximumHeight: \"int\",\r\n    maximumWidth: \"int\",\r\n    minimumHeight: \"int\",\r\n    minimumWidth: \"int\",\r\n    modality: \"enum\",\r\n    title: \"string\",\r\n    visibility: \"enum\"\r\n  };\r\n  static signals = {\r\n    closing: [{ type: \"CloseEvent\", name: \"close\" }]\r\n  };\r\n\r\n  constructor(meta) {\r\n    super(meta);\r\n\r\n    this.colorChanged.connect(this, this.$onColorChanged);\r\n  }\r\n  $onColorChanged(newVal) {\r\n    this.dom.style.backgroundColor = newVal.$css;\r\n  }\r\n}\r\nQmlWeb.registerQmlType(QtQuick_Window_Window);\n","// eslint-disable-next-line no-undef\r\nclass QtQuick_Controls_2_ApplicationWindow extends QtQuick_Window_Window {\r\n  static versions = /^2\\./;\r\n  static properties = {\r\n    font: \"font\",\r\n    activeFocusControl: \"Control\",\r\n    background: \"Item\",\r\n    contentData: \"list\",\r\n    //contentItem: \"ContentItem\", // TODO\r\n    footer: \"Item\",\r\n    header: \"Item\",\r\n    overlay: \"Item\"\r\n  };\r\n\r\n  // TODO\r\n}\r\nQmlWeb.registerQmlType(QtQuick_Controls_2_ApplicationWindow);\n","// eslint-disable-next-line no-undef\r\nclass QtQuick_Controls_ApplicationWindow extends QtQuick_Window_Window {\r\n  static versions = /^1\\./;\r\n  static properties = {\r\n    //contentItem: \"ContentItem\", // TODO\r\n    menuBar: \"MenuBar\",\r\n    statusBar: \"Item\",\r\n    style: \"Component\",\r\n    toolBar: \"Item\"\r\n  };\r\n\r\n  // TODO\r\n}\r\nQmlWeb.registerQmlType(QtQuick_Controls_ApplicationWindow);\n","// eslint-disable-next-line no-undef\r\nclass QtQuick_BorderImage extends QtQuick_Item {\r\n  static enums = {\r\n    BorderImage: {\r\n      Stretch: \"stretch\", Repeat: \"repeat\", Round: \"round\",\r\n      Null: 1, Ready: 2, Loading: 3, Error: 4\r\n    }\r\n  };\r\n  static properties = {\r\n    source: \"url\",\r\n    smooth: { type: \"bool\", initialValue: true },\r\n    // BorderImage.Stretch\r\n    horizontalTileMode: { type: \"enum\", initialValue: \"stretch\" },\r\n    // BorderImage.Stretch\r\n    verticalTileMode: { type: \"enum\", initialValue: \"stretch\" },\r\n    progress: \"real\",\r\n    status: { type: \"enum\", initialValue: 1 } // BorderImage.Null\r\n  };\r\n\r\n  constructor(meta) {\r\n    super(meta);\r\n\r\n    this.border = new QmlWeb.QObject(this);\r\n    QmlWeb.createProperties(this.border, {\r\n      left: \"int\",\r\n      right: \"int\",\r\n      top: \"int\",\r\n      bottom: \"int\"\r\n    });\r\n\r\n    const bg = this.impl = document.createElement(\"div\");\r\n    bg.style.pointerEvents = \"none\";\r\n    bg.style.height = \"100%\";\r\n    bg.style.boxSizing = \"border-box\";\r\n    this.dom.appendChild(bg);\r\n\r\n    this.$img = new Image();\r\n    this.$img.addEventListener(\"load\", () => {\r\n      this.progress = 1;\r\n      this.status = this.BorderImage.Ready;\r\n    });\r\n    this.$img.addEventListener(\"error\", () => {\r\n      this.status = this.BorderImage.Error;\r\n    });\r\n\r\n    this.sourceChanged.connect(this, this.$onSourceChanged);\r\n    this.border.leftChanged.connect(this, this.$updateBorder);\r\n    this.border.rightChanged.connect(this, this.$updateBorder);\r\n    this.border.topChanged.connect(this, this.$updateBorder);\r\n    this.border.bottomChanged.connect(this, this.$updateBorder);\r\n    this.horizontalTileModeChanged.connect(this, this.$updateBorder);\r\n    this.verticalTileModeChanged.connect(this, this.$updateBorder);\r\n    this.smoothChanged.connect(this, this.$onSmoothChanged);\r\n  }\r\n  $onSourceChanged(source) {\r\n    this.progress = 0;\r\n    this.status = this.BorderImage.Loading;\r\n    const style = this.impl.style;\r\n    const imageURL = QmlWeb.engine.$resolveImageURL(source);\r\n    style.OBorderImageSource = `url(\"${imageURL}\")`;\r\n    style.borderImageSource = `url(\"${imageURL}\")`;\r\n    this.$img.src = imageURL;\r\n    if (this.$img.complete) {\r\n      this.progress = 1;\r\n      this.status = this.BorderImage.Ready;\r\n    }\r\n  }\r\n  $updateBorder() {\r\n    const style = this.impl.style;\r\n    const { right, left, top, bottom } = this.border;\r\n    const slice = `${top} ${right} ${bottom} ${left} fill`;\r\n    const width = `${top}px ${right}px ${bottom}px ${left}px`;\r\n    const repeat = `${this.horizontalTileMode} ${this.verticalTileMode}`;\r\n    style.OBorderImageSlice = slice;\r\n    style.OBorderImageRepeat = repeat;\r\n    style.OBorderImageWidth = width;\r\n    style.borderImageSlice = slice;\r\n    style.borderImageRepeat = repeat;\r\n    style.borderImageWidth = width;\r\n  }\r\n  $onSmoothChanged(val) {\r\n    const style = this.impl.style;\r\n    if (val) {\r\n      style.imageRendering = \"auto\";\r\n    } else {\r\n      style.imageRendering = \"-webkit-optimize-contrast\";\r\n      style.imageRendering = \"-moz-crisp-edges\";\r\n      style.imageRendering = \"crisp-edges\";\r\n      style.imageRendering = \"pixelated\";\r\n    }\r\n  }\r\n}\r\nQmlWeb.registerQmlType(QtQuick_BorderImage);\n","// TODO\r\n// Currently only a skeleton implementation\r\n\r\n// eslint-disable-next-line no-undef\r\nclass QtQuick_Canvas extends QtQuick_Item {\r\n  static properties = {\r\n    available: { type: \"bool\", initialValue: true },\r\n    canvasSize: { type: \"var\", initialValue: [0, 0] },\r\n    canvasWindow: { type: \"var\", initialValue: [0, 0, 0, 0] },\r\n    context: { type: \"var\", initialValue: {} },\r\n    contextType: { type: \"string\", initialValue: \"contextType\" },\r\n    renderStrategy: \"enum\",\r\n    renderTarget: \"enum\",\r\n    tileSize: { type: \"var\", initialValue: [0, 0] },\r\n  };\r\n  \r\n  static signals = {\r\n    imageLoaded: [],\r\n    paint: [{ type: \"var\", name: \"region\" }],\r\n    painted: []\r\n  };\r\n\r\n  constructor(meta) {\r\n    super(meta);\r\n\r\n    var canvas = this.impl = document.createElement(\"canvas\");\r\n    this.dom.appendChild(canvas);\r\n\r\n    this.widthChanged.connect(this, this.$updateWidth);\r\n    this.heightChanged.connect(this, this.$updateHeight);\r\n    this.Component.completed.connect(this, this.$completed);\r\n  }\r\n\r\n  \r\n  $updateWidth(val){\r\n    this.width = val\r\n    this.impl.style.width = `${this.width}px`;\r\n  }\r\n  $updateHeight(val){\r\n    this.height = val\r\n    this.impl.style.height = `${this.height}px`;\r\n  }  \r\n\r\n  $completed(){\r\n    this.impl.width = this.width\r\n    this.impl.height = this.height\r\n\r\n    this.paint()\r\n  }\r\n \r\n  cancelRequestAnimationFrame(/*handle*/) {\r\n    return false;\r\n  }\r\n  getContext(/*context_id, ...args*/) {\r\n    return this.impl.getContext('2d');\r\n  }\r\n  isImageError(/*image*/) {\r\n    return true;\r\n  }\r\n  isImageLoaded(/*image*/) {\r\n    return false;\r\n  }\r\n  isImageLoading(/*image*/) {\r\n    return false;\r\n  }\r\n  loadImage(image) {\r\n    //loadImageAsync(image);\r\n    if (this.isImageLoaded(image)) {\r\n      this.imageLoaded();\r\n    }\r\n  }\r\n  markDirty(area) {\r\n    // if dirty\r\n    this.paint(area);\r\n  }\r\n  requestAnimationFrame(/*callback*/) {\r\n    return 0;\r\n  }\r\n  requestPaint() {\r\n  }\r\n  save(/*file_name*/) {\r\n    return false;\r\n  }\r\n  toDataURL(/*mime_type*/) {\r\n    return \"\";\r\n  }\r\n  unloadImage(/*image*/) {\r\n  }\r\n}\r\nQmlWeb.registerQmlType(QtQuick_Canvas);\n","// eslint-disable-next-line no-undef\r\nclass QtQuick_DoubleValidator extends QtQuick_Item {\r\n  static enums = {\r\n    DoubleValidator: { StandardNotation: 1, ScientificNotation: 2 }\r\n  };\r\n  static properties = {\r\n    bottom: { type: \"real\", initialValue: -Infinity },\r\n    top: { type: \"real\", initialValue: Infinity },\r\n    decimals: { type: \"int\", initialValue: 1000 },\r\n    // DoubleValidator.ScientificNotation\r\n    notation: { type: \"enum\", initialValue: 2 }\r\n  };\r\n\r\n  constructor(meta) {\r\n    super(meta);\r\n    this.$standardRegExp = /^(-|\\+)?\\s*[0-9]+(\\.[0-9]+)?$/;\r\n    this.$scientificRegExp = /^(-|\\+)?\\s*[0-9]+(\\.[0-9]+)?(E(-|\\+)?[0-9]+)?$/;\r\n  }\r\n  getRegExpForNotation(notation) {\r\n    switch (notation) {\r\n      case this.DoubleValidator.ScientificNotation:\r\n        return this.$scientificRegExp;\r\n      case this.DoubleValidator.StandardNotation:\r\n        return this.$standardRegExp;\r\n    }\r\n    return null;\r\n  }\r\n  $getDecimalsForNumber(number) {\r\n    if (Math.round(number) === number) {\r\n      return 0;\r\n    }\r\n    const str = `${number}`;\r\n    return /\\d*$/.exec(str)[0].length;\r\n  }\r\n  validate(string) {\r\n    const regExp = this.getRegExpForNotation(this.notation);\r\n    if (!regExp.test(string.trim())) {\r\n      return false;\r\n    }\r\n    const value = parseFloat(string);\r\n    return this.bottom <= value && this.top >= value &&\r\n           this.$getDecimalsForNumber(value) <= this.decimals;\r\n  }\r\n}\r\nQmlWeb.registerQmlType(QtQuick_DoubleValidator);\n","// eslint-disable-next-line no-undef\r\nclass QtQuick_Flickable extends QtQuick_Item {\r\n    static enums = {\r\n        Flickable: { \r\n            AutoFlickDirection: 0,\r\n            AutoFlickIfNeeded: 1,\r\n            HorizontalFlick: 2,\r\n            VerticalFlick: 3,\r\n            HorizontalAndVerticalFlick: 4,\r\n        }\r\n      };\r\n    static properties = {\r\n        contentHeight: \"real\",\r\n        contentWidth: \"real\",\r\n        contentX: \"real\",\r\n        contentY: \"real\",\r\n        flickableDirection: { type: \"enum\", initialValue: 0 },\r\n    };\r\n  \r\n    constructor(meta) {\r\n      super(meta);\r\n        this.parent = meta.parent;\r\n        this.dom.style.pointerEvents = \"all\";\r\n        this.dom.style.overflow = \"auto\";\r\n\r\n        const bg = this.impl = document.createElement(\"div\");\r\n        bg.style.pointerEvents = \"none\";\r\n        bg.style.position = \"absolute\";\r\n        bg.style.left = bg.style.right = bg.style.top = bg.style.bottom = \"0px\";\r\n        bg.style.background = \"none\";\r\n        this.dom.appendChild(bg);\r\n\r\n\r\n        this.isDragging = false;\r\n        this.mouseIsDown = false;\r\n        this.curSX = 0;\r\n        this.curSY = 0;\r\n        this.dom.addEventListener(\"mousedown\", (e) => {\r\n            e.stopPropagation();\r\n            e.preventDefault();\r\n            this.mouseIsDown = true;\r\n            this.curSX = e.pageX;\r\n            this.curSY = e.pageY;\r\n\r\n            this.dom.classList.add(\"unselectable\");\r\n        });\r\n        this.dom.addEventListener(\"mouseup\", (e) => {\r\n            e.stopPropagation();\r\n            e.preventDefault();\r\n            setTimeout(() => {this.$onAllMouseEvent()}, 100);\r\n            this.isDragging = false;\r\n            this.mouseIsDown = false;\r\n            this.dom.classList.remove(\"unselectable\");\r\n        });\r\n        this.dom.addEventListener(\"mouseleave\", (e) => {\r\n            e.stopPropagation();\r\n            e.preventDefault();\r\n            setTimeout(() => {this.$onAllMouseEvent()}, 100);\r\n            this.isDragging = false;\r\n            this.mouseIsDown = false;\r\n            this.dom.classList.remove(\"unselectable\");\r\n        });\r\n        this.dom.addEventListener(\"mousemove\", (e) => {\r\n            e.stopPropagation();\r\n            e.preventDefault();\r\n            if (this.mouseIsDown && this.enabled) {\r\n                this.$offAllMouseEvent();\r\n                this.isDragging = true;\r\n\r\n                switch(this.flickableDirection){\r\n                    case Flickable.AutoFlickDirection:\r\n                        if(this.contentHeight != this.height) this.dom.scrollBy(0, this.curSY - e.pageY);\r\n                        if(this.contentWidth != this.width) this.dom.scrollBy(this.curSX - e.pageX, 0);\r\n                        break;\r\n                    case Flickable.AutoFlickIfNeeded:\r\n                        if(this.contentHeight >= this.height) this.dom.scrollBy(0, this.curSY - e.pageY);\r\n                        if(this.contentWidth >= this.width) this.dom.scrollBy(this.curSX - e.pageX, 0);\r\n                        break;\r\n                    case Flickable.HorizontalFlick:\r\n                        this.dom.scrollBy(this.curSX - e.pageX, 0);\r\n                        break;\r\n                    case Flickable.VerticalFlick:\r\n                        this.dom.scrollBy(0, this.curSY - e.pageY);\r\n                        break;\r\n                    case Flickable.HorizontalAndVerticalFlick:\r\n                        this.dom.scrollBy(this.curSX - e.pageX, this.curSY - e.pageY);\r\n                        break;\r\n                }\r\n                this.contentX = this.dom.scrollLeft;\r\n                this.contentY = this.dom.scrollTop;\r\n                this.curSX = e.pageX;\r\n                this.curSY = e.pageY;\r\n            }\r\n        });\r\n        this.dom.addEventListener(\"wheel\", (e) => {\r\n            e.stopPropagation();\r\n            e.preventDefault();\r\n            this.$calcContentXY(e.deltaX, e.deltaY);\r\n        });\r\n        this.dom.addEventListener(\"scroll\", (e) => {\r\n            e.stopPropagation();\r\n            e.preventDefault();\r\n          });\r\n\r\n        this.contentHeightChanged.connect(this, this.$contentHeightChanged);\r\n        this.contentWidthChanged.connect(this, this.$contentWidthChanged);\r\n        this.contentXChanged.connect(this, this.$contentXChanged);\r\n        this.contentYChanged.connect(this, this.$contentYChanged);\r\n        this.flickableDirectionChanged.connect(this, this.$flickableDirectionChanged);\r\n\r\n        this.Component.completed.connect(this, this.Component$onCompleted);\r\n    }\r\n    Component$onCompleted(){\r\n        this.$flickableDirectionChanged();\r\n        this.$contentHeightChanged();\r\n        this.$contentWidthChanged();\r\n        this.dom.scrollTo(this.contentX, this.contentY);\r\n    }\r\n    $calcContentXY(deltaX, deltaY){\r\n        if(this.enabled){\r\n            let p = this.$firstParentForWheel()\r\n            var limitH = Math.max(this.dom.clientHeight, this.dom.scrollHeight, this.dom.offsetHeight);\r\n            var limitW = Math.max(this.dom.clientWidth, this.dom.scrollWidth, this.dom.offsetWidth);\r\n\r\n            if (this.orientation === Qt.Horizontal) {\r\n            if(this.contentX + deltaX > limitW - this.width) {\r\n                this.contentX = limitW - this.width;\r\n                if(p) {\r\n                if(this.mouseIsDown) p.enabled = true\r\n                p.$calcContentXY(deltaX, deltaY)\r\n                }\r\n            } else\r\n            if(this.contentX + deltaX < 0) {\r\n                this.contentX = 0;\r\n                if(p) {\r\n                if(this.mouseIsDown) p.enabled = true\r\n                p.$calcContentXY(deltaX, deltaY)\r\n                }\r\n            } else this.contentX += deltaX;\r\n            } else {\r\n            if(this.contentY + deltaY > limitH - this.height) {\r\n                this.contentY = limitH - this.height;\r\n                if(p) {\r\n                if(this.mouseIsDown) p.enabled = true\r\n                p.$calcContentXY(deltaX, deltaY)\r\n                }\r\n            } else\r\n            if(this.contentY + deltaY < 0) {\r\n                this.contentY = 0;\r\n                if(p) {\r\n                if(this.mouseIsDown) p.enabled = true\r\n                p.$calcContentXY(deltaX, deltaY)\r\n                }\r\n            } else this.contentY += deltaY;\r\n            }\r\n        }\r\n    }\r\n    $flickableDirectionChanged(){\r\n        this.dom.style.overflow = \"hidden\";\r\n        switch(this.flickableDirection){\r\n            case Flickable.AutoFlickDirection:\r\n                if(this.contentHeight != this.height) this.dom.style.overflowY = \"auto\";\r\n                if(this.contentWidth != this.width) this.dom.style.overflowX = \"auto\";\r\n                break;\r\n            case Flickable.AutoFlickIfNeeded:\r\n                if(this.contentHeight >= this.height) this.dom.style.overflowY = \"auto\";\r\n                if(this.contentWidth >= this.width) this.dom.style.overflowX = \"auto\";\r\n                break;\r\n            case Flickable.HorizontalFlick:\r\n                this.dom.style.overflowX = \"auto\";\r\n                break;\r\n            case Flickable.VerticalFlick:\r\n                this.dom.style.overflowY = \"auto\";\r\n                break;\r\n            case Flickable.HorizontalAndVerticalFlick:\r\n                this.dom.style.overflow = \"auto\";\r\n                break;\r\n\r\n        }\r\n    }\r\n    $contentHeightChanged(){\r\n        if(this.contentHeight === 0){\r\n            this.impl.style.height = `100%`;\r\n            this.impl.style.bottom = `0`;\r\n        } else {\r\n            this.impl.style.height = `${this.contentHeight}px`;\r\n            this.impl.style.bottom = `${this.contentHeight}px`;\r\n        }\r\n    }\r\n    $contentWidthChanged(){\r\n        if(this.contentWidth === 0){\r\n            this.impl.style.width = `100%`;\r\n            this.impl.style.right = `0`;\r\n        } else {\r\n            this.impl.style.width = `${this.contentWidth}px`;\r\n            this.impl.style.right = `${this.contentWidth}px`;\r\n        }\r\n        \r\n    }\r\n    $contentXChanged(){\r\n        this.dom.scrollTo(this.contentX, this.contentY);\r\n    }\r\n    $contentYChanged(){\r\n        this.dom.scrollTo(this.contentX, this.contentY);\r\n    }\r\n  }\r\n  QmlWeb.registerQmlType(QtQuick_Flickable);\n","// eslint-disable-next-line no-undef\r\nclass QtQuick_FocusScope extends QtQuick_Item {\r\n  // TODO\r\n}\r\nQmlWeb.registerQmlType(QtQuick_FocusScope);\n","// eslint-disable-next-line no-undef\r\nclass QtQuick_Gradient extends QtQuick_Item {\r\n    static properties = {\r\n        orientation: \"enum\",\r\n        stops: \"list\"\r\n    };\r\n    static defaultProperty = \"stops\";\r\n  \r\n    constructor(meta) {\r\n        super(meta);\r\n        this.Gradient = {\r\n            Vertical: Qt.Vertical,\r\n            Horizontal: Qt.Horizontal\r\n        }\r\n        \r\n        const bg = this.impl = document.createElement(\"div\");\r\n        bg.style.pointerEvents = \"none\";\r\n        bg.style.position = \"absolute\";\r\n        bg.style.background = \"none\";\r\n        bg.style.left = bg.style.right = bg.style.top = bg.style.bottom = \"0px\";\r\n\r\n        let firstChild = this.$parent.dom.firstChild;\r\n        if(firstChild && firstChild.nextSibling){\r\n            this.$parent.dom.insertBefore(bg, firstChild.nextSibling);\r\n        } else {\r\n            this.$parent.dom.appendChild(bg);\r\n        }\r\n\r\n        this.stopsChanged.connect(this, this.$stopsChanged)\r\n        this.orientationChanged.connect(this, this.$orientationChanged)\r\n    }\r\n    applyGradient(){\r\n        let g_temp = []\r\n        //old_pos = 0;\r\n        for(let i = 0; i < this.stops.length; i++){\r\n            g_temp.push(`${this.stops[i].color} ${this.stops[i].position*100}%`)\r\n        }\r\n\r\n        let g_str = 'none'\r\n        if(this.orientation === Qt.Vertical){\r\n            g_str = `linear-gradient(180deg, ${g_temp.join(',')})` \r\n        } else if(this.orientation === Qt.Horizontal){\r\n            g_str = `linear-gradient(90deg, ${g_temp.join(',')})`\r\n        }\r\n        \r\n        this.impl.style.background = g_str;\r\n    }\r\n    $stopsChanged(){\r\n        this.applyGradient()\r\n    }\r\n    $orientationChanged(){\r\n        this.applyGradient()\r\n    }\r\n\r\n  }\r\n  QmlWeb.registerQmlType(QtQuick_Gradient);\n","// eslint-disable-next-line no-undef\r\nclass QtQuick_Image extends QtQuick_Item {\r\n  static enums = {\r\n    Image: {\r\n      Stretch: 1, PreserveAspectFit: 2, PreserveAspectCrop: 3,\r\n      Tile: 4, TileVertically: 5, TileHorizontally: 6,\r\n\r\n      Null: 1, Ready: 2, Loading: 3, Error: 4\r\n    }\r\n  };\r\n  static properties = {\r\n    asynchronous: { type: \"bool\", initialValue: true },\r\n    cache: { type: \"bool\", initialValue: true },\r\n    smooth: { type: \"bool\", initialValue: true },\r\n    fillMode: { type: \"enum\", initialValue: 1 }, // Image.Stretch\r\n    mirror: \"bool\",\r\n    progress: \"real\",\r\n    source: \"url\",\r\n    status: { type: \"enum\", initialValue: 1 } // Image.Null\r\n  };\r\n\r\n  constructor(meta) {\r\n    super(meta);\r\n\r\n    this.sourceSize = new QmlWeb.QObject(this);\r\n    QmlWeb.createProperties(this.sourceSize, {\r\n      width: \"real\",\r\n      height: \"real\"\r\n    });\r\n\r\n    this.dom.style.inset = '0'\r\n    this.dom.style.textAlign = 'center'\r\n\r\n    this.impl = document.createElement(\"div\");\r\n    this.impl.style.pointerEvents = \"none\";\r\n    this.impl.style.height = \"100%\";\r\n    this.impl.style.width = \"100%\";\r\n    this.dom.appendChild(this.impl);\r\n\r\n\r\n    this.$img = new Image();\r\n    this.$img.addEventListener(\"load\", () => {\r\n      this.sourceSize.width = this.sourceSize.width > 0 ? this.sourceSize.width : this.$img.naturalWidth;\r\n      this.sourceSize.height = this.sourceSize.height > 0 ? this.sourceSize.height : this.$img.naturalHeight;\r\n      this.implicitWidth = this.sourceSize.width;\r\n      this.implicitHeight = this.sourceSize.height;\r\n      this.progress = 1;\r\n      this.status = this.Image.Ready;\r\n    });\r\n    this.$img.addEventListener(\"error\", () => {\r\n      this.status = this.Image.Error;\r\n    });\r\n\r\n    this.sourceChanged.connect(this, this.$onSourceChanged);\r\n    this.mirrorChanged.connect(this, this.$onMirrorChanged);\r\n    this.fillModeChanged.connect(this, this.$onFillModeChanged);\r\n    this.smoothChanged.connect(this, this.$onSmoothChanged);\r\n\r\n    this.sourceSize.widthChanged.connect(this, this.$sourceSizeWidthChanged)\r\n    this.sourceSize.heightChanged.connect(this, this.$sourceSizeHeightChanged)\r\n\r\n    this.Component.completed.connect(this, this.Component$onCompleted);\r\n  }\r\n  Component$onCompleted(){\r\n  }\r\n  $sourceSizeWidthChanged(){\r\n    this.$updateFillMode()\r\n  }\r\n  $sourceSizeHeightChanged(){\r\n    this.$updateFillMode()\r\n  }\r\n  $updateFillMode() {\r\n    const style = this.impl.style;\r\n    switch (this.fillMode) {\r\n      default:\r\n      case this.Image.Stretch:\r\n        style.backgroundRepeat = \"no-repeat\";\r\n        style.backgroundSize = `${this.sourceSize.width}px ${this.sourceSize.height}px`;\r\n        style.backgroundPosition = \"center\";\r\n        break;\r\n      case this.Image.Tile:\r\n        style.backgroundRepeat = \"repeat\";\r\n        style.backgroundSize = `${this.sourceSize.width}px ${this.sourceSize.height}px`;\r\n        style.backgroundPosition = \"top left\";\r\n        break;\r\n      case this.Image.PreserveAspectFit:\r\n        style.backgroundRepeat = \"no-repeat\";\r\n        style.backgroundSize = \"contain\";\r\n        style.backgroundPosition = \"center\";\r\n        break;\r\n      case this.Image.PreserveAspectCrop:\r\n        style.backgroundRepeat = \"no-repeat\";\r\n        style.backgroundSize = \"cover\";\r\n        style.backgroundPosition = \"center\";\r\n        break;\r\n      case this.Image.TileVertically:\r\n        style.backgroundRepeat = \"repeat-y\";\r\n        style.backgroundSize = `${this.sourceSize.width}px ${this.sourceSize.height}px`;\r\n        style.backgroundPosition = \"auto\";\r\n        break;\r\n      case this.Image.TileHorizontally:\r\n        style.backgroundRepeat = \"repeat-x\";\r\n        style.backgroundSize = `${this.sourceSize.width}px ${this.sourceSize.height}px`;\r\n        style.backgroundPosition = \"auto\";\r\n        break;\r\n    }\r\n  }\r\n  $onSourceChanged(source) {\r\n    this.progress = 0;\r\n    this.status = this.Image.Loading;\r\n    this.impl.style.backgroundImage = `url(\"${source}\")`;\r\n    const imageURL = QmlWeb.engine.$resolveImageURL(source);\r\n    this.$img.src = imageURL;\r\n    if (this.$img.complete) {\r\n      setTimeout(() => {\r\n        this.progress = 1;\r\n        this.status = this.Image.Ready;\r\n      }, 0);\r\n    }\r\n    this.$updateFillMode();\r\n  }\r\n  $onMirrorChanged(val) {\r\n    const transformRule = \"scale(-1,1)\";\r\n    if (!val) {\r\n      const index = this.transform.indexOf(transformRule);\r\n      if (index >= 0) {\r\n        this.transform.splice(index, 1);\r\n      }\r\n    } else {\r\n      this.transform.push(transformRule);\r\n    }\r\n    this.$updateTransform();\r\n  }\r\n  $onFillModeChanged(val) {\r\n    this.$updateFillMode(val);\r\n  }\r\n  $onSmoothChanged(val) {\r\n    const style = this.impl.style;\r\n    if (val) {\r\n      style.imageRendering = \"auto\";\r\n    } else {\r\n      style.imageRendering = \"-webkit-optimize-contrast\";\r\n      style.imageRendering = \"-moz-crisp-edges\";\r\n      style.imageRendering = \"crisp-edges\";\r\n      style.imageRendering = \"pixelated\";\r\n    }\r\n  }\r\n}\r\nQmlWeb.registerQmlType(QtQuick_Image);\n","// eslint-disable-next-line no-undef\r\nclass QtQuick_AnimatedImage extends QtQuick_Image {\r\n}\r\nQmlWeb.registerQmlType(QtQuick_AnimatedImage);\n","// eslint-disable-next-line no-undef\r\nclass QtQuick_IntValidator extends QtQuick_Item {\r\n  static properties = {\r\n    bottom: { type: \"int\", initialValue: -2147483647 },\r\n    top: { type: \"int\", initialValue: 2147483647 }\r\n  };\r\n\r\n  validate(string) {\r\n    const regExp = /^(-|\\+)?\\s*[0-9]+$/;\r\n    let acceptable = regExp.test(string.trim());\r\n\r\n    if (acceptable) {\r\n      const value = parseInt(string, 10);\r\n      acceptable = this.bottom <= value && this.top >= value;\r\n    }\r\n    return acceptable;\r\n  }\r\n}\r\nQmlWeb.registerQmlType(QtQuick_IntValidator);\n","// eslint-disable-next-line no-undef\r\nclass QtQuick_ListElement extends QtQml_QtObject {\r\n  constructor(meta) {\r\n    super(meta);\r\n\r\n    for (const i in meta.object) {\r\n      if (i[0] !== \"$\") {\r\n        QmlWeb.createProperty(\"variant\", this, i);\r\n      }\r\n    }\r\n    QmlWeb.applyProperties(meta.object, this, this, this.$context);\r\n  }\r\n}\r\nQmlWeb.registerQmlType(QtQuick_ListElement);\n","// eslint-disable-next-line no-undef\r\nclass QtQml_Models_ListElement extends QtQuick_ListElement {\r\n  static versions = /^2\\./;\r\n}\r\nQmlWeb.registerQmlType(QtQml_Models_ListElement);\n","// eslint-disable-next-line no-undef\r\nclass QtQuick_ListModel extends QtQml_QtObject {\r\n  static properties = {\r\n    count: \"int\",\r\n    $items: \"list\"\r\n  };\r\n  static defaultProperty = \"$items\";\r\n\r\n  constructor(meta) {\r\n    super(meta);\r\n\r\n    this.$firstItem = true;\r\n    this.$itemsChanged.connect(this, this.$on$itemsChanged);\r\n    this.$model = new QmlWeb.JSItemModel();\r\n    this.$model.data = (index, role) => this.$items[index][role];\r\n    this.$model.rowCount = () => this.$items.length;\r\n\r\n  }\r\n  $on$itemsChanged(newVal) {\r\n    this.count = this.$items.length;\r\n    if (this.$firstItem && newVal.length > 0) {\r\n      const QMLListElement = QmlWeb.getConstructor(\r\n        \"QtQuick\", \"2.0\", \"ListElement\"\r\n      );\r\n      this.$firstItem = false;\r\n      const roleNames = [];\r\n      let dict = newVal[0];\r\n      if (dict instanceof QMLListElement) {\r\n        dict = dict.$properties;\r\n      }\r\n      for (const i in dict) {\r\n        if (i !== \"index\") {\r\n          roleNames.push(i);\r\n        }\r\n      }\r\n      this.$model.setRoleNames(roleNames);\r\n    }\r\n    \r\n  }\r\n  append(dict) {\r\n    const index = this.$items.length;\r\n    let c = 0;\r\n\r\n    if (dict instanceof Array) {\r\n      for (const key in dict) {\r\n        this.$items.push(dict[key]);\r\n        c++;\r\n      }\r\n    } else {\r\n      this.$items.push(dict);\r\n      c = 1;\r\n    }\r\n\r\n    this.$itemsChanged(this.$items);\r\n    this.$model.rowsInserted(index, index + c);\r\n  }\r\n  clear() {\r\n    this.$items.length = 0;\r\n    this.count = 0;\r\n    this.$model.modelReset();\r\n  }\r\n  get(index) {\r\n    return this.$items[index];\r\n  }\r\n  insert(index, dict) {\r\n    this.$items.splice(index, 0, dict);\r\n    this.$itemsChanged(this.$items);\r\n    this.$model.rowsInserted(index, index + 1);\r\n  }\r\n  move(from, to, n) {\r\n    const vals = this.$items.splice(from, n);\r\n    for (let i = 0; i < vals.length; i++) {\r\n      this.$items.splice(to + i, 0, vals[i]);\r\n    }\r\n    this.$model.rowsMoved(from, from + n, to);\r\n  }\r\n  remove(index) {\r\n    this.$items.splice(index, 1);\r\n    this.$model.rowsRemoved(index, index + 1);\r\n    this.count = this.$items.length;\r\n  }\r\n  set(index, dict) {\r\n    this.$items[index] = dict;\r\n    this.$model.dataChanged(index, index);\r\n  }\r\n  setProperty(index, property, value) {\r\n    this.$items[index][property] = value;\r\n    this.$model.dataChanged(index, index);\r\n  }\r\n}\r\nQmlWeb.registerQmlType(QtQuick_ListModel);\n","// eslint-disable-next-line no-undef\r\nclass QtQml_Models_ListModel extends QtQuick_ListModel {\r\n  static versions = /^2\\./;\r\n  static defaultProperty = \"$items\";\r\n}\r\nQmlWeb.registerQmlType(QtQml_Models_ListModel);\n","// eslint-disable-next-line no-undef\r\nclass QtQuick_Loader extends QtQuick_Item {\r\n  static properties = {\r\n    active: { type: \"bool\", initialValue: true },\r\n    asynchronous: \"bool\",\r\n    item: \"var\",\r\n    progress: \"real\",\r\n    source: \"url\",\r\n    sourceComponent: \"Component\",\r\n    status: { type: \"enum\", initialValue: 1 }\r\n  };\r\n  static signals = {\r\n    loaded: []\r\n  };\r\n\r\n  constructor(meta) {\r\n    super(meta);\r\n\r\n    this.$sourceUrl = \"\";\r\n\r\n    this.activeChanged.connect(this, this.$onActiveChanged);\r\n    this.sourceChanged.connect(this, this.$onSourceChanged);\r\n    this.sourceComponentChanged.connect(this, this.$onSourceComponentChanged);\r\n    this.widthChanged.connect(this, this.$updateGeometry);\r\n    this.heightChanged.connect(this, this.$updateGeometry);\r\n  }\r\n  $onActiveChanged() {\r\n    if (!this.active) {\r\n      this.$unload();\r\n      return;\r\n    }\r\n    if (this.source) {\r\n      this.$onSourceChanged(this.source);\r\n    } else if (this.sourceComponent) {\r\n      this.$onSourceComponentChanged(this.sourceComponent);\r\n    }\r\n  }\r\n  $onSourceChanged(fileName) {\r\n    // TODO\r\n    // if (fileName == this.$sourceUrl && this.item !== undefined) return;\r\n    if (!this.active) return;\r\n    this.$unload();\r\n\r\n    if (!fileName) {\r\n      this.sourceComponent = null;\r\n      this.$sourceUrl = fileName;\r\n      return;\r\n    }\r\n\r\n    const tree = QmlWeb.engine.loadComponent(fileName);\r\n    const QMLComponent = QmlWeb.getConstructor(\"QtQml\", \"2.0\", \"Component\");\r\n    const meta = { object: tree, context: this.$context, parent: this };\r\n    const qmlComponent = new QMLComponent(meta);\r\n    qmlComponent.$basePath = QmlWeb.engine.extractBasePath(tree.$file);\r\n    qmlComponent.$imports = tree.$imports;\r\n    qmlComponent.$file = tree.$file;\r\n    QmlWeb.engine.loadImports(tree.$imports, qmlComponent.$basePath,\r\n      qmlComponent.importContextId);\r\n    const loadedComponent = this.$createComponentObject(qmlComponent, this);\r\n    this.sourceComponent = loadedComponent;\r\n    this.$sourceUrl = fileName;\r\n  }\r\n  $onSourceComponentChanged(newItem) {\r\n    if (!this.active) return;\r\n    this.$unload();\r\n\r\n    if (!newItem) {\r\n      this.item = null;\r\n      return;\r\n    }\r\n\r\n    const QMLComponent = QmlWeb.getConstructor(\"QtQml\", \"2.0\", \"Component\");\r\n    let qmlComponent = newItem;\r\n    if (newItem instanceof QMLComponent) {\r\n      qmlComponent = newItem.$createObject(this, {}, this);\r\n    }\r\n    qmlComponent.parent = this;\r\n    this.item = qmlComponent;\r\n    this.$updateGeometry();\r\n    if (this.item) {\r\n      this.loaded();\r\n    }\r\n  }\r\n  setSource(url, options) {\r\n    this.$sourceUrl = url;\r\n    this.props = options;\r\n    this.source = url;\r\n  }\r\n  $unload() {\r\n    if (!this.item) return;\r\n    this.item.$delete();\r\n    this.item.parent = undefined;\r\n    this.item = undefined;\r\n  }\r\n  $callOnCompleted(child) {\r\n    child.Component.completed();\r\n    const QMLBaseObject = QmlWeb.getConstructor(\"QtQml\", \"2.0\", \"QtObject\");\r\n    for (let i = 0; i < child.$tidyupList.length; i++) {\r\n      if (child.$tidyupList[i] instanceof QMLBaseObject) {\r\n        this.$callOnCompleted(child.$tidyupList[i]);\r\n      }\r\n    }\r\n  }\r\n  $createComponentObject(qmlComponent, parent) {\r\n    const newComponent = qmlComponent.createObject(parent);\r\n    if (QmlWeb.engine.operationState !== QmlWeb.QMLOperationState.Init) {\r\n      // We don't call those on first creation, as they will be called\r\n      // by the regular creation-procedures at the right time.\r\n      QmlWeb.engine.$initializePropertyBindings();\r\n      this.$callOnCompleted(newComponent);\r\n    }\r\n    return newComponent;\r\n  }\r\n  $updateGeometry() {\r\n    // Loader size doesn't exist\r\n    if (!this.width) {\r\n      this.width = this.item ? this.item.width : 0;\r\n    } else if (this.item) {\r\n      // Loader size exists\r\n      this.item.width = this.width;\r\n    }\r\n\r\n    if (!this.height) {\r\n      this.height = this.item ? this.item.height : 0;\r\n    } else if (this.item) {\r\n      // Loader size exists\r\n      this.item.height = this.height;\r\n    }\r\n  }\r\n}\r\nQmlWeb.registerQmlType(QtQuick_Loader);\n","// eslint-disable-next-line no-undef\r\nclass QtQuick_MouseArea extends QtQuick_Item {\r\n  static properties = {\r\n    acceptedButtons: { type: \"variant\", initialValue: 1 }, // Qt.LeftButton\r\n    enabled: { type: \"bool\", initialValue: true },\r\n    hoverEnabled: \"bool\",\r\n    mouseX: \"real\",\r\n    mouseY: \"real\",\r\n    pressed: \"bool\",\r\n    containsMouse: \"bool\",\r\n    containsPress: \"bool\",\r\n    pressedButtons: { type: \"variant\", initialValue: 0 },\r\n    cursorShape: \"enum\", // Qt.ArrowCursor\r\n    propagateComposedEvents: { type: \"bool\", initialValue: false },\r\n  };\r\n  static signals = {\r\n    canceled: [],\r\n    clicked: [{ type: \"variant\", name: \"mouse\" }],\r\n    doubleClicked: [{ type: \"variant\", name: \"mouse\" }],\r\n    entered: [],\r\n    exited: [],\r\n    positionChanged: [{ type: \"variant\", name: \"mouse\" }],\r\n    pressAndHold: [{ type: \"variant\", name: \"mouse\" }],\r\n    pressed: [{ type: \"variant\", name: \"mouse\" }],\r\n    released: [{ type: \"variant\", name: \"mouse\" }],\r\n    wheel: [{ type: \"variant\", name: \"wheel\" }]\r\n  };\r\n\r\n  constructor(meta) {\r\n    super(meta);\r\n\r\n    this.dom.style.pointerEvents = \"all\";\r\n    this.dom.style.overflow = \"scroll\";\r\n    \r\n    areaList = []\r\n    this.fillAreaList = (e) => {\r\n      let item = this.parent\r\n      while(item.parent){\r\n        item = item.parent\r\n      }\r\n      this.areaList = []\r\n      allEvent = item => {\r\n        for(let child of item.children){\r\n          if(child instanceof QtQuick_MouseArea && child != this){\r\n            let rect = child.dom.getBoundingClientRect()\r\n            if(e.x >= rect.left && e.x <= rect.right && e.y >= rect.top && e.y <= rect.bottom){\r\n              this.areaList.push(child)\r\n            }\r\n          }\r\n          allEvent(child)\r\n        }\r\n      }\r\n      allEvent(item)\r\n    }\r\n    // IE does not handle mouse clicks to transparent divs, so we have\r\n    // to set a background color and make it invisible using opacity\r\n    // as that doesn't affect the mouse handling.\r\n    this.dom.style.backgroundColor = \"white\";\r\n    this.dom.style.opacity = 0;\r\n    \r\n    this.cursorShapeChanged.connect(this, this.$onCursorShapeChanged);\r\n\r\n    this.dom.addEventListener(\"click\", e => {\r\n      this.fillAreaList(e)\r\n      this.$handleClick(e)\r\n    });\r\n    this.dom.addEventListener(\"contextmenu\", e => {\r\n      this.fillAreaList(e)\r\n      this.$handleClick(e)\r\n    });\r\n    const handleMouseMove = e => {\r\n      if (!this.enabled || !this.hoverEnabled && !this.pressed) return;\r\n      this.$handlePositionChanged(e);\r\n    };\r\n    const handleMouseUp = e => {\r\n      const mouse = this.$eventToMouse(e);\r\n      this.pressed = false;\r\n      this.containsPress = false;\r\n      this.pressedButtons = 0;\r\n      this.released(mouse);\r\n      document.removeEventListener(\"mouseup\", handleMouseUp);\r\n      this.$clientTransform = undefined;\r\n      document.removeEventListener(\"mousemove\", handleMouseMove);\r\n    };\r\n    this.dom.addEventListener(\"mousedown\", e => {\r\n      if (!this.enabled) return;\r\n      // Handle scale and translate transformations\r\n      const boundingRect = this.dom.getBoundingClientRect();\r\n      this.$clientTransform = {\r\n        x: boundingRect.left,\r\n        y: boundingRect.top,\r\n        xScale: this.width ?\r\n          (boundingRect.right - boundingRect.left) / this.width : 1,\r\n        yScale: this.height ?\r\n          (boundingRect.bottom - boundingRect.top) / this.height : 1\r\n      };\r\n      const mouse = this.$eventToMouse(e);\r\n      this.mouseX = mouse.x;\r\n      this.mouseY = mouse.y;\r\n      this.pressed = true;\r\n      this.containsPress = true;\r\n      this.pressedButtons = mouse.button;\r\n      this.$Signals.pressed(mouse);\r\n      document.addEventListener(\"mouseup\", handleMouseUp);\r\n      document.addEventListener(\"mousemove\", handleMouseMove);\r\n    });\r\n    this.dom.addEventListener(\"mouseover\", () => {\r\n      this.containsMouse = true;\r\n      this.containsPress = this.pressed;\r\n      this.entered();\r\n    });\r\n    this.dom.addEventListener(\"mouseout\", () => {\r\n      this.containsMouse = false;\r\n      this.containsPress = false;\r\n      this.exited();\r\n    });\r\n    // This is to emit positionChanged for `hoverEnabled` only. When `pressed`,\r\n    // `positionChanged` is handled by a temporary `mousemove` event listener\r\n    // on `document`.\r\n    \r\n    this.dom.addEventListener(\"mousemove\", e => {\r\n      if (!this.enabled || !this.hoverEnabled || this.pressed) return;\r\n      this.$handlePositionChanged(e);\r\n    });\r\n\r\n    this.dom.addEventListener(\"wheel\", e => {\r\n      this.fillAreaList(e)\r\n      this.$handleWheel(e)\r\n    });\r\n\r\n    const bg = this.impl = document.createElement(\"div\");\r\n    bg.style.pointerEvents = \"none\";\r\n    bg.style.position = \"absolute\";\r\n    bg.style.left = bg.style.top = \"0px\";\r\n    bg.style.width = '101%';\r\n    bg.style.height = '101%';\r\n    bg.style.background = \"none\";\r\n    this.dom.appendChild(bg);\r\n  }\r\n  \r\n  $onCursorShapeChanged() {\r\n    this.dom.style.cursor = this.$cursorShapeToCSS();\r\n  }\r\n  $handlePositionChanged(e) {\r\n    const mouse = this.$eventToMouse(e);\r\n    this.mouseX = mouse.x;\r\n    this.mouseY = mouse.y;\r\n    this.positionChanged(mouse);\r\n  }\r\n  $handleWheel(e) {\r\n    const wheel = this.$eventToMouse(e);\r\n    wheel.angleDelta = { x: e.deltaX, y: e.deltaY };\r\n    wheel.accepted = false;\r\n\r\n    this.wheel(wheel);\r\n\r\n    if (wheel.accepted || !this.propagateComposedEvents) {\r\n      //e.stopPropagation();\r\n      e.preventDefault();\r\n    } else {\r\n      let i = 0\r\n      let stop = false\r\n      while(!stop && i < this.areaList.length){\r\n        stop = this.areaList[i]\r\n        tempWheel = this.areaList[i].$eventToMouse(e);\r\n        tempWheel.accepted = false;\r\n        this.areaList[i].wheel(tempWheel);\r\n        stop = tempWheel.accepted || this.areaList[i].propagateComposedEvents\r\n        i++\r\n      }\r\n    }\r\n  }\r\n  $handleClick(e) {\r\n    const mouse = this.$eventToMouse(e);\r\n    mouse.accepted = false;\r\n\r\n    if (this.enabled && this.acceptedButtons & mouse.button) {\r\n      this.clicked(mouse);\r\n\r\n      if (mouse.accepted || !this.propagateComposedEvents) {\r\n        //e.stopPropagation();\r\n        e.preventDefault();\r\n      } else {\r\n        let i = 0\r\n        let stop = false\r\n        while(!stop && i < this.areaList.length){\r\n          stop = this.areaList[i]\r\n          tempMouse = this.areaList[i].$eventToMouse(e);\r\n          tempMouse.accepted = false;\r\n          this.areaList[i].clicked(tempMouse);\r\n          stop = tempMouse.accepted || this.areaList[i].propagateComposedEvents\r\n          i++\r\n        }\r\n      }\r\n    }\r\n    // This decides whether to show the browser's context menu on right click or\r\n    // not\r\n    return !(this.acceptedButtons & QmlWeb.Qt.RightButton);\r\n  }\r\n  $eventToMouse(e) {\r\n    const Qt = QmlWeb.Qt;\r\n    const mouse = {\r\n      accepted: true,\r\n      button: e.button === 0 ? Qt.LeftButton :\r\n              e.button === 1 ? Qt.MiddleButton :\r\n              e.button === 2 ? Qt.RightButton :\r\n              0,\r\n      modifiers: e.ctrlKey * Qt.CtrlModifier\r\n               | e.altKey * Qt.AltModifier\r\n               | e.shiftKey * Qt.ShiftModifier\r\n               | e.metaKey * Qt.MetaModifier\r\n    };\r\n    if (this.$clientTransform) {\r\n      // Handle scale and translate transformations\r\n      mouse.x = (e.clientX - this.$clientTransform.x)\r\n        / this.$clientTransform.xScale;\r\n      mouse.y = (e.clientY - this.$clientTransform.y)\r\n        / this.$clientTransform.yScale;\r\n    } else {\r\n      mouse.x = e.offsetX || e.layerX;\r\n      mouse.y = e.offsetY || e.layerY;\r\n    }\r\n    return mouse;\r\n  }\r\n\r\n  // eslint-disable-next-line complexity\r\n  $cursorShapeToCSS() {\r\n    const Qt = QmlWeb.Qt;\r\n    switch (this.cursorShape) {\r\n      case Qt.ArrowCursor: return \"default\";\r\n      case Qt.UpArrowCursor: return \"n-resize\";\r\n      case Qt.CrossCursor: return \"crosshair\";\r\n      case Qt.WaitCursor: return \"wait\";\r\n      case Qt.IBeamCursor: return \"text\";\r\n      case Qt.SizeVerCursor: return \"ew-resize\";\r\n      case Qt.SizeHorCursor: return \"ns-resize\";\r\n      case Qt.SizeBDiagCursor: return \"nesw-resize\";\r\n      case Qt.SizeFDiagCursor: return \"nwse-resize\";\r\n      case Qt.SizeAllCursor: return \"all-scroll\";\r\n      case Qt.BlankCursor: return \"none\";\r\n      case Qt.SplitVCursor: return \"row-resize\";\r\n      case Qt.SplitHCursor: return \"col-resize\";\r\n      case Qt.PointingHandCursor: return \"pointer\";\r\n      case Qt.ForbiddenCursor: return \"not-allowed\";\r\n      case Qt.WhatsThisCursor: return \"help\";\r\n      case Qt.BusyCursor: return \"progress\";\r\n      case Qt.OpenHandCursor: return \"grab\";\r\n      case Qt.ClosedHandCursor: return \"grabbing\";\r\n      case Qt.DragCopyCursor: return \"copy\";\r\n      case Qt.DragMoveCursor: return \"move\";\r\n      case Qt.DragLinkCursor: return \"alias\";\r\n      //case Qt.BitmapCursor: return \"auto\";\r\n      //case Qt.CustomCursor: return \"auto\";\r\n    }\r\n    return \"auto\";\r\n  }\r\n}\r\nQmlWeb.registerQmlType(QtQuick_MouseArea);\n","// eslint-disable-next-line no-undef\r\nclass QtQuick_OpacityAnimator extends QtQuick_Animator {\r\n  static versions = /^2\\./;\r\n\r\n  // TODO\r\n}\r\nQmlWeb.registerQmlType(QtQuick_OpacityAnimator);\n","// eslint-disable-next-line no-undef\r\nclass QtQuick_ParallelAnimation extends QtQuick_Animation {\r\n  static enums = {\r\n    Animation: { Infinite: Math.Infinite }\r\n  };\r\n  static properties = {\r\n    animations: \"list\"\r\n  };\r\n  static defaultProperty = \"animations\";\r\n\r\n  constructor(meta) {\r\n    super(meta);\r\n\r\n    this.$runningAnimations = 0;\r\n\r\n    this.animationsChanged.connect(this, this.$onAnimationsChanged);\r\n\r\n    QmlWeb.engine.$registerStart(() => {\r\n      if (!this.running) return;\r\n      self.running = false; // toggled back by start();\r\n      self.start();\r\n    });\r\n    QmlWeb.engine.$registerStop(() => this.stop());\r\n  }\r\n  $onAnimationsChanged() {\r\n    const flags = QmlWeb.Signal.UniqueConnection;\r\n    for (let i = 0; i < this.animations.length; i++) {\r\n      const animation = this.animations[i];\r\n      animation.runningChanged.connect(this, this.$animationFinished, flags);\r\n    }\r\n  }\r\n  $animationFinished(newVal) {\r\n    this.$runningAnimations += newVal ? 1 : -1;\r\n    if (this.$runningAnimations === 0) {\r\n      this.running = false;\r\n    }\r\n  }\r\n  start() {\r\n    if (this.running) return;\r\n    this.running = true;\r\n    for (let i = 0; i < this.animations.length; i++) {\r\n      this.animations[i].start();\r\n    }\r\n  }\r\n  stop() {\r\n    if (!this.running) return;\r\n    for (let i = 0; i < this.animations.length; i++) {\r\n      this.animations[i].stop();\r\n    }\r\n    this.running = false;\r\n  }\r\n  complete() {\r\n    this.stop();\r\n  }\r\n}\r\nQmlWeb.registerQmlType(QtQuick_ParallelAnimation);\n","// eslint-disable-next-line no-undef\r\nclass QtQuick_PauseAnimation extends QtQuick_Animation {\r\n  static properties = {\r\n    duration: { type: \"int\", initialValue: 250 }\r\n  };\r\n\r\n  constructor(meta) {\r\n    super(meta);\r\n\r\n    this.$at = 0;\r\n\r\n    QmlWeb.engine.$addTicker((...args) => this.$ticker(...args));\r\n    this.runningChanged.connect(this, this.$onRunningChanged);\r\n  }\r\n  $ticker(now, elapsed) {\r\n    if (!this.running || this.paused) {\r\n      return;\r\n    }\r\n    this.$at += elapsed / this.duration;\r\n    if (this.$at >= 1) {\r\n      this.complete();\r\n    }\r\n  }\r\n  $onRunningChanged(newVal) {\r\n    if (newVal) {\r\n      this.$at = 0;\r\n      this.paused = false;\r\n    }\r\n  }\r\n\r\n}\r\nQmlWeb.registerQmlType(QtQuick_PauseAnimation);\n","// eslint-disable-next-line no-undef\r\nclass QtQuick_Positioner extends QtQuick_Item {\r\n  static properties = {\r\n    spacing: \"int\",\r\n    padding: \"int\"\r\n  };\r\n\r\n  constructor(meta) {\r\n    super(meta);\r\n\r\n    this.childrenChanged.connect(this, this.$onChildrenChanged);\r\n    this.spacingChanged.connect(this, this.layoutChildren);\r\n    this.childrenChanged.connect(this, this.layoutChildren);\r\n    this.layoutChildren();\r\n  }\r\n  $onChildrenChanged() {\r\n    const flags = QmlWeb.Signal.UniqueConnection;\r\n    for (let i = 0; i < this.children.length; i++) {\r\n      const child = this.children[i];\r\n      child.widthChanged.connect(this, this.layoutChildren, flags);\r\n      child.heightChanged.connect(this, this.layoutChildren, flags);\r\n      child.visibleChanged.connect(this, this.layoutChildren, flags);\r\n    }\r\n  }\r\n  layoutChildren() {\r\n    // noop, defined in individual positioners\r\n  }\r\n}\r\nQmlWeb.registerQmlType(QtQuick_Positioner);\n","// eslint-disable-next-line no-undef\r\nclass QtQuick_Column extends QtQuick_Positioner {\r\n  layoutChildren() {\r\n    let curPos = this.padding;\r\n    let maxWidth = 0;\r\n    for (let i = 0; i < this.children.length; i++) {\r\n      const child = this.children[i];\r\n      if (!child.visible || !child.width || !child.height) {\r\n        continue;\r\n      }\r\n      maxWidth = child.width > maxWidth ? child.width : maxWidth;\r\n      child.y = curPos + this.padding;\r\n      if (this.padding > 0) child.x = this.padding;\r\n      curPos += child.height + this.spacing;\r\n    }\r\n    this.implicitWidth = maxWidth + this.padding * 2;\r\n    this.implicitHeight = curPos - this.spacing + this.padding;\r\n    // We want no spacing at the bottom side\r\n  }\r\n}\r\nQmlWeb.registerQmlType(QtQuick_Column);\n","// eslint-disable-next-line no-undef\r\nclass QtQuick_Flow extends QtQuick_Positioner {\r\n  static enums = {\r\n    Flow: { LeftToRight: 0, TopToBottom: 1 }\r\n  };\r\n  static properties = {\r\n    flow: \"enum\", // Flow.LeftToRight\r\n    layoutDirection: \"enum\" // Flow.LeftToRight\r\n  };\r\n\r\n  constructor(meta) {\r\n    super(meta);\r\n\r\n    this.flowChanged.connect(this, this.layoutChildren);\r\n    this.layoutDirectionChanged.connect(this, this.layoutChildren);\r\n    this.widthChanged.connect(this, this.layoutChildren);\r\n    this.heightChanged.connect(this, this.layoutChildren);\r\n    this.layoutChildren();\r\n  }\r\n\r\n  layoutChildren() {\r\n    if (this.flow === undefined) {\r\n      // Flow has not been fully initialized yet\r\n      return;\r\n    }\r\n\r\n    let curHPos = 0;\r\n    let curVPos = 0;\r\n    let rowSize = 0;\r\n    for (let i = 0; i < this.children.length; i++) {\r\n      const child = this.children[i];\r\n      if (!child.visible || !child.width || !child.height) {\r\n        continue;\r\n      }\r\n\r\n      if (this.flow === this.Flow.LeftToRight) {\r\n        if (!this.$isUsingImplicitWidth && curHPos + child.width > this.width) {\r\n          curHPos = 0;\r\n          curVPos += rowSize + this.spacing;\r\n          rowSize = 0;\r\n        }\r\n        rowSize = child.height > rowSize ? child.height : rowSize;\r\n        child.x = this.layoutDirection === this.Flow.TopToBottom\r\n                ? this.width - curHPos - child.width : curHPos;\r\n        child.y = curVPos;\r\n        curHPos += child.width + this.spacing;\r\n      } else { // Flow.TopToBottom\r\n        if (!this.$isUsingImplicitHeight\r\n            && curVPos + child.height > this.height) {\r\n          curVPos = 0;\r\n          curHPos += rowSize + this.spacing;\r\n          rowSize = 0;\r\n        }\r\n        rowSize = child.width > rowSize ? child.width : rowSize;\r\n        child.x = this.layoutDirection === this.Flow.TopToBottom\r\n                ? this.width - curHPos - child.width : curHPos;\r\n        child.y = curVPos;\r\n        curVPos += child.height + this.spacing;\r\n      }\r\n    }\r\n\r\n    if (this.flow === this.Flow.LeftToRight) {\r\n      this.implicitWidth = curHPos - this.spacing;\r\n      this.implicitHeight = curVPos + rowSize;\r\n    } else { // Flow.TopToBottom\r\n      this.implicitWidth = curHPos + rowSize;\r\n      this.implicitHeight = curVPos - this.spacing;\r\n    }\r\n  }\r\n}\r\nQmlWeb.registerQmlType(QtQuick_Flow);\n","// eslint-disable-next-line no-undef\r\nclass QtQuick_Grid extends QtQuick_Positioner {\r\n  static enums = {\r\n    Grid: { LeftToRight: 0, TopToBottom: 1 }\r\n  };\r\n  static properties = {\r\n    columns: \"int\",\r\n    rows: \"int\",\r\n    flow: \"enum\",\r\n    layoutDirection: \"enum\"\r\n  };\r\n\r\n  constructor(meta) {\r\n    super(meta);\r\n\r\n    this.columnsChanged.connect(this, this.layoutChildren);\r\n    this.rowsChanged.connect(this, this.layoutChildren);\r\n    this.flowChanged.connect(this, this.layoutChildren);\r\n    this.layoutDirectionChanged.connect(this, this.layoutChildren);\r\n    this.layoutChildren();\r\n  }\r\n  layoutChildren() {\r\n    // How many items are actually visible?\r\n    const visibleItems = this.$getVisibleItems();\r\n\r\n    // How many rows and columns do we need?\r\n    const [c, r] = this.$calculateSize(visibleItems.length);\r\n\r\n    // How big are the colums/rows?\r\n    const [colWidth, rowHeight] = this.$calculateGrid(visibleItems, c, r);\r\n\r\n    // Do actual positioning\r\n    // When layoutDirection is RightToLeft we need oposite order of coumns\r\n    const step = this.layoutDirection === 1 ? -1 : 1;\r\n    const startingPoint = this.layoutDirection === 1 ? c - 1 : 0;\r\n    const endPoint = this.layoutDirection === 1 ? -1 : c;\r\n    let curHPos = 0;\r\n    let curVPos = 0;\r\n    if (this.flow === 0) {\r\n      for (let i = 0; i < r; i++) {\r\n        for (let j = startingPoint; j !== endPoint; j += step) {\r\n          const item = visibleItems[i * c + j];\r\n          if (!item) {\r\n            break;\r\n          }\r\n          item.x = curHPos;\r\n          item.y = curVPos;\r\n\r\n          curHPos += colWidth[j] + this.spacing;\r\n        }\r\n        curVPos += rowHeight[i] + this.spacing;\r\n        curHPos = 0;\r\n      }\r\n    } else {\r\n      for (let i = startingPoint; i !== endPoint; i += step) {\r\n        for (let j = 0; j < r; j++) {\r\n          const item = visibleItems[i * r + j];\r\n          if (!item) {\r\n            break;\r\n          }\r\n          item.x = curHPos;\r\n          item.y = curVPos;\r\n\r\n          curVPos += rowHeight[j] + this.spacing;\r\n        }\r\n        curHPos += colWidth[i] + this.spacing;\r\n        curVPos = 0;\r\n      }\r\n    }\r\n\r\n    // Set implicit size\r\n    let gridWidth = -this.spacing;\r\n    let gridHeight = -this.spacing;\r\n    for (const i in colWidth) {\r\n      gridWidth += colWidth[i] + this.spacing;\r\n    }\r\n    for (const i in rowHeight) {\r\n      gridHeight += rowHeight[i] + this.spacing;\r\n    }\r\n    this.implicitWidth = gridWidth;\r\n    this.implicitHeight = gridHeight;\r\n  }\r\n  $getVisibleItems() {\r\n    return this.children.filter(child =>\r\n      child.visible && child.width && child.height\r\n    );\r\n  }\r\n  $calculateSize(length) {\r\n    let cols;\r\n    let rows;\r\n    if (!this.columns && !this.rows) {\r\n      cols = 4;\r\n      rows = Math.ceil(length / cols);\r\n    } else if (!this.columns) {\r\n      rows = this.rows;\r\n      cols = Math.ceil(length / rows);\r\n    } else {\r\n      cols = this.columns;\r\n      rows = Math.ceil(length / cols);\r\n    }\r\n    return [cols, rows];\r\n  }\r\n  $calculateGrid(visibleItems, cols, rows) {\r\n    const colWidth = [];\r\n    const rowHeight = [];\r\n\r\n    if (this.flow === 0) {\r\n      for (let i = 0; i < rows; i++) {\r\n        for (let j = 0; j < cols; j++) {\r\n          const item = visibleItems[i * cols + j];\r\n          if (!item) {\r\n            break;\r\n          }\r\n          if (!colWidth[j] || item.width > colWidth[j]) {\r\n            colWidth[j] = item.width;\r\n          }\r\n          if (!rowHeight[i] || item.height > rowHeight[i]) {\r\n            rowHeight[i] = item.height;\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      for (let i = 0; i < cols; i++) {\r\n        for (let j = 0; j < rows; j++) {\r\n          const item = visibleItems[i * rows + j];\r\n          if (!item) {\r\n            break;\r\n          }\r\n          if (!rowHeight[j] || item.height > rowHeight[j]) {\r\n            rowHeight[j] = item.height;\r\n          }\r\n          if (!colWidth[i] || item.width > colWidth[i]) {\r\n            colWidth[i] = item.width;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return [colWidth, rowHeight];\r\n  }\r\n}\r\nQmlWeb.registerQmlType(QtQuick_Grid);\n","// eslint-disable-next-line no-undef\r\nclass QtQuick_PropertyAnimation extends QtQuick_Animation {\r\n  static properties = {\r\n    duration: { type: \"int\", initialValue: 250 },\r\n    from: \"real\",\r\n    to: \"real\",\r\n    properties: \"string\",\r\n    property: \"string\",\r\n    target: \"QtObject\",\r\n    targets: \"list\"\r\n  };\r\n\r\n  constructor(meta) {\r\n    super(meta);\r\n\r\n\r\n    this.easing = new QmlWeb.QObject(this);\r\n    QmlWeb.createProperties(this.easing, {\r\n      type: { type: \"enum\", initialValue: this.Easing.Linear },\r\n      amplitude: { type: \"real\", initialValue: 1 },\r\n      overshoot: { type: \"real\", initialValue: 1.70158 },\r\n      period: { type: \"real\", initialValue: 0.3 },\r\n      bezierCurve: \"list\"\r\n    });\r\n\r\n    this.easing.$valueForProgress = function(t) {\r\n      return QmlWeb.$ease(\r\n        this.type, this.period, this.amplitude, this.overshoot, t\r\n      );\r\n    };\r\n\r\n    this.$props = [];\r\n    this.$targets = [];\r\n    this.$actions = [];\r\n\r\n    this.targetChanged.connect(this, this.$redoTargets);\r\n    this.targetsChanged.connect(this, this.$redoTargets);\r\n    this.propertyChanged.connect(this, this.$redoProperties);\r\n    this.propertiesChanged.connect(this, this.$redoProperties);\r\n\r\n    if (meta.object.$on !== undefined) {\r\n      this.property = meta.object.$on;\r\n      this.target = this.$parent;\r\n      this.running = true;\r\n    }\r\n  }\r\n  $redoActions() {\r\n    this.$actions = [];\r\n    for (let i = 0; i < this.$targets.length; i++) {\r\n      for (const j in this.$props) {\r\n        this.$actions.push({\r\n          target: this.$targets[i],\r\n          property: this.$props[j],\r\n          from: this.from,\r\n          to: this.to\r\n        });\r\n      }\r\n    }\r\n  }\r\n  $redoProperties() {\r\n    this.$props = this.properties.split(\",\");\r\n\r\n    // Remove whitespaces\r\n    for (let i = 0; i < this.$props.length; i++) {\r\n      const matches = this.$props[i].match(/\\w+/);\r\n      if (matches) {\r\n        this.$props[i] = matches[0];\r\n      } else {\r\n        this.$props.splice(i, 1);\r\n        i--;\r\n      }\r\n    }\r\n    // Merge properties and property\r\n    if (this.property && this.$props.indexOf(this.property) === -1) {\r\n      this.$props.push(this.property);\r\n    }\r\n  }\r\n  $redoTargets() {\r\n    this.$targets = this.targets.slice();\r\n    if (this.target && this.$targets.indexOf(this.target) === -1) {\r\n      this.$targets.push(this.target);\r\n    }\r\n  }\r\n}\r\nQmlWeb.registerQmlType(QtQuick_PropertyAnimation);\n","// eslint-disable-next-line no-undef\r\nclass QtQuick_NumberAnimation extends QtQuick_PropertyAnimation {\r\n  constructor(meta) {\r\n    super(meta);\r\n\r\n    this.$at = 0;\r\n    this.$loop = 0;\r\n\r\n\r\n    QmlWeb.engine.$addTicker((...args) => this.$ticker(...args));\r\n    this.runningChanged.connect(this, this.$onRunningChanged);\r\n  }\r\n  $startLoop() {\r\n    for (const i in this.$actions) {\r\n      const action = this.$actions[i];\r\n      action.from = action.from !== undefined ?\r\n                      action.from :\r\n                      action.target[action.property];\r\n    }\r\n    this.$at = 0;\r\n  }\r\n  $ticker(now, elapsed) {\r\n    if (!this.running && this.$loop !== -1 || this.paused) {\r\n      // $loop === -1 is a marker to just finish this run\r\n      return;\r\n    }\r\n    if (this.$at === 0 && this.$loop === 0 && !this.$actions.length) {\r\n      this.$redoActions();\r\n    }\r\n    this.$at += elapsed / this.duration;\r\n    if (this.$at >= 1) {\r\n      this.complete();\r\n      return;\r\n    }\r\n    for (const i in this.$actions) {\r\n      const action = this.$actions[i];\r\n      const value = action.from + (action.to - action.from) *\r\n                    this.easing.$valueForProgress(this.$at);\r\n      const property = action.target.$properties[action.property];\r\n      property.set(value, QmlWeb.QMLProperty.ReasonAnimation);\r\n    }\r\n  }\r\n  $onRunningChanged(newVal) {\r\n    if (newVal) {\r\n      this.$startLoop();\r\n      this.paused = false;\r\n    } else if (this.alwaysRunToEnd && this.$at < 1) {\r\n      this.$loop = -1; // -1 is used as a marker to stop\r\n    } else {\r\n      this.$loop = 0;\r\n      this.$actions = [];\r\n    }\r\n  }\r\n  complete() {\r\n    for (const i in this.$actions) {\r\n      const action = this.$actions[i];\r\n      const property = action.target.$properties[action.property];\r\n      property.set(action.to, QmlWeb.QMLProperty.ReasonAnimation);\r\n    }\r\n    this.$loop++;\r\n    if (this.$loop === this.loops) {\r\n      this.running = false;\r\n    } else if (!this.running) {\r\n      this.$actions = [];\r\n    } else {\r\n      this.$startLoop(this);\r\n    }\r\n  }\r\n}\r\nQmlWeb.registerQmlType(QtQuick_NumberAnimation);\n","// eslint-disable-next-line no-undef\r\nclass QtQuick_PropertyChanges extends QtQml_QtObject {\r\n  static properties = {\r\n    target: \"QtObject\",\r\n    explicit: \"bool\",\r\n    restoreEntryValues: { type: \"bool\", initialValue: true }\r\n  };\r\n\r\n  constructor(meta) {\r\n    super(meta);\r\n\r\n    this.$actions = [];\r\n  }\r\n  $setCustomData(property, value) {\r\n    this.$actions.push({ property, value });\r\n  }\r\n}\r\nQmlWeb.registerQmlType(QtQuick_PropertyChanges);\n","// eslint-disable-next-line no-undef\r\nclass QtQuick_Rectangle extends QtQuick_Item {\r\n  static properties = {\r\n    gradient: \"Component\",\r\n    color: { type: \"color\", initialValue: \"white\" },\r\n    radius: \"real\"\r\n  };\r\n\r\n  constructor(meta) {\r\n    super(meta);\r\n    //this.parent = meta.parent\r\n    this.border = new QmlWeb.QObject(this);\r\n    QmlWeb.createProperties(this.border, {\r\n      color: { type: \"color\", initialValue: \"black\" },\r\n      width: { type: \"int\", initialValue: 1 }\r\n    });\r\n    this.$borderActive = false;\r\n\r\n    const bg = this.impl = document.createElement(\"div\");\r\n    bg.style.pointerEvents = \"none\";\r\n    bg.style.position = \"relative\";\r\n    bg.style.width = \"100%\";\r\n    bg.style.height = \"100%\";\r\n    bg.style.left = bg.style.right = bg.style.top = bg.style.bottom = \"0px\";\r\n    bg.style.borderWidth = \"0px\";\r\n    bg.style.borderStyle = \"solid\";\r\n    bg.style.borderColor = this.border.color.$css;\r\n    bg.style.backgroundColor = this.color.$css;\r\n    this.dom.appendChild(bg);\r\n\r\n    this.colorChanged.connect(this, this.$onColorChanged);\r\n    this.radiusChanged.connect(this, this.$onRadiusChanged);\r\n    this.border.colorChanged.connect(this, this.border$onColorChanged);\r\n    this.border.widthChanged.connect(this, this.border$onWidthChanged);\r\n    this.widthChanged.connect(this, this.$updateBorder);\r\n    this.heightChanged.connect(this, this.$updateBorder);\r\n\r\n    this.gradientChanged.connect(this, this.gradientApply)\r\n  }\r\n  gradientApply(){\r\n    this.gradient.$createObject(this);\r\n  }\r\n  $onColorChanged(newVal) {\r\n    this.impl.style.backgroundColor = newVal.$css;\r\n  }\r\n  border$onColorChanged(newVal) {\r\n    this.$borderActive = true;\r\n    this.impl.style.borderColor = newVal.$css;\r\n    this.$updateBorder();\r\n  }\r\n  border$onWidthChanged() {\r\n    this.$borderActive = true;\r\n    this.$updateBorder();\r\n  }\r\n  $onRadiusChanged(newVal) {\r\n    this.impl.style.borderRadius = `${newVal}px`;\r\n  }\r\n  $updateBorder() {\r\n    const border = this.$borderActive ? Math.max(0, this.border.width) : 0;\r\n    const style = this.impl.style;\r\n    if (border * 2 > this.width || border * 2 > this.height) {\r\n      // Border is covering the whole background\r\n      style.borderWidth = \"0px\";\r\n      style.borderTopWidth = `${this.height}px`;\r\n    } else {\r\n      style.borderWidth = `${border}px`;\r\n    }\r\n  }\r\n}\r\nQmlWeb.registerQmlType(QtQuick_Rectangle);\n","// eslint-disable-next-line no-undef\r\nclass QtQuick_RegExpValidator extends QtQml_QtObject {\r\n  static properties = {\r\n    regExp: \"var\"\r\n  };\r\n\r\n  constructor(meta) {\r\n    super(meta);\r\n    this.parent = meta.parent\r\n    this.regExpChanged.connect(this, this.$regExpChanged)\r\n    //this.$parent.stops.push({position: this.position, color: this.color})\r\n  }\r\n  $regExpChanged(){\r\n    //this.parent.impl.pattern = this.regExp\r\n  }\r\n  validate(string) {\r\n    if (!this.regExp) return true;\r\n    return this.regExp.test(string);\r\n  }\r\n}\r\nQmlWeb.registerQmlType(QtQuick_RegExpValidator);\n","// eslint-disable-next-line no-undef\r\nclass QtQuick_Repeater extends QtQuick_Item {\r\n  static properties = {\r\n    delegate: \"Component\",\r\n    model: { type: \"variant\", initialValue: 0 },\r\n    count: \"int\"\r\n  };\r\n  static signals = {\r\n    _childrenInserted: []\r\n  };\r\n  static defaultProperty = \"delegate\";\r\n\r\n  constructor(meta) {\r\n    super(meta);\r\n\r\n    this.parent = meta.parent;\r\n    // TODO: some (all ?) of the components including Repeater needs to know own\r\n    // parent at creation time. Please consider this major change.\r\n\r\n    this.$completed = false;\r\n    this.$items = []; // List of created items\r\n\r\n    this.modelChanged.connect(this, this.$onModelChanged);\r\n    this.delegateChanged.connect(this, this.$onDelegateChanged);\r\n    this.parentChanged.connect(this, this.$onParentChanged);\r\n  }\r\n  \r\n  _container() {\r\n    return this.parent;\r\n  }\r\n  itemAt(index) {\r\n    return this.$items[index];\r\n  }\r\n  $onModelChanged() {\r\n    this.$applyModel();\r\n  }\r\n  $onDelegateChanged() {\r\n    this.$applyModel();\r\n  }\r\n  $onParentChanged() {\r\n    this.$applyModel();\r\n  }\r\n  $getModel() {\r\n    const QMLListModel = QmlWeb.getConstructor(\"QtQuick\", \"2.0\", \"ListModel\");\r\n    return this.model instanceof QMLListModel ?\r\n            this.model.$model :\r\n            this.model;\r\n  }\r\n  $applyModel() {\r\n    if (!this.delegate || !this.parent) {\r\n      return;\r\n    }\r\n    const model = this.$getModel();\r\n    if (model instanceof QmlWeb.JSItemModel) {\r\n      const flags = QmlWeb.Signal.UniqueConnection;\r\n      model.dataChanged.connect(this, this.$_onModelDataChanged, flags);\r\n      model.rowsInserted.connect(this, this.$_onRowsInserted, flags);\r\n      model.rowsMoved.connect(this, this.$_onRowsMoved, flags);\r\n      model.rowsRemoved.connect(this, this.$_onRowsRemoved, flags);\r\n      model.modelReset.connect(this, this.$_onModelReset, flags);\r\n\r\n      this.$removeChildren(0, this.$items.length);\r\n      this.$insertChildren(0, model.rowCount());\r\n    } else if (typeof model === \"number\") {\r\n      if (this.$items.length > model) {\r\n        // have more than we need\r\n        this.$removeChildren(model, this.$items.length);\r\n      } else {\r\n        // need more\r\n        this.$insertChildren(this.$items.length, model);\r\n      }\r\n    } else if (model instanceof Array) {\r\n      this.$removeChildren(0, this.$items.length);\r\n      this.$insertChildren(0, model.length);\r\n    }\r\n    this.count = this.$items.length;\r\n  }\r\n  $callOnCompleted(child) {\r\n    child.Component.completed();\r\n    const QMLBaseObject = QmlWeb.getConstructor(\"QtQml\", \"2.0\", \"QtObject\");\r\n    for (let i = 0; i < child.$tidyupList.length; i++) {\r\n      if (child.$tidyupList[i] instanceof QMLBaseObject) {\r\n        this.$callOnCompleted(child.$tidyupList[i]);\r\n      }\r\n    }\r\n  }\r\n  $_onModelDataChanged(startIndex, endIndex, roles) {\r\n    const model = this.$getModel();\r\n    const roleNames = roles || model.roleNames;\r\n    for (let index = startIndex; index <= endIndex; index++) {\r\n      const item = this.$items[index];\r\n      const modelData = item.$properties.model;\r\n      for (const i in roleNames) {\r\n        const roleName = roleNames[i];\r\n        const roleData = model.data(index, roleName);\r\n        item.$properties[roleName].set(\r\n          roleData,\r\n          QmlWeb.QMLProperty.ReasonInit,\r\n          item,\r\n          this.model.$context\r\n        );\r\n        modelData[roleName] = roleData;\r\n      }\r\n      item.$properties.model.set(\r\n        modelData,\r\n        QmlWeb.QMLProperty.ReasonInit,\r\n        item,\r\n        this.model.$context\r\n      );\r\n    }\r\n  }\r\n  $_onRowsInserted(startIndex, endIndex) {\r\n    this.$insertChildren(startIndex, endIndex);\r\n    this.count = this.$items.length;\r\n  }\r\n  $_onRowsMoved(sourceStartIndex, sourceEndIndex, destinationIndex) {\r\n    const vals = this.$items.splice(\r\n      sourceStartIndex,\r\n      sourceEndIndex - sourceStartIndex\r\n    );\r\n    for (let i = 0; i < vals.length; i++) {\r\n      this.$items.splice(destinationIndex + i, 0, vals[i]);\r\n    }\r\n    const smallestChangedIndex = sourceStartIndex < destinationIndex ?\r\n                                  sourceStartIndex :\r\n                                  destinationIndex;\r\n    for (let i = smallestChangedIndex; i < this.$items.length; i++) {\r\n      this.$items[i].index = i;\r\n    }\r\n  }\r\n  $_onRowsRemoved(startIndex, endIndex) {\r\n    this.$removeChildren(startIndex, endIndex);\r\n    for (let i = startIndex; i < this.$items.length; i++) {\r\n      this.$items[i].index = i;\r\n    }\r\n    this.count = this.$items.length;\r\n  }\r\n  $_onModelReset() {\r\n    this.$applyModel();\r\n  }\r\n  $insertChildren(startIndex, endIndex) {\r\n    if (endIndex <= 0) {\r\n      this.count = 0;\r\n      return;\r\n    }\r\n\r\n    const QMLOperationState = QmlWeb.QMLOperationState;\r\n    const createProperty = QmlWeb.createProperty;\r\n    const model = this.$getModel();\r\n    let index;\r\n    for (index = startIndex; index < endIndex; index++) {\r\n      const newItem = this.delegate.$createObject(this.parent);\r\n      createProperty(\"int\", newItem, \"index\", { initialValue: index });\r\n\r\n      if (typeof model === \"number\" || model instanceof Array) {\r\n        if (typeof newItem.$properties.modelData === \"undefined\") {\r\n          createProperty(\"variant\", newItem, \"modelData\");\r\n        }\r\n        const value = model instanceof Array ?\r\n                      model[index] :\r\n                      typeof model === \"number\" ? index : \"undefined\";\r\n        newItem.$properties.modelData.set(value, QmlWeb.QMLProperty.ReasonInit,\r\n          newItem, model.$context);\r\n      } else {\r\n        // QML exposes a \"model\" property in the scope that contains all role\r\n        // data.\r\n        const modelData = {};\r\n        for (let i = 0; i < model.roleNames.length; i++) {\r\n          const roleName = model.roleNames[i];\r\n          if (typeof newItem.$properties[roleName] === \"undefined\") {\r\n            createProperty(\"variant\", newItem, roleName);\r\n          }\r\n          const roleData = model.data(index, roleName);\r\n          modelData[roleName] = roleData;\r\n          newItem.$properties[roleName].set(\r\n            roleData, QmlWeb.QMLProperty.ReasonInit,\r\n            newItem, this.model.$context\r\n          );\r\n        }\r\n        if (typeof newItem.$properties.model === \"undefined\") {\r\n          createProperty(\"variant\", newItem, \"model\");\r\n        }\r\n        newItem.$properties.model.set(\r\n          modelData, QmlWeb.QMLProperty.ReasonInit,\r\n          newItem, this.model.$context\r\n        );\r\n      }\r\n\r\n      this.$items.splice(index, 0, newItem);\r\n\r\n      // parent must be set after the roles have been added to newItem scope in\r\n      // case we are outside of QMLOperationState.Init and parentChanged has\r\n      // any side effects that result in those roleNames being referenced.\r\n      newItem.parent = this.parent;\r\n\r\n      // TODO debug this. Without check to Init, Completed sometimes called\r\n      // twice.. But is this check correct?\r\n      if (QmlWeb.engine.operationState !== QMLOperationState.Init &&\r\n          QmlWeb.engine.operationState !== QMLOperationState.Idle) {\r\n        // We don't call those on first creation, as they will be called\r\n        // by the regular creation-procedures at the right time.\r\n        this.$callOnCompleted(newItem);\r\n      }\r\n    }\r\n    if (QmlWeb.engine.operationState !== QMLOperationState.Init) {\r\n      // We don't call those on first creation, as they will be called\r\n      // by the regular creation-procedures at the right time.\r\n      QmlWeb.engine.$initializePropertyBindings();\r\n    }\r\n\r\n    if (index > 0) {\r\n      this._container().childrenChanged();\r\n    }\r\n\r\n    for (let i = endIndex; i < this.$items.length; i++) {\r\n      this.$items[i].index = i;\r\n    }\r\n  }\r\n  $removeChildren(startIndex, endIndex) {\r\n    const removed = this.$items.splice(startIndex, endIndex - startIndex);\r\n    for (const index in removed) {\r\n      removed[index].$delete();\r\n      this.$removeChildProperties(removed[index]);\r\n    }\r\n  }\r\n  $removeChildProperties(child) {\r\n    const signals = QmlWeb.engine.completedSignals;\r\n    signals.splice(signals.indexOf(child.Component.completed), 1);\r\n    for (let i = 0; i < child.children.length; i++) {\r\n      this.$removeChildProperties(child.children[i]);\r\n    }\r\n  }\r\n}\r\nQmlWeb.registerQmlType(QtQuick_Repeater);\n","// eslint-disable-next-line no-undef\r\nclass QtQuick_GridView extends QtQuick_Repeater {\r\n  static enums = {\r\n    GridView: { \r\n      NoSnap: 0,\r\n      SnapToRow: 1,\r\n      SnapOneRow: 2,\r\n      Beginning: 0,\r\n      Center: 1,\r\n      End: 2,\r\n      Visible: 3,\r\n      Contain: 4,\r\n      SnapPosition: 5,\r\n      FlowLeftToRight: 0,\r\n      FlowTopToBottom : 1,\r\n    }\r\n  };\r\n  static properties = {\r\n    currentIndex: { type: \"int\", initialValue: -1 },\r\n    currentItem: { type: \"var\", initialValue: null },\r\n    highlightFollowsCurrentItem: { type: \"bool\", initialValue: true },\r\n    snapMode: { type: \"enum\", initialValue: 0 },\r\n    flow: { type: \"enum\", initialValue: 0 },\r\n    contentHeight: \"real\",\r\n    contentWidth: \"real\",\r\n    contentX: \"real\",\r\n    contentY: \"real\",\r\n\r\n    cellWidth: \"real\",\r\n    cellHeight: \"real\",\r\n  };\r\n  static signals = {\r\n    completed: [],\r\n  };\r\n  constructor(meta) {\r\n    super(meta);\r\n\r\n    this.modelChanged.connect(this, this.$styleChanged);\r\n    this.delegateChanged.connect(this, this.$styleChanged);\r\n    this._childrenInserted.connect(this, this.$applyStyleOnItem);\r\n    this.enabledChanged.connect(this, this.$enabledChanged);\r\n    this.currentIndexChanged.connect(this, this.$currentIndexChanged);\r\n    this.highlightFollowsCurrentItemChanged.connect(this, this.$highlightFollowsCurrentItemChanged);\r\n\r\n    this.dom.style.pointerEvents = \"all\";\r\n    this.dom.style.overflow = \"hidden\";\r\n    this.dom.style.whiteSpace = \"nowrap\";\r\n    this.dom.style.display = \"flex\";\r\n    this.dom.style.flexWrap = \"wrap\";\r\n\r\n\r\n    const bg = this.impl = document.createElement(\"div\");\r\n    bg.style.pointerEvents = \"none\";\r\n    bg.style.position = \"absolute\";\r\n    bg.style.left = bg.style.right = bg.style.top = bg.style.bottom = \"0px\";\r\n    bg.style.background = \"none\";\r\n    this.dom.appendChild(bg);\r\n\r\n    this.isDragging = false;\r\n    this.mouseIsDown = false;\r\n    this.curSX = 0;\r\n    this.curSY = 0;\r\n    this.dom.addEventListener(\"mousedown\", (e) => {\r\n      e.stopPropagation();\r\n      e.preventDefault();\r\n      this.mouseIsDown = true;\r\n      this.curSX = e.pageX;\r\n      this.curSY = e.pageY;\r\n\r\n      this.dom.classList.add(\"unselectable\");\r\n    });\r\n    this.dom.addEventListener(\"mouseup\", (e) => {\r\n      e.stopPropagation();\r\n      e.preventDefault();\r\n      setTimeout(() => {this.$onAllMouseEvent()}, 100);\r\n      this.isDragging = false;\r\n      this.mouseIsDown = false;\r\n      this.dom.classList.remove(\"unselectable\");\r\n      this.$contentXYChanged()\r\n    });\r\n    this.dom.addEventListener(\"mouseleave\", (e) => {\r\n      e.stopPropagation();\r\n      e.preventDefault();\r\n      setTimeout(() => {this.$onAllMouseEvent()}, 100);\r\n      this.isDragging = false;\r\n      this.mouseIsDown = false;\r\n      this.dom.classList.remove(\"unselectable\");\r\n      this.$contentXYChanged()\r\n    });\r\n    this.dom.addEventListener(\"mousemove\", (e) => {\r\n      e.stopPropagation();\r\n      e.preventDefault();\r\n      if (this.mouseIsDown && this.enabled) {\r\n        this.$offAllMouseEvent();\r\n        this.isDragging = true;\r\n        this.dom.scrollBy(this.flow === GridView.FlowTopToBottom ? this.curSX - e.pageX : 0, this.flow === GridView.FlowLeftToRight ? this.curSY - e.pageY : 0);\r\n\r\n        this.$calcContentXY(this.curSX - e.pageX, this.curSY - e.pageY)\r\n        this.curSX = e.pageX;\r\n        this.curSY = e.pageY;\r\n      }\r\n    });\r\n\r\n    this.dom.addEventListener(\"wheel\", (e) => {\r\n      e.stopPropagation();\r\n      e.preventDefault();\r\n      this.$calcContentXY(e.deltaX, e.deltaY);\r\n    });\r\n    this.dom.addEventListener(\"scroll\", (e) => {\r\n      e.stopPropagation();\r\n      e.preventDefault();\r\n    });\r\n    this.modelNotReady = false;\r\n\r\n    this.Component.completed.connect(this, this.Component$onCompleted);\r\n\r\n    this.contentHeightChanged.connect(this, this.$contentHeightChanged);\r\n    this.contentWidthChanged.connect(this, this.$contentWidthChanged);\r\n    this.contentXChanged.connect(this, this.$contentXChanged);\r\n    this.contentYChanged.connect(this, this.$contentYChanged);\r\n    this.cellWidthChanged.connect(this, this.$cellWidthChanged);\r\n    this.cellHeightChanged.connect(this, this.$cellHeightChanged);\r\n    this.flowChanged.connect(this, this.$flowChanged)\r\n\r\n  }\r\n  _container() {\r\n    return this;\r\n  }\r\n  Component$onCompleted(){\r\n    this.completed();\r\n  }\r\n  $flowChanged(){\r\n    if(this.flow === GridView.FlowLeftToRight){\r\n      this.dom.style.flexDirection = \"row\"\r\n    } else {\r\n      this.dom.style.flexDirection = \"column\"\r\n    }\r\n    \r\n  }\r\n  $cellWidthChanged(){\r\n    this.$styleChanged();\r\n  }\r\n  $cellHeightChanged(){\r\n    this.$styleChanged();\r\n  }\r\n  $calcContentXY(deltaX, deltaY){\r\n    if(this.enabled){\r\n      let el = null\r\n\r\n      for (let i = 0; i < this.$items.length; i++) {\r\n        let x1 = this.$items[i].dom.offsetLeft - parseFloat(this.$items[i].dom.style.marginLeft.replace('px', '').replace('%', ''))\r\n        let y1 = this.$items[i].dom.offsetTop - parseFloat(this.$items[i].dom.style.marginTop.replace('px', '').replace('%', ''))\r\n        let x2 = this.$items[i].dom.offsetLeft + this.$items[i].width\r\n        let y2 = this.$items[i].dom.offsetTop + this.$items[i].height\r\n        if(!el && this.dom.scrollLeft >= x1 && this.dom.scrollLeft < x2 && this.dom.scrollTop >= y1 && this.dom.scrollTop < y2){\r\n          el = this.$items[i]\r\n\r\n          if(this.snapMode === GridView.SnapOneRow){\r\n            if((this.flow === GridView.FlowTopToBottom && deltaX < 0 || this.flow === GridView.FlowLeftToRight && deltaY < 0) && i - 1 >= 0){\r\n              el = this.$items[i-1]\r\n            }\r\n            if((this.flow === GridView.FlowTopToBottom && deltaX > 0 || this.flow === GridView.FlowLeftToRight && deltaY > 0) && i + 1 < this.$items.length){\r\n              el = this.$items[i+1]\r\n            }\r\n          }\r\n        \r\n        }\r\n      }\r\n\r\n      let p = this.$firstParentForWheel()\r\n      if(this.snapMode === GridView.NoSnap || el === null){\r\n        var limitH = Math.max(this.dom.clientHeight, this.dom.scrollHeight, this.dom.offsetHeight);\r\n        var limitW = Math.max(this.dom.clientWidth, this.dom.scrollWidth, this.dom.offsetWidth);\r\n        \r\n\r\n        if (this.flow === GridView.FlowTopToBottom) {\r\n          if(this.contentX + deltaX == this.contentX){\r\n            if(p) {\r\n              if(this.mouseIsDown) p.enabled = true\r\n              p.$calcContentXY(deltaX, deltaY)\r\n            }\r\n          } else\r\n          if(this.contentX + deltaX > limitW - this.width) {\r\n            this.contentX = limitW - this.width;\r\n            if(p) {\r\n              if(this.mouseIsDown) p.enabled = true\r\n              p.$calcContentXY(deltaX, deltaY)\r\n            }\r\n          } else\r\n          if(this.contentX + deltaX < 0) {\r\n            this.contentX = 0;\r\n            if(p) {\r\n              if(this.mouseIsDown) p.enabled = true\r\n              p.$calcContentXY(deltaX, deltaY)\r\n            }\r\n          } else this.contentX += deltaX;\r\n          \r\n        } else {\r\n          if(this.contentY + deltaY == this.contentY){\r\n            if(p) {\r\n              if(this.mouseIsDown) p.enabled = true\r\n              p.$calcContentXY(deltaX, deltaY)\r\n            }\r\n          } else \r\n          if(this.contentY + deltaY > limitH - this.height) {\r\n            this.contentY = limitH - this.height;\r\n            if(p) {\r\n              if(this.mouseIsDown) p.enabled = true\r\n              p.$calcContentXY(deltaX, deltaY)\r\n            }\r\n          } else\r\n          if(this.contentY + deltaY < 0) {\r\n            this.contentY = 0;\r\n            if(p) {\r\n              if(this.mouseIsDown) p.enabled = true\r\n              p.$calcContentXY(deltaX, deltaY)\r\n            }\r\n          } else this.contentY += deltaY;\r\n        }\r\n        \r\n      } else {\r\n        if (this.flow === GridView.FlowTopToBottom) {\r\n          if(this.contentX != el.dom.offsetLeft){\r\n            this.contentX = el.dom.offsetLeft; \r\n          } else {\r\n            if(p) {\r\n              if(this.mouseIsDown) p.enabled = true\r\n              p.$calcContentXY(deltaX, deltaY)\r\n            }\r\n          }\r\n        } else {\r\n          if(this.contentY != el.dom.offsetTop){\r\n            this.contentY = el.dom.offsetTop; \r\n          } else {\r\n            if(p) {\r\n              if(this.mouseIsDown) p.enabled = true\r\n              p.$calcContentXY(deltaX, deltaY)\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  $contentHeightChanged(){\r\n      if(this.contentHeight === 0){\r\n          this.impl.style.height = `100%`;\r\n          this.impl.style.bottom = `0`;\r\n      } else {\r\n          this.impl.style.height = `${this.contentHeight}px`;\r\n          this.impl.style.bottom = `${this.contentHeight}px`;\r\n      }\r\n  }\r\n  $contentWidthChanged(){\r\n      if(this.contentWidth === 0){\r\n          this.impl.style.width = `100%`;\r\n          this.impl.style.right = `0`;\r\n      } else {\r\n          this.impl.style.width = `${this.contentWidth}px`;\r\n          this.impl.style.right = `${this.contentWidth}px`;\r\n      }\r\n      \r\n  }\r\n\r\n  $contentXYChanged(){\r\n    switch(this.snapMode){\r\n      case GridView.NoSnap:\r\n        if (!this.mouseIsDown) this.dom.scrollTo(this.contentX, this.contentY);\r\n        break;\r\n      case GridView.SnapToRow:\r\n        if (!this.mouseIsDown) this.dom.scrollTo({left: this.contentX, top: this.contentY, behavior: \"smooth\"});\r\n        break;\r\n      case GridView.SnapOneRow:\r\n        if (!this.mouseIsDown) this.dom.scrollTo({left: this.contentX, top: this.contentY, behavior: \"smooth\"});\r\n        break;\r\n    }\r\n  }\r\n  $contentXChanged(){\r\n    this.$contentXYChanged()\r\n  }\r\n  $contentYChanged(){\r\n    this.$contentXYChanged()\r\n  }\r\n  positionViewAtBeginning(){\r\n    this.positionViewAtIndex(0, this.GridView.Beginning)\r\n  }\r\n  positionViewAtEnd(){\r\n    this.positionViewAtIndex(this.count-1, this.GridView.End)\r\n  }\r\n  positionViewAtIndex(index, mode){\r\n    let item = this.itemAt(index)\r\n    let offsetTop = item.dom.offsetTop ? item.dom.offsetTop : this.contentY\r\n    let offsetleft = item.dom.offsetleft ? item.dom.offsetleft : this.contentX\r\n    let clientWidth = item.dom.clientWidth\r\n    let clientHeight = item.dom.clientHeight\r\n\r\n    let parentWidth = this.dom.clientWidth\r\n    let parentHeight = this.dom.clientHeight\r\n\r\n    switch(mode){\r\n      case this.GridView.Beginning:\r\n        if (this.flow === GridView.FlowLeftToRight) {\r\n          this.contentX = offsetleft;\r\n        } else {\r\n          this.contentY = offsetTop;\r\n        }\r\n        break;\r\n      case this.GridView.End:\r\n        if (this.flow === GridView.FlowLeftToRight) {\r\n          this.contentX = offsetleft - parentWidth + clientWidth;\r\n        } else {\r\n          this.contentY = offsetTop - parentHeight + clientHeight;\r\n        }\r\n        break;\r\n      case this.GridView.Center:\r\n        if (this.flow === GridView.FlowLeftToRight) {\r\n          this.contentX = offsetleft - parentWidth/2 + clientWidth;\r\n        } else {\r\n          this.contentY = offsetTop - parentHeight/2 + clientHeight;\r\n        }\r\n        break;\r\n    }\r\n    this.contentX = this.dom.scrollLeft;\r\n    this.contentY = this.dom.scrollTop;\r\n  }\r\n  $enabledChanged(){\r\n    this.$styleChanged();\r\n  }\r\n  $highlightFollowsCurrentItemChanged(){\r\n    this.$currentIndexChanged();\r\n  }\r\n  $currentIndexChanged(){\r\n    if(this.currentIndex > -1){\r\n      if(this.count > 0){\r\n        this.currentItem = this.itemAt(this.currentIndex);\r\n        if(this.highlightFollowsCurrentItem && this.currentItem){\r\n        \r\n          let waitInterval = setInterval(() => {\r\n            let state = document.readyState;\r\n            if(state === 'interactive' || state === 'complete') {\r\n              this.currentItem.dom.scrollIntoView({block: \"start\", behavior: \"smooth\"});\r\n              clearInterval(waitInterval);\r\n            }\r\n          }, 100);\r\n        }\r\n      } else {\r\n        this.modelNotReady = true;\r\n      }\r\n    } else {\r\n      this.currentItem = null;\r\n    }\r\n  }\r\n  $applyModel() {\r\n    if (!this.delegate) {\r\n      return;\r\n    }\r\n    const model = this.$getModel();\r\n    if (model instanceof QmlWeb.JSItemModel) {\r\n      const flags = QmlWeb.Signal.UniqueConnection;\r\n      model.dataChanged.connect(this, this.$_onModelDataChanged, flags);\r\n      model.rowsInserted.connect(this, this.$_onRowsInserted, flags);\r\n      model.rowsMoved.connect(this, this.$_onRowsMoved, flags);\r\n      model.rowsRemoved.connect(this, this.$_onRowsRemoved, flags);\r\n      model.modelReset.connect(this, this.$_onModelReset, flags);\r\n\r\n      this.$removeChildren(0, this.$items.length);\r\n      this.$insertChildren(0, model.rowCount());\r\n    } else if (typeof model === \"number\") {\r\n      if (this.$items.length > model) {\r\n        // have more than we need\r\n        this.$removeChildren(model, this.$items.length);\r\n      } else {\r\n        // need more\r\n        this.$insertChildren(this.$items.length, model);\r\n      }\r\n    } else if (model instanceof Array) {\r\n      this.$removeChildren(0, this.$items.length);\r\n      this.$insertChildren(0, model.length);\r\n    }\r\n    this.count = this.$items.length;\r\n\r\n    if(this.modelNotReady){\r\n      this.currentIndexChanged();\r\n      this.modelNotReady = false;\r\n    }\r\n    \r\n  }\r\n  $insertChildren(startIndex, endIndex) {\r\n    if (endIndex <= 0) {\r\n      this.count = 0;\r\n      return;\r\n    }\r\n\r\n    const QMLOperationState = QmlWeb.QMLOperationState;\r\n    const createProperty = QmlWeb.createProperty;\r\n    const model = this.$getModel();\r\n    let index;\r\n    for (index = startIndex; index < endIndex; index++) {\r\n      const newItem = this.delegate.$createObject(this.parent);\r\n      createProperty(\"int\", newItem, \"index\", { initialValue: index });\r\n\r\n      if (typeof model === \"number\" || model instanceof Array) {\r\n        if (typeof newItem.$properties.modelData === \"undefined\") {\r\n          createProperty(\"variant\", newItem, \"modelData\");\r\n        }\r\n        const value = model instanceof Array ?\r\n                      model[index] :\r\n                      typeof model === \"number\" ? index : \"undefined\";\r\n        newItem.$properties.modelData.set(value, QmlWeb.QMLProperty.ReasonInit,\r\n          newItem, model.$context);\r\n      } else {\r\n        // QML exposes a \"model\" property in the scope that contains all role\r\n        // data.\r\n        const modelData = {};\r\n        for (let i = 0; i < model.roleNames.length; i++) {\r\n          const roleName = model.roleNames[i];\r\n          if (typeof newItem.$properties[roleName] === \"undefined\") {\r\n            createProperty(\"variant\", newItem, roleName);\r\n          }\r\n          const roleData = model.data(index, roleName);\r\n          modelData[roleName] = roleData;\r\n          newItem.$properties[roleName].set(\r\n            roleData, QmlWeb.QMLProperty.ReasonInit,\r\n            newItem, this.model.$context\r\n          );\r\n        }\r\n        if (typeof newItem.$properties.model === \"undefined\") {\r\n          createProperty(\"variant\", newItem, \"model\");\r\n        }\r\n        newItem.$properties.model.set(\r\n          modelData, QmlWeb.QMLProperty.ReasonInit,\r\n          newItem, this.model.$context\r\n        );\r\n      }\r\n\r\n      this.$items.splice(index, 0, newItem);\r\n\r\n      // parent must be set after the roles have been added to newItem scope in\r\n      // case we are outside of QMLOperationState.Init and parentChanged has\r\n      // any side effects that result in those roleNames being referenced.\r\n      newItem.parent = this;\r\n\r\n      // TODO debug this. Without check to Init, Completed sometimes called\r\n      // twice.. But is this check correct?\r\n      if (QmlWeb.engine.operationState !== QMLOperationState.Init &&\r\n          QmlWeb.engine.operationState !== QMLOperationState.Idle) {\r\n        // We don't call those on first creation, as they will be called\r\n        // by the regular creation-procedures at the right time.\r\n        this.$callOnCompleted(newItem);\r\n      }\r\n    }\r\n    if (QmlWeb.engine.operationState !== QMLOperationState.Init) {\r\n      // We don't call those on first creation, as they will be called\r\n      // by the regular creation-procedures at the right time.\r\n      QmlWeb.engine.$initializePropertyBindings();\r\n    }\r\n\r\n    if (index > 0) {\r\n      this._container().childrenChanged();\r\n    }\r\n\r\n    for (let i = endIndex; i < this.$items.length; i++) {\r\n      this.$items[i].index = i;\r\n    }\r\n  }\r\n  $applyStyleOnItem($item) {\r\n    $item.dom.style[\"margin\"] = '0';\r\n    $item.dom.style[\"position\"] = 'relative';\r\n    $item.dom.style[\"width\"] = `${this.cellWidth}px`;\r\n    $item.dom.style[\"height\"] = `${this.cellHeight}px`;\r\n  }\r\n  $styleChanged() {\r\n    this.dom.style.overflow = \"hidden\";\r\n\r\n    if(this.enabled){\r\n      if (this.flow === GridView.FlowLeftToRight) {\r\n        this.dom.style.overflowX = \"auto\";\r\n      } else {\r\n        this.dom.style.overflowY = \"auto\";\r\n      }\r\n    }\r\n\r\n    for (let i = 0; i < this.$items.length; ++i) {\r\n      this.$applyStyleOnItem(this.$items[i]);\r\n    }\r\n  }\r\n}\r\nQmlWeb.registerQmlType(QtQuick_GridView);\n","// eslint-disable-next-line no-undef\r\nclass QtQuick_ListView extends QtQuick_Repeater {\r\n  static enums = {\r\n    ListView: { \r\n      Vertical: Qt.Vertical,\r\n      Horizontal: Qt.Horizontal,\r\n      NoSnap: 0,\r\n      SnapToItem: 1,\r\n      SnapOneItem: 2,\r\n      Beginning: 0,\r\n      Center: 1,\r\n      End: 2,\r\n      Visible: 3,\r\n      Contain: 4,\r\n      SnapPosition: 5,\r\n    }\r\n  };\r\n  static properties = {\r\n    orientation: \"enum\",\r\n    spacing: \"real\",\r\n    currentIndex: { type: \"int\", initialValue: -1 },\r\n    currentItem: { type: \"var\", initialValue: null },\r\n    highlightFollowsCurrentItem: { type: \"bool\", initialValue: true },\r\n    snapMode: { type: \"enum\", initialValue: 0 },\r\n\r\n    contentHeight: \"real\",\r\n    contentWidth: \"real\",\r\n    contentX: \"real\",\r\n    contentY: \"real\",\r\n  };\r\n  static signals = {\r\n    completed: [],\r\n  };\r\n  constructor(meta) {\r\n    super(meta);\r\n\r\n    this.modelChanged.connect(this, this.$styleChanged);\r\n    this.delegateChanged.connect(this, this.$styleChanged);\r\n    this.orientationChanged.connect(this, this.$styleChanged);\r\n    this.spacingChanged.connect(this, this.$styleChanged);\r\n    this._childrenInserted.connect(this, this.$applyStyleOnItem);\r\n    this.enabledChanged.connect(this, this.$enabledChanged);\r\n    this.currentIndexChanged.connect(this, this.$currentIndexChanged);\r\n    this.highlightFollowsCurrentItemChanged.connect(this, this.$highlightFollowsCurrentItemChanged);\r\n\r\n    this.dom.style.pointerEvents = \"all\";\r\n    this.dom.style.overflow = \"hidden\";\r\n    this.dom.style.whiteSpace = \"nowrap\";\r\n\r\n\r\n    const bg = this.impl = document.createElement(\"div\");\r\n    bg.style.pointerEvents = \"none\";\r\n    bg.style.position = \"absolute\";\r\n    bg.style.left = bg.style.right = bg.style.top = bg.style.bottom = \"0px\";\r\n    bg.style.background = \"none\";\r\n    this.dom.appendChild(bg);\r\n\r\n    this.isDragging = false;\r\n    this.mouseIsDown = false;\r\n    this.curSX = 0;\r\n    this.curSY = 0;\r\n    this.dom.addEventListener(\"mousedown\", (e) => {\r\n      e.stopPropagation();\r\n      e.preventDefault();\r\n      this.mouseIsDown = true;\r\n      this.curSX = e.pageX;\r\n      this.curSY = e.pageY;\r\n\r\n      this.dom.classList.add(\"unselectable\");\r\n    });\r\n    this.dom.addEventListener(\"mouseup\", (e) => {\r\n      e.stopPropagation();\r\n      e.preventDefault();\r\n      setTimeout(() => {this.$onAllMouseEvent()}, 100);\r\n      this.isDragging = false;\r\n      this.mouseIsDown = false;\r\n      this.dom.classList.remove(\"unselectable\");\r\n      this.$contentXYChanged()\r\n    });\r\n    this.dom.addEventListener(\"mouseleave\", (e) => {\r\n      e.stopPropagation();\r\n      e.preventDefault();\r\n      setTimeout(() => {this.$onAllMouseEvent()}, 100);\r\n      this.isDragging = false;\r\n      this.mouseIsDown = false;\r\n      this.dom.classList.remove(\"unselectable\");\r\n      this.$contentXYChanged()\r\n    });\r\n    this.dom.addEventListener(\"mousemove\", (e) => {\r\n      e.stopPropagation();\r\n      e.preventDefault();\r\n      if (this.mouseIsDown && this.enabled) {\r\n        this.$offAllMouseEvent();\r\n        this.isDragging = true;\r\n        this.dom.scrollBy(this.orientation === Qt.Horizontal ? this.curSX - e.pageX : 0, this.orientation === Qt.Vertical ? this.curSY - e.pageY : 0);\r\n\r\n        this.$calcContentXY(this.curSX - e.pageX, this.curSY - e.pageY)\r\n        this.curSX = e.pageX;\r\n        this.curSY = e.pageY;\r\n      }\r\n    });\r\n\r\n    this.dom.addEventListener(\"wheel\", (e) => {\r\n      e.stopPropagation();\r\n      e.preventDefault();\r\n      this.$calcContentXY(e.deltaX, e.deltaY);\r\n    });\r\n    this.dom.addEventListener(\"scroll\", (e) => {\r\n      e.stopPropagation();\r\n      e.preventDefault();\r\n    });\r\n    this.modelNotReady = false;\r\n\r\n    this.Component.completed.connect(this, this.Component$onCompleted);\r\n\r\n    this.contentHeightChanged.connect(this, this.$contentHeightChanged);\r\n    this.contentWidthChanged.connect(this, this.$contentWidthChanged);\r\n    this.contentXChanged.connect(this, this.$contentXChanged);\r\n    this.contentYChanged.connect(this, this.$contentYChanged);\r\n\r\n    \r\n  }\r\n  _container() {\r\n    return this;\r\n  }\r\n  Component$onCompleted(){\r\n    this.completed();\r\n  }\r\n  $calcContentXY(deltaX, deltaY){\r\n    if(this.enabled){\r\n\r\n      \r\n      let el = null\r\n\r\n      //let deltaX = e.deltaX ? e.deltaX : this.curSX - e.pageX;\r\n      //let deltaY = e.deltaY ? e.deltaY : this.curSY - e.pageY;\r\n\r\n      for (let i = 0; i < this.$items.length; i++) {\r\n        let x1 = this.$items[i].dom.offsetLeft - parseFloat(this.$items[i].dom.style.marginLeft.replace('px', '').replace('%', ''))\r\n        let y1 = this.$items[i].dom.offsetTop - parseFloat(this.$items[i].dom.style.marginTop.replace('px', '').replace('%', ''))\r\n        let x2 = this.$items[i].dom.offsetLeft + this.$items[i].width\r\n        let y2 = this.$items[i].dom.offsetTop + this.$items[i].height\r\n        if(!el && this.dom.scrollLeft >= x1 && this.dom.scrollLeft < x2 && this.dom.scrollTop >= y1 && this.dom.scrollTop < y2){\r\n          el = this.$items[i]\r\n\r\n          if(this.snapMode === ListView.SnapOneItem){\r\n            if((this.orientation === Qt.Horizontal && deltaX < 0 || this.orientation === Qt.Vertical && deltaY < 0) && i - 1 >= 0){\r\n              el = this.$items[i-1]\r\n            }\r\n            if((this.orientation === Qt.Horizontal && deltaX > 0 || this.orientation === Qt.Vertical && deltaY > 0) && i + 1 < this.$items.length){\r\n              el = this.$items[i+1]\r\n            }\r\n          }\r\n        \r\n        }\r\n      }\r\n\r\n      let p = this.$firstParentForWheel()\r\n      if(this.snapMode === ListView.NoSnap || el === null){\r\n        var limitH = Math.max(this.dom.clientHeight, this.dom.scrollHeight, this.dom.offsetHeight);\r\n        var limitW = Math.max(this.dom.clientWidth, this.dom.scrollWidth, this.dom.offsetWidth);\r\n        \r\n\r\n        if (this.orientation === Qt.Horizontal) {\r\n          if(this.contentX + deltaX == this.contentX){\r\n            if(p) {\r\n              if(this.mouseIsDown) p.enabled = true\r\n              p.$calcContentXY(deltaX, deltaY)\r\n            }\r\n          } else\r\n          if(this.contentX + deltaX > limitW - this.width) {\r\n            this.contentX = limitW - this.width;\r\n            if(p) {\r\n              if(this.mouseIsDown) p.enabled = true\r\n              p.$calcContentXY(deltaX, deltaY)\r\n            }\r\n          } else\r\n          if(this.contentX + deltaX < 0) {\r\n            this.contentX = 0;\r\n            if(p) {\r\n              if(this.mouseIsDown) p.enabled = true\r\n              p.$calcContentXY(deltaX, deltaY)\r\n            }\r\n          } else this.contentX += deltaX;\r\n          \r\n        } else {\r\n          if(this.contentY + deltaY == this.contentY){\r\n            if(p) {\r\n              if(this.mouseIsDown) p.enabled = true\r\n              p.$calcContentXY(deltaX, deltaY)\r\n            }\r\n          } else \r\n          if(this.contentY + deltaY > limitH - this.height) {\r\n            this.contentY = limitH - this.height;\r\n            if(p) {\r\n              if(this.mouseIsDown) p.enabled = true\r\n              p.$calcContentXY(deltaX, deltaY)\r\n            }\r\n          } else\r\n          if(this.contentY + deltaY < 0) {\r\n            this.contentY = 0;\r\n            if(p) {\r\n              if(this.mouseIsDown) p.enabled = true\r\n              p.$calcContentXY(deltaX, deltaY)\r\n            }\r\n          } else this.contentY += deltaY;\r\n        }\r\n        \r\n      } else {\r\n        if (this.orientation === Qt.Horizontal) {\r\n          if(this.contentX != el.dom.offsetLeft){\r\n            this.contentX = el.dom.offsetLeft; \r\n          } else {\r\n            if(p) {\r\n              if(this.mouseIsDown) p.enabled = true\r\n              p.$calcContentXY(deltaX, deltaY)\r\n            }\r\n          }\r\n        } else {\r\n          if(this.contentY != el.dom.offsetTop){\r\n            this.contentY = el.dom.offsetTop; \r\n          } else {\r\n            if(p) {\r\n              if(this.mouseIsDown) p.enabled = true\r\n              p.$calcContentXY(deltaX, deltaY)\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  \r\n  $contentHeightChanged(){\r\n      if(this.contentHeight === 0){\r\n          this.impl.style.height = `100%`;\r\n          this.impl.style.bottom = `0`;\r\n      } else {\r\n          this.impl.style.height = `${this.contentHeight}px`;\r\n          this.impl.style.bottom = `${this.contentHeight}px`;\r\n      }\r\n  }\r\n  $contentWidthChanged(){\r\n      if(this.contentWidth === 0){\r\n          this.impl.style.width = `100%`;\r\n          this.impl.style.right = `0`;\r\n      } else {\r\n          this.impl.style.width = `${this.contentWidth}px`;\r\n          this.impl.style.right = `${this.contentWidth}px`;\r\n      }\r\n      \r\n  }\r\n\r\n  $contentXYChanged(){\r\n    switch(this.snapMode){\r\n      case ListView.NoSnap:\r\n        if (!this.mouseIsDown) this.dom.scrollTo(this.contentX, this.contentY);\r\n        break;\r\n      case ListView.SnapToItem:\r\n        if (!this.mouseIsDown) this.dom.scrollTo({left: this.contentX, top: this.contentY, behavior: \"smooth\"});\r\n        break;\r\n      case ListView.SnapOneItem:\r\n        if (!this.mouseIsDown) this.dom.scrollTo({left: this.contentX, top: this.contentY, behavior: \"smooth\"});\r\n        break;\r\n    }\r\n  }\r\n  $contentXChanged(){\r\n    this.$contentXYChanged()\r\n  }\r\n  $contentYChanged(){\r\n    this.$contentXYChanged()\r\n  }\r\n  positionViewAtBeginning(){\r\n    this.positionViewAtIndex(0, this.ListView.Beginning)\r\n  }\r\n  positionViewAtEnd(){\r\n    this.positionViewAtIndex(this.count-1, this.ListView.End)\r\n  }\r\n  positionViewAtIndex(index, mode){\r\n    let item = this.itemAt(index)\r\n    let offsetTop = item.dom.offsetTop ? item.dom.offsetTop : this.contentY\r\n    let offsetleft = item.dom.offsetleft ? item.dom.offsetleft : this.contentX\r\n    let clientWidth = item.dom.clientWidth\r\n    let clientHeight = item.dom.clientHeight\r\n\r\n    let parentWidth = this.dom.clientWidth\r\n    let parentHeight = this.dom.clientHeight\r\n\r\n    switch(mode){\r\n      case this.ListView.Beginning:\r\n        if (this.orientation === Qt.Horizontal) {\r\n          this.contentX = offsetleft;\r\n        } else {\r\n          this.contentY = offsetTop;\r\n        }\r\n        break;\r\n      case this.ListView.End:\r\n        if (this.orientation === Qt.Horizontal) {\r\n          this.contentX = offsetleft - parentWidth + clientWidth;\r\n        } else {\r\n          this.contentY = offsetTop - parentHeight + clientHeight;\r\n        }\r\n        break;\r\n      case this.ListView.Center:\r\n        if (this.orientation === Qt.Horizontal) {\r\n          this.contentX = offsetleft - parentWidth/2 + clientWidth;\r\n        } else {\r\n          this.contentY = offsetTop - parentHeight/2 + clientHeight;\r\n        }\r\n        break;\r\n    }\r\n    this.contentX = this.dom.scrollLeft;\r\n    this.contentY = this.dom.scrollTop;\r\n  }\r\n  $enabledChanged(){\r\n    this.$styleChanged();\r\n  }\r\n  $highlightFollowsCurrentItemChanged(){\r\n    this.$currentIndexChanged();\r\n  }\r\n  $currentIndexChanged(){\r\n    if(this.currentIndex > -1){\r\n      if(this.count > 0){\r\n        this.currentItem = this.itemAt(this.currentIndex);\r\n        if(this.highlightFollowsCurrentItem && this.currentItem){\r\n        \r\n          let waitInterval = setInterval(() => {\r\n            let state = document.readyState;\r\n            if(state === 'interactive' || state === 'complete') {\r\n              this.currentItem.dom.scrollIntoView({block: \"start\", behavior: \"smooth\"});\r\n              clearInterval(waitInterval);\r\n            }\r\n          }, 100);\r\n        }\r\n      } else {\r\n        this.modelNotReady = true;\r\n      }\r\n    } else {\r\n      this.currentItem = null;\r\n    }\r\n  }\r\n  $applyModel() {\r\n    if (!this.delegate) {\r\n      return;\r\n    }\r\n    const model = this.$getModel();\r\n    if (model instanceof QmlWeb.JSItemModel) {\r\n      const flags = QmlWeb.Signal.UniqueConnection;\r\n      model.dataChanged.connect(this, this.$_onModelDataChanged, flags);\r\n      model.rowsInserted.connect(this, this.$_onRowsInserted, flags);\r\n      model.rowsMoved.connect(this, this.$_onRowsMoved, flags);\r\n      model.rowsRemoved.connect(this, this.$_onRowsRemoved, flags);\r\n      model.modelReset.connect(this, this.$_onModelReset, flags);\r\n\r\n      this.$removeChildren(0, this.$items.length);\r\n      this.$insertChildren(0, model.rowCount());\r\n    } else if (typeof model === \"number\") {\r\n      if (this.$items.length > model) {\r\n        // have more than we need\r\n        this.$removeChildren(model, this.$items.length);\r\n      } else {\r\n        // need more\r\n        this.$insertChildren(this.$items.length, model);\r\n      }\r\n    } else if (model instanceof Array) {\r\n      this.$removeChildren(0, this.$items.length);\r\n      this.$insertChildren(0, model.length);\r\n    }\r\n    this.count = this.$items.length;\r\n\r\n    if(this.modelNotReady){\r\n      this.currentIndexChanged();\r\n      this.modelNotReady = false;\r\n    }\r\n    \r\n  }\r\n  $insertChildren(startIndex, endIndex) {\r\n    if (endIndex <= 0) {\r\n      this.count = 0;\r\n      return;\r\n    }\r\n\r\n    const QMLOperationState = QmlWeb.QMLOperationState;\r\n    const createProperty = QmlWeb.createProperty;\r\n    const model = this.$getModel();\r\n    let index;\r\n    for (index = startIndex; index < endIndex; index++) {\r\n      const newItem = this.delegate.$createObject(this.parent);\r\n      createProperty(\"int\", newItem, \"index\", { initialValue: index });\r\n\r\n      if (typeof model === \"number\" || model instanceof Array) {\r\n        if (typeof newItem.$properties.modelData === \"undefined\") {\r\n          createProperty(\"variant\", newItem, \"modelData\");\r\n        }\r\n        const value = model instanceof Array ?\r\n                      model[index] :\r\n                      typeof model === \"number\" ? index : \"undefined\";\r\n        newItem.$properties.modelData.set(value, QmlWeb.QMLProperty.ReasonInit,\r\n          newItem, model.$context);\r\n      } else {\r\n        // QML exposes a \"model\" property in the scope that contains all role\r\n        // data.\r\n        const modelData = {};\r\n        for (let i = 0; i < model.roleNames.length; i++) {\r\n          const roleName = model.roleNames[i];\r\n          if (typeof newItem.$properties[roleName] === \"undefined\") {\r\n            createProperty(\"variant\", newItem, roleName);\r\n          }\r\n          const roleData = model.data(index, roleName);\r\n          modelData[roleName] = roleData;\r\n          newItem.$properties[roleName].set(\r\n            roleData, QmlWeb.QMLProperty.ReasonInit,\r\n            newItem, this.model.$context\r\n          );\r\n        }\r\n        if (typeof newItem.$properties.model === \"undefined\") {\r\n          createProperty(\"variant\", newItem, \"model\");\r\n        }\r\n        newItem.$properties.model.set(\r\n          modelData, QmlWeb.QMLProperty.ReasonInit,\r\n          newItem, this.model.$context\r\n        );\r\n      }\r\n\r\n      this.$items.splice(index, 0, newItem);\r\n\r\n      // parent must be set after the roles have been added to newItem scope in\r\n      // case we are outside of QMLOperationState.Init and parentChanged has\r\n      // any side effects that result in those roleNames being referenced.\r\n      newItem.parent = this;\r\n\r\n      // TODO debug this. Without check to Init, Completed sometimes called\r\n      // twice.. But is this check correct?\r\n      if (QmlWeb.engine.operationState !== QMLOperationState.Init &&\r\n          QmlWeb.engine.operationState !== QMLOperationState.Idle) {\r\n        // We don't call those on first creation, as they will be called\r\n        // by the regular creation-procedures at the right time.\r\n        this.$callOnCompleted(newItem);\r\n      }\r\n    }\r\n    if (QmlWeb.engine.operationState !== QMLOperationState.Init) {\r\n      // We don't call those on first creation, as they will be called\r\n      // by the regular creation-procedures at the right time.\r\n      QmlWeb.engine.$initializePropertyBindings();\r\n    }\r\n\r\n    if (index > 0) {\r\n      this._container().childrenChanged();\r\n    }\r\n\r\n    for (let i = endIndex; i < this.$items.length; i++) {\r\n      this.$items[i].index = i;\r\n    }\r\n  }\r\n  $applyStyleOnItem($item) {\r\n    const Qt = QmlWeb.Qt;\r\n    $item.dom.style[\"margin\"] = '0';\r\n    $item.dom.style[\"position\"] = 'relative';\r\n    //$item.dom.style.position = \"initial\";\r\n    if (this.orientation === Qt.Horizontal) {\r\n      $item.dom.style.display = \"inline-block\";\r\n      if ($item !== this.$items[0]) {\r\n        $item.dom.style[\"margin-left\"] = `${this.spacing}px`;\r\n      }\r\n    } else {\r\n      //$item.dom.style.display = \"block\";\r\n      if ($item !== this.$items[0]) {\r\n        $item.dom.style[\"margin-top\"] = `${this.spacing}px`;\r\n      }\r\n    }\r\n  }\r\n  $styleChanged() {\r\n    this.dom.style.overflow = \"hidden\";\r\n\r\n    if(this.enabled){\r\n      if (this.orientation === Qt.Horizontal) {\r\n        this.dom.style.overflowX = \"auto\";\r\n      } else {\r\n        this.dom.style.overflowY = \"auto\";\r\n      }\r\n    }\r\n    for (let i = 0; i < this.$items.length; ++i) {\r\n      this.$applyStyleOnItem(this.$items[i]);\r\n    }\r\n  }\r\n}\r\nQmlWeb.registerQmlType(QtQuick_ListView);\n","// eslint-disable-next-line no-undef\r\nclass QtQuick_Rotation extends QtQml_QtObject {\r\n  static properties = {\r\n    angle: \"real\"\r\n  };\r\n\r\n  constructor(meta) {\r\n    super(meta);\r\n\r\n    this.axis = new QmlWeb.QObject(this);\r\n    QmlWeb.createProperties(this.axis, {\r\n      x: \"real\",\r\n      y: \"real\",\r\n      z: { type: \"real\", initialValue: 1 }\r\n    });\r\n\r\n    this.origin = new QmlWeb.QObject(this);\r\n    QmlWeb.createProperties(this.origin, {\r\n      x: \"real\",\r\n      y: \"real\"\r\n    });\r\n\r\n    this.angleChanged.connect(this.$parent, this.$parent.$updateTransform);\r\n    this.axis.xChanged.connect(this.$parent, this.$parent.$updateTransform);\r\n    this.axis.yChanged.connect(this.$parent, this.$parent.$updateTransform);\r\n    this.axis.zChanged.connect(this.$parent, this.$parent.$updateTransform);\r\n    this.origin.xChanged.connect(this, this.$updateOrigin);\r\n    this.origin.yChanged.connect(this, this.$updateOrigin);\r\n    this.$parent.$updateTransform();\r\n  }\r\n  $updateOrigin() {\r\n    const style = this.$parent.dom.style;\r\n    style.transformOrigin = `${this.origin.x}px ${this.origin.y}px`;\r\n    style.webkitTransformOrigin = `${this.origin.x}px ${this.origin.y}px`;\r\n  }\r\n}\r\nQmlWeb.registerQmlType(QtQuick_Rotation);\n","// eslint-disable-next-line no-undef\r\nclass QtQuick_RotationAnimator extends QtQuick_Animator {\r\n  static versions = /^2\\./;\r\n\r\n  // TODO\r\n}\r\nQmlWeb.registerQmlType(QtQuick_RotationAnimator);\n","// eslint-disable-next-line no-undef\r\nclass QtQuick_Row extends QtQuick_Positioner {\r\n  static properties = {\r\n    layoutDirection: \"enum\"\r\n  };\r\n\r\n  constructor(meta) {\r\n    super(meta);\r\n\r\n    this.layoutDirectionChanged.connect(this, this.layoutChildren);\r\n    this.layoutChildren();\r\n  }\r\n  layoutChildren() {\r\n    let curPos = this.padding;\r\n    let maxHeight = 0;\r\n    // When layoutDirection is RightToLeft we need oposite order\r\n    let i = this.layoutDirection === 1 ? this.children.length - 1 : 0;\r\n    const endPoint = this.layoutDirection === 1 ? -1 : this.children.length;\r\n    const step = this.layoutDirection === 1 ? -1 : 1;\r\n    for (; i !== endPoint; i += step) {\r\n      const child = this.children[i];\r\n      if (!(child.visible && child.width && child.height)) {\r\n        continue;\r\n      }\r\n      maxHeight = child.height > maxHeight ? child.height : maxHeight;\r\n\r\n      child.x = curPos;\r\n      if (this.padding > 0) child.y = this.padding;\r\n\r\n      curPos += child.width + this.spacing;\r\n    }\r\n    this.implicitHeight = maxHeight + this.padding * 2;\r\n    // We want no spacing at the right side\r\n    this.implicitWidth = curPos - this.spacing + this.padding;\r\n  }\r\n}\r\nQmlWeb.registerQmlType(QtQuick_Row);\n","// eslint-disable-next-line no-undef\r\nclass QtQuick_Scale extends QtQml_QtObject {\r\n  static properties = {\r\n    xScale: { type: \"real\", initialValue: 1 },\r\n    yScale: { type: \"real\", initialValue: 1 }\r\n  };\r\n\r\n  constructor(meta) {\r\n    super(meta);\r\n\r\n    this.origin = new QmlWeb.QObject(this);\r\n    QmlWeb.createProperties(this.origin, {\r\n      x: \"real\",\r\n      y: \"real\"\r\n    });\r\n\r\n    this.xScaleChanged.connect(this.$parent, this.$parent.$updateTransform);\r\n    this.yScaleChanged.connect(this.$parent, this.$parent.$updateTransform);\r\n    this.origin.xChanged.connect(this, this.$updateOrigin);\r\n    this.origin.yChanged.connect(this, this.$updateOrigin);\r\n\r\n    /* QML default origin is top-left, while CSS default origin is centre, so\r\n     * $updateOrigin must be called to set the initial transformOrigin. */\r\n    this.$updateOrigin();\r\n  }\r\n  $updateOrigin() {\r\n    const style = this.$parent.dom.style;\r\n    style.transformOrigin = `${this.origin.x}px ${this.origin.y}px`;\r\n    style.webkitTransformOrigin = `${this.origin.x}px ${this.origin.y}px`;\r\n  }\r\n}\r\nQmlWeb.registerQmlType(QtQuick_Scale);\n","// eslint-disable-next-line no-undef\r\nclass QtQuick_ScaleAnimator extends QtQuick_Animator {\r\n  static versions = /^2\\./;\r\n\r\n  // TODO\r\n}\r\nQmlWeb.registerQmlType(QtQuick_ScaleAnimator);\n","// eslint-disable-next-line no-undef\r\nclass QtQuick_SequentialAnimation extends QtQuick_Animation {\r\n  static properties = {\r\n    animations: \"list\"\r\n  };\r\n  static defaultProperty = \"animations\";\r\n\r\n  constructor(meta) {\r\n    super(meta);\r\n\r\n    this.animationsChanged.connect(this, this.$onAnimatonsChanged);\r\n\r\n    QmlWeb.engine.$registerStart(() => {\r\n      if (!this.running) return;\r\n      this.running = false; // toggled back by start();\r\n      this.start();\r\n    });\r\n    QmlWeb.engine.$registerStop(() => self.stop());\r\n  }\r\n  $onAnimatonsChanged() {\r\n    const flags = QmlWeb.Signal.UniqueConnection;\r\n    for (let i = 0; i < this.animations.length; i++) {\r\n      const animation = this.animations[i];\r\n      animation.runningChanged.connect(this, this.$nextAnimation, flags);\r\n    }\r\n  }\r\n  $nextAnimation(proceed) {\r\n    if (this.running && !proceed) {\r\n      this.$curIndex++;\r\n      if (this.$curIndex < this.animations.length) {\r\n        const anim = this.animations[this.$curIndex];\r\n        console.log(\"nextAnimation\", this, this.$curIndex, anim);\r\n        anim.start();\r\n      } else {\r\n        this.$passedLoops++;\r\n        if (this.$passedLoops >= this.loops) {\r\n          this.complete();\r\n        } else {\r\n          this.$curIndex = -1;\r\n          this.$nextAnimation();\r\n        }\r\n      }\r\n    }\r\n  }\r\n  start() {\r\n    if (this.running) return;\r\n    this.running = true;\r\n    this.$curIndex = -1;\r\n    this.$passedLoops = 0;\r\n    this.$nextAnimation();\r\n  }\r\n  stop() {\r\n    if (!this.running) return;\r\n    this.running = false;\r\n    if (this.$curIndex < this.animations.length) {\r\n      this.animations[this.$curIndex].stop();\r\n    }\r\n  }\r\n  complete() {\r\n    if (!this.running) return;\r\n    if (this.$curIndex < this.animations.length) {\r\n      // Stop current animation\r\n      this.animations[this.$curIndex].stop();\r\n    }\r\n    this.running = false;\r\n  }\r\n}\r\nQmlWeb.registerQmlType(QtQuick_SequentialAnimation);\n","// eslint-disable-next-line no-undef\r\nclass QtQuick_ShaderEffect extends QtQuick_Item {\r\n  static enums = {\r\n    ShaderEffect: {\r\n      NoCulling: 0, BackFaceCulling: 1, FrontFaceCulling: 2,\r\n      Compiled: 0, Uncompiled: 1, Error: 2\r\n    }\r\n  };\r\n  static properties = {\r\n    blending: { type: \"bool\", initialValue: true },\r\n    cullMode: \"enum\", // ShaderEffect.NoCulling\r\n    fragmentShader: \"string\",\r\n    log: \"string\",\r\n    mesh: \"var\",\r\n    status: { type: \"enum\", initialValue: 1 }, // ShaderEffect.Uncompiled\r\n    supportsAtlasTextures: \"bool\",\r\n    vertexShader: \"string\"\r\n  };\r\n\r\n  // TODO\r\n}\r\nQmlWeb.registerQmlType(QtQuick_ShaderEffect);\n","// eslint-disable-next-line no-undef\r\nclass QtQuick_ShaderEffectSource extends QtQuick_Item {\r\n  static enums = {\r\n    ShaderEffectSource: {\r\n      Alpha: 0x6406, RGB: 0x6407, RGBA: 0x6408,\r\n      NoMirroring: 0, MirrorHorizontally: 1, MirrorVertically: 2,\r\n      ClampToEdge: 0, RepeatHorizontally: 1, RepeatVertically: 2, Repeat: 3\r\n    }\r\n  };\r\n  static properties = {\r\n    format: { type: \"enum\", initialValue: 0x6408 }, // ShaderEffectSource.RGBA\r\n    hideSource: \"bool\",\r\n    live: { type: \"bool\", initialValue: true },\r\n    mipmap: \"bool\",\r\n    recursive: \"bool\",\r\n    sourceItem: \"Item\",\r\n    sourceRect: \"rect\",\r\n    textureMirroring: { type: \"enum\", initialValue: 2 }, // MirrorVertically\r\n    textureSize: \"size\",\r\n    wrapMode: \"enum\" // ShaderEffectSource.ClampToEdge\r\n  };\r\n\r\n  // TODO\r\n\r\n  scheduleUpdate() {\r\n    // TODO\r\n  }\r\n}\r\nQmlWeb.registerQmlType(QtQuick_ShaderEffectSource);\n","// eslint-disable-next-line no-undef\r\nclass QtQuick_State extends QtQml_QtObject {\r\n  static properties = {\r\n    name: \"string\",\r\n    changes: \"list\",\r\n    extend: \"string\",\r\n    when: \"bool\"\r\n  };\r\n  static defaultProperty = \"changes\";\r\n\r\n  constructor(meta) {\r\n    super(meta);\r\n\r\n    this.$item = this.$parent;\r\n\r\n    this.whenChanged.connect(this, this.$onWhenChanged);\r\n  }\r\n  $getAllChanges() {\r\n    if (this.extend) {\r\n      /* ECMAScript 2015. TODO: polyfill Array?\r\n      const base = this.$item.states.find(state => state.name === this.extend);\r\n      */\r\n      const states = this.$item.states;\r\n      const base = states.filter(state => state.name === this.extend)[0];\r\n      if (base) {\r\n        return base.$getAllChanges().concat(this.changes);\r\n      }\r\n      console.error(\"Can't find the state to extend!\");\r\n    }\r\n    return this.changes;\r\n  }\r\n  $onWhenChanged(newVal) {\r\n    if (newVal) {\r\n      this.$item.state = this.name;\r\n    } else if (this.$item.state === this.name) {\r\n      this.$item.state = \"\";\r\n    }\r\n  }\r\n}\r\nQmlWeb.registerQmlType(QtQuick_State);\n","const platformsDetectors = [\r\n  //{ name: \"W8\", regexp: /Windows NT 6\\.2/ },\r\n  //{ name: \"W7\", regexp: /Windows NT 6\\.1/ },\r\n  //{ name: \"Windows\", regexp: /Windows NT/ },\r\n  { name: \"OSX\", regexp: /Macintosh/ }\r\n];\r\n\r\nconst systemPalettes = {};\r\n\r\n// eslint-disable-next-line no-undef\r\nclass QtQuick_SystemPalette extends QtQml_QtObject {\r\n  static enums = {\r\n    SystemPalette: {\r\n      Active: 0, Inactive: 2, Disabled: 1\r\n    }\r\n  };\r\n  static properties = {\r\n    alternateBase: { type: \"color\", readOnly: true },\r\n    base: { type: \"color\", readOnly: true },\r\n    button: { type: \"color\", readOnly: true },\r\n    buttonText: { type: \"color\", readOnly: true },\r\n    dark: { type: \"color\", readOnly: true },\r\n    highlight: { type: \"color\", readOnly: true },\r\n    highlightedText: { type: \"color\", readOnly: true },\r\n    light: { type: \"color\", readOnly: true },\r\n    mid: { type: \"color\", readOnly: true },\r\n    midlight: { type: \"color\", readOnly: true },\r\n    shadow: { type: \"color\", readOnly: true },\r\n    text: { type: \"color\", readOnly: true },\r\n    window: { type: \"color\", readOnly: true },\r\n    windowText: { type: \"color\", readOnly: true },\r\n\r\n    colorGroup: \"enum\"\r\n  };\r\n\r\n  constructor(meta) {\r\n    super(meta);\r\n\r\n    this.colorGroupChanged.connect(this, this.$onColorGroupChanged);\r\n\r\n    this.$platform = \"OSX\";\r\n    // Detect OS\r\n    for (let i = 0; i < platformsDetectors.length; ++i) {\r\n      if (platformsDetectors[i].regexp.test(navigator.userAgent)) {\r\n        this.$platform = platformsDetectors[i].name;\r\n        break;\r\n      }\r\n    }\r\n\r\n    this.$onColorGroupChanged(this.colorGroup);\r\n  }\r\n  $onColorGroupChanged(newVal) {\r\n    const name = [\"active\", \"disabled\", \"inactive\"][newVal];\r\n    const pallete = systemPalettes[this.$platform][name];\r\n    this.$canEditReadOnlyProperties = true;\r\n    Object.keys(pallete).forEach(key => {\r\n      this[key] = pallete[key];\r\n    });\r\n    delete this.$canEditReadOnlyProperties;\r\n  }\r\n}\r\n\r\nsystemPalettes.OSX = {\r\n  active: {\r\n    alternateBase: \"#f6f6f6\",\r\n    base: \"#ffffff\",\r\n    button: \"#ededed\",\r\n    buttonText: \"#000000\",\r\n    dark: \"#bfbfbf\",\r\n    highlight: \"#fbed73\",\r\n    highlightText: \"#000000\",\r\n    light: \"#ffffff\",\r\n    mid: \"#a9a9a9\",\r\n    midlight: \"#f6f6f6\",\r\n    shadow: \"#8b8b8b\",\r\n    text: \"#000000\",\r\n    window: \"#ededed\",\r\n    windowText: \"#000000\"\r\n  },\r\n  inactive: {\r\n    alternateBase: \"#f6f6f6\",\r\n    base: \"#ffffff\",\r\n    button: \"#ededed\",\r\n    buttonText: \"#000000\",\r\n    dark: \"#bfbfbf\",\r\n    highlight: \"#d0d0d0\",\r\n    highlightText: \"#000000\",\r\n    light: \"#ffffff\",\r\n    mid: \"#a9a9a9\",\r\n    midlight: \"#f6f6f6\",\r\n    shadow: \"#8b8b8b\",\r\n    text: \"#000000\",\r\n    window: \"#ededed\",\r\n    windowText: \"#000000\"\r\n  },\r\n  disabled: {\r\n    alternateBase: \"#f6f6f6\",\r\n    base: \"#ededed\",\r\n    button: \"#ededed\",\r\n    buttonText: \"#949494\",\r\n    dark: \"#bfbfbf\",\r\n    highlight: \"#d0d0d0\",\r\n    highlightText: \"#7f7f7f\",\r\n    light: \"#ffffff\",\r\n    mid: \"#a9a9a9\",\r\n    midlight: \"#f6f6f6\",\r\n    shadow: \"#8b8b8b\",\r\n    text: \"#7f7f7f\",\r\n    window: \"#ededed\",\r\n    windowText: \"#7f7f7f\"\r\n  }\r\n};\r\n\r\nQmlWeb.systemPalettes = systemPalettes;\r\nQmlWeb.platformsDetectors = platformsDetectors;\r\nQmlWeb.registerQmlType(QtQuick_SystemPalette);\n","// eslint-disable-next-line no-undef\r\nclass QtQuick_Text extends QtQuick_Item {\r\n  static enums = {\r\n    Text: {\r\n      NoWrap: 0, WordWrap: 1, WrapAnywhere: 2, Wrap: 3,\r\n      WrapAtWordBoundaryOrAnywhere: 4,\r\n      AlignLeft: 1, AlignRight: 2, AlignHCenter: 4, AlignJustify: 8,\r\n      AlignTop: 32, AlignBottom: 64, AlignVCenter: 128,\r\n      AutoText: 2, PlainText: 0, StyledText: 4, RichText: 1,\r\n      Normal: 0, Outline: 1, Raised: 2, Sunken: 3\r\n    }\r\n  };\r\n  static properties = {\r\n    color: { type: \"color\", initialValue: \"black\" },\r\n    text: \"string\",\r\n    textFormat: { type: \"enum\", initialValue: 2 }, // Text.AutoText\r\n    font: \"font\",\r\n    lineHeight: \"real\",\r\n    wrapMode: { type: \"enum\", initialValue: 0 }, // Text.NoWrap\r\n    horizontalAlignment: { type: \"enum\", initialValue: 1 }, // Text.AlignLeft\r\n    verticalAlignment: { type: \"enum\", initialValue: 32 }, // Text.AlignTop\r\n    style: \"enum\",\r\n    styleColor: \"color\",\r\n    contentHeight: \"real\",\r\n    contentWidth: \"real\",\r\n  };\r\n\r\n  constructor(meta) {\r\n    super(meta);\r\n\r\n    const fc = this.impl = document.createElement(\"span\");\r\n    fc.style.pointerEvents = \"none\";\r\n    fc.style.width = \"100%\";\r\n    fc.style.height = \"100%\";\r\n    fc.style.whiteSpace = \"pre\";\r\n    fc.style.display = \"table-cell\";\r\n    fc.style.verticalAlign = \"top\";\r\n    this.dom.style.display = \"table\";\r\n    this.dom.style.textAlign = \"left\";\r\n    this.dom.appendChild(fc);\r\n\r\n    this.colorChanged.connect(this, this.$onColorChanged);\r\n    this.textChanged.connect(this, this.$onTextChanged);\r\n    this.textFormatChanged.connect(this, this.$onTextFormatChanged);\r\n    this.lineHeightChanged.connect(this, this.$onLineHeightChanged);\r\n    this.wrapModeChanged.connect(this, this.$onWrapModeChanged);\r\n    this.horizontalAlignmentChanged.connect(this,\r\n                                            this.$onHorizontalAlignmentChanged);\r\n    this.verticalAlignmentChanged.connect(this,\r\n                                            this.$onVerticalAlignmentChanged);\r\n    this.styleChanged.connect(this, this.$onStyleChanged);\r\n    this.styleColorChanged.connect(this, this.$onStyleColorChanged);\r\n\r\n    this.widthChanged.connect(this, this.$onWidthChanged);\r\n    this.fontChanged.connect(this, this.$onFontChanged);\r\n\r\n    //this.contentHeightChanged.connect(this, this.$contentHeightChanged);\r\n    //this.contentWidthChanged.connect(this, this.$contentWidthChanged);\r\n\r\n    this.Component.completed.connect(this, this.Component$onCompleted);\r\n  }\r\n\r\n  $redrawText() {\r\n    const text = this.text;\r\n    let format = this.textFormat;\r\n    if (format === this.Text.AutoText) {\r\n      // NOTE: this is not the exact same heuristics that Qt uses\r\n      if (/<[a-zA-Z]+(\\s[^>]*)?\\/?>/.test(text)) {\r\n        format = this.Text.StyledText;\r\n      } else {\r\n        format = this.Text.PlainText;\r\n      }\r\n    }\r\n    if (format === this.Text.PlainText) {\r\n      this.impl.innerHTML = \"\";\r\n      this.impl.appendChild(document.createTextNode(text));\r\n    } else {\r\n      // TODO: sanitize StyledText/RichText\r\n      this.impl.innerHTML = text;\r\n    }\r\n\r\n    this.contentHeight = this.impl.offsetHeight;\r\n    this.contentWidth = this.impl.offsetWidth;\r\n    this.$updateImplicit();\r\n  }\r\n  $onColorChanged(newVal) {\r\n    this.impl.style.color = newVal.$css;\r\n  }\r\n  $onTextChanged() {\r\n    this.$redrawText();\r\n  }\r\n  $onTextFormatChanged() {\r\n    this.$redrawText();\r\n  }\r\n  $onWidthChanged() {\r\n    this.$updateImplicit();\r\n  }\r\n  $onLineHeightChanged(newVal) {\r\n    this.impl.style.lineHeight = `${newVal}px`;\r\n    this.$updateImplicit();\r\n  }\r\n  $onStyleChanged(newVal) {\r\n    this.$updateShadow(newVal, this.styleColor.$css);\r\n  }\r\n  $onStyleColorChanged(newVal) {\r\n    this.$updateShadow(this.style, newVal.$css);\r\n  }\r\n  $onWrapModeChanged(newVal) {\r\n    const style = this.impl.style;\r\n    switch (newVal) {\r\n      case this.Text.NoWrap:\r\n        style.whiteSpace = \"pre\";\r\n        break;\r\n      case this.Text.WordWrap:\r\n        style.whiteSpace = \"pre-wrap\";\r\n        style.wordWrap = \"normal\";\r\n        break;\r\n      case this.Text.WrapAnywhere:\r\n        style.whiteSpace = \"pre-wrap\";\r\n        style.wordBreak = \"break-all\";\r\n        break;\r\n      case this.Text.Wrap:\r\n      case this.Text.WrapAtWordBoundaryOrAnywhere:\r\n        style.whiteSpace = \"pre-wrap\";\r\n        style.wordWrap = \"break-word\";\r\n    }\r\n    this.$updateJustifyWhiteSpace();\r\n  }\r\n  $onHorizontalAlignmentChanged(newVal) {\r\n    let textAlign = null;\r\n    switch (newVal) {\r\n      case this.Text.AlignLeft:\r\n        textAlign = \"left\";\r\n        break;\r\n      case this.Text.AlignRight:\r\n        textAlign = \"right\";\r\n        break;\r\n      case this.Text.AlignHCenter:\r\n        textAlign = \"center\";\r\n        break;\r\n      case this.Text.AlignJustify:\r\n        textAlign = \"justify\";\r\n        break;\r\n    }\r\n    this.dom.style.textAlign = textAlign;\r\n    this.$updateJustifyWhiteSpace();\r\n  }\r\n  $onVerticalAlignmentChanged(newVal) {\r\n    let verticalAlign = null;\r\n    switch (newVal) {\r\n      case this.Text.AlignTop:\r\n        verticalAlign = \"top\";\r\n        break;\r\n      case this.Text.AlignVCenter:\r\n        verticalAlign = \"middle\";\r\n        break;\r\n      case this.Text.AlignBottom:\r\n        verticalAlign = \"bottom\";\r\n        break;\r\n    }\r\n    this.impl.style.verticalAlign = verticalAlign;\r\n    this.$updateJustifyWhiteSpace();\r\n  }\r\n  $onFontChanged() {\r\n    this.$updateImplicit();\r\n  }\r\n  Component$onCompleted() {\r\n    this.$updateImplicit();\r\n  }\r\n  $updateImplicit() {\r\n    if (!this.text || !this.dom) {\r\n      this.implicitHeight = this.implicitWidth = 0;\r\n      return;\r\n    }\r\n\r\n    if (!this.$isUsingImplicitWidth) {\r\n      this.implicitWidth = this.impl.offsetWidth;\r\n      this.implicitHeight = this.impl.offsetHeight;\r\n      return;\r\n    }\r\n\r\n    const fc = this.impl;\r\n    const engine = QmlWeb.engine;\r\n    // Need to move the child out of it's parent so that it can properly\r\n    // recalculate it's \"natural\" offsetWidth/offsetHeight\r\n    if (engine.dom === document.body && engine.dom !== engine.domTarget) {\r\n      // Can't use document.body here, as it could have Shadow DOM inside\r\n      // The root is document.body, though, so it's probably not hidden\r\n      engine.domTarget.appendChild(fc);\r\n    } else {\r\n      document.body.appendChild(fc);\r\n    }\r\n    const height = fc.offsetHeight;\r\n    const width = fc.offsetWidth;\r\n\r\n    this.dom.appendChild(fc);\r\n\r\n    this.implicitHeight = height;\r\n    this.implicitWidth = width;\r\n  }\r\n  $updateShadow(textStyle, styleColor) {\r\n    const style = this.impl.style;\r\n    switch (textStyle) {\r\n      case 0:\r\n        style.textShadow = \"none\";\r\n        break;\r\n      case 1:\r\n        style.textShadow = [\r\n          `1px 0 0 ${styleColor}`,\r\n          `-1px 0 0 ${styleColor}`,\r\n          `0 1px 0 ${styleColor}`,\r\n          `0 -1px 0 ${styleColor}`\r\n        ].join(\",\");\r\n        break;\r\n      case 2:\r\n        style.textShadow = `1px 1px 0 ${styleColor}`;\r\n        break;\r\n      case 3:\r\n        style.textShadow = `-1px -1px 0 ${styleColor}`;\r\n        break;\r\n    }\r\n  }\r\n  $updateJustifyWhiteSpace() {\r\n    const style = this.impl.style;\r\n    // AlignJustify doesn't work with pre/pre-wrap, so we decide the lesser of\r\n    // the two evils to be ignoring \"\\n\"s inside the text.\r\n    if (this.horizontalAlignment === this.Text.AlignJustify) {\r\n      style.whiteSpace = \"normal\";\r\n    }\r\n    this.$updateImplicit();\r\n  }\r\n}\r\nQmlWeb.registerQmlType(QtQuick_Text);\n","// eslint-disable-next-line no-undef\r\nclass QtQuick_Controls_2_Label extends QtQuick_Text {\r\n  static versions = /^2\\./;\r\n  static properties = {\r\n    background: \"Item\",\r\n    palette: \"palette\"\r\n  };\r\n\r\n  // TODO\r\n}\r\nQmlWeb.registerQmlType(QtQuick_Controls_2_Label);\n","// eslint-disable-next-line no-undef\r\nclass QtQuick_TextEdit extends QtQuick_Item {\r\n  static properties = {\r\n    activeFocusOnPress: { type: \"bool\", initialValue: true },\r\n    baseUrl: \"url\",\r\n    canPaste: \"bool\",\r\n    canRedo: \"bool\",\r\n    canUndo: \"bool\",\r\n    color: { type: \"color\", initialValue: \"white\" },\r\n    contentHeight: \"real\",\r\n    contentWidth: \"real\",\r\n    cursorDelegate: \"Component\",\r\n    cursorPosition: \"int\",\r\n    cursorRectangle: \"rect\",\r\n    cursorVisible: { type: \"bool\", initialValue: true },\r\n    effectiveHorizontalAlignment: \"enum\",\r\n    font: \"font\",\r\n    horizontalAlignment: \"enum\",\r\n    hoveredLink: \"string\",\r\n    inputMethodComposing: \"bool\",\r\n    inputMethodHints: \"enum\",\r\n    length: \"int\",\r\n    lineCount: \"int\",\r\n    mouseSelectionMode: \"enum\",\r\n    persistentSelection: \"bool\",\r\n    readOnly: { type: \"bool\", initialValue: false },\r\n    renderType: \"enum\",\r\n    selectByKeyboard: { type: \"bool\", initialValue: true },\r\n    selectByMouse: \"bool\",\r\n    selectedText: \"string\",\r\n    selectedTextColor: { type: \"color\", initialValue: \"yellow\" },\r\n    selectionColor: { type: \"color\", initialValue: \"pink\" },\r\n    selectionEnd: \"int\",\r\n    selectionStart: \"int\",\r\n    text: \"string\",\r\n    textDocument: \"TextDocument\",\r\n    textFormat: \"enum\",\r\n    textMargin: \"real\",\r\n    verticalAlignment: \"enum\",\r\n    wrapMode: \"enum\"\r\n  };\r\n  static signals = {\r\n    linkActivated: [{ type: \"string\", name: \"link\" }],\r\n    linkHovered: [{ type: \"string\", name: \"link\" }]\r\n  };\r\n\r\n  constructor(meta) {\r\n    super(meta);\r\n\r\n    // Undo / Redo stacks;\r\n    this.undoStack = [];\r\n    this.undoStackPosition = -1;\r\n    this.redoStack = [];\r\n    this.redoStackPosition = -1;\r\n\r\n    const textarea = this.impl = document.createElement(\"textarea\");\r\n    textarea.style.pointerEvents = \"auto\";\r\n    textarea.style.width = \"100%\";\r\n    textarea.style.height = \"100%\";\r\n    textarea.style.boxSizing = \"border-box\";\r\n    textarea.style.borderWidth = \"0\";\r\n    textarea.style.background = \"none\";\r\n    textarea.style.outline = \"none\";\r\n    textarea.style.resize = \"none\";\r\n    textarea.style.padding = \"0\"; // TODO: padding/*Padding props from Qt 5.6\r\n    // In some browsers text-areas have a margin by default, which distorts\r\n    // the positioning, so we need to manually set it to 0.\r\n    textarea.style.margin = \"0\";\r\n    textarea.disabled = false;\r\n    this.dom.appendChild(textarea);\r\n\r\n    this.Component.completed.connect(this, this.Component$onCompleted);\r\n    this.textChanged.connect(this, this.$onTextChanged);\r\n    this.colorChanged.connect(this, this.$onColorChanged);\r\n\r\n    this.impl.addEventListener(\"input\", () => this.$updateValue());\r\n  }\r\n  append(text) {\r\n    this.text += text;\r\n  }\r\n  copy() {\r\n    // TODO\r\n  }\r\n  cut() {\r\n    this.text = this.text(0, this.selectionStart) +\r\n                this.text(this.selectionEnd, this.text.length);\r\n    // TODO\r\n  }\r\n  deselect() {\r\n    //this.selectionStart = -1;\r\n    //this.selectionEnd = -1;\r\n    //this.selectedText = null;\r\n    // TODO\r\n  }\r\n  getFormattedText(start, end) {\r\n    const text = this.text.slice(start, end);\r\n    // TODO\r\n    // process text\r\n    return text;\r\n  }\r\n  getText(start, end) {\r\n    return this.text.slice(start, end);\r\n  }\r\n  insert(/*position, text*/) {\r\n    // TODO\r\n  }\r\n  isRightToLeft(/*start, end*/) {\r\n    // TODO\r\n  }\r\n  linkAt(/*x, y*/) {\r\n    // TODO\r\n  }\r\n  moveCursorSelection(/*x, y*/) {\r\n    // TODO\r\n  }\r\n  paste() {\r\n    // TODO\r\n  }\r\n  positionAt(/*x, y*/) {\r\n    // TODO\r\n  }\r\n  positionToRectangle(/*position*/) {\r\n    // TODO\r\n  }\r\n  redo() {\r\n    // TODO\r\n  }\r\n  remove(/*start, end*/) {\r\n    // TODO\r\n  }\r\n  select(/*start, end*/) {\r\n    // TODO\r\n  }\r\n  selectAll() {\r\n    // TODO\r\n  }\r\n  selectWord() {\r\n    // TODO\r\n  }\r\n  undo() {\r\n    // TODO\r\n  }\r\n  Component$onCompleted() {\r\n    this.selectByKeyboard = !this.readOnly;\r\n    \r\n    this.impl.readOnly = this.readOnly;\r\n    \r\n    this.$updateValue();\r\n    this.implicitWidth = this.offsetWidth;\r\n    this.implicitHeight = this.offsetHeight;\r\n  }\r\n  $onTextChanged(newVal) {\r\n    this.impl.value = newVal;\r\n  }\r\n  $onColorChanged(newVal) {\r\n    this.impl.style.color = newVal.$css;\r\n  }\r\n  $updateValue() {\r\n    if (this.text !== this.impl.value) {\r\n      this.text = this.impl.value;\r\n    }\r\n    this.length = this.text.length;\r\n    this.lineCount = this.$getLineCount();\r\n    this.$updateCss();\r\n\r\n    this.contentHeight = this.impl.scrollHeight;\r\n  }\r\n  // Transfer dom style to firstChild,\r\n  // then clear corresponding dom style\r\n  $updateCss() {\r\n    const supported = [\r\n      \"border\",\r\n      \"borderRadius\",\r\n      \"borderWidth\",\r\n      \"borderColor\",\r\n      \"backgroundColor\",\r\n    ];\r\n    const style = this.impl.style;\r\n    for (let n = 0; n < supported.length; n++) {\r\n      const o = supported[n];\r\n      const v = this.css[o];\r\n      if (v) {\r\n        style[o] = v;\r\n        this.css[o] = null;\r\n      }\r\n    }\r\n  }\r\n  $getLineCount() {\r\n    return this.text.split(/\\n/).length;\r\n  }\r\n}\r\nQmlWeb.registerQmlType(QtQuick_TextEdit);\n","// eslint-disable-next-line no-undef\r\nclass QtQuick_Controls_TextArea extends QtQuick_TextEdit {\r\n  constructor(meta) {\r\n    super(meta);\r\n    const textarea = this.impl;\r\n    textarea.style.padding = \"5px\";\r\n    textarea.style.borderWidth = \"1px\";\r\n    textarea.style.backgroundColor = \"#fff\";\r\n  }\r\n}\r\nQmlWeb.registerQmlType(QtQuick_Controls_TextArea);\n","// eslint-disable-next-line no-undef\r\nclass QtQuick_TextInput extends QtQuick_Item {\r\n  static enums = {\r\n    TextInput: { \r\n      Normal: 0, \r\n      Password: 1, \r\n      NoEcho: 2, \r\n      PasswordEchoOnEdit: 3,\r\n      AlignLeft: Qt.AlignLeft,\r\n      AlignRight: Qt.AlignRight,\r\n      AlignHCenter: Qt.AlignHCenter,\r\n      AlignTop: Qt.AlignTop,\r\n      AlignBottom: Qt.AlignBottom,\r\n      AlignVCenter: Qt.AlignVCenter, \r\n      NoWrap: 0,\r\n      WordWrap: 1,\r\n      WrapAnywhere: 2,\r\n      Wrap: 3,\r\n    }\r\n  };\r\n  static properties = {\r\n    color: { type: \"color\", initialValue: \"white\" },\r\n    text: \"string\",\r\n    font: \"font\",\r\n    maximumLength: { type: \"int\", initialValue: -1 },\r\n    readOnly: { type: \"bool\", initialValue: false },\r\n    validator: \"var\",\r\n    echoMode: \"enum\", // TextInput.Normal\r\n    wrapMode: { type: \"enum\", initialValue: 0 }, // TextInput.Normal\r\n    horizontalAlignment: \"enum\",\r\n    verticalAlignment: { type: \"enum\", initialValue: Qt.AlignTop },\r\n  };\r\n  static signals = {\r\n    accepted: []\r\n  };\r\n\r\n  constructor(meta) {\r\n    super(meta);\r\n    const input = this.impl = document.createElement(\"textarea\");\r\n    input.type = \"text\";\r\n    input.disabled = true;\r\n    input.style.pointerEvents = \"auto\";\r\n    // In some browsers text-inputs have a margin by default, which distorts\r\n    // the positioning, so we need to manually set it to 0.\r\n    input.style.margin = \"0\";\r\n    input.style.padding = \"0\";\r\n    input.style.width = \"100%\";\r\n    input.style.height = \"100%\";\r\n    input.style.border = \"none\";\r\n    input.style.outline = \"none\";\r\n    input.style.background = \"none\";\r\n    input.style.resize = \"none\";\r\n    input.style.wordBreak = 'normal'\r\n    input.style.whiteSpace = 'nowrap'\r\n    input.style.overflow = 'hidden'\r\n    /*\r\n    input.style.display = \"table-cell\";\r\n    input.contentEditable = true;\r\n    input.style.whiteSpace = \"nowrap\";\r\n    input.style.whiteSpace = \"nowrap\";\r\n    input.style.overflowX = \"hidden\";\r\n    */\r\n    this.dom.appendChild(input);\r\n    this.setupFocusOnDom(input);\r\n    input.disabled = false;\r\n\r\n    this.Component.completed.connect(this, this.Component$onCompleted);\r\n    this.textChanged.connect(this, this.$onTextChanged);\r\n    this.echoModeChanged.connect(this, this.$onEchoModeChanged);\r\n    this.maximumLengthChanged.connect(this, this.$onMaximumLengthChanged);\r\n    this.readOnlyChanged.connect(this, this.$onReadOnlyChanged);\r\n    this.horizontalAlignmentChanged.connect(this, this.$alignChanged);\r\n    this.verticalAlignmentChanged.connect(this, this.$alignChanged);\r\n\r\n    this.heightChanged.connect(this, this.$heightChanged);\r\n    this.widthChanged.connect(this, this.$widthChanged);\r\n    this.colorChanged.connect(this, this.$colorChanged);\r\n    this.validatorChanged.connect(this, this.$validatorChanged);\r\n    this.wrapModeChanged.connect(this, this.$wrapModeChanged);\r\n    //this.Keys.pressed.connect(this, this.Keys$onPressed);\r\n\r\n    this.impl.addEventListener(\"input\", () => this.$updateValue());\r\n\r\n    this.impl.addEventListener(\"keydown\", (e) => {this.Keys$onPressed(e)});\r\n\r\n    this._buffer == null;\r\n  }\r\n  Component$onCompleted() {\r\n    this.implicitWidth = this.impl.offsetWidth;\r\n    this.implicitHeight = this.impl.offsetHeight;\r\n\r\n  }\r\n  $wrapModeChanged(){\r\n    \r\n    switch(this.wrapMode){\r\n      case TextInput.NoWrap:\r\n        this.impl.style.wordBreak = 'normal'\r\n        this.impl.style.whiteSpace = 'nowrap'\r\n        break;\r\n      case TextInput.WordWrap:\r\n        this.impl.style.wordBreak = 'break-word'\r\n        this.impl.style.whiteSpace = 'break-spaces'\r\n        break;\r\n      case TextInput.WrapAnywhere:\r\n        this.impl.style.wordBreak = 'break-all'\r\n        this.impl.style.whiteSpace = 'break-spaces'\r\n        break;\r\n      case TextInput.Wrap:\r\n        this.impl.style.wordBreak = 'break-all'\r\n        this.impl.style.whiteSpace = 'break-spaces'\r\n        break;\r\n    }\r\n  }\r\n  $colorChanged(newVal){\r\n    this.impl.style.color = newVal.$css;\r\n  }\r\n  $validatorChanged(){\r\n    //this.impl.pattern\r\n  }\r\n  $heightChanged(){\r\n    this.impl.style.height = `${this.height}px`;\r\n    this.$alignChanged();\r\n  }\r\n  $widthChanged(){\r\n    this.impl.style.width = `${this.width}px`;\r\n    this.$alignChanged();\r\n  }\r\n  $alignChanged(){\r\n\r\n    switch(this.horizontalAlignment){\r\n      case TextInput.AlignLeft:\r\n        this.impl.style.textAlign = 'start';\r\n        break;\r\n      case TextInput.AlignRight:\r\n        this.impl.style.textAlign = 'end';\r\n        break;\r\n      case TextInput.AlignHCenter:\r\n        this.impl.style.textAlign = 'center';\r\n        break;\r\n    }\r\n\r\n    this.impl.style.padding = `0`;\r\n    this.impl.style.height = `${this.height}px`;\r\n    switch(this.verticalAlignment){\r\n      case TextInput.AlignTop:\r\n        //this.impl.style.paddingBottom = `${this.height - this.font.pixelSize}px`;\r\n        //this.impl.style.height = `auto`;\r\n        break;\r\n      case TextInput.AlignBottom:\r\n        this.impl.style.paddingTop = `${this.height - this.font.pixelSize}px`;\r\n        break;\r\n      case TextInput.AlignVCenter:\r\n        this.impl.style.paddingTop = `${this.height/2 - this.countLines()*this.font.pixelSize/2}px`;\r\n        break;\r\n    }\r\n\r\n  }\r\n  $onTextChanged(newVal) {\r\n    // We have to check if value actually changes.\r\n    // If we do not have this check, then after user updates text input\r\n    // following occurs: user updates gui text -> updateValue gets called ->\r\n    // textChanged gets called -> gui value updates again -> caret position\r\n    // moves to the right!\r\n    if (this.impl.value !== newVal) {\r\n      this.impl.value = newVal;\r\n    }\r\n    this.$alignChanged()\r\n  }\r\n  $onEchoModeChanged(newVal) {\r\n    const TextInput = this.TextInput;\r\n    const input = this.impl;\r\n    switch (newVal) {\r\n      case TextInput.Normal:\r\n        input.type = \"text\";\r\n        break;\r\n      case TextInput.Password:\r\n        input.type = \"password\";\r\n        break;\r\n      case TextInput.NoEcho:\r\n        // Not supported, use password, that's nearest\r\n        input.type = \"password\";\r\n        break;\r\n      case TextInput.PasswordEchoOnEdit:\r\n        // Not supported, use password, that's nearest\r\n        input.type = \"password\";\r\n        break;\r\n    }\r\n  }\r\n  $onMaximumLengthChanged(newVal) {\r\n    this.impl.maxLength = newVal < 0 ? null : newVal;\r\n  }\r\n  $onReadOnlyChanged(newVal) {\r\n    this.impl.disabled = newVal;\r\n  }\r\n  Keys$onPressed(e) {\r\n    \r\n    \r\n    const Qt = QmlWeb.Qt;\r\n    const submit = e.keyCode === Qt.Key_Return || e.keyCode === Qt.Key_Enter;\r\n    if (submit && this.$testValidator()) {\r\n      e.preventDefault();\r\n      this.accepted();\r\n      \r\n      e.accepted = true;\r\n    }\r\n  }\r\n\r\n  $testValidator() {\r\n    if (this.validator) {\r\n      return this.validator.validate(this.text);\r\n    }\r\n    return true;\r\n  }\r\n  countLines() {\r\n    let textarea = this.impl\r\n      if (this._buffer == null) {\r\n          this._buffer = document.createElement('textarea');\r\n          this._buffer.style.border = 'none';\r\n          this._buffer.style.height = '0';\r\n          this._buffer.style.overflow = 'hidden';\r\n          this._buffer.style.padding = '0';\r\n          this._buffer.style.position = 'absolute';\r\n          this._buffer.style.left = '0';\r\n          this._buffer.style.top = '0';\r\n          this._buffer.style.zIndex = '-1';\r\n          this.dom.appendChild(this._buffer);\r\n      }\r\n\r\n      var cs = window.getComputedStyle(textarea);\r\n      var pl = parseInt(cs.paddingLeft);\r\n      var pr = parseInt(cs.paddingRight);\r\n      var lh = parseInt(cs.lineHeight);\r\n\r\n      // [cs.lineHeight] may return 'normal', which means line height = font size.\r\n      if (isNaN(lh)) lh = parseInt(cs.fontSize);\r\n\r\n      // Copy content width.\r\n      this._buffer.style.width = (textarea.clientWidth - pl - pr) + 'px';\r\n\r\n      // Copy text properties.\r\n      this._buffer.style.font = cs.font;\r\n      this._buffer.style.letterSpacing = cs.letterSpacing;\r\n      this._buffer.style.whiteSpace = cs.whiteSpace;\r\n      this._buffer.style.wordBreak = cs.wordBreak;\r\n      this._buffer.style.wordSpacing = cs.wordSpacing;\r\n      this._buffer.style.wordWrap = cs.wordWrap;\r\n\r\n      // Copy value.\r\n      this._buffer.value = textarea.value;\r\n\r\n      var result = Math.floor(this._buffer.scrollHeight / lh);\r\n      if (result == 0) result = 1;\r\n      return result;\r\n  }\r\n  $updateValue() {\r\n    if (this.text !== this.impl.value) {\r\n      this.$canEditReadOnlyProperties = true;\r\n      if(this.validator) {\r\n        if(this.impl.value == '' || this.validator.validate(this.impl.value)) \r\n        {\r\n          this.text = this.impl.value; \r\n        } else {\r\n          this.impl.value = this.text; \r\n        }\r\n      } else {\r\n        this.text = this.impl.value; \r\n      }\r\n      this.$canEditReadOnlyProperties = false;\r\n    }\r\n  }\r\n}\r\nQmlWeb.registerQmlType(QtQuick_TextInput);\n","// eslint-disable-next-line no-undef\r\nclass QtQuick_Transition extends QtQml_QtObject {\r\n  static properties = {\r\n    animations: \"list\",\r\n    from: { type: \"string\", initialValue: \"*\" },\r\n    to: { type: \"string\", initialValue: \"*\" },\r\n    reversible: \"bool\"\r\n  };\r\n  static defaultProperty = \"animations\";\r\n\r\n  constructor(meta) {\r\n    super(meta);\r\n\r\n    this.$item = this.$parent;\r\n  }\r\n  $start(actions) {\r\n    for (let i = 0; i < this.animations.length; i++) {\r\n      const animation = this.animations[i];\r\n      animation.$actions = [];\r\n      const { $targets, $props, $actions } = animation;\r\n      for (const j in actions) {\r\n        const action = actions[j];\r\n        if (($targets.length === 0 || $targets.indexOf(action.target) !== -1) &&\r\n            ($props.length === 0 || $props.indexOf(action.property) !== -1)) {\r\n          $actions.push(action);\r\n        }\r\n      }\r\n      animation.start();\r\n    }\r\n  }\r\n  $stop() {\r\n    for (let i = 0; i < this.animations.length; i++) {\r\n      this.animations[i].stop();\r\n    }\r\n  }\r\n}\r\nQmlWeb.registerQmlType(QtQuick_Transition);\n","// eslint-disable-next-line no-undef\r\nclass QtQuick_Translate extends QtQml_QtObject {\r\n  static properties = {\r\n    x: \"real\",\r\n    y: \"real\"\r\n  };\r\n\r\n  constructor(meta) {\r\n    super(meta);\r\n\r\n    this.xChanged.connect(this.$parent, this.$parent.$updateTransform);\r\n    this.yChanged.connect(this.$parent, this.$parent.$updateTransform);\r\n  }\r\n}\r\nQmlWeb.registerQmlType(QtQuick_Translate);\n","// eslint-disable-next-line no-undef\r\nclass QtQuick_UniformAnimator extends QtQuick_Animator {\r\n  static versions = /^2\\./;\r\n  static properties = {\r\n    uniform: \"string\"\r\n  };\r\n\r\n  // TODO\r\n}\r\nQmlWeb.registerQmlType(QtQuick_UniformAnimator);\n","// eslint-disable-next-line no-undef\r\nclass QtQuick_XAnimator extends QtQuick_Animator {\r\n  static versions = /^2\\./;\r\n\r\n  // TODO\r\n}\r\nQmlWeb.registerQmlType(QtQuick_XAnimator);\n","// eslint-disable-next-line no-undef\r\nclass QtQuick_YAnimator extends QtQuick_Animator {\r\n  static versions = /^2\\./;\r\n\r\n  // TODO\r\n}\r\nQmlWeb.registerQmlType(QtQuick_YAnimator);\n","// eslint-disable-next-line no-undef\r\nclass QtTest_SignalSpy extends QtQuick_Item {\r\n  static versions = /^1\\./;\r\n  static properties = {\r\n    count: \"int\",\r\n    signalArguments: \"list\",\r\n    signalName: \"string\",\r\n    target: \"var\",\r\n    valid: \"bool\"\r\n  };\r\n\r\n  // TODO\r\n\r\n  clear() {\r\n    this.count = 0;\r\n    this.signalArguments.length = 0;\r\n    //this.valid = false;\r\n  }\r\n\r\n  /*\r\n  wait(timeout = 5000) {\r\n  }\r\n  */\r\n}\r\nQmlWeb.registerQmlType(QtTest_SignalSpy);\n","// eslint-disable-next-line no-undef\r\nclass QtTest_TestCase extends QtQuick_Item {\r\n  static versions = /^1\\./;\r\n  static properties = {\r\n    completed: \"bool\",\r\n    name: \"string\",\r\n    optional: \"bool\",\r\n    running: \"bool\",\r\n    when: \"bool\",\r\n    windowShown: \"bool\"\r\n  };\r\n\r\n  constructor(meta) {\r\n    super(meta);\r\n    this.Component.completed.connect(this, this.Component$onCompleted);\r\n\r\n    const engine = QmlWeb.engine;\r\n    if (!engine.tests) {\r\n      QmlWeb.engine.tests = {\r\n        name: engine.name || `Run_${Math.random().toString(36).slice(2, 10)}`,\r\n        started: false,\r\n        finished: false,\r\n        duration: 0,\r\n        total: 0,\r\n        completed: 0,\r\n        errors: [],\r\n        stats: {\r\n          pass: 0,\r\n          fail: 0,\r\n          skip: 0\r\n        }\r\n      };\r\n    }\r\n    QmlWeb.engine.tests.total++;\r\n\r\n    this.console = {\r\n      assert: (...a) => console.assert(...a),\r\n      error: (...a) => console.error(`QSYSTEM: ${this.$testId} qml:`, ...a),\r\n      info: (...a) => console.info(`QINFO  : ${this.$testId} qml:`, ...a),\r\n      log: (...a) => console.log(`QDEBUG : ${this.$testId} qml:`, ...a),\r\n      time: (...a) => console.time(...a),\r\n      timeEnd: (...a) => console.timeEnd(...a),\r\n      trace: (...a) => console.trace(...a),\r\n      warn: (...a) => console.warn(`QWARN  : ${this.$testId} qml:`, ...a)\r\n    };\r\n  }\r\n\r\n  Component$onCompleted() {\r\n    const info = QmlWeb.engine.tests;\r\n    if (!info.started) {\r\n      console.log(`********* Start testing of ${info.name} *********`);\r\n      console.log(`Config: Using QmlWeb, ${window.navigator.userAgent}`);\r\n      info.started = true;\r\n    }\r\n\r\n    const keys = Object.keys(this);\r\n    const tests = keys\r\n        .filter(key => key.lastIndexOf(\"test_\", 0) === 0)\r\n        .filter(key => key.indexOf(\"_data\", key.length - 5) === -1)\r\n        .sort();\r\n\r\n    tests.unshift(\"initTestCase\");\r\n    tests.push(\"cleanupTestCase\");\r\n    tests.forEach(test => {\r\n      this.$testId = `${info.name}::${this.name}::${test}()`;\r\n      const special = test === \"initTestCase\" || test === \"cleanupTestCase\";\r\n\r\n      const dstart = performance.now();\r\n      let data;\r\n      if (this[`${test}_data`] && !special) {\r\n        data = this[`${test}_data`]();\r\n        if (!data || !data.length) {\r\n          this.warn(`no data supplied for ${test}() by ${test}_data()`);\r\n          data = [];\r\n        }\r\n      } else if (this.init_data && !special) {\r\n        data = this.init_data();\r\n        if (!data || !data.length) {\r\n          data = undefined;\r\n        }\r\n      }\r\n      if (!data) {\r\n        data = [null];\r\n      }\r\n      const dend = performance.now();\r\n      info.duration += dend - dstart;\r\n\r\n      data.forEach(row => {\r\n        const arg = row ? row.tag : \"\";\r\n        this.$testId = `${info.name}::${this.name}::${test}(${arg})`;\r\n        const start = performance.now();\r\n        let error;\r\n        try {\r\n          if (!special) {\r\n            this.init();\r\n          }\r\n          this[test](row);\r\n        } catch (e) {\r\n          error = e;\r\n        } finally {\r\n          if (!special) {\r\n            this.cleanup();\r\n          }\r\n        }\r\n        const end = performance.now();\r\n        info.duration += end - start;\r\n        if (error && error.skip) {\r\n          info.stats.skip++;\r\n          console.log(`SKIP   : ${this.$testId} ${error.message}`);\r\n        } else if (error) {\r\n          info.stats.fail++;\r\n          info.errors.push(`${this.$testId} ${error.message}`);\r\n          console.log(`FAIL!  : ${this.$testId} ${error.message}`);\r\n          if (\"actual\" in error) {\r\n            console.log(`   Actual   (): ${error.actual}`);\r\n          }\r\n          if (\"expected\" in error) {\r\n            console.log(`   Expected (): ${error.expected}`);\r\n          }\r\n        } else {\r\n          info.stats.pass++;\r\n          console.log(`PASS   : ${this.$testId}`);\r\n        }\r\n      });\r\n\r\n      this.$testId = `${info.name}::UnknownTestFunc()`;\r\n    });\r\n\r\n    // TODO: benchmarks\r\n\r\n    info.completed++;\r\n    if (info.completed === info.total) {\r\n      info.finished = true;\r\n      const { pass, fail, skip } = info.stats;\r\n      const duration = Math.round(info.duration * 100) / 100;\r\n      console.log(\r\n        `Totals: ${pass} passed, ${fail} failed, ${skip} skipped, ${duration}ms`\r\n      );\r\n      console.log(`********* Finished testing of ${info.name} *********`);\r\n    }\r\n  }\r\n\r\n  // No-ops\r\n  init() {}\r\n  initTestCase() {}\r\n  cleanup() {}\r\n  cleanupTestCase() {}\r\n\r\n  // API\r\n  compare(actual, expected, message = \"\") {\r\n    if (actual !== expected) {\r\n      const err = new Error(message);\r\n      err.actual = actual;\r\n      err.expected = expected;\r\n      throw err;\r\n    }\r\n  }\r\n  verify(condition, message = \"\") {\r\n    if (!condition) {\r\n      throw new Error(`'${message}' returned FALSE. ()`);\r\n    }\r\n  }\r\n  fail(message = \"\") {\r\n    throw new Error(message);\r\n  }\r\n  warn(message) {\r\n    console.warn(`WARNING: ${this.$testId} ${message}`);\r\n  }\r\n  skip(message = \"\") {\r\n    const err = new Error(message);\r\n    err.skip = true;\r\n    throw err;\r\n  }\r\n  /*\r\n  expectFail(tag, message) {\r\n    // TODO\r\n  }\r\n  expectFailContinue(tag, message) {\r\n    // TODO\r\n  }\r\n  findChild(parent, objectName) {\r\n    // TODO\r\n    // return QtObject\r\n  }\r\n  fuzzyCompare(actual, expected, delta, message) {\r\n    // TODO\r\n  }\r\n  grabImage(item) {\r\n    if (!window.top || !window.top.callPhantom) {\r\n      this.skip(\"Can't use TestCase::grabImage() without PhantomJS.\");\r\n    }\r\n    // TODO\r\n    return {\r\n      red: (x, y) => {},\r\n      green: (x, y) => {},\r\n      blue: (x, y) => {},\r\n      alpha: (x, y) => {},\r\n      pixel: (x, y) => {},\r\n      equals: image => false\r\n    };\r\n  }\r\n  ignoreWarning(message) {\r\n    // TODO\r\n  }\r\n  sleep(ms) {\r\n    // TODO\r\n  }\r\n  tryCompare(obj, property, expected, timeout, message) {\r\n    // TODO\r\n  }\r\n  wait(ms) {\r\n    // TODO\r\n  }\r\n  waitForRendering(item, timeout = 5000) {\r\n    // TODO\r\n  }\r\n  */\r\n\r\n  // TODO\r\n  /*\r\n  // Events\r\n  keyClick(key, modifiers, delay = -1) {\r\n    // TODO\r\n  }\r\n  keyPress(key, modifiers, delay = -1) {\r\n    // TODO\r\n  }\r\n  keyRelease(key, modifiers, delay = -1) {\r\n    // TODO\r\n  }\r\n  mouseClick(item, x, y, button, modifiers, delay = -1) {\r\n    // TODO\r\n  }\r\n  mouseDoubleClick(item, x, y, button, modifiers, delay = -1) {\r\n    // TODO\r\n  }\r\n  mouseDoubleClickSequence(item, x, y, button, modifiers, delay = -1) {\r\n    // TODO\r\n  }\r\n  mouseDrag(item, x, y, dx, dy, button, modifiers, delay = -1) {\r\n    // TODO\r\n  }\r\n  mouseMove(item, x, y, delay = -1) {\r\n    // TODO\r\n  }\r\n  mousePress(item, x, y, button, modifiers, delay = -1) {\r\n    // TODO\r\n  }\r\n  mouseRelease(item, x, y, button, modifiers, delay = -1) {\r\n    // TODO\r\n  }\r\n  mouseWheel(item, x, y, xDelta, yDelta, button, modifiers, delay = -1) {\r\n    // button = Qt.LeftButton, modifiers = Qt.NoModifier\r\n    // TODO\r\n  }\r\n  */\r\n}\r\nQmlWeb.registerQmlType(QtTest_TestCase);\n","// WARNING: Can have wrong behavior if url is changed while the socket is in\r\n// Connecting state.\r\n// TODO: Recheck everything.\r\n\r\n// eslint-disable-next-line no-undef\r\nclass QtWebSockets_WebSocket extends QtQml_QtObject {\r\n  static enums = {\r\n    WebSocket: { Connecting: 0, Open: 1, Closing: 2, Closed: 3, Error: 4 }\r\n  };\r\n  static properties = {\r\n    active: \"bool\",\r\n    status: { type: \"enum\", initialValue: 3 }, // WebSocket.Closed\r\n    errorString: \"string\",\r\n    url: \"url\"\r\n  };\r\n  static signals = {\r\n    textMessageReceived: [{ type: \"string\", name: \"message\" }]\r\n  };\r\n\r\n  constructor(meta) {\r\n    super(meta);\r\n\r\n    this.$socket = undefined;\r\n    this.$reconnect = false;\r\n\r\n    this.statusChanged.connect(this, this.$onStatusChanged);\r\n    this.activeChanged.connect(this, this.$reconnectSocket);\r\n    this.urlChanged.connect(this, this.$reconnectSocket);\r\n  }\r\n  $onStatusChanged(status) {\r\n    if (status !== this.WebSocket.Error) {\r\n      this.errorString = \"\";\r\n    }\r\n  }\r\n  $connectSocket() {\r\n    this.$reconnect = false;\r\n\r\n    if (!this.url || !this.active) {\r\n      return;\r\n    }\r\n\r\n    this.status = this.WebSocket.Connecting;\r\n    this.$socket = new WebSocket(this.url);\r\n    this.$socket.onopen = () => {\r\n      this.status = this.WebSocket.Open;\r\n    };\r\n    this.$socket.onclose = () => {\r\n      this.status = this.WebSocket.Closed;\r\n      if (this.$reconnect) {\r\n        this.$connectSocket();\r\n      }\r\n    };\r\n    this.$socket.onerror = error => {\r\n      this.errorString = error.message;\r\n      this.status = this.WebSocket.Error;\r\n    };\r\n    this.$socket.onmessage = message => {\r\n      this.textMessageReceived(message.data);\r\n    };\r\n  }\r\n  $reconnectSocket() {\r\n    this.$reconnect = true;\r\n    if (this.status === this.WebSocket.Open) {\r\n      this.status = this.WebSocket.Closing;\r\n      this.$socket.close();\r\n    } else if (this.status !== this.WebSocket.Closing) {\r\n      this.$connectSocket();\r\n    }\r\n  }\r\n  sendTextMessage(message) {\r\n    if (this.status === this.WebSocket.Open) {\r\n      this.$socket.send(message);\r\n    }\r\n  }\r\n  sendBinaryMessage(message) {\r\n    if (this.status === this.WebSocket.Open) {\r\n      this.$socket.send(message);\r\n    }\r\n  }\r\n}\r\nQmlWeb.registerQmlType(QtWebSockets_WebSocket);\n","// eslint-disable-next-line no-undef\r\nclass QtWebView_WebView extends QtQuick_Item {\r\n  static versions = /^1\\./;\r\n  static properties = {\r\n    canGoBack: \"bool\", // TODO\r\n    canGoForward: \"bool\", // TODO\r\n    loadProgress: \"int\",\r\n    loading: \"bool\",\r\n    title: \"string\",\r\n    url: \"url\"\r\n  };\r\n  static signals = {\r\n    /* // TODO\r\n    loadingChanged: [\r\n      { type: \"WebViewLoadRequest\", name: \"loadRequest\" }\r\n    ]\r\n    */\r\n  };\r\n\r\n  constructor(meta) {\r\n    super(meta);\r\n\r\n    this.urlChanged.connect(this, this.$onUrlChanged);\r\n\r\n    const iframe = this.impl = document.createElement(\"iframe\");\r\n    iframe.style.display = \"block\";\r\n    iframe.style.position = \"absolute\";\r\n    iframe.style.width = \"100%\";\r\n    iframe.style.height = \"100%\";\r\n    iframe.style.borderWidth = \"0\";\r\n    iframe.style.pointerEvents = \"auto\";\r\n    this.dom.appendChild(iframe);\r\n\r\n    iframe.onload = () => {\r\n      try {\r\n        this.title = iframe.contentDocument.title;\r\n      } catch (e) {\r\n        console.log(`CSP prevents us from reading title for ${this.url}`);\r\n        this.title = \"\";\r\n      }\r\n      this.loadProgress = 100;\r\n      this.loading = false;\r\n    };\r\n    iframe.onerror = () => {\r\n      this.title = \"\";\r\n      this.loadProgress = 0;\r\n      this.loading = false;\r\n    };\r\n  }\r\n  $onUrlChanged(newVal) {\r\n    this.loadProgress = 0;\r\n    this.loading = true;\r\n    this.impl.src = newVal;\r\n  }\r\n}\r\nQmlWeb.registerQmlType(QtWebView_WebView);\n","// eslint-disable-next-line no-undef\r\nclass QtWebEngine_WebEngineView extends QtWebView_WebView {\r\n  static versions = /^5\\./;\r\n  static properties = {\r\n    // TODO\r\n  };\r\n  static signals = {\r\n    // TODO\r\n  };\r\n\r\n  // TODO: implement more features on top of WebView\r\n}\r\nQmlWeb.registerQmlType(QtWebEngine_WebEngineView);\n","// eslint-disable-next-line no-undef\r\nclass QtWebKit_WebView extends QtWebView_WebView {\r\n  static versions = /^3\\./;\r\n  static enums = {\r\n    WebView: {\r\n      // ErrorDomain\r\n      NoErrorDomain: 0, InternalErrorDomain: 1, NetworkErrorDomain: 2,\r\n      HttpErrorDomain: 3, DownloadErrorDomain: 4,\r\n\r\n      // LoadStatus\r\n      LoadStartedStatus: 0, LoadSucceededStatus: 2, LoadFailedStatus: 3,\r\n\r\n      // NavigationRequestAction\r\n      AcceptRequest: 0, IgnoreRequest: 255,\r\n\r\n      // NavigationType\r\n      LinkClickedNavigation: 0, FormSubmittedNavigation: 1,\r\n      BackForwardNavigation: 2, ReloadNavigation: 3,\r\n      FormResubmittedNavigation: 4, OtherNavigation: 5\r\n    }\r\n  };\r\n  static properties = {\r\n    icon: \"url\"\r\n  };\r\n  static signals = {\r\n    navigationRequested: [\r\n      { type: \"var\", name: \"request\" }\r\n    ],\r\n    linkHovered: [\r\n      { type: \"url\", name: \"hoveredUrl\" },\r\n      { type: \"string\", name: \"hoveredTitle\" }\r\n    ]\r\n  };\r\n\r\n  // TODO: implement more features on top of WebView\r\n}\r\nQmlWeb.registerQmlType(QtWebKit_WebView);\n"]}